
gateway.dina.cx.app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019770  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000530c  08019a10  08019a10  00029a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0801ed1c  0801ed1c  0002ed1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0801ed20  0801ed20  0002ed20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000009c  24000000  0801ed24  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00008b54  2400009c  0801edc0  0003009c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24008bf0  0801edc0  00038bf0  2**0
                  ALLOC
  8 .lwip_sec     00044b83  30000000  30000000  00040000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003009c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003d554  00000000  00000000  000300ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00008106  00000000  00000000  0006d61e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000028a0  00000000  00000000  00075728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000026c0  00000000  00000000  00077fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000136a7  00000000  00000000  0007a688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003d915  00000000  00000000  0008dd2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0018f37b  00000000  00000000  000cb644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0025a9bf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b264  00000000  00000000  0025aa10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400009c 	.word	0x2400009c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080199f8 	.word	0x080199f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000a0 	.word	0x240000a0
 80002dc:	080199f8 	.word	0x080199f8

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <HAL_FDCAN_RxFifo0Callback>:
  * CAN1 Rx Callback
  *
  ********************************************************************/

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
	if(RESET != (RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE))
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	f003 0301 	and.w	r3, r3, #1
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d00a      	beq.n	80003da <HAL_FDCAN_RxFifo0Callback+0x2a>
	{
		//
		// Retrieve Rx messages from RX FIFO0
		//
		if (HAL_OK != HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader_1, RxData_1))
 80003c4:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <HAL_FDCAN_RxFifo0Callback+0x34>)
 80003c6:	4a08      	ldr	r2, [pc, #32]	; (80003e8 <HAL_FDCAN_RxFifo0Callback+0x38>)
 80003c8:	2140      	movs	r1, #64	; 0x40
 80003ca:	6878      	ldr	r0, [r7, #4]
 80003cc:	f003 fc68 	bl	8003ca0 <HAL_FDCAN_GetRxMessage>

		//
		// Reactivate reception notification
		// TODO: Check if it is necessary to do so!
		//
		if (HAL_OK != HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0))
 80003d0:	2200      	movs	r2, #0
 80003d2:	2101      	movs	r1, #1
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f003 fdd1 	bl	8003f7c <HAL_FDCAN_ActivateNotification>
			//
			// Error TODO:
			//
		}
	}
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	24000130 	.word	0x24000130
 80003e8:	24000100 	.word	0x24000100

080003ec <can1Task>:
  * @retval None
  *
  *********************************************************************/

void can1Task(void *argument)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	//
	// Configure reception filter to Rx FIFO 0
	// on FDCAN1 instances
	//
	sFilterConfig_1.IdType 			= FDCAN_STANDARD_ID;
 80003f4:	4b68      	ldr	r3, [pc, #416]	; (8000598 <can1Task+0x1ac>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
	sFilterConfig_1.FilterIndex 	= 0;
 80003fa:	4b67      	ldr	r3, [pc, #412]	; (8000598 <can1Task+0x1ac>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	605a      	str	r2, [r3, #4]
	sFilterConfig_1.FilterType 		= FDCAN_FILTER_RANGE;//FDCAN_FILTER_MASK;
 8000400:	4b65      	ldr	r3, [pc, #404]	; (8000598 <can1Task+0x1ac>)
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
	sFilterConfig_1.FilterConfig 	= FDCAN_FILTER_TO_RXFIFO0;
 8000406:	4b64      	ldr	r3, [pc, #400]	; (8000598 <can1Task+0x1ac>)
 8000408:	2201      	movs	r2, #1
 800040a:	60da      	str	r2, [r3, #12]
	sFilterConfig_1.FilterID1 		= 0x788;
 800040c:	4b62      	ldr	r3, [pc, #392]	; (8000598 <can1Task+0x1ac>)
 800040e:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 8000412:	611a      	str	r2, [r3, #16]
	sFilterConfig_1.FilterID2 		= 0x78F;
 8000414:	4b60      	ldr	r3, [pc, #384]	; (8000598 <can1Task+0x1ac>)
 8000416:	f240 728f 	movw	r2, #1935	; 0x78f
 800041a:	615a      	str	r2, [r3, #20]
	sFilterConfig_1.RxBufferIndex 	= 0;
 800041c:	4b5e      	ldr	r3, [pc, #376]	; (8000598 <can1Task+0x1ac>)
 800041e:	2200      	movs	r2, #0
 8000420:	619a      	str	r2, [r3, #24]

	if (HAL_OK != HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig_1))
 8000422:	495d      	ldr	r1, [pc, #372]	; (8000598 <can1Task+0x1ac>)
 8000424:	485d      	ldr	r0, [pc, #372]	; (800059c <can1Task+0x1b0>)
 8000426:	f003 fb3f 	bl	8003aa8 <HAL_FDCAN_ConfigFilter>

	//
	// Activate reception notification
	// Necessary if interrupt is used
	//
	if (HAL_OK != HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0))
 800042a:	2200      	movs	r2, #0
 800042c:	2101      	movs	r1, #1
 800042e:	485b      	ldr	r0, [pc, #364]	; (800059c <can1Task+0x1b0>)
 8000430:	f003 fda4 	bl	8003f7c <HAL_FDCAN_ActivateNotification>
	}

	//
	// Prepare Tx message Header
	//
	TxHeader_1.Identifier 			= 0x78A;
 8000434:	4b5a      	ldr	r3, [pc, #360]	; (80005a0 <can1Task+0x1b4>)
 8000436:	f240 728a 	movw	r2, #1930	; 0x78a
 800043a:	601a      	str	r2, [r3, #0]
	TxHeader_1.IdType 				= FDCAN_STANDARD_ID;
 800043c:	4b58      	ldr	r3, [pc, #352]	; (80005a0 <can1Task+0x1b4>)
 800043e:	2200      	movs	r2, #0
 8000440:	605a      	str	r2, [r3, #4]
	TxHeader_1.TxFrameType 			= FDCAN_DATA_FRAME;
 8000442:	4b57      	ldr	r3, [pc, #348]	; (80005a0 <can1Task+0x1b4>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
	TxHeader_1.DataLength 			= FDCAN_DLC_BYTES_8;
 8000448:	4b55      	ldr	r3, [pc, #340]	; (80005a0 <can1Task+0x1b4>)
 800044a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800044e:	60da      	str	r2, [r3, #12]
	TxHeader_1.ErrorStateIndicator 	= FDCAN_ESI_ACTIVE;
 8000450:	4b53      	ldr	r3, [pc, #332]	; (80005a0 <can1Task+0x1b4>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
	TxHeader_1.BitRateSwitch 		= FDCAN_BRS_OFF;
 8000456:	4b52      	ldr	r3, [pc, #328]	; (80005a0 <can1Task+0x1b4>)
 8000458:	2200      	movs	r2, #0
 800045a:	615a      	str	r2, [r3, #20]
	TxHeader_1.FDFormat 			= FDCAN_CLASSIC_CAN; //FDCAN_FD_CAN;
 800045c:	4b50      	ldr	r3, [pc, #320]	; (80005a0 <can1Task+0x1b4>)
 800045e:	2200      	movs	r2, #0
 8000460:	619a      	str	r2, [r3, #24]
	TxHeader_1.TxEventFifoControl 	= FDCAN_NO_TX_EVENTS;
 8000462:	4b4f      	ldr	r3, [pc, #316]	; (80005a0 <can1Task+0x1b4>)
 8000464:	2200      	movs	r2, #0
 8000466:	61da      	str	r2, [r3, #28]
	TxHeader_1.MessageMarker 		= 0;
 8000468:	4b4d      	ldr	r3, [pc, #308]	; (80005a0 <can1Task+0x1b4>)
 800046a:	2200      	movs	r2, #0
 800046c:	621a      	str	r2, [r3, #32]

	//
	// Start the FDCAN module
	// on FDCAN1 instance
	//
	if (HAL_OK != HAL_FDCAN_Start(&hfdcan1))
 800046e:	484b      	ldr	r0, [pc, #300]	; (800059c <can1Task+0x1b0>)
 8000470:	f003 fb90 	bl	8003b94 <HAL_FDCAN_Start>
		//
		// Error TODO:
		//
	}

	osDelay(1000);
 8000474:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000478:	f008 fac6 	bl	8008a08 <osDelay>

	uint8_t xxx = 0;
 800047c:	2300      	movs	r3, #0
 800047e:	73fb      	strb	r3, [r7, #15]
	//
	for (;;)
	{
#if CAN2_ZMV_SIMULATION

		memset(TxData_1, xxx, sizeof TxData_1);
 8000480:	7bfb      	ldrb	r3, [r7, #15]
 8000482:	2208      	movs	r2, #8
 8000484:	4619      	mov	r1, r3
 8000486:	4847      	ldr	r0, [pc, #284]	; (80005a4 <can1Task+0x1b8>)
 8000488:	f018 facd 	bl	8018a26 <memset>
		xxx++;
 800048c:	7bfb      	ldrb	r3, [r7, #15]
 800048e:	3301      	adds	r3, #1
 8000490:	73fb      	strb	r3, [r7, #15]

		switch (TxID2)
 8000492:	4b45      	ldr	r3, [pc, #276]	; (80005a8 <can1Task+0x1bc>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 800049a:	2b07      	cmp	r3, #7
 800049c:	d862      	bhi.n	8000564 <can1Task+0x178>
 800049e:	a201      	add	r2, pc, #4	; (adr r2, 80004a4 <can1Task+0xb8>)
 80004a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004a4:	080004c5 	.word	0x080004c5
 80004a8:	080004d9 	.word	0x080004d9
 80004ac:	080004ed 	.word	0x080004ed
 80004b0:	08000501 	.word	0x08000501
 80004b4:	08000515 	.word	0x08000515
 80004b8:	08000529 	.word	0x08000529
 80004bc:	0800053d 	.word	0x0800053d
 80004c0:	08000551 	.word	0x08000551
		{
		case 0x788:
			TxHeader_1.Identifier = TxID2;
 80004c4:	4b38      	ldr	r3, [pc, #224]	; (80005a8 <can1Task+0x1bc>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a35      	ldr	r2, [pc, #212]	; (80005a0 <can1Task+0x1b4>)
 80004ca:	6013      	str	r3, [r2, #0]
			TxID2++;
 80004cc:	4b36      	ldr	r3, [pc, #216]	; (80005a8 <can1Task+0x1bc>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	3301      	adds	r3, #1
 80004d2:	4a35      	ldr	r2, [pc, #212]	; (80005a8 <can1Task+0x1bc>)
 80004d4:	6013      	str	r3, [r2, #0]
			break;
 80004d6:	e04e      	b.n	8000576 <can1Task+0x18a>

		case 0x789:
			TxHeader_1.Identifier = TxID2;
 80004d8:	4b33      	ldr	r3, [pc, #204]	; (80005a8 <can1Task+0x1bc>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a30      	ldr	r2, [pc, #192]	; (80005a0 <can1Task+0x1b4>)
 80004de:	6013      	str	r3, [r2, #0]
			TxID2++;
 80004e0:	4b31      	ldr	r3, [pc, #196]	; (80005a8 <can1Task+0x1bc>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	3301      	adds	r3, #1
 80004e6:	4a30      	ldr	r2, [pc, #192]	; (80005a8 <can1Task+0x1bc>)
 80004e8:	6013      	str	r3, [r2, #0]
			break;
 80004ea:	e044      	b.n	8000576 <can1Task+0x18a>

		case 0x78A:
			TxHeader_1.Identifier = TxID2;
 80004ec:	4b2e      	ldr	r3, [pc, #184]	; (80005a8 <can1Task+0x1bc>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a2b      	ldr	r2, [pc, #172]	; (80005a0 <can1Task+0x1b4>)
 80004f2:	6013      	str	r3, [r2, #0]
			TxID2++;
 80004f4:	4b2c      	ldr	r3, [pc, #176]	; (80005a8 <can1Task+0x1bc>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	3301      	adds	r3, #1
 80004fa:	4a2b      	ldr	r2, [pc, #172]	; (80005a8 <can1Task+0x1bc>)
 80004fc:	6013      	str	r3, [r2, #0]
			break;
 80004fe:	e03a      	b.n	8000576 <can1Task+0x18a>

		case 0x78B:
			TxHeader_1.Identifier = TxID2;
 8000500:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <can1Task+0x1bc>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a26      	ldr	r2, [pc, #152]	; (80005a0 <can1Task+0x1b4>)
 8000506:	6013      	str	r3, [r2, #0]
			TxID2++;
 8000508:	4b27      	ldr	r3, [pc, #156]	; (80005a8 <can1Task+0x1bc>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	3301      	adds	r3, #1
 800050e:	4a26      	ldr	r2, [pc, #152]	; (80005a8 <can1Task+0x1bc>)
 8000510:	6013      	str	r3, [r2, #0]
			break;
 8000512:	e030      	b.n	8000576 <can1Task+0x18a>

		case 0x78C:
			TxHeader_1.Identifier = TxID2;
 8000514:	4b24      	ldr	r3, [pc, #144]	; (80005a8 <can1Task+0x1bc>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a21      	ldr	r2, [pc, #132]	; (80005a0 <can1Task+0x1b4>)
 800051a:	6013      	str	r3, [r2, #0]
			TxID2++;
 800051c:	4b22      	ldr	r3, [pc, #136]	; (80005a8 <can1Task+0x1bc>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	3301      	adds	r3, #1
 8000522:	4a21      	ldr	r2, [pc, #132]	; (80005a8 <can1Task+0x1bc>)
 8000524:	6013      	str	r3, [r2, #0]
			break;
 8000526:	e026      	b.n	8000576 <can1Task+0x18a>

		case 0x78D:
			TxHeader_1.Identifier = TxID2;
 8000528:	4b1f      	ldr	r3, [pc, #124]	; (80005a8 <can1Task+0x1bc>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a1c      	ldr	r2, [pc, #112]	; (80005a0 <can1Task+0x1b4>)
 800052e:	6013      	str	r3, [r2, #0]
			TxID2++;
 8000530:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <can1Task+0x1bc>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	3301      	adds	r3, #1
 8000536:	4a1c      	ldr	r2, [pc, #112]	; (80005a8 <can1Task+0x1bc>)
 8000538:	6013      	str	r3, [r2, #0]
			break;
 800053a:	e01c      	b.n	8000576 <can1Task+0x18a>

		case 0x78E:
			TxHeader_1.Identifier = TxID2;
 800053c:	4b1a      	ldr	r3, [pc, #104]	; (80005a8 <can1Task+0x1bc>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a17      	ldr	r2, [pc, #92]	; (80005a0 <can1Task+0x1b4>)
 8000542:	6013      	str	r3, [r2, #0]
			TxID2++;
 8000544:	4b18      	ldr	r3, [pc, #96]	; (80005a8 <can1Task+0x1bc>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	3301      	adds	r3, #1
 800054a:	4a17      	ldr	r2, [pc, #92]	; (80005a8 <can1Task+0x1bc>)
 800054c:	6013      	str	r3, [r2, #0]
			break;
 800054e:	e012      	b.n	8000576 <can1Task+0x18a>

		case 0x78F:
			TxHeader_1.Identifier = TxID2;
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <can1Task+0x1bc>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a12      	ldr	r2, [pc, #72]	; (80005a0 <can1Task+0x1b4>)
 8000556:	6013      	str	r3, [r2, #0]
			TxID2++;
 8000558:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <can1Task+0x1bc>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	4a12      	ldr	r2, [pc, #72]	; (80005a8 <can1Task+0x1bc>)
 8000560:	6013      	str	r3, [r2, #0]
			break;
 8000562:	e008      	b.n	8000576 <can1Task+0x18a>

		default:
			TxID2 = 0x788;
 8000564:	4b10      	ldr	r3, [pc, #64]	; (80005a8 <can1Task+0x1bc>)
 8000566:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 800056a:	601a      	str	r2, [r3, #0]
			TxHeader_1.Identifier = TxID2;
 800056c:	4b0e      	ldr	r3, [pc, #56]	; (80005a8 <can1Task+0x1bc>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a0b      	ldr	r2, [pc, #44]	; (80005a0 <can1Task+0x1b4>)
 8000572:	6013      	str	r3, [r2, #0]
			break;
 8000574:	bf00      	nop
#endif
		//
		// Add message to TX FIFO
		// of FDCAN instance 1
		//
		if (HAL_OK != HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader_1, TxData_1))
 8000576:	4a0b      	ldr	r2, [pc, #44]	; (80005a4 <can1Task+0x1b8>)
 8000578:	4909      	ldr	r1, [pc, #36]	; (80005a0 <can1Task+0x1b4>)
 800057a:	4808      	ldr	r0, [pc, #32]	; (800059c <can1Task+0x1b0>)
 800057c:	f003 fb35 	bl	8003bea <HAL_FDCAN_AddMessageToTxFifoQ>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d004      	beq.n	8000590 <can1Task+0x1a4>
		{
			//
			// Error TODO:
			//
			msgerror_1++;
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <can1Task+0x1c0>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	3301      	adds	r3, #1
 800058c:	4a07      	ldr	r2, [pc, #28]	; (80005ac <can1Task+0x1c0>)
 800058e:	6013      	str	r3, [r2, #0]
		}

		osDelay(100);
 8000590:	2064      	movs	r0, #100	; 0x64
 8000592:	f008 fa39 	bl	8008a08 <osDelay>
		memset(TxData_1, xxx, sizeof TxData_1);
 8000596:	e773      	b.n	8000480 <can1Task+0x94>
 8000598:	240000bc 	.word	0x240000bc
 800059c:	240001fc 	.word	0x240001fc
 80005a0:	240000dc 	.word	0x240000dc
 80005a4:	24000128 	.word	0x24000128
 80005a8:	24000000 	.word	0x24000000
 80005ac:	24000138 	.word	0x24000138

080005b0 <can2Task>:
  * @retval None
  *
  *********************************************************************/

void can2Task(void *argument)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

	//
	// Configure reception filter to Rx FIFO 0
	// on FDCAN1 instance
	//
	sFilterConfig_2.IdType 			= FDCAN_STANDARD_ID;
 80005b8:	4b5a      	ldr	r3, [pc, #360]	; (8000724 <can2Task+0x174>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
	sFilterConfig_2.FilterIndex 	= 0;
 80005be:	4b59      	ldr	r3, [pc, #356]	; (8000724 <can2Task+0x174>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	605a      	str	r2, [r3, #4]
	sFilterConfig_2.FilterType 		= FDCAN_FILTER_RANGE;
 80005c4:	4b57      	ldr	r3, [pc, #348]	; (8000724 <can2Task+0x174>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
	sFilterConfig_2.FilterConfig 	= FDCAN_FILTER_TO_RXFIFO1;
 80005ca:	4b56      	ldr	r3, [pc, #344]	; (8000724 <can2Task+0x174>)
 80005cc:	2202      	movs	r2, #2
 80005ce:	60da      	str	r2, [r3, #12]
	sFilterConfig_2.FilterID1 		= 0x788;
 80005d0:	4b54      	ldr	r3, [pc, #336]	; (8000724 <can2Task+0x174>)
 80005d2:	f44f 62f1 	mov.w	r2, #1928	; 0x788
 80005d6:	611a      	str	r2, [r3, #16]
	sFilterConfig_2.FilterID2 		= 0x78F;
 80005d8:	4b52      	ldr	r3, [pc, #328]	; (8000724 <can2Task+0x174>)
 80005da:	f240 728f 	movw	r2, #1935	; 0x78f
 80005de:	615a      	str	r2, [r3, #20]
	sFilterConfig_2.RxBufferIndex 	= 0;
 80005e0:	4b50      	ldr	r3, [pc, #320]	; (8000724 <can2Task+0x174>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	619a      	str	r2, [r3, #24]

	if (HAL_OK != HAL_FDCAN_ConfigFilter(&hfdcan2, &sFilterConfig_2))
 80005e6:	494f      	ldr	r1, [pc, #316]	; (8000724 <can2Task+0x174>)
 80005e8:	484f      	ldr	r0, [pc, #316]	; (8000728 <can2Task+0x178>)
 80005ea:	f003 fa5d 	bl	8003aa8 <HAL_FDCAN_ConfigFilter>

	//
	// Activate reception notification.
	// Necessary if interrupt is used
	//
	if (HAL_OK != HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0))
 80005ee:	2200      	movs	r2, #0
 80005f0:	2110      	movs	r1, #16
 80005f2:	484d      	ldr	r0, [pc, #308]	; (8000728 <can2Task+0x178>)
 80005f4:	f003 fcc2 	bl	8003f7c <HAL_FDCAN_ActivateNotification>
	}

	//
	// Prepare Tx message Header
	//
	TxHeader_2.Identifier 			= 0x790;
 80005f8:	4b4c      	ldr	r3, [pc, #304]	; (800072c <can2Task+0x17c>)
 80005fa:	f44f 62f2 	mov.w	r2, #1936	; 0x790
 80005fe:	601a      	str	r2, [r3, #0]
	TxHeader_2.IdType 				= FDCAN_STANDARD_ID;
 8000600:	4b4a      	ldr	r3, [pc, #296]	; (800072c <can2Task+0x17c>)
 8000602:	2200      	movs	r2, #0
 8000604:	605a      	str	r2, [r3, #4]
	TxHeader_2.TxFrameType 			= FDCAN_DATA_FRAME;
 8000606:	4b49      	ldr	r3, [pc, #292]	; (800072c <can2Task+0x17c>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
	TxHeader_2.DataLength 			= FDCAN_DLC_BYTES_8;
 800060c:	4b47      	ldr	r3, [pc, #284]	; (800072c <can2Task+0x17c>)
 800060e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000612:	60da      	str	r2, [r3, #12]
	TxHeader_2.ErrorStateIndicator 	= FDCAN_ESI_ACTIVE;
 8000614:	4b45      	ldr	r3, [pc, #276]	; (800072c <can2Task+0x17c>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
	TxHeader_2.BitRateSwitch 		= FDCAN_BRS_OFF;
 800061a:	4b44      	ldr	r3, [pc, #272]	; (800072c <can2Task+0x17c>)
 800061c:	2200      	movs	r2, #0
 800061e:	615a      	str	r2, [r3, #20]
	TxHeader_2.FDFormat 			= FDCAN_CLASSIC_CAN; // FDCAN_FD_CAN;
 8000620:	4b42      	ldr	r3, [pc, #264]	; (800072c <can2Task+0x17c>)
 8000622:	2200      	movs	r2, #0
 8000624:	619a      	str	r2, [r3, #24]
	TxHeader_2.TxEventFifoControl 	= FDCAN_NO_TX_EVENTS;
 8000626:	4b41      	ldr	r3, [pc, #260]	; (800072c <can2Task+0x17c>)
 8000628:	2200      	movs	r2, #0
 800062a:	61da      	str	r2, [r3, #28]
	TxHeader_2.MessageMarker 		= 0;
 800062c:	4b3f      	ldr	r3, [pc, #252]	; (800072c <can2Task+0x17c>)
 800062e:	2200      	movs	r2, #0
 8000630:	621a      	str	r2, [r3, #32]

	//
	// Start the FDCAN module
	// on FDCAN1 instance
	//
	if (HAL_OK != HAL_FDCAN_Start(&hfdcan2))
 8000632:	483d      	ldr	r0, [pc, #244]	; (8000728 <can2Task+0x178>)
 8000634:	f003 faae 	bl	8003b94 <HAL_FDCAN_Start>
		//
		// Error TODO:
		//
	}

	osDelay(1000);
 8000638:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800063c:	f008 f9e4 	bl	8008a08 <osDelay>
#else
		//
		// Retrieve Rx messages from RX FIFO01
		// Polling mode
		//
		if (HAL_OK != HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO1, &RxHeader_2, RxData_2))
 8000640:	4b3b      	ldr	r3, [pc, #236]	; (8000730 <can2Task+0x180>)
 8000642:	4a3c      	ldr	r2, [pc, #240]	; (8000734 <can2Task+0x184>)
 8000644:	2141      	movs	r1, #65	; 0x41
 8000646:	4838      	ldr	r0, [pc, #224]	; (8000728 <can2Task+0x178>)
 8000648:	f003 fb2a 	bl	8003ca0 <HAL_FDCAN_GetRxMessage>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d005      	beq.n	800065e <can2Task+0xae>
		{
			//
			// Error TODO:
			//
			msgerror_2++;
 8000652:	4b39      	ldr	r3, [pc, #228]	; (8000738 <can2Task+0x188>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	3301      	adds	r3, #1
 8000658:	4a37      	ldr	r2, [pc, #220]	; (8000738 <can2Task+0x188>)
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	e058      	b.n	8000710 <can2Task+0x160>
		}
		else
		{
			switch (RxHeader_2.Identifier)
 800065e:	4b35      	ldr	r3, [pc, #212]	; (8000734 <can2Task+0x184>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f5a3 63f1 	sub.w	r3, r3, #1928	; 0x788
 8000666:	2b07      	cmp	r3, #7
 8000668:	d851      	bhi.n	800070e <can2Task+0x15e>
 800066a:	a201      	add	r2, pc, #4	; (adr r2, 8000670 <can2Task+0xc0>)
 800066c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000670:	08000691 	.word	0x08000691
 8000674:	0800069f 	.word	0x0800069f
 8000678:	080006af 	.word	0x080006af
 800067c:	080006bf 	.word	0x080006bf
 8000680:	080006cf 	.word	0x080006cf
 8000684:	080006df 	.word	0x080006df
 8000688:	080006ef 	.word	0x080006ef
 800068c:	080006ff 	.word	0x080006ff
			{
			case 0x788:
				memcpy(zmv_rx.data.designer.dina_std, &RxData_2, sizeof zmv_rx.data.designer.dina_std);
 8000690:	4b2a      	ldr	r3, [pc, #168]	; (800073c <can2Task+0x18c>)
 8000692:	4a27      	ldr	r2, [pc, #156]	; (8000730 <can2Task+0x180>)
 8000694:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000698:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
 800069c:	e038      	b.n	8000710 <can2Task+0x160>

			case 0x789:
				memcpy(zmv_rx.data.error.dina_err, &RxData_2, sizeof zmv_rx.data.error.dina_err);
 800069e:	4b27      	ldr	r3, [pc, #156]	; (800073c <can2Task+0x18c>)
 80006a0:	4a23      	ldr	r2, [pc, #140]	; (8000730 <can2Task+0x180>)
 80006a2:	3308      	adds	r3, #8
 80006a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006a8:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
 80006ac:	e030      	b.n	8000710 <can2Task+0x160>

			case 0x78A:
				memcpy(zmv_rx.data.encoder_1.all, &RxData_2, sizeof zmv_rx.data.encoder_1.all);
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <can2Task+0x18c>)
 80006b0:	4a1f      	ldr	r2, [pc, #124]	; (8000730 <can2Task+0x180>)
 80006b2:	3310      	adds	r3, #16
 80006b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006b8:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
 80006bc:	e028      	b.n	8000710 <can2Task+0x160>

			case 0x78B:
				memcpy(zmv_rx.data.encoder_2.all, &RxData_2, sizeof zmv_rx.data.encoder_2.all);
 80006be:	4b1f      	ldr	r3, [pc, #124]	; (800073c <can2Task+0x18c>)
 80006c0:	4a1b      	ldr	r2, [pc, #108]	; (8000730 <can2Task+0x180>)
 80006c2:	3318      	adds	r3, #24
 80006c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006c8:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
 80006cc:	e020      	b.n	8000710 <can2Task+0x160>

			case 0x78C:
				memcpy(zmv_rx.data.encoder_3.all, &RxData_2, sizeof zmv_rx.data.encoder_3.all);
 80006ce:	4b1b      	ldr	r3, [pc, #108]	; (800073c <can2Task+0x18c>)
 80006d0:	4a17      	ldr	r2, [pc, #92]	; (8000730 <can2Task+0x180>)
 80006d2:	3320      	adds	r3, #32
 80006d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006d8:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
 80006dc:	e018      	b.n	8000710 <can2Task+0x160>

			case 0x78D:
				memcpy(zmv_rx.data.encoder_4.all, &RxData_2, sizeof zmv_rx.data.encoder_4.all);
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <can2Task+0x18c>)
 80006e0:	4a13      	ldr	r2, [pc, #76]	; (8000730 <can2Task+0x180>)
 80006e2:	3328      	adds	r3, #40	; 0x28
 80006e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006e8:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
 80006ec:	e010      	b.n	8000710 <can2Task+0x160>

			case 0x78E:
				memcpy(zmv_rx.data.encoder_5.all, &RxData_2, sizeof zmv_rx.data.encoder_5.all);
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <can2Task+0x18c>)
 80006f0:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <can2Task+0x180>)
 80006f2:	3330      	adds	r3, #48	; 0x30
 80006f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006f8:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
 80006fc:	e008      	b.n	8000710 <can2Task+0x160>

			case 0x78F:
				memcpy(zmv_rx.data.encoder_6.all, &RxData_2, sizeof zmv_rx.data.encoder_6.all);
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <can2Task+0x18c>)
 8000700:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <can2Task+0x180>)
 8000702:	3338      	adds	r3, #56	; 0x38
 8000704:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000708:	e883 0003 	stmia.w	r3, {r0, r1}
				break;
 800070c:	e000      	b.n	8000710 <can2Task+0x160>

			default:
				break;
 800070e:	bf00      	nop

		//
		// Reactivate reception notification
		// TODO: Check if it is necessary to do so!
		//
		if (HAL_OK != HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO1_NEW_MESSAGE, 0))
 8000710:	2200      	movs	r2, #0
 8000712:	2110      	movs	r1, #16
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <can2Task+0x178>)
 8000716:	f003 fc31 	bl	8003f7c <HAL_FDCAN_ActivateNotification>
		{

		}

		osDelay(5);
 800071a:	2005      	movs	r0, #5
 800071c:	f008 f974 	bl	8008a08 <osDelay>
		if (HAL_OK != HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO1, &RxHeader_2, RxData_2))
 8000720:	e78e      	b.n	8000640 <can2Task+0x90>
 8000722:	bf00      	nop
 8000724:	24000180 	.word	0x24000180
 8000728:	2400029c 	.word	0x2400029c
 800072c:	240001a0 	.word	0x240001a0
 8000730:	240001ec 	.word	0x240001ec
 8000734:	240001c4 	.word	0x240001c4
 8000738:	240001f4 	.word	0x240001f4
 800073c:	24000140 	.word	0x24000140

08000740 <dinaCxTask>:
  * @retval None
  *
  *********************************************************************/

void dinaCxTask(void *argument)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b0b8      	sub	sp, #224	; 0xe0
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	DINA_TO_LJU_CYCLIC_FRAME_Tx_U udp_tx = {};
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	22ca      	movs	r2, #202	; 0xca
 800074e:	2100      	movs	r1, #0
 8000750:	4618      	mov	r0, r3
 8000752:	f018 f968 	bl	8018a26 <memset>

	udp_tx.data.addr_dina 				= 100;
 8000756:	2364      	movs	r3, #100	; 0x64
 8000758:	737b      	strb	r3, [r7, #13]
	udp_tx.data.addr_lju 				= 123;
 800075a:	237b      	movs	r3, #123	; 0x7b
 800075c:	733b      	strb	r3, [r7, #12]
	udp_tx.data.message_id				= 0x2;
 800075e:	2302      	movs	r3, #2
 8000760:	73bb      	strb	r3, [r7, #14]
	udp_tx.data.message_cnt.always_one 	= 1;
 8000762:	7c3b      	ldrb	r3, [r7, #16]
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	743b      	strb	r3, [r7, #16]
	udp_tx.data.frame_crc.byte.LB 		= 123; // TODO: Calculate the CRC of the frame
 800076a:	237b      	movs	r3, #123	; 0x7b
 800076c:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5

	osDelay(100);
 8000770:	2064      	movs	r0, #100	; 0x64
 8000772:	f008 f949 	bl	8008a08 <osDelay>

	ip_addr_t PC_IPADDR;
	IP_ADDR4(&PC_IPADDR, 192, 168, 100, 123);
 8000776:	4b87      	ldr	r3, [pc, #540]	; (8000994 <dinaCxTask+0x254>)
 8000778:	60bb      	str	r3, [r7, #8]

	struct udp_pcb* my_udp = udp_new();
 800077a:	f015 fbf3 	bl	8015f64 <udp_new>
 800077e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	udp_connect(my_udp, &PC_IPADDR, 55151);
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	f24d 726f 	movw	r2, #55151	; 0xd76f
 800078a:	4619      	mov	r1, r3
 800078c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8000790:	f015 fb7a 	bl	8015e88 <udp_connect>
	struct pbuf* udp_buffer = NULL;
 8000794:	2300      	movs	r3, #0
 8000796:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	for (;;)
	{
		//
		// Encoder 1
		//
		udp_tx.data.encoder_1.position.byte.LB 	= zmv_rx.data.encoder_1.byte.pos_LSB;
 800079a:	4b7f      	ldr	r3, [pc, #508]	; (8000998 <dinaCxTask+0x258>)
 800079c:	7c1b      	ldrb	r3, [r3, #16]
 800079e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		udp_tx.data.encoder_1.position.byte.MB 	= zmv_rx.data.encoder_1.byte.pos_MLB;
 80007a2:	4b7d      	ldr	r3, [pc, #500]	; (8000998 <dinaCxTask+0x258>)
 80007a4:	7c5b      	ldrb	r3, [r3, #17]
 80007a6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
		udp_tx.data.encoder_1.position.byte.HB 	= zmv_rx.data.encoder_1.byte.pos_MHB;
 80007aa:	4b7b      	ldr	r3, [pc, #492]	; (8000998 <dinaCxTask+0x258>)
 80007ac:	7c9b      	ldrb	r3, [r3, #18]
 80007ae:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		//
		udp_tx.data.encoder_1.speed.byte.LB 	= zmv_rx.data.encoder_1.byte.speed_LSB;
 80007b2:	4b79      	ldr	r3, [pc, #484]	; (8000998 <dinaCxTask+0x258>)
 80007b4:	7d1b      	ldrb	r3, [r3, #20]
 80007b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		udp_tx.data.encoder_1.speed.byte.HB 	= zmv_rx.data.encoder_1.byte.speed_HSB;
 80007ba:	4b77      	ldr	r3, [pc, #476]	; (8000998 <dinaCxTask+0x258>)
 80007bc:	7d5b      	ldrb	r3, [r3, #21]
 80007be:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		//
		udp_tx.data.encoder_1.status_1.all 		= zmv_rx.data.encoder_1.byte.status_1;
 80007c2:	4b75      	ldr	r3, [pc, #468]	; (8000998 <dinaCxTask+0x258>)
 80007c4:	7d9b      	ldrb	r3, [r3, #22]
 80007c6:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
		udp_tx.data.encoder_1.status_2.all 		= zmv_rx.data.encoder_1.byte.status_2;
 80007ca:	4b73      	ldr	r3, [pc, #460]	; (8000998 <dinaCxTask+0x258>)
 80007cc:	7ddb      	ldrb	r3, [r3, #23]
 80007ce:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

		//
		// Encoder 2
		//
		udp_tx.data.encoder_2.position.byte.LB 	= zmv_rx.data.encoder_2.byte.pos_LSB;
 80007d2:	4b71      	ldr	r3, [pc, #452]	; (8000998 <dinaCxTask+0x258>)
 80007d4:	7e1b      	ldrb	r3, [r3, #24]
 80007d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		udp_tx.data.encoder_2.position.byte.MB 	= zmv_rx.data.encoder_2.byte.pos_MLB;
 80007da:	4b6f      	ldr	r3, [pc, #444]	; (8000998 <dinaCxTask+0x258>)
 80007dc:	7e5b      	ldrb	r3, [r3, #25]
 80007de:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
		udp_tx.data.encoder_2.position.byte.HB 	= zmv_rx.data.encoder_2.byte.pos_MHB;
 80007e2:	4b6d      	ldr	r3, [pc, #436]	; (8000998 <dinaCxTask+0x258>)
 80007e4:	7e9b      	ldrb	r3, [r3, #26]
 80007e6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
		//
		udp_tx.data.encoder_2.speed.byte.LB 	= zmv_rx.data.encoder_2.byte.speed_LSB;
 80007ea:	4b6b      	ldr	r3, [pc, #428]	; (8000998 <dinaCxTask+0x258>)
 80007ec:	7f1b      	ldrb	r3, [r3, #28]
 80007ee:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
		udp_tx.data.encoder_2.speed.byte.HB 	= zmv_rx.data.encoder_2.byte.speed_HSB;
 80007f2:	4b69      	ldr	r3, [pc, #420]	; (8000998 <dinaCxTask+0x258>)
 80007f4:	7f5b      	ldrb	r3, [r3, #29]
 80007f6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
		//
		udp_tx.data.encoder_2.status_1.all 		= zmv_rx.data.encoder_2.byte.status_1;
 80007fa:	4b67      	ldr	r3, [pc, #412]	; (8000998 <dinaCxTask+0x258>)
 80007fc:	7f9b      	ldrb	r3, [r3, #30]
 80007fe:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
		udp_tx.data.encoder_2.status_2.all 		= zmv_rx.data.encoder_2.byte.status_2;
 8000802:	4b65      	ldr	r3, [pc, #404]	; (8000998 <dinaCxTask+0x258>)
 8000804:	7fdb      	ldrb	r3, [r3, #31]
 8000806:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

		//
		// Encoder 3
		//
		udp_tx.data.encoder_3.position.byte.LB 	= zmv_rx.data.encoder_3.byte.pos_LSB;
 800080a:	4b63      	ldr	r3, [pc, #396]	; (8000998 <dinaCxTask+0x258>)
 800080c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000810:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
		udp_tx.data.encoder_3.position.byte.MB 	= zmv_rx.data.encoder_3.byte.pos_MLB;
 8000814:	4b60      	ldr	r3, [pc, #384]	; (8000998 <dinaCxTask+0x258>)
 8000816:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800081a:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
		udp_tx.data.encoder_3.position.byte.HB 	= zmv_rx.data.encoder_3.byte.pos_MHB;
 800081e:	4b5e      	ldr	r3, [pc, #376]	; (8000998 <dinaCxTask+0x258>)
 8000820:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8000824:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		//
		udp_tx.data.encoder_3.speed.byte.LB 	= zmv_rx.data.encoder_3.byte.speed_LSB;
 8000828:	4b5b      	ldr	r3, [pc, #364]	; (8000998 <dinaCxTask+0x258>)
 800082a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800082e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		udp_tx.data.encoder_3.speed.byte.HB 	= zmv_rx.data.encoder_3.byte.speed_HSB;
 8000832:	4b59      	ldr	r3, [pc, #356]	; (8000998 <dinaCxTask+0x258>)
 8000834:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000838:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
		//
		udp_tx.data.encoder_3.status_1.all 		= zmv_rx.data.encoder_3.byte.status_1;
 800083c:	4b56      	ldr	r3, [pc, #344]	; (8000998 <dinaCxTask+0x258>)
 800083e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000842:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
		udp_tx.data.encoder_3.status_2.all 		= zmv_rx.data.encoder_3.byte.status_2;
 8000846:	4b54      	ldr	r3, [pc, #336]	; (8000998 <dinaCxTask+0x258>)
 8000848:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800084c:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75

		//
		// Encoder 4
		//
		udp_tx.data.encoder_4.position.byte.LB 	= zmv_rx.data.encoder_4.byte.pos_LSB;
 8000850:	4b51      	ldr	r3, [pc, #324]	; (8000998 <dinaCxTask+0x258>)
 8000852:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000856:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
		udp_tx.data.encoder_4.position.byte.MB 	= zmv_rx.data.encoder_4.byte.pos_MLB;
 800085a:	4b4f      	ldr	r3, [pc, #316]	; (8000998 <dinaCxTask+0x258>)
 800085c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000860:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
		udp_tx.data.encoder_4.position.byte.HB 	= zmv_rx.data.encoder_4.byte.pos_MHB;
 8000864:	4b4c      	ldr	r3, [pc, #304]	; (8000998 <dinaCxTask+0x258>)
 8000866:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800086a:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
		//
		udp_tx.data.encoder_4.speed.byte.LB 	= zmv_rx.data.encoder_4.byte.speed_LSB;
 800086e:	4b4a      	ldr	r3, [pc, #296]	; (8000998 <dinaCxTask+0x258>)
 8000870:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000874:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
		udp_tx.data.encoder_4.speed.byte.HB 	= zmv_rx.data.encoder_4.byte.speed_HSB;
 8000878:	4b47      	ldr	r3, [pc, #284]	; (8000998 <dinaCxTask+0x258>)
 800087a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800087e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
		//
		udp_tx.data.encoder_4.status_1.all 		= zmv_rx.data.encoder_4.byte.status_1;
 8000882:	4b45      	ldr	r3, [pc, #276]	; (8000998 <dinaCxTask+0x258>)
 8000884:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8000888:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
		udp_tx.data.encoder_4.status_2.all 		= zmv_rx.data.encoder_4.byte.status_2;
 800088c:	4b42      	ldr	r3, [pc, #264]	; (8000998 <dinaCxTask+0x258>)
 800088e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8000892:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

		//
		// Encoder 5
		//
		udp_tx.data.encoder_5.position.byte.LB 	= zmv_rx.data.encoder_5.byte.pos_LSB;
 8000896:	4b40      	ldr	r3, [pc, #256]	; (8000998 <dinaCxTask+0x258>)
 8000898:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800089c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		udp_tx.data.encoder_5.position.byte.MB 	= zmv_rx.data.encoder_5.byte.pos_MLB;
 80008a0:	4b3d      	ldr	r3, [pc, #244]	; (8000998 <dinaCxTask+0x258>)
 80008a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80008a6:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
		udp_tx.data.encoder_5.position.byte.HB 	= zmv_rx.data.encoder_5.byte.pos_MHB;
 80008aa:	4b3b      	ldr	r3, [pc, #236]	; (8000998 <dinaCxTask+0x258>)
 80008ac:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80008b0:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		//
		udp_tx.data.encoder_5.speed.byte.LB 	= zmv_rx.data.encoder_5.byte.speed_LSB;
 80008b4:	4b38      	ldr	r3, [pc, #224]	; (8000998 <dinaCxTask+0x258>)
 80008b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80008ba:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		udp_tx.data.encoder_5.speed.byte.HB 	= zmv_rx.data.encoder_5.byte.speed_HSB;
 80008be:	4b36      	ldr	r3, [pc, #216]	; (8000998 <dinaCxTask+0x258>)
 80008c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80008c4:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
		//
		udp_tx.data.encoder_5.status_1.all 		= zmv_rx.data.encoder_5.byte.status_1;
 80008c8:	4b33      	ldr	r3, [pc, #204]	; (8000998 <dinaCxTask+0x258>)
 80008ca:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80008ce:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
		udp_tx.data.encoder_5.status_2.all 		= zmv_rx.data.encoder_5.byte.status_2;
 80008d2:	4b31      	ldr	r3, [pc, #196]	; (8000998 <dinaCxTask+0x258>)
 80008d4:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80008d8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

		//
		// Encoder 6
		//
		udp_tx.data.encoder_6.position.byte.LB 	= zmv_rx.data.encoder_6.byte.pos_LSB;
 80008dc:	4b2e      	ldr	r3, [pc, #184]	; (8000998 <dinaCxTask+0x258>)
 80008de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80008e2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		udp_tx.data.encoder_6.position.byte.MB 	= zmv_rx.data.encoder_6.byte.pos_MLB;
 80008e6:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <dinaCxTask+0x258>)
 80008e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80008ec:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		udp_tx.data.encoder_6.position.byte.HB 	= zmv_rx.data.encoder_6.byte.pos_MHB;
 80008f0:	4b29      	ldr	r3, [pc, #164]	; (8000998 <dinaCxTask+0x258>)
 80008f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80008f6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
		//
		udp_tx.data.encoder_6.speed.byte.LB 	= zmv_rx.data.encoder_6.byte.speed_LSB;
 80008fa:	4b27      	ldr	r3, [pc, #156]	; (8000998 <dinaCxTask+0x258>)
 80008fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000900:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
		udp_tx.data.encoder_6.speed.byte.HB 	= zmv_rx.data.encoder_6.byte.speed_HSB;
 8000904:	4b24      	ldr	r3, [pc, #144]	; (8000998 <dinaCxTask+0x258>)
 8000906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800090a:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
		//
		udp_tx.data.encoder_6.status_1.all 		= zmv_rx.data.encoder_6.byte.status_1;
 800090e:	4b22      	ldr	r3, [pc, #136]	; (8000998 <dinaCxTask+0x258>)
 8000910:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000914:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
		udp_tx.data.encoder_6.status_2.all 		= zmv_rx.data.encoder_6.byte.status_2;
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <dinaCxTask+0x258>)
 800091a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800091e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
//		memcpy(udp_tx.data.logic_data, zmv_rx.data.designer.dina_std, sizeof zmv_rx.data.designer.dina_std);

		//
		// Logic data dummy
		//
		memset(udp_tx.data.logic_data, 0xff, sizeof udp_tx.data.logic_data);
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	330a      	adds	r3, #10
 8000928:	2240      	movs	r2, #64	; 0x40
 800092a:	21ff      	movs	r1, #255	; 0xff
 800092c:	4618      	mov	r0, r3
 800092e:	f018 f87a 	bl	8018a26 <memset>
		//
		// !! PBUF_RAM is critical for correct operation
		//
//		udp_buffer = pbuf_alloc(PBUF_TRANSPORT, sizeof UDP_Tx, PBUF_RAM);
//		Or
		udp_buffer = pbuf_alloc(PBUF_TRANSPORT, sizeof udp_tx.frame, PBUF_RAM);
 8000932:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000936:	21ca      	movs	r1, #202	; 0xca
 8000938:	2036      	movs	r0, #54	; 0x36
 800093a:	f00d ff0f 	bl	800e75c <pbuf_alloc>
 800093e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8

		if (udp_buffer != NULL)
 8000942:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000946:	2b00      	cmp	r3, #0
 8000948:	d020      	beq.n	800098c <dinaCxTask+0x24c>
		{
			//
			// Heart beat!
			//
			udp_tx.data.message_cnt.alive_cnt += 1;
 800094a:	7c3b      	ldrb	r3, [r7, #16]
 800094c:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8000950:	b2db      	uxtb	r3, r3
 8000952:	3301      	adds	r3, #1
 8000954:	b2db      	uxtb	r3, r3
 8000956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800095a:	b2da      	uxtb	r2, r3
 800095c:	7c3b      	ldrb	r3, [r7, #16]
 800095e:	f362 0306 	bfi	r3, r2, #0, #7
 8000962:	743b      	strb	r3, [r7, #16]

//			memcpy(udp_buffer->payload, &udp_tx, sizeof udp_tx);
//			Or
			memcpy(udp_buffer->payload, &udp_tx.frame, sizeof udp_tx.frame);
 8000964:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	4618      	mov	r0, r3
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	22ca      	movs	r2, #202	; 0xca
 8000972:	4619      	mov	r1, r3
 8000974:	f018 f849 	bl	8018a0a <memcpy>
			udp_send(my_udp, udp_buffer);
 8000978:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800097c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8000980:	f015 f810 	bl	80159a4 <udp_send>
			pbuf_free(udp_buffer);
 8000984:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8000988:	f00e f9cc 	bl	800ed24 <pbuf_free>
		}

		osDelay(20);
 800098c:	2014      	movs	r0, #20
 800098e:	f008 f83b 	bl	8008a08 <osDelay>
		udp_tx.data.encoder_1.position.byte.LB 	= zmv_rx.data.encoder_1.byte.pos_LSB;
 8000992:	e702      	b.n	800079a <dinaCxTask+0x5a>
 8000994:	7b64a8c0 	.word	0x7b64a8c0
 8000998:	24000140 	.word	0x24000140

0800099c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80009a2:	f000 fa81 	bl	8000ea8 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009a6:	4b49      	ldr	r3, [pc, #292]	; (8000acc <main+0x130>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d11b      	bne.n	80009ea <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80009b2:	f3bf 8f4f 	dsb	sy
}
 80009b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009b8:	f3bf 8f6f 	isb	sy
}
 80009bc:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80009be:	4b43      	ldr	r3, [pc, #268]	; (8000acc <main+0x130>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80009c6:	f3bf 8f4f 	dsb	sy
}
 80009ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009cc:	f3bf 8f6f 	isb	sy
}
 80009d0:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80009d2:	4b3e      	ldr	r3, [pc, #248]	; (8000acc <main+0x130>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	4a3d      	ldr	r2, [pc, #244]	; (8000acc <main+0x130>)
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009de:	f3bf 8f4f 	dsb	sy
}
 80009e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009e4:	f3bf 8f6f 	isb	sy
}
 80009e8:	e000      	b.n	80009ec <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80009ea:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80009ec:	4b37      	ldr	r3, [pc, #220]	; (8000acc <main+0x130>)
 80009ee:	695b      	ldr	r3, [r3, #20]
 80009f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d138      	bne.n	8000a6a <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80009f8:	4b34      	ldr	r3, [pc, #208]	; (8000acc <main+0x130>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a00:	f3bf 8f4f 	dsb	sy
}
 8000a04:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a06:	4b31      	ldr	r3, [pc, #196]	; (8000acc <main+0x130>)
 8000a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000a0c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	0b5b      	lsrs	r3, r3, #13
 8000a12:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000a16:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	08db      	lsrs	r3, r3, #3
 8000a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a20:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	015a      	lsls	r2, r3, #5
 8000a26:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000a2a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a30:	4926      	ldr	r1, [pc, #152]	; (8000acc <main+0x130>)
 8000a32:	4313      	orrs	r3, r2
 8000a34:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	1e5a      	subs	r2, r3, #1
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d1ef      	bne.n	8000a22 <main+0x86>
    } while(sets-- != 0U);
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	1e5a      	subs	r2, r3, #1
 8000a46:	60ba      	str	r2, [r7, #8]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1e5      	bne.n	8000a18 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000a4c:	f3bf 8f4f 	dsb	sy
}
 8000a50:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000a52:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <main+0x130>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	4a1d      	ldr	r2, [pc, #116]	; (8000acc <main+0x130>)
 8000a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a5c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a5e:	f3bf 8f4f 	dsb	sy
}
 8000a62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a64:	f3bf 8f6f 	isb	sy
}
 8000a68:	e000      	b.n	8000a6c <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000a6a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a6c:	f000 ff04 	bl	8001878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a70:	f000 f846 	bl	8000b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a74:	f000 f988 	bl	8000d88 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000a78:	f000 f8bc 	bl	8000bf4 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8000a7c:	f000 f91e 	bl	8000cbc <MX_FDCAN2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a80:	f007 fed0 	bl	8008824 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of lwipInitTask */
  lwipInitTaskHandle = osThreadNew(startlwipInitTask, NULL, &lwipInitTask_attributes);
 8000a84:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <main+0x134>)
 8000a86:	2100      	movs	r1, #0
 8000a88:	4812      	ldr	r0, [pc, #72]	; (8000ad4 <main+0x138>)
 8000a8a:	f007 ff2a 	bl	80088e2 <osThreadNew>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	4a11      	ldr	r2, [pc, #68]	; (8000ad8 <main+0x13c>)
 8000a92:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* creation of dinaCxTask */
  dinaCxTaskHandle = osThreadNew(dinaCxTask, NULL, &dianCxTask_attributes);
 8000a94:	4a11      	ldr	r2, [pc, #68]	; (8000adc <main+0x140>)
 8000a96:	2100      	movs	r1, #0
 8000a98:	4811      	ldr	r0, [pc, #68]	; (8000ae0 <main+0x144>)
 8000a9a:	f007 ff22 	bl	80088e2 <osThreadNew>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a10      	ldr	r2, [pc, #64]	; (8000ae4 <main+0x148>)
 8000aa2:	6013      	str	r3, [r2, #0]
  /* creation of can1Task */
  can1TaskHandle = osThreadNew(can1Task, NULL, &can1Task_attributes);
 8000aa4:	4a10      	ldr	r2, [pc, #64]	; (8000ae8 <main+0x14c>)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4810      	ldr	r0, [pc, #64]	; (8000aec <main+0x150>)
 8000aaa:	f007 ff1a 	bl	80088e2 <osThreadNew>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <main+0x154>)
 8000ab2:	6013      	str	r3, [r2, #0]
  /* creation of dinaCxTask */
  can2TaskHandle = osThreadNew(can2Task, NULL, &can2Task_attributes);
 8000ab4:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <main+0x158>)
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	480f      	ldr	r0, [pc, #60]	; (8000af8 <main+0x15c>)
 8000aba:	f007 ff12 	bl	80088e2 <osThreadNew>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <main+0x160>)
 8000ac2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ac4:	f007 fed2 	bl	800886c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <main+0x12c>
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00
 8000ad0:	0801c820 	.word	0x0801c820
 8000ad4:	08000e8d 	.word	0x08000e8d
 8000ad8:	2400033c 	.word	0x2400033c
 8000adc:	0801c7fc 	.word	0x0801c7fc
 8000ae0:	08000741 	.word	0x08000741
 8000ae4:	240001f8 	.word	0x240001f8
 8000ae8:	0801c7b4 	.word	0x0801c7b4
 8000aec:	080003ed 	.word	0x080003ed
 8000af0:	240000b8 	.word	0x240000b8
 8000af4:	0801c7d8 	.word	0x0801c7d8
 8000af8:	080005b1 	.word	0x080005b1
 8000afc:	2400013c 	.word	0x2400013c

08000b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b09c      	sub	sp, #112	; 0x70
 8000b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0a:	224c      	movs	r2, #76	; 0x4c
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f017 ff89 	bl	8018a26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	2220      	movs	r2, #32
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f017 ff83 	bl	8018a26 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b20:	2002      	movs	r0, #2
 8000b22:	f004 f97d 	bl	8004e20 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b30      	ldr	r3, [pc, #192]	; (8000bec <SystemClock_Config+0xec>)
 8000b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b2e:	4a2f      	ldr	r2, [pc, #188]	; (8000bec <SystemClock_Config+0xec>)
 8000b30:	f023 0301 	bic.w	r3, r3, #1
 8000b34:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b36:	4b2d      	ldr	r3, [pc, #180]	; (8000bec <SystemClock_Config+0xec>)
 8000b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	4b2b      	ldr	r3, [pc, #172]	; (8000bf0 <SystemClock_Config+0xf0>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4a2a      	ldr	r2, [pc, #168]	; (8000bf0 <SystemClock_Config+0xf0>)
 8000b46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b4a:	6193      	str	r3, [r2, #24]
 8000b4c:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <SystemClock_Config+0xf0>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b54:	603b      	str	r3, [r7, #0]
 8000b56:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b58:	bf00      	nop
 8000b5a:	4b25      	ldr	r3, [pc, #148]	; (8000bf0 <SystemClock_Config+0xf0>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b66:	d1f8      	bne.n	8000b5a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b72:	2302      	movs	r3, #2
 8000b74:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b76:	2302      	movs	r3, #2
 8000b78:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000b7e:	2364      	movs	r3, #100	; 0x64
 8000b80:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b82:	2302      	movs	r3, #2
 8000b84:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 16;
 8000b86:	2310      	movs	r3, #16
 8000b88:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b8e:	230c      	movs	r3, #12
 8000b90:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f004 f978 	bl	8004e94 <HAL_RCC_OscConfig>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000baa:	f000 f9cd 	bl	8000f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bae:	233f      	movs	r3, #63	; 0x3f
 8000bb0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bba:	2308      	movs	r3, #8
 8000bbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bbe:	2340      	movs	r3, #64	; 0x40
 8000bc0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bc2:	2340      	movs	r3, #64	; 0x40
 8000bc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bcc:	2340      	movs	r3, #64	; 0x40
 8000bce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	2102      	movs	r1, #2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f004 fdb7 	bl	8005748 <HAL_RCC_ClockConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000be0:	f000 f9b2 	bl	8000f48 <Error_Handler>
  }
}
 8000be4:	bf00      	nop
 8000be6:	3770      	adds	r7, #112	; 0x70
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	58000400 	.word	0x58000400
 8000bf0:	58024800 	.word	0x58024800

08000bf4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000bf8:	4b2e      	ldr	r3, [pc, #184]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000bfa:	4a2f      	ldr	r2, [pc, #188]	; (8000cb8 <MX_FDCAN1_Init+0xc4>)
 8000bfc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000bfe:	4b2d      	ldr	r3, [pc, #180]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c04:	4b2b      	ldr	r3, [pc, #172]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000c0a:	4b2a      	ldr	r3, [pc, #168]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c10:	4b28      	ldr	r3, [pc, #160]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000c16:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 25;
 8000c1c:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c1e:	2219      	movs	r2, #25
 8000c20:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000c22:	4b24      	ldr	r3, [pc, #144]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 6;
 8000c28:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c2a:	2206      	movs	r2, #6
 8000c2c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 9;
 8000c2e:	4b21      	ldr	r3, [pc, #132]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c30:	2209      	movs	r2, #9
 8000c32:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 25;
 8000c34:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c36:	2219      	movs	r2, #25
 8000c38:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000c3a:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 13;
 8000c40:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c42:	220d      	movs	r2, #13
 8000c44:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8000c46:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c48:	2202      	movs	r2, #2
 8000c4a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000c4c:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c54:	2201      	movs	r2, #1
 8000c56:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 2;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c60:	2202      	movs	r2, #2
 8000c62:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c66:	2204      	movs	r2, #4
 8000c68:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000c70:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c72:	2204      	movs	r2, #4
 8000c74:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000c7c:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c7e:	2204      	movs	r2, #4
 8000c80:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000c88:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000c9c:	2204      	movs	r2, #4
 8000c9e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ca0:	4804      	ldr	r0, [pc, #16]	; (8000cb4 <MX_FDCAN1_Init+0xc0>)
 8000ca2:	f002 fd23 	bl	80036ec <HAL_FDCAN_Init>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000cac:	f000 f94c 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	240001fc 	.word	0x240001fc
 8000cb8:	4000a000 	.word	0x4000a000

08000cbc <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000cc0:	4b2f      	ldr	r3, [pc, #188]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000cc2:	4a30      	ldr	r2, [pc, #192]	; (8000d84 <MX_FDCAN2_Init+0xc8>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000cc6:	4b2e      	ldr	r3, [pc, #184]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000ccc:	4b2c      	ldr	r3, [pc, #176]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000cd2:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000cd8:	4b29      	ldr	r3, [pc, #164]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000cde:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 25;
 8000ce4:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000ce6:	2219      	movs	r2, #25
 8000ce8:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000cea:	4b25      	ldr	r3, [pc, #148]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 6;
 8000cf0:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000cf2:	2206      	movs	r2, #6
 8000cf4:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 9;
 8000cf6:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000cf8:	2209      	movs	r2, #9
 8000cfa:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 25;
 8000cfc:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000cfe:	2219      	movs	r2, #25
 8000d00:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000d02:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 13;
 8000d08:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000d0a:	220d      	movs	r2, #13
 8000d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 2;
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000d10:	2202      	movs	r2, #2
 8000d12:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 1280;
 8000d14:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000d16:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000d1a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8000d1c:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d2e:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000d30:	2204      	movs	r2, #4
 8000d32:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 2;
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000d36:	2202      	movs	r2, #2
 8000d38:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000d3c:	2204      	movs	r2, #4
 8000d3e:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000d48:	2204      	movs	r2, #4
 8000d4a:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 1;
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000d66:	2204      	movs	r2, #4
 8000d68:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_FDCAN2_Init+0xc4>)
 8000d6c:	f002 fcbe 	bl	80036ec <HAL_FDCAN_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8000d76:	f000 f8e7 	bl	8000f48 <Error_Handler>
//    Error_Handler();
//  }

  /* USER CODE END FDCAN2_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	2400029c 	.word	0x2400029c
 8000d84:	4000a400 	.word	0x4000a400

08000d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08c      	sub	sp, #48	; 0x30
 8000d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8e:	f107 031c 	add.w	r3, r7, #28
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9e:	4b39      	ldr	r3, [pc, #228]	; (8000e84 <MX_GPIO_Init+0xfc>)
 8000da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da4:	4a37      	ldr	r2, [pc, #220]	; (8000e84 <MX_GPIO_Init+0xfc>)
 8000da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000daa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dae:	4b35      	ldr	r3, [pc, #212]	; (8000e84 <MX_GPIO_Init+0xfc>)
 8000db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000db8:	61bb      	str	r3, [r7, #24]
 8000dba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbc:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <MX_GPIO_Init+0xfc>)
 8000dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc2:	4a30      	ldr	r2, [pc, #192]	; (8000e84 <MX_GPIO_Init+0xfc>)
 8000dc4:	f043 0304 	orr.w	r3, r3, #4
 8000dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dcc:	4b2d      	ldr	r3, [pc, #180]	; (8000e84 <MX_GPIO_Init+0xfc>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	4b2a      	ldr	r3, [pc, #168]	; (8000e84 <MX_GPIO_Init+0xfc>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de0:	4a28      	ldr	r2, [pc, #160]	; (8000e84 <MX_GPIO_Init+0xfc>)
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dea:	4b26      	ldr	r3, [pc, #152]	; (8000e84 <MX_GPIO_Init+0xfc>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df8:	4b22      	ldr	r3, [pc, #136]	; (8000e84 <MX_GPIO_Init+0xfc>)
 8000dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dfe:	4a21      	ldr	r2, [pc, #132]	; (8000e84 <MX_GPIO_Init+0xfc>)
 8000e00:	f043 0310 	orr.w	r3, r3, #16
 8000e04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e08:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <MX_GPIO_Init+0xfc>)
 8000e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e0e:	f003 0310 	and.w	r3, r3, #16
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <MX_GPIO_Init+0xfc>)
 8000e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e1c:	4a19      	ldr	r2, [pc, #100]	; (8000e84 <MX_GPIO_Init+0xfc>)
 8000e1e:	f043 0302 	orr.w	r3, r3, #2
 8000e22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e26:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <MX_GPIO_Init+0xfc>)
 8000e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <MX_GPIO_Init+0xfc>)
 8000e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e3a:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <MX_GPIO_Init+0xfc>)
 8000e3c:	f043 0308 	orr.w	r3, r3, #8
 8000e40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_GPIO_Init+0xfc>)
 8000e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4a:	f003 0308 	and.w	r3, r3, #8
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ETH_LED4_GPIO_Port, ETH_LED4_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e58:	480b      	ldr	r0, [pc, #44]	; (8000e88 <MX_GPIO_Init+0x100>)
 8000e5a:	f003 ffc7 	bl	8004dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ETH_LED4_Pin */
  GPIO_InitStruct.Pin = ETH_LED4_Pin;
 8000e5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(ETH_LED4_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4619      	mov	r1, r3
 8000e76:	4804      	ldr	r0, [pc, #16]	; (8000e88 <MX_GPIO_Init+0x100>)
 8000e78:	f003 fe08 	bl	8004a8c <HAL_GPIO_Init>

}
 8000e7c:	bf00      	nop
 8000e7e:	3730      	adds	r7, #48	; 0x30
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	58024400 	.word	0x58024400
 8000e88:	58021000 	.word	0x58021000

08000e8c <startlwipInitTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startlwipInitTask */
void startlwipInitTask(void *argument)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000e94:	f006 fe58 	bl	8007b48 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  httpd_init();
 8000e98:	f00c fa44 	bl	800d324 <httpd_init>
  /* Infinite loop */
  for (;;)
  {
	  osDelay(5000);
 8000e9c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ea0:	f007 fdb2 	bl	8008a08 <osDelay>
 8000ea4:	e7fa      	b.n	8000e9c <startlwipInitTask+0x10>
	...

08000ea8 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eae:	463b      	mov	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000eba:	f000 fe39 	bl	8001b30 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <MPU_Config+0x78>)
 8000ec8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000eca:	230e      	movs	r3, #14
 8000ecc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eea:	463b      	mov	r3, r7
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 fe57 	bl	8001ba0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000ef6:	2307      	movs	r3, #7
 8000ef8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000efe:	2301      	movs	r3, #1
 8000f00:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f02:	2301      	movs	r3, #1
 8000f04:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000f06:	2301      	movs	r3, #1
 8000f08:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 fe47 	bl	8001ba0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f12:	2004      	movs	r0, #4
 8000f14:	f000 fe24 	bl	8001b60 <HAL_MPU_Enable>

}
 8000f18:	bf00      	nop
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	30040000 	.word	0x30040000

08000f24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d101      	bne.n	8000f3a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f36:	f000 fcdb 	bl	80018f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40001000 	.word	0x40001000

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
}
 8000f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <Error_Handler+0x8>
	...

08000f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <HAL_MspInit+0x38>)
 8000f5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f60:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <HAL_MspInit+0x38>)
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <HAL_MspInit+0x38>)
 8000f6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	210f      	movs	r1, #15
 8000f7c:	f06f 0001 	mvn.w	r0, #1
 8000f80:	f000 fdae 	bl	8001ae0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	58024400 	.word	0x58024400

08000f90 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b0bc      	sub	sp, #240	; 0xf0
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa8:	f107 0318 	add.w	r3, r7, #24
 8000fac:	22c0      	movs	r2, #192	; 0xc0
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f017 fd38 	bl	8018a26 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a5e      	ldr	r2, [pc, #376]	; (8001134 <HAL_FDCAN_MspInit+0x1a4>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d158      	bne.n	8001072 <HAL_FDCAN_MspInit+0xe2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000fc0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000fc4:	f04f 0300 	mov.w	r3, #0
 8000fc8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000fcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd4:	f107 0318 	add.w	r3, r7, #24
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f004 ff6d 	bl	8005eb8 <HAL_RCCEx_PeriphCLKConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000fe4:	f7ff ffb0 	bl	8000f48 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000fe8:	4b53      	ldr	r3, [pc, #332]	; (8001138 <HAL_FDCAN_MspInit+0x1a8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	3301      	adds	r3, #1
 8000fee:	4a52      	ldr	r2, [pc, #328]	; (8001138 <HAL_FDCAN_MspInit+0x1a8>)
 8000ff0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000ff2:	4b51      	ldr	r3, [pc, #324]	; (8001138 <HAL_FDCAN_MspInit+0x1a8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d10e      	bne.n	8001018 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ffa:	4b50      	ldr	r3, [pc, #320]	; (800113c <HAL_FDCAN_MspInit+0x1ac>)
 8000ffc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001000:	4a4e      	ldr	r2, [pc, #312]	; (800113c <HAL_FDCAN_MspInit+0x1ac>)
 8001002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001006:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800100a:	4b4c      	ldr	r3, [pc, #304]	; (800113c <HAL_FDCAN_MspInit+0x1ac>)
 800100c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001018:	4b48      	ldr	r3, [pc, #288]	; (800113c <HAL_FDCAN_MspInit+0x1ac>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101e:	4a47      	ldr	r2, [pc, #284]	; (800113c <HAL_FDCAN_MspInit+0x1ac>)
 8001020:	f043 0308 	orr.w	r3, r3, #8
 8001024:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001028:	4b44      	ldr	r3, [pc, #272]	; (800113c <HAL_FDCAN_MspInit+0x1ac>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001036:	2303      	movs	r3, #3
 8001038:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001042:	2301      	movs	r3, #1
 8001044:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800104e:	2309      	movs	r3, #9
 8001050:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001054:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001058:	4619      	mov	r1, r3
 800105a:	4839      	ldr	r0, [pc, #228]	; (8001140 <HAL_FDCAN_MspInit+0x1b0>)
 800105c:	f003 fd16 	bl	8004a8c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2105      	movs	r1, #5
 8001064:	2013      	movs	r0, #19
 8001066:	f000 fd3b 	bl	8001ae0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800106a:	2013      	movs	r0, #19
 800106c:	f000 fd52 	bl	8001b14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001070:	e05c      	b.n	800112c <HAL_FDCAN_MspInit+0x19c>
  else if(hfdcan->Instance==FDCAN2)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a33      	ldr	r2, [pc, #204]	; (8001144 <HAL_FDCAN_MspInit+0x1b4>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d157      	bne.n	800112c <HAL_FDCAN_MspInit+0x19c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800107c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001088:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800108c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001090:	f107 0318 	add.w	r3, r7, #24
 8001094:	4618      	mov	r0, r3
 8001096:	f004 ff0f 	bl	8005eb8 <HAL_RCCEx_PeriphCLKConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HAL_FDCAN_MspInit+0x114>
      Error_Handler();
 80010a0:	f7ff ff52 	bl	8000f48 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80010a4:	4b24      	ldr	r3, [pc, #144]	; (8001138 <HAL_FDCAN_MspInit+0x1a8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	3301      	adds	r3, #1
 80010aa:	4a23      	ldr	r2, [pc, #140]	; (8001138 <HAL_FDCAN_MspInit+0x1a8>)
 80010ac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80010ae:	4b22      	ldr	r3, [pc, #136]	; (8001138 <HAL_FDCAN_MspInit+0x1a8>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d10e      	bne.n	80010d4 <HAL_FDCAN_MspInit+0x144>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <HAL_FDCAN_MspInit+0x1ac>)
 80010b8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80010bc:	4a1f      	ldr	r2, [pc, #124]	; (800113c <HAL_FDCAN_MspInit+0x1ac>)
 80010be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80010c6:	4b1d      	ldr	r3, [pc, #116]	; (800113c <HAL_FDCAN_MspInit+0x1ac>)
 80010c8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80010cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d4:	4b19      	ldr	r3, [pc, #100]	; (800113c <HAL_FDCAN_MspInit+0x1ac>)
 80010d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010da:	4a18      	ldr	r2, [pc, #96]	; (800113c <HAL_FDCAN_MspInit+0x1ac>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <HAL_FDCAN_MspInit+0x1ac>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80010f2:	2360      	movs	r3, #96	; 0x60
 80010f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010fe:	2301      	movs	r3, #1
 8001100:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800110a:	2309      	movs	r3, #9
 800110c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001110:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001114:	4619      	mov	r1, r3
 8001116:	480c      	ldr	r0, [pc, #48]	; (8001148 <HAL_FDCAN_MspInit+0x1b8>)
 8001118:	f003 fcb8 	bl	8004a8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 5, 0);
 800111c:	2200      	movs	r2, #0
 800111e:	2105      	movs	r1, #5
 8001120:	2014      	movs	r0, #20
 8001122:	f000 fcdd 	bl	8001ae0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8001126:	2014      	movs	r0, #20
 8001128:	f000 fcf4 	bl	8001b14 <HAL_NVIC_EnableIRQ>
}
 800112c:	bf00      	nop
 800112e:	37f0      	adds	r7, #240	; 0xf0
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	4000a000 	.word	0x4000a000
 8001138:	24000340 	.word	0x24000340
 800113c:	58024400 	.word	0x58024400
 8001140:	58020c00 	.word	0x58020c00
 8001144:	4000a400 	.word	0x4000a400
 8001148:	58020400 	.word	0x58020400

0800114c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b090      	sub	sp, #64	; 0x40
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b0f      	cmp	r3, #15
 8001158:	d827      	bhi.n	80011aa <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800115a:	2200      	movs	r2, #0
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	2036      	movs	r0, #54	; 0x36
 8001160:	f000 fcbe 	bl	8001ae0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001164:	2036      	movs	r0, #54	; 0x36
 8001166:	f000 fcd5 	bl	8001b14 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800116a:	4a29      	ldr	r2, [pc, #164]	; (8001210 <HAL_InitTick+0xc4>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001170:	4b28      	ldr	r3, [pc, #160]	; (8001214 <HAL_InitTick+0xc8>)
 8001172:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001176:	4a27      	ldr	r2, [pc, #156]	; (8001214 <HAL_InitTick+0xc8>)
 8001178:	f043 0310 	orr.w	r3, r3, #16
 800117c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001180:	4b24      	ldr	r3, [pc, #144]	; (8001214 <HAL_InitTick+0xc8>)
 8001182:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001186:	f003 0310 	and.w	r3, r3, #16
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800118e:	f107 0210 	add.w	r2, r7, #16
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f004 fe4b 	bl	8005e34 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800119e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a0:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d106      	bne.n	80011b6 <HAL_InitTick+0x6a>
 80011a8:	e001      	b.n	80011ae <HAL_InitTick+0x62>
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e02b      	b.n	8001206 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011ae:	f004 fe2b 	bl	8005e08 <HAL_RCC_GetPCLK1Freq>
 80011b2:	63f8      	str	r0, [r7, #60]	; 0x3c
 80011b4:	e004      	b.n	80011c0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011b6:	f004 fe27 	bl	8005e08 <HAL_RCC_GetPCLK1Freq>
 80011ba:	4603      	mov	r3, r0
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011c2:	4a15      	ldr	r2, [pc, #84]	; (8001218 <HAL_InitTick+0xcc>)
 80011c4:	fba2 2303 	umull	r2, r3, r2, r3
 80011c8:	0c9b      	lsrs	r3, r3, #18
 80011ca:	3b01      	subs	r3, #1
 80011cc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011ce:	4b13      	ldr	r3, [pc, #76]	; (800121c <HAL_InitTick+0xd0>)
 80011d0:	4a13      	ldr	r2, [pc, #76]	; (8001220 <HAL_InitTick+0xd4>)
 80011d2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <HAL_InitTick+0xd0>)
 80011d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011da:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011dc:	4a0f      	ldr	r2, [pc, #60]	; (800121c <HAL_InitTick+0xd0>)
 80011de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <HAL_InitTick+0xd0>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <HAL_InitTick+0xd0>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80011ee:	480b      	ldr	r0, [pc, #44]	; (800121c <HAL_InitTick+0xd0>)
 80011f0:	f006 f9d0 	bl	8007594 <HAL_TIM_Base_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d104      	bne.n	8001204 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80011fa:	4808      	ldr	r0, [pc, #32]	; (800121c <HAL_InitTick+0xd0>)
 80011fc:	f006 fa2c 	bl	8007658 <HAL_TIM_Base_Start_IT>
 8001200:	4603      	mov	r3, r0
 8001202:	e000      	b.n	8001206 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
}
 8001206:	4618      	mov	r0, r3
 8001208:	3740      	adds	r7, #64	; 0x40
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2400000c 	.word	0x2400000c
 8001214:	58024400 	.word	0x58024400
 8001218:	431bde83 	.word	0x431bde83
 800121c:	24000344 	.word	0x24000344
 8001220:	40001000 	.word	0x40001000

08001224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <NMI_Handler+0x4>

0800122a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <HardFault_Handler+0x4>

08001230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <MemManage_Handler+0x4>

08001236 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <BusFault_Handler+0x4>

0800123c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <UsageFault_Handler+0x4>

08001242 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <FDCAN1_IT0_IRQHandler+0x10>)
 8001256:	f002 ff0b 	bl	8004070 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	240001fc 	.word	0x240001fc

08001264 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <FDCAN2_IT0_IRQHandler+0x10>)
 800126a:	f002 ff01 	bl	8004070 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2400029c 	.word	0x2400029c

08001278 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <TIM6_DAC_IRQHandler+0x10>)
 800127e:	f006 fa63 	bl	8007748 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	24000344 	.word	0x24000344

0800128c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <ETH_IRQHandler+0x10>)
 8001292:	f001 f88d 	bl	80023b0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	24000418 	.word	0x24000418

080012a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
	return 1;
 80012a4:	2301      	movs	r3, #1
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <_kill>:

int _kill(int pid, int sig)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <_kill+0x20>)
 80012bc:	2216      	movs	r2, #22
 80012be:	601a      	str	r2, [r3, #0]
	return -1;
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	24008bec 	.word	0x24008bec

080012d4 <_exit>:

void _exit (int status)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ffe5 	bl	80012b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012e6:	e7fe      	b.n	80012e6 <_exit+0x12>

080012e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	e00a      	b.n	8001310 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012fa:	f3af 8000 	nop.w
 80012fe:	4601      	mov	r1, r0
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	60ba      	str	r2, [r7, #8]
 8001306:	b2ca      	uxtb	r2, r1
 8001308:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	3301      	adds	r3, #1
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	697a      	ldr	r2, [r7, #20]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	429a      	cmp	r2, r3
 8001316:	dbf0      	blt.n	80012fa <_read+0x12>
	}

return len;
 8001318:	687b      	ldr	r3, [r7, #4]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3718      	adds	r7, #24
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	e009      	b.n	8001348 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	1c5a      	adds	r2, r3, #1
 8001338:	60ba      	str	r2, [r7, #8]
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	3301      	adds	r3, #1
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	429a      	cmp	r2, r3
 800134e:	dbf1      	blt.n	8001334 <_write+0x12>
	}
	return len;
 8001350:	687b      	ldr	r3, [r7, #4]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <_close>:

int _close(int file)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
	return -1;
 8001362:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001366:	4618      	mov	r0, r3
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001382:	605a      	str	r2, [r3, #4]
	return 0;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <_isatty>:

int _isatty(int file)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
	return 1;
 800139a:	2301      	movs	r3, #1
}
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
	return 0;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b087      	sub	sp, #28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013cc:	4a14      	ldr	r2, [pc, #80]	; (8001420 <_sbrk+0x5c>)
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <_sbrk+0x60>)
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <_sbrk+0x64>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <_sbrk+0x68>)
 80013e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d205      	bcs.n	8001400 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <_sbrk+0x6c>)
 80013f6:	220c      	movs	r2, #12
 80013f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	e009      	b.n	8001414 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001400:	4b09      	ldr	r3, [pc, #36]	; (8001428 <_sbrk+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <_sbrk+0x64>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	4a06      	ldr	r2, [pc, #24]	; (8001428 <_sbrk+0x64>)
 8001410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001412:	68fb      	ldr	r3, [r7, #12]
}
 8001414:	4618      	mov	r0, r3
 8001416:	371c      	adds	r7, #28
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	24080000 	.word	0x24080000
 8001424:	00000400 	.word	0x00000400
 8001428:	24000390 	.word	0x24000390
 800142c:	24008bf0 	.word	0x24008bf0
 8001430:	24008bec 	.word	0x24008bec

08001434 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800143a:	4b3f      	ldr	r3, [pc, #252]	; (8001538 <SystemInit+0x104>)
 800143c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001440:	4a3d      	ldr	r2, [pc, #244]	; (8001538 <SystemInit+0x104>)
 8001442:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001446:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800144a:	4b3c      	ldr	r3, [pc, #240]	; (800153c <SystemInit+0x108>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	2b06      	cmp	r3, #6
 8001454:	d807      	bhi.n	8001466 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001456:	4b39      	ldr	r3, [pc, #228]	; (800153c <SystemInit+0x108>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 030f 	bic.w	r3, r3, #15
 800145e:	4a37      	ldr	r2, [pc, #220]	; (800153c <SystemInit+0x108>)
 8001460:	f043 0307 	orr.w	r3, r3, #7
 8001464:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001466:	4b36      	ldr	r3, [pc, #216]	; (8001540 <SystemInit+0x10c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a35      	ldr	r2, [pc, #212]	; (8001540 <SystemInit+0x10c>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001472:	4b33      	ldr	r3, [pc, #204]	; (8001540 <SystemInit+0x10c>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001478:	4b31      	ldr	r3, [pc, #196]	; (8001540 <SystemInit+0x10c>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	4930      	ldr	r1, [pc, #192]	; (8001540 <SystemInit+0x10c>)
 800147e:	4b31      	ldr	r3, [pc, #196]	; (8001544 <SystemInit+0x110>)
 8001480:	4013      	ands	r3, r2
 8001482:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001484:	4b2d      	ldr	r3, [pc, #180]	; (800153c <SystemInit+0x108>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0308 	and.w	r3, r3, #8
 800148c:	2b00      	cmp	r3, #0
 800148e:	d007      	beq.n	80014a0 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001490:	4b2a      	ldr	r3, [pc, #168]	; (800153c <SystemInit+0x108>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f023 030f 	bic.w	r3, r3, #15
 8001498:	4a28      	ldr	r2, [pc, #160]	; (800153c <SystemInit+0x108>)
 800149a:	f043 0307 	orr.w	r3, r3, #7
 800149e:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80014a0:	4b27      	ldr	r3, [pc, #156]	; (8001540 <SystemInit+0x10c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80014a6:	4b26      	ldr	r3, [pc, #152]	; (8001540 <SystemInit+0x10c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80014ac:	4b24      	ldr	r3, [pc, #144]	; (8001540 <SystemInit+0x10c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80014b2:	4b23      	ldr	r3, [pc, #140]	; (8001540 <SystemInit+0x10c>)
 80014b4:	4a24      	ldr	r2, [pc, #144]	; (8001548 <SystemInit+0x114>)
 80014b6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80014b8:	4b21      	ldr	r3, [pc, #132]	; (8001540 <SystemInit+0x10c>)
 80014ba:	4a24      	ldr	r2, [pc, #144]	; (800154c <SystemInit+0x118>)
 80014bc:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80014be:	4b20      	ldr	r3, [pc, #128]	; (8001540 <SystemInit+0x10c>)
 80014c0:	4a23      	ldr	r2, [pc, #140]	; (8001550 <SystemInit+0x11c>)
 80014c2:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80014c4:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <SystemInit+0x10c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80014ca:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <SystemInit+0x10c>)
 80014cc:	4a20      	ldr	r2, [pc, #128]	; (8001550 <SystemInit+0x11c>)
 80014ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <SystemInit+0x10c>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80014d6:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <SystemInit+0x10c>)
 80014d8:	4a1d      	ldr	r2, [pc, #116]	; (8001550 <SystemInit+0x11c>)
 80014da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80014dc:	4b18      	ldr	r3, [pc, #96]	; (8001540 <SystemInit+0x10c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014e2:	4b17      	ldr	r3, [pc, #92]	; (8001540 <SystemInit+0x10c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a16      	ldr	r2, [pc, #88]	; (8001540 <SystemInit+0x10c>)
 80014e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <SystemInit+0x10c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80014f4:	4b17      	ldr	r3, [pc, #92]	; (8001554 <SystemInit+0x120>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b17      	ldr	r3, [pc, #92]	; (8001558 <SystemInit+0x124>)
 80014fa:	4013      	ands	r3, r2
 80014fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001500:	d202      	bcs.n	8001508 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001502:	4b16      	ldr	r3, [pc, #88]	; (800155c <SystemInit+0x128>)
 8001504:	2201      	movs	r2, #1
 8001506:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8001508:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <SystemInit+0x10c>)
 800150a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800150e:	4a0c      	ldr	r2, [pc, #48]	; (8001540 <SystemInit+0x10c>)
 8001510:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8001514:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <SystemInit+0x10c>)
 800151a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800151e:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8001520:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <SystemInit+0x12c>)
 8001524:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001528:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800152a:	bf00      	nop
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	e000ed00 	.word	0xe000ed00
 800153c:	52002000 	.word	0x52002000
 8001540:	58024400 	.word	0x58024400
 8001544:	eaf6ed7f 	.word	0xeaf6ed7f
 8001548:	02020200 	.word	0x02020200
 800154c:	01ff0000 	.word	0x01ff0000
 8001550:	01010280 	.word	0x01010280
 8001554:	5c001000 	.word	0x5c001000
 8001558:	ffff0000 	.word	0xffff0000
 800155c:	51008108 	.word	0x51008108
 8001560:	52004000 	.word	0x52004000

08001564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001564:	f8df d034 	ldr.w	sp, [pc, #52]	; 800159c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001568:	f7ff ff64 	bl	8001434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800156c:	480c      	ldr	r0, [pc, #48]	; (80015a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800156e:	490d      	ldr	r1, [pc, #52]	; (80015a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001570:	4a0d      	ldr	r2, [pc, #52]	; (80015a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001574:	e002      	b.n	800157c <LoopCopyDataInit>

08001576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157a:	3304      	adds	r3, #4

0800157c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800157c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001580:	d3f9      	bcc.n	8001576 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001582:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001584:	4c0a      	ldr	r4, [pc, #40]	; (80015b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001588:	e001      	b.n	800158e <LoopFillZerobss>

0800158a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800158c:	3204      	adds	r2, #4

0800158e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001590:	d3fb      	bcc.n	800158a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001592:	f017 fa03 	bl	801899c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001596:	f7ff fa01 	bl	800099c <main>
  bx  lr
 800159a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800159c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80015a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80015a4:	2400009c 	.word	0x2400009c
  ldr r2, =_sidata
 80015a8:	0801ed24 	.word	0x0801ed24
  ldr r2, =_sbss
 80015ac:	2400009c 	.word	0x2400009c
  ldr r4, =_ebss
 80015b0:	24008bf0 	.word	0x24008bf0

080015b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC3_IRQHandler>

080015b6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80015b6:	b480      	push	{r7}
 80015b8:	b083      	sub	sp, #12
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00b      	beq.n	80015de <LAN8742_RegisterBusIO+0x28>
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d007      	beq.n	80015de <LAN8742_RegisterBusIO+0x28>
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <LAN8742_RegisterBusIO+0x28>
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d102      	bne.n	80015e4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	e014      	b.n	800160e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	691a      	ldr	r2, [r3, #16]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800161a:	b580      	push	{r7, lr}
 800161c:	b086      	sub	sp, #24
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d17c      	bne.n	8001734 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d002      	beq.n	8001648 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2220      	movs	r2, #32
 800164c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800164e:	2300      	movs	r3, #0
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	e01c      	b.n	800168e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	f107 0208 	add.w	r2, r7, #8
 800165c:	2112      	movs	r1, #18
 800165e:	6978      	ldr	r0, [r7, #20]
 8001660:	4798      	blx	r3
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	da03      	bge.n	8001670 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001668:	f06f 0304 	mvn.w	r3, #4
 800166c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800166e:	e00b      	b.n	8001688 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	f003 031f 	and.w	r3, r3, #31
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	429a      	cmp	r2, r3
 800167a:	d105      	bne.n	8001688 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	697a      	ldr	r2, [r7, #20]
 8001680:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
         break;
 8001686:	e005      	b.n	8001694 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	3301      	adds	r3, #1
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2b1f      	cmp	r3, #31
 8001692:	d9df      	bls.n	8001654 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b1f      	cmp	r3, #31
 800169a:	d902      	bls.n	80016a2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800169c:	f06f 0302 	mvn.w	r3, #2
 80016a0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d145      	bne.n	8001734 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6810      	ldr	r0, [r2, #0]
 80016b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016b4:	2100      	movs	r1, #0
 80016b6:	4798      	blx	r3
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	db37      	blt.n	800172e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6810      	ldr	r0, [r2, #0]
 80016c6:	f107 0208 	add.w	r2, r7, #8
 80016ca:	2100      	movs	r1, #0
 80016cc:	4798      	blx	r3
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db28      	blt.n	8001726 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	4798      	blx	r3
 80016da:	4603      	mov	r3, r0
 80016dc:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80016de:	e01c      	b.n	800171a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	4798      	blx	r3
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016f2:	d80e      	bhi.n	8001712 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6810      	ldr	r0, [r2, #0]
 80016fc:	f107 0208 	add.w	r2, r7, #8
 8001700:	2100      	movs	r1, #0
 8001702:	4798      	blx	r3
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	da07      	bge.n	800171a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800170a:	f06f 0304 	mvn.w	r3, #4
 800170e:	613b      	str	r3, [r7, #16]
                 break;
 8001710:	e010      	b.n	8001734 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001712:	f06f 0301 	mvn.w	r3, #1
 8001716:	613b      	str	r3, [r7, #16]
               break;
 8001718:	e00c      	b.n	8001734 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1dd      	bne.n	80016e0 <LAN8742_Init+0xc6>
 8001724:	e006      	b.n	8001734 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001726:	f06f 0304 	mvn.w	r3, #4
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	e002      	b.n	8001734 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800172e:	f06f 0303 	mvn.w	r3, #3
 8001732:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d112      	bne.n	8001760 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	4798      	blx	r3
 8001740:	4603      	mov	r3, r0
 8001742:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001744:	bf00      	nop
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	4798      	blx	r3
 800174c:	4603      	mov	r3, r0
 800174e:	461a      	mov	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001758:	d9f5      	bls.n	8001746 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001760:	693b      	ldr	r3, [r7, #16]
 }
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6810      	ldr	r0, [r2, #0]
 800177e:	f107 020c 	add.w	r2, r7, #12
 8001782:	2101      	movs	r1, #1
 8001784:	4798      	blx	r3
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	da02      	bge.n	8001792 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800178c:	f06f 0304 	mvn.w	r3, #4
 8001790:	e06e      	b.n	8001870 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6810      	ldr	r0, [r2, #0]
 800179a:	f107 020c 	add.w	r2, r7, #12
 800179e:	2101      	movs	r1, #1
 80017a0:	4798      	blx	r3
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	da02      	bge.n	80017ae <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80017a8:	f06f 0304 	mvn.w	r3, #4
 80017ac:	e060      	b.n	8001870 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80017b8:	2301      	movs	r3, #1
 80017ba:	e059      	b.n	8001870 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6810      	ldr	r0, [r2, #0]
 80017c4:	f107 020c 	add.w	r2, r7, #12
 80017c8:	2100      	movs	r1, #0
 80017ca:	4798      	blx	r3
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	da02      	bge.n	80017d8 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80017d2:	f06f 0304 	mvn.w	r3, #4
 80017d6:	e04b      	b.n	8001870 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d11b      	bne.n	800181a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d006      	beq.n	80017fa <LAN8742_GetLinkState+0x90>
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80017f6:	2302      	movs	r3, #2
 80017f8:	e03a      	b.n	8001870 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001804:	2303      	movs	r3, #3
 8001806:	e033      	b.n	8001870 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001812:	2304      	movs	r3, #4
 8001814:	e02c      	b.n	8001870 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001816:	2305      	movs	r3, #5
 8001818:	e02a      	b.n	8001870 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6810      	ldr	r0, [r2, #0]
 8001822:	f107 020c 	add.w	r2, r7, #12
 8001826:	211f      	movs	r1, #31
 8001828:	4798      	blx	r3
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	da02      	bge.n	8001836 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001830:	f06f 0304 	mvn.w	r3, #4
 8001834:	e01c      	b.n	8001870 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001840:	2306      	movs	r3, #6
 8001842:	e015      	b.n	8001870 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 031c 	and.w	r3, r3, #28
 800184a:	2b18      	cmp	r3, #24
 800184c:	d101      	bne.n	8001852 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800184e:	2302      	movs	r3, #2
 8001850:	e00e      	b.n	8001870 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f003 031c 	and.w	r3, r3, #28
 8001858:	2b08      	cmp	r3, #8
 800185a:	d101      	bne.n	8001860 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800185c:	2303      	movs	r3, #3
 800185e:	e007      	b.n	8001870 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 031c 	and.w	r3, r3, #28
 8001866:	2b14      	cmp	r3, #20
 8001868:	d101      	bne.n	800186e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800186a:	2304      	movs	r3, #4
 800186c:	e000      	b.n	8001870 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800186e:	2305      	movs	r3, #5
    }				
  }
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800187e:	2003      	movs	r0, #3
 8001880:	f000 f923 	bl	8001aca <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001884:	f004 f916 	bl	8005ab4 <HAL_RCC_GetSysClockFreq>
 8001888:	4602      	mov	r2, r0
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <HAL_Init+0x68>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	0a1b      	lsrs	r3, r3, #8
 8001890:	f003 030f 	and.w	r3, r3, #15
 8001894:	4913      	ldr	r1, [pc, #76]	; (80018e4 <HAL_Init+0x6c>)
 8001896:	5ccb      	ldrb	r3, [r1, r3]
 8001898:	f003 031f 	and.w	r3, r3, #31
 800189c:	fa22 f303 	lsr.w	r3, r2, r3
 80018a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <HAL_Init+0x68>)
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <HAL_Init+0x6c>)
 80018ac:	5cd3      	ldrb	r3, [r2, r3]
 80018ae:	f003 031f 	and.w	r3, r3, #31
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	fa22 f303 	lsr.w	r3, r2, r3
 80018b8:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <HAL_Init+0x70>)
 80018ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018bc:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <HAL_Init+0x74>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018c2:	200f      	movs	r0, #15
 80018c4:	f7ff fc42 	bl	800114c <HAL_InitTick>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e002      	b.n	80018d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018d2:	f7ff fb3f 	bl	8000f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	58024400 	.word	0x58024400
 80018e4:	0801c844 	.word	0x0801c844
 80018e8:	24000008 	.word	0x24000008
 80018ec:	24000004 	.word	0x24000004

080018f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_IncTick+0x20>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_IncTick+0x24>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4413      	add	r3, r2
 8001900:	4a04      	ldr	r2, [pc, #16]	; (8001914 <HAL_IncTick+0x24>)
 8001902:	6013      	str	r3, [r2, #0]
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	24000010 	.word	0x24000010
 8001914:	24000394 	.word	0x24000394

08001918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return uwTick;
 800191c:	4b03      	ldr	r3, [pc, #12]	; (800192c <HAL_GetTick+0x14>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	24000394 	.word	0x24000394

08001930 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_GetREVID+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	0c1b      	lsrs	r3, r3, #16
}
 800193a:	4618      	mov	r0, r3
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	5c001000 	.word	0x5c001000

08001948 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001950:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001958:	4904      	ldr	r1, [pc, #16]	; (800196c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4313      	orrs	r3, r2
 800195e:	604b      	str	r3, [r1, #4]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	58000400 	.word	0x58000400

08001970 <__NVIC_SetPriorityGrouping>:
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800198c:	4013      	ands	r3, r2
 800198e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	4313      	orrs	r3, r2
 800199c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199e:	4a04      	ldr	r2, [pc, #16]	; (80019b0 <__NVIC_SetPriorityGrouping+0x40>)
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	60d3      	str	r3, [r2, #12]
}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000ed00 	.word	0xe000ed00
 80019b4:	05fa0000 	.word	0x05fa0000

080019b8 <__NVIC_GetPriorityGrouping>:
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <__NVIC_GetPriorityGrouping+0x18>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	f003 0307 	and.w	r3, r3, #7
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_EnableIRQ>:
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	db0b      	blt.n	80019fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	f003 021f 	and.w	r2, r3, #31
 80019ec:	4907      	ldr	r1, [pc, #28]	; (8001a0c <__NVIC_EnableIRQ+0x38>)
 80019ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	2001      	movs	r0, #1
 80019f6:	fa00 f202 	lsl.w	r2, r0, r2
 80019fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000e100 	.word	0xe000e100

08001a10 <__NVIC_SetPriority>:
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	db0a      	blt.n	8001a3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	490c      	ldr	r1, [pc, #48]	; (8001a5c <__NVIC_SetPriority+0x4c>)
 8001a2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a2e:	0112      	lsls	r2, r2, #4
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	440b      	add	r3, r1
 8001a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a38:	e00a      	b.n	8001a50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4908      	ldr	r1, [pc, #32]	; (8001a60 <__NVIC_SetPriority+0x50>)
 8001a40:	88fb      	ldrh	r3, [r7, #6]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	3b04      	subs	r3, #4
 8001a48:	0112      	lsls	r2, r2, #4
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	761a      	strb	r2, [r3, #24]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000e100 	.word	0xe000e100
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <NVIC_EncodePriority>:
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f1c3 0307 	rsb	r3, r3, #7
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	bf28      	it	cs
 8001a82:	2304      	movcs	r3, #4
 8001a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	2b06      	cmp	r3, #6
 8001a8c:	d902      	bls.n	8001a94 <NVIC_EncodePriority+0x30>
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3b03      	subs	r3, #3
 8001a92:	e000      	b.n	8001a96 <NVIC_EncodePriority+0x32>
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	f04f 32ff 	mov.w	r2, #4294967295
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aac:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab6:	43d9      	mvns	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	4313      	orrs	r3, r2
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3724      	adds	r7, #36	; 0x24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff ff4c 	bl	8001970 <__NVIC_SetPriorityGrouping>
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001aee:	f7ff ff63 	bl	80019b8 <__NVIC_GetPriorityGrouping>
 8001af2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	68b9      	ldr	r1, [r7, #8]
 8001af8:	6978      	ldr	r0, [r7, #20]
 8001afa:	f7ff ffb3 	bl	8001a64 <NVIC_EncodePriority>
 8001afe:	4602      	mov	r2, r0
 8001b00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b04:	4611      	mov	r1, r2
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff ff82 	bl	8001a10 <__NVIC_SetPriority>
}
 8001b0c:	bf00      	nop
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff ff56 	bl	80019d4 <__NVIC_EnableIRQ>
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b34:	f3bf 8f5f 	dmb	sy
}
 8001b38:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001b3a:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <HAL_MPU_Disable+0x28>)
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	4a06      	ldr	r2, [pc, #24]	; (8001b58 <HAL_MPU_Disable+0x28>)
 8001b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b44:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001b46:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <HAL_MPU_Disable+0x2c>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	605a      	str	r2, [r3, #4]
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000ed00 	.word	0xe000ed00
 8001b5c:	e000ed90 	.word	0xe000ed90

08001b60 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001b68:	4a0b      	ldr	r2, [pc, #44]	; (8001b98 <HAL_MPU_Enable+0x38>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_MPU_Enable+0x3c>)
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	4a09      	ldr	r2, [pc, #36]	; (8001b9c <HAL_MPU_Enable+0x3c>)
 8001b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001b7e:	f3bf 8f4f 	dsb	sy
}
 8001b82:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b84:	f3bf 8f6f 	isb	sy
}
 8001b88:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000ed90 	.word	0xe000ed90
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	785a      	ldrb	r2, [r3, #1]
 8001bac:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <HAL_MPU_ConfigRegion+0x84>)
 8001bae:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d029      	beq.n	8001c0c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001bb8:	4a1a      	ldr	r2, [pc, #104]	; (8001c24 <HAL_MPU_ConfigRegion+0x84>)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	7b1b      	ldrb	r3, [r3, #12]
 8001bc4:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	7adb      	ldrb	r3, [r3, #11]
 8001bca:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001bcc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	7a9b      	ldrb	r3, [r3, #10]
 8001bd2:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001bd4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	7b5b      	ldrb	r3, [r3, #13]
 8001bda:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001bdc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	7b9b      	ldrb	r3, [r3, #14]
 8001be2:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001be4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	7bdb      	ldrb	r3, [r3, #15]
 8001bea:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001bec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	7a5b      	ldrb	r3, [r3, #9]
 8001bf2:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001bf4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	7a1b      	ldrb	r3, [r3, #8]
 8001bfa:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001bfc:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	7812      	ldrb	r2, [r2, #0]
 8001c02:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c04:	4a07      	ldr	r2, [pc, #28]	; (8001c24 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c06:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c08:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001c0a:	e005      	b.n	8001c18 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_MPU_ConfigRegion+0x84>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001c12:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <HAL_MPU_ConfigRegion+0x84>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000ed90 	.word	0xe000ed90

08001c28 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e0cf      	b.n	8001dda <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d106      	bne.n	8001c52 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2223      	movs	r2, #35	; 0x23
 8001c48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f006 fb71 	bl	8008334 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c52:	4b64      	ldr	r3, [pc, #400]	; (8001de4 <HAL_ETH_Init+0x1bc>)
 8001c54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c58:	4a62      	ldr	r2, [pc, #392]	; (8001de4 <HAL_ETH_Init+0x1bc>)
 8001c5a:	f043 0302 	orr.w	r3, r3, #2
 8001c5e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c62:	4b60      	ldr	r3, [pc, #384]	; (8001de4 <HAL_ETH_Init+0x1bc>)
 8001c64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	7a1b      	ldrb	r3, [r3, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d103      	bne.n	8001c80 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f7ff fe65 	bl	8001948 <HAL_SYSCFG_ETHInterfaceSelect>
 8001c7e:	e003      	b.n	8001c88 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001c80:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001c84:	f7ff fe60 	bl	8001948 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001c88:	4b57      	ldr	r3, [pc, #348]	; (8001de8 <HAL_ETH_Init+0x1c0>)
 8001c8a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ca2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ca4:	f7ff fe38 	bl	8001918 <HAL_GetTick>
 8001ca8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001caa:	e011      	b.n	8001cd0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001cac:	f7ff fe34 	bl	8001918 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001cba:	d909      	bls.n	8001cd0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	22e0      	movs	r2, #224	; 0xe0
 8001cc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e084      	b.n	8001dda <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1e4      	bne.n	8001cac <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 ff28 	bl	8002b38 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001ce8:	f004 f85e 	bl	8005da8 <HAL_RCC_GetHCLKFreq>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4a3f      	ldr	r2, [pc, #252]	; (8001dec <HAL_ETH_Init+0x1c4>)
 8001cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf4:	0c9a      	lsrs	r2, r3, #18
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	3a01      	subs	r2, #1
 8001cfc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f001 f921 	bl	8002f48 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d0e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001d12:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001d16:	687a      	ldr	r2, [r7, #4]
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d22:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d009      	beq.n	8001d46 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	22e0      	movs	r2, #224	; 0xe0
 8001d3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e049      	b.n	8001dda <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d4e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001d52:	4b27      	ldr	r3, [pc, #156]	; (8001df0 <HAL_ETH_Init+0x1c8>)
 8001d54:	4013      	ands	r3, r2
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6952      	ldr	r2, [r2, #20]
 8001d5a:	0051      	lsls	r1, r2, #1
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	430b      	orrs	r3, r1
 8001d62:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d66:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f001 f989 	bl	8003082 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f001 f9cf 	bl	8003114 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	3305      	adds	r3, #5
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	021a      	lsls	r2, r3, #8
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	3304      	adds	r3, #4
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	3303      	adds	r3, #3
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	061a      	lsls	r2, r3, #24
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	3302      	adds	r3, #2
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	041b      	lsls	r3, r3, #16
 8001da8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	3301      	adds	r3, #1
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001db4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001dc2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001dc4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2210      	movs	r2, #16
 8001dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	58024400 	.word	0x58024400
 8001de8:	58000400 	.word	0x58000400
 8001dec:	431bde83 	.word	0x431bde83
 8001df0:	ffff8001 	.word	0xffff8001

08001df4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e02:	2b10      	cmp	r3, #16
 8001e04:	d179      	bne.n	8001efa <HAL_ETH_Start_IT+0x106>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2223      	movs	r2, #35	; 0x23
 8001e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <HAL_ETH_Start_IT+0x110>)
 8001e22:	430b      	orrs	r3, r1
 8001e24:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
            ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b34      	ldr	r3, [pc, #208]	; (8001f08 <HAL_ETH_Start_IT+0x114>)
 8001e36:	430b      	orrs	r3, r1
 8001e38:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
            ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2204      	movs	r2, #4
 8001e40:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 f9eb 	bl	800221e <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0202 	orr.w	r2, r2, #2
 8001e56:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0201 	orr.w	r2, r2, #1
 8001e66:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f042 0201 	orr.w	r2, r2, #1
 8001e78:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e84:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e94:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001eb0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ebc:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 8001ec8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ecc:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed8:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	f24d 03c1 	movw	r3, #53441	; 0xd0c1
 8001ee4:	430b      	orrs	r3, r1
 8001ee6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001eea:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2223      	movs	r2, #35	; 0x23
 8001ef2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e000      	b.n	8001efc <HAL_ETH_Start_IT+0x108>
  }
  else
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
  }
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	0c020060 	.word	0x0c020060
 8001f08:	0c20c000 	.word	0x0c20c000

08001f0c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f1a:	2b23      	cmp	r3, #35	; 0x23
 8001f1c:	d165      	bne.n	8001fea <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2223      	movs	r2, #35	; 0x23
 8001f22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f2e:	f8d3 1134 	ldr.w	r1, [r3, #308]	; 0x134
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	4b30      	ldr	r3, [pc, #192]	; (8001ff8 <HAL_ETH_Stop_IT+0xec>)
 8001f38:	400b      	ands	r3, r1
 8001f3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f3e:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f4a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f5a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	f023 0301 	bic.w	r3, r3, #1
 8001f72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f76:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f022 0201 	bic.w	r2, r2, #1
 8001f88:	601a      	str	r2, [r3, #0]
    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0201 	orr.w	r2, r2, #1
 8001f9a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0202 	bic.w	r2, r2, #2
 8001fac:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	e00e      	b.n	8001fd2 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	3212      	adds	r2, #18
 8001fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fbe:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d9ed      	bls.n	8001fb4 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2210      	movs	r2, #16
 8001fe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e000      	b.n	8001fec <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
  }
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	ffff2f3e 	.word	0xffff2f3e

08001ffc <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d109      	bne.n	8002020 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002012:	f043 0201 	orr.w	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e03a      	b.n	8002096 <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002026:	2b23      	cmp	r3, #35	; 0x23
 8002028:	d134      	bne.n	8002094 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002032:	2201      	movs	r2, #1
 8002034:	6839      	ldr	r1, [r7, #0]
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f001 f8ca 	bl	80031d0 <ETH_Prepare_Tx_Descriptors>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d009      	beq.n	8002056 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002048:	f043 0202 	orr.w	r2, r3, #2
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e01f      	b.n	8002096 <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8002056:	f3bf 8f4f 	dsb	sy
}
 800205a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	629a      	str	r2, [r3, #40]	; 0x28
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206a:	2b03      	cmp	r3, #3
 800206c:	d904      	bls.n	8002078 <HAL_ETH_Transmit_IT+0x7c>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002072:	1f1a      	subs	r2, r3, #4
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3106      	adds	r1, #6
 8002084:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002088:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800208c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    return HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	e000      	b.n	8002096 <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
  }
}
 8002096:	4618      	mov	r0, r3
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b088      	sub	sp, #32
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80020ac:	2300      	movs	r3, #0
 80020ae:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d109      	bne.n	80020ca <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020bc:	f043 0201 	orr.w	r2, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e0a5      	b.n	8002216 <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020d0:	2b23      	cmp	r3, #35	; 0x23
 80020d2:	d001      	beq.n	80020d8 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e09e      	b.n	8002216 <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020dc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69fa      	ldr	r2, [r7, #28]
 80020e2:	3212      	adds	r2, #18
 80020e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e8:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020ee:	f1c3 0304 	rsb	r3, r3, #4
 80020f2:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80020f4:	e067      	b.n	80021c6 <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d007      	beq.n	8002112 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d103      	bne.n	8002126 <HAL_ETH_ReadData+0x88>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002122:	2b00      	cmp	r3, #0
 8002124:	d03d      	beq.n	80021a2 <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00d      	beq.n	800216c <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800217c:	461a      	mov	r2, r3
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	b29b      	uxth	r3, r3
 8002182:	f006 fa97 	bl	80086b4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	441a      	add	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3301      	adds	r3, #1
 80021a6:	61fb      	str	r3, [r7, #28]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d902      	bls.n	80021b4 <HAL_ETH_ReadData+0x116>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3b04      	subs	r3, #4
 80021b2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69fa      	ldr	r2, [r7, #28]
 80021b8:	3212      	adds	r2, #18
 80021ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021be:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	3301      	adds	r3, #1
 80021c4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	db06      	blt.n	80021dc <HAL_ETH_ReadData+0x13e>
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d202      	bcs.n	80021dc <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d08c      	beq.n	80020f6 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	441a      	add	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d002      	beq.n	80021f6 <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f814 	bl	800221e <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69fa      	ldr	r2, [r7, #28]
 80021fa:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d108      	bne.n	8002214 <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002210:	2300      	movs	r3, #0
 8002212:	e000      	b.n	8002216 <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
}
 8002216:	4618      	mov	r0, r3
 8002218:	3720      	adds	r7, #32
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b088      	sub	sp, #32
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800222a:	2301      	movs	r3, #1
 800222c:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002232:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	3212      	adds	r2, #18
 800223a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800223e:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002244:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002246:	e03b      	b.n	80022c0 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d112      	bne.n	8002276 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002250:	f107 030c 	add.w	r3, r7, #12
 8002254:	4618      	mov	r0, r3
 8002256:	f006 f9fd 	bl	8008654 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d102      	bne.n	8002266 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	74fb      	strb	r3, [r7, #19]
 8002264:	e007      	b.n	8002276 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	461a      	mov	r2, r3
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	461a      	mov	r2, r3
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8002276:	7cfb      	ldrb	r3, [r7, #19]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d021      	beq.n	80022c0 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 800227c:	f3bf 8f5f 	dmb	sy
}
 8002280:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002286:	2b00      	cmp	r3, #0
 8002288:	d004      	beq.n	8002294 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	e003      	b.n	800229c <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 800229a:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	3301      	adds	r3, #1
 80022a0:	61fb      	str	r3, [r7, #28]
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d902      	bls.n	80022ae <ETH_UpdateDescriptor+0x90>
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	3b04      	subs	r3, #4
 80022ac:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	69fa      	ldr	r2, [r7, #28]
 80022b2:	3212      	adds	r2, #18
 80022b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022b8:	617b      	str	r3, [r7, #20]
      desccount--;
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	3b01      	subs	r3, #1
 80022be:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d002      	beq.n	80022cc <ETH_UpdateDescriptor+0xae>
 80022c6:	7cfb      	ldrb	r3, [r7, #19]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1bd      	bne.n	8002248 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d00d      	beq.n	80022f2 <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022de:	461a      	mov	r2, r3
 80022e0:	2300      	movs	r3, #0
 80022e2:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69fa      	ldr	r2, [r7, #28]
 80022ea:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80022f2:	bf00      	nop
 80022f4:	3720      	adds	r7, #32
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3318      	adds	r3, #24
 8002306:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800230c:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002312:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002314:	2301      	movs	r3, #1
 8002316:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002318:	e03f      	b.n	800239a <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 800231a:	2301      	movs	r3, #1
 800231c:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	3b01      	subs	r3, #1
 8002322:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	3304      	adds	r3, #4
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	4413      	add	r3, r2
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d106      	bne.n	8002342 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	3301      	adds	r3, #1
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002342:	7bbb      	ldrb	r3, [r7, #14]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d028      	beq.n	800239a <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68d9      	ldr	r1, [r3, #12]
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4613      	mov	r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	4413      	add	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	440b      	add	r3, r1
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	db1b      	blt.n	8002396 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	3304      	adds	r3, #4
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	4618      	mov	r0, r3
 800236c:	f006 fa0a 	bl	8008784 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	3304      	adds	r3, #4
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	2200      	movs	r2, #0
 800237c:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	3301      	adds	r3, #1
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	62da      	str	r2, [r3, #44]	; 0x2c
 8002394:	e001      	b.n	800239a <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002396:	2300      	movs	r3, #0
 8002398:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <HAL_ETH_ReleaseTxPacket+0xac>
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1b9      	bne.n	800231a <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t macirqenable;
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023c0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80023c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c8:	2b40      	cmp	r3, #64	; 0x40
 80023ca:	d115      	bne.n	80023f8 <HAL_ETH_IRQHandler+0x48>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80023d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023dc:	2b40      	cmp	r3, #64	; 0x40
 80023de:	d10b      	bne.n	80023f8 <HAL_ETH_IRQHandler+0x48>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e8:	461a      	mov	r2, r3
 80023ea:	f248 0340 	movw	r3, #32832	; 0x8040
 80023ee:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f005 fd00 	bl	8007df8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002400:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b01      	cmp	r3, #1
 800240a:	d115      	bne.n	8002438 <HAL_ETH_IRQHandler+0x88>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002414:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b01      	cmp	r3, #1
 800241e:	d10b      	bne.n	8002438 <HAL_ETH_IRQHandler+0x88>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002428:	461a      	mov	r2, r3
 800242a:	f248 0301 	movw	r3, #32769	; 0x8001
 800242e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f005 fcf0 	bl	8007e18 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002440:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002448:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800244c:	d153      	bne.n	80024f6 <HAL_ETH_IRQHandler+0x146>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002456:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800245a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002462:	d148      	bne.n	80024f6 <HAL_ETH_IRQHandler+0x146>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	f043 0208 	orr.w	r2, r3, #8
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800247c:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8002480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002488:	d11e      	bne.n	80024c8 <HAL_ETH_IRQHandler+0x118>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002492:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8002496:	f241 1302 	movw	r3, #4354	; 0x1102
 800249a:	4013      	ands	r3, r2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024aa:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80024b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80024ba:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	22e0      	movs	r2, #224	; 0xe0
 80024c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80024c6:	e013      	b.n	80024f0 <HAL_ETH_IRQHandler+0x140>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024d0:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80024d4:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                                               ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024e6:	461a      	mov	r2, r3
 80024e8:	f44f 43cd 	mov.w	r3, #26240	; 0x6680
 80024ec:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f005 fca1 	bl	8007e38 <HAL_ETH_ErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  macirqenable = heth->Instance->MACIER;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80024fe:	60fb      	str	r3, [r7, #12]
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d104      	bne.n	8002514 <HAL_ETH_IRQHandler+0x164>
      ((macirqenable & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((macirqenable & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 8002510:	2b00      	cmp	r3, #0
 8002512:	d019      	beq.n	8002548 <HAL_ETH_IRQHandler+0x198>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251a:	f043 0210 	orr.w	r2, r3, #16
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	22e0      	movs	r2, #224	; 0xe0
 8002536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f005 fc7c 	bl	8007e38 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }

  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2b10      	cmp	r3, #16
 8002556:	d10f      	bne.n	8002578 <HAL_ETH_IRQHandler+0x1c8>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002560:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 f830 	bl	80025d0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }

  /* ETH EEE IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002580:	f003 0320 	and.w	r3, r3, #32
 8002584:	2b20      	cmp	r3, #32
 8002586:	d10f      	bne.n	80025a8 <HAL_ETH_IRQHandler+0x1f8>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002590:	f003 020f 	and.w	r2, r3, #15
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f822 	bl	80025e4 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* USE_HAL_ETH_REGISTER_CALLBACKS */
  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80025a8:	4b08      	ldr	r3, [pc, #32]	; (80025cc <HAL_ETH_IRQHandler+0x21c>)
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d006      	beq.n	80025c2 <HAL_ETH_IRQHandler+0x212>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_ETH_IRQHandler+0x21c>)
 80025b6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80025ba:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f81b 	bl	80025f8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
}
 80025c2:	bf00      	nop
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	58000080 	.word	0x58000080

080025d0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
 8002618:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e03e      	b.n	80026ac <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002636:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	055b      	lsls	r3, r3, #21
 8002642:	4313      	orrs	r3, r2
 8002644:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	041b      	lsls	r3, r3, #16
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f043 030c 	orr.w	r3, r3, #12
 800265a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 800266e:	f7ff f953 	bl	8001918 <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002674:	e009      	b.n	800268a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8002676:	f7ff f94f 	bl	8001918 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002684:	d901      	bls.n	800268a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e010      	b.n	80026ac <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1ed      	bne.n	8002676 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	607a      	str	r2, [r7, #4]
 80026c0:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e03c      	b.n	8002750 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026de:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	055b      	lsls	r3, r3, #21
 80026ea:	4313      	orrs	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	041b      	lsls	r3, r3, #16
 80026f8:	4313      	orrs	r3, r2
 80026fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f023 030c 	bic.w	r3, r3, #12
 8002702:	f043 0304 	orr.w	r3, r3, #4
 8002706:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	b29a      	uxth	r2, r3
 8002714:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HAL_ETH_WritePHYRegister+0xa4>)
 8002716:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800271a:	4a0f      	ldr	r2, [pc, #60]	; (8002758 <HAL_ETH_WritePHYRegister+0xa4>)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002722:	f7ff f8f9 	bl	8001918 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002728:	e009      	b.n	800273e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 800272a:	f7ff f8f5 	bl	8001918 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002738:	d901      	bls.n	800273e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e008      	b.n	8002750 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1ed      	bne.n	800272a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40028000 	.word	0x40028000

0800275c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e1c3      	b.n	8002af8 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 020c 	and.w	r2, r3, #12
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b00      	cmp	r3, #0
 800278a:	bf14      	ite	ne
 800278c:	2301      	movne	r3, #1
 800278e:	2300      	moveq	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	461a      	mov	r2, r3
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	bf0c      	ite	eq
 80027b6:	2301      	moveq	r3, #1
 80027b8:	2300      	movne	r3, #0
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	461a      	mov	r2, r3
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	bf14      	ite	ne
 80027d2:	2301      	movne	r3, #1
 80027d4:	2300      	moveq	r3, #0
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	bf0c      	ite	eq
 80027ec:	2301      	moveq	r3, #1
 80027ee:	2300      	movne	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	461a      	mov	r2, r3
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80027fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002802:	2b00      	cmp	r3, #0
 8002804:	bf14      	ite	ne
 8002806:	2301      	movne	r3, #1
 8002808:	2300      	moveq	r3, #0
 800280a:	b2db      	uxtb	r3, r3
 800280c:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800281c:	2b00      	cmp	r3, #0
 800281e:	bf14      	ite	ne
 8002820:	2301      	movne	r3, #1
 8002822:	2300      	moveq	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002852:	2b00      	cmp	r3, #0
 8002854:	bf14      	ite	ne
 8002856:	2301      	movne	r3, #1
 8002858:	2300      	moveq	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286c:	2b00      	cmp	r3, #0
 800286e:	bf0c      	ite	eq
 8002870:	2301      	moveq	r3, #1
 8002872:	2300      	movne	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	461a      	mov	r2, r3
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002886:	2b00      	cmp	r3, #0
 8002888:	bf0c      	ite	eq
 800288a:	2301      	moveq	r3, #1
 800288c:	2300      	movne	r3, #0
 800288e:	b2db      	uxtb	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf14      	ite	ne
 80028a4:	2301      	movne	r3, #1
 80028a6:	2300      	moveq	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	bf14      	ite	ne
 80028be:	2301      	movne	r3, #1
 80028c0:	2300      	moveq	r3, #0
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	461a      	mov	r2, r3
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	bf14      	ite	ne
 80028d8:	2301      	movne	r3, #1
 80028da:	2300      	moveq	r3, #0
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80028ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	bf14      	ite	ne
 80028f2:	2301      	movne	r3, #1
 80028f4:	2300      	moveq	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	bf14      	ite	ne
 800291a:	2301      	movne	r3, #1
 800291c:	2300      	moveq	r3, #0
 800291e:	b2db      	uxtb	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800294c:	2b00      	cmp	r3, #0
 800294e:	bf0c      	ite	eq
 8002950:	2301      	moveq	r3, #1
 8002952:	2300      	movne	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002968:	2b00      	cmp	r3, #0
 800296a:	bf14      	ite	ne
 800296c:	2301      	movne	r3, #1
 800296e:	2300      	moveq	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002984:	2b00      	cmp	r3, #0
 8002986:	bf14      	ite	ne
 8002988:	2301      	movne	r3, #1
 800298a:	2300      	moveq	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	bf14      	ite	ne
 80029a4:	2301      	movne	r3, #1
 80029a6:	2300      	moveq	r3, #0
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	0e5b      	lsrs	r3, r3, #25
 80029ba:	f003 021f 	and.w	r2, r3, #31
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	bf14      	ite	ne
 80029d0:	2301      	movne	r3, #1
 80029d2:	2300      	moveq	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	461a      	mov	r2, r3
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f003 020f 	and.w	r2, r3, #15
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	bf14      	ite	ne
 80029fa:	2301      	movne	r3, #1
 80029fc:	2300      	moveq	r3, #0
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	bf0c      	ite	eq
 8002a16:	2301      	moveq	r3, #1
 8002a18:	2300      	movne	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a38:	0c1b      	lsrs	r3, r3, #16
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	bf14      	ite	ne
 8002a50:	2301      	movne	r3, #1
 8002a52:	2300      	moveq	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a66:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	bf14      	ite	ne
 8002a6e:	2301      	movne	r3, #1
 8002a70:	2300      	moveq	r3, #0
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002a84:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002a94:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	bf14      	ite	ne
 8002aac:	2301      	movne	r3, #1
 8002aae:	2300      	moveq	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	bf14      	ite	ne
 8002aca:	2301      	movne	r3, #1
 8002acc:	2300      	moveq	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8002ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bf0c      	ite	eq
 8002ae8:	2301      	moveq	r3, #1
 8002aea:	2300      	movne	r3, #0
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e00b      	b.n	8002b30 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b1e:	2b10      	cmp	r3, #16
 8002b20:	d105      	bne.n	8002b2e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002b22:	6839      	ldr	r1, [r7, #0]
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f86d 	bl	8002c04 <ETH_SetMACConfig>

    return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	e000      	b.n	8002b30 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
  }
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002b48:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002b52:	f003 f929 	bl	8005da8 <HAL_RCC_GetHCLKFreq>
 8002b56:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	4a1e      	ldr	r2, [pc, #120]	; (8002bd4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d908      	bls.n	8002b72 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	4a1d      	ldr	r2, [pc, #116]	; (8002bd8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d804      	bhi.n	8002b72 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	e027      	b.n	8002bc2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	4a18      	ldr	r2, [pc, #96]	; (8002bd8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d908      	bls.n	8002b8c <HAL_ETH_SetMDIOClockRange+0x54>
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	4a17      	ldr	r2, [pc, #92]	; (8002bdc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d204      	bcs.n	8002b8c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	e01a      	b.n	8002bc2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	4a13      	ldr	r2, [pc, #76]	; (8002bdc <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d303      	bcc.n	8002b9c <HAL_ETH_SetMDIOClockRange+0x64>
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4a12      	ldr	r2, [pc, #72]	; (8002be0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d911      	bls.n	8002bc0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4a10      	ldr	r2, [pc, #64]	; (8002be0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d908      	bls.n	8002bb6 <HAL_ETH_SetMDIOClockRange+0x7e>
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4a0f      	ldr	r2, [pc, #60]	; (8002be4 <HAL_ETH_SetMDIOClockRange+0xac>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d804      	bhi.n	8002bb6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	e005      	b.n	8002bc2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	e000      	b.n	8002bc2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002bc0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002bcc:	bf00      	nop
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	01312cff 	.word	0x01312cff
 8002bd8:	02160ebf 	.word	0x02160ebf
 8002bdc:	03938700 	.word	0x03938700
 8002be0:	05f5e0ff 	.word	0x05f5e0ff
 8002be4:	08f0d17f 	.word	0x08f0d17f

08002be8 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002c16:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	791b      	ldrb	r3, [r3, #4]
 8002c1c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002c1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	7b1b      	ldrb	r3, [r3, #12]
 8002c24:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002c26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	7b5b      	ldrb	r3, [r3, #13]
 8002c2c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002c2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	7b9b      	ldrb	r3, [r3, #14]
 8002c34:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002c36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	7bdb      	ldrb	r3, [r3, #15]
 8002c3c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002c3e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	7c12      	ldrb	r2, [r2, #16]
 8002c44:	2a00      	cmp	r2, #0
 8002c46:	d102      	bne.n	8002c4e <ETH_SetMACConfig+0x4a>
 8002c48:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002c4c:	e000      	b.n	8002c50 <ETH_SetMACConfig+0x4c>
 8002c4e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002c50:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	7c52      	ldrb	r2, [r2, #17]
 8002c56:	2a00      	cmp	r2, #0
 8002c58:	d102      	bne.n	8002c60 <ETH_SetMACConfig+0x5c>
 8002c5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c5e:	e000      	b.n	8002c62 <ETH_SetMACConfig+0x5e>
 8002c60:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002c62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	7c9b      	ldrb	r3, [r3, #18]
 8002c68:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002c6a:	431a      	orrs	r2, r3
               macconf->Speed |
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002c70:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002c76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	7f1b      	ldrb	r3, [r3, #28]
 8002c7c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002c7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	7f5b      	ldrb	r3, [r3, #29]
 8002c84:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002c86:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	7f92      	ldrb	r2, [r2, #30]
 8002c8c:	2a00      	cmp	r2, #0
 8002c8e:	d102      	bne.n	8002c96 <ETH_SetMACConfig+0x92>
 8002c90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c94:	e000      	b.n	8002c98 <ETH_SetMACConfig+0x94>
 8002c96:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002c98:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	7fdb      	ldrb	r3, [r3, #31]
 8002c9e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002ca0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002ca8:	2a00      	cmp	r2, #0
 8002caa:	d102      	bne.n	8002cb2 <ETH_SetMACConfig+0xae>
 8002cac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cb0:	e000      	b.n	8002cb4 <ETH_SetMACConfig+0xb0>
 8002cb2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002cb4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002cba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002cc2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002cc4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4b56      	ldr	r3, [pc, #344]	; (8002e30 <ETH_SetMACConfig+0x22c>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	68f9      	ldr	r1, [r7, #12]
 8002cde:	430b      	orrs	r3, r1
 8002ce0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002cee:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002cf0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cf8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002cfa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002d02:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002d04:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002d0c:	2a00      	cmp	r2, #0
 8002d0e:	d102      	bne.n	8002d16 <ETH_SetMACConfig+0x112>
 8002d10:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d14:	e000      	b.n	8002d18 <ETH_SetMACConfig+0x114>
 8002d16:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002d18:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	4b42      	ldr	r3, [pc, #264]	; (8002e34 <ETH_SetMACConfig+0x230>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	68f9      	ldr	r1, [r7, #12]
 8002d32:	430b      	orrs	r3, r1
 8002d34:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d3c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68da      	ldr	r2, [r3, #12]
 8002d4c:	4b3a      	ldr	r3, [pc, #232]	; (8002e38 <ETH_SetMACConfig+0x234>)
 8002d4e:	4013      	ands	r3, r2
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	68f9      	ldr	r1, [r7, #12]
 8002d56:	430b      	orrs	r3, r1
 8002d58:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002d60:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002d66:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002d6e:	2a00      	cmp	r2, #0
 8002d70:	d101      	bne.n	8002d76 <ETH_SetMACConfig+0x172>
 8002d72:	2280      	movs	r2, #128	; 0x80
 8002d74:	e000      	b.n	8002d78 <ETH_SetMACConfig+0x174>
 8002d76:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002d78:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d7e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002d80:	4313      	orrs	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d8a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002d8e:	4013      	ands	r3, r2
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	68f9      	ldr	r1, [r7, #12]
 8002d96:	430b      	orrs	r3, r1
 8002d98:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002da0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8002da8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db6:	f023 0103 	bic.w	r1, r3, #3
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68fa      	ldr	r2, [r7, #12]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8002dce:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8002dea:	2a00      	cmp	r2, #0
 8002dec:	d101      	bne.n	8002df2 <ETH_SetMACConfig+0x1ee>
 8002dee:	2240      	movs	r2, #64	; 0x40
 8002df0:	e000      	b.n	8002df4 <ETH_SetMACConfig+0x1f0>
 8002df2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002df4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002dfc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002dfe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8002e06:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8002e14:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002e24:	bf00      	nop
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	00048083 	.word	0x00048083
 8002e34:	c0f88000 	.word	0xc0f88000
 8002e38:	fffffef0 	.word	0xfffffef0

08002e3c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4b38      	ldr	r3, [pc, #224]	; (8002f34 <ETH_SetDMAConfig+0xf8>)
 8002e52:	4013      	ands	r3, r2
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	6811      	ldr	r1, [r2, #0]
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e62:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	791b      	ldrb	r3, [r3, #4]
 8002e68:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002e6e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	7b1b      	ldrb	r3, [r3, #12]
 8002e74:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002e76:	4313      	orrs	r3, r2
 8002e78:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	4b2c      	ldr	r3, [pc, #176]	; (8002f38 <ETH_SetDMAConfig+0xfc>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	68f9      	ldr	r1, [r7, #12]
 8002e8e:	430b      	orrs	r3, r1
 8002e90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e94:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	7b5b      	ldrb	r3, [r3, #13]
 8002e9a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eac:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8002eb0:	4b22      	ldr	r3, [pc, #136]	; (8002f3c <ETH_SetDMAConfig+0x100>)
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6812      	ldr	r2, [r2, #0]
 8002eb8:	68f9      	ldr	r1, [r7, #12]
 8002eba:	430b      	orrs	r3, r1
 8002ebc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ec0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	7d1b      	ldrb	r3, [r3, #20]
 8002ecc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002ece:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	7f5b      	ldrb	r3, [r3, #29]
 8002ed4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ee2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8002ee6:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <ETH_SetDMAConfig+0x104>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6812      	ldr	r2, [r2, #0]
 8002eee:	68f9      	ldr	r1, [r7, #12]
 8002ef0:	430b      	orrs	r3, r1
 8002ef2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ef6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	7f1b      	ldrb	r3, [r3, #28]
 8002efe:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f10:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <ETH_SetDMAConfig+0x108>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	68f9      	ldr	r1, [r7, #12]
 8002f1e:	430b      	orrs	r3, r1
 8002f20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f24:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8002f28:	bf00      	nop
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	ffff87fd 	.word	0xffff87fd
 8002f38:	ffff2ffe 	.word	0xffff2ffe
 8002f3c:	fffec000 	.word	0xfffec000
 8002f40:	ffc0efef 	.word	0xffc0efef
 8002f44:	7fc0ffff 	.word	0x7fc0ffff

08002f48 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b0a4      	sub	sp, #144	; 0x90
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002f50:	2301      	movs	r3, #1
 8002f52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f56:	2300      	movs	r3, #0
 8002f58:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002f60:	2300      	movs	r3, #0
 8002f62:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002f66:	2301      	movs	r3, #1
 8002f68:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002f72:	2301      	movs	r3, #1
 8002f74:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f88:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002f94:	2300      	movs	r3, #0
 8002f96:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002fa0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002fa4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002fac:	2300      	movs	r3, #0
 8002fae:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002fe0:	2320      	movs	r3, #32
 8002fe2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002fec:	2300      	movs	r3, #0
 8002fee:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002ff2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002ff8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ffc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003004:	2302      	movs	r3, #2
 8003006:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800300a:	2300      	movs	r3, #0
 800300c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003010:	2300      	movs	r3, #0
 8003012:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003016:	2300      	movs	r3, #0
 8003018:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800301c:	2301      	movs	r3, #1
 800301e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003022:	2300      	movs	r3, #0
 8003024:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003026:	2301      	movs	r3, #1
 8003028:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800302c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003030:	4619      	mov	r1, r3
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7ff fde6 	bl	8002c04 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003038:	2301      	movs	r3, #1
 800303a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800303c:	2301      	movs	r3, #1
 800303e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003040:	2300      	movs	r3, #0
 8003042:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003044:	2300      	movs	r3, #0
 8003046:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800304a:	2300      	movs	r3, #0
 800304c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800304e:	2300      	movs	r3, #0
 8003050:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003052:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003056:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003058:	2300      	movs	r3, #0
 800305a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800305c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003060:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003062:	2300      	movs	r3, #0
 8003064:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003068:	f44f 7306 	mov.w	r3, #536	; 0x218
 800306c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800306e:	f107 0308 	add.w	r3, r7, #8
 8003072:	4619      	mov	r1, r3
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff fee1 	bl	8002e3c <ETH_SetDMAConfig>
}
 800307a:	bf00      	nop
 800307c:	3790      	adds	r7, #144	; 0x90
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003082:	b480      	push	{r7}
 8003084:	b085      	sub	sp, #20
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	e01d      	b.n	80030cc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68d9      	ldr	r1, [r3, #12]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4613      	mov	r3, r2
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	4413      	add	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	440b      	add	r3, r1
 80030a0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2200      	movs	r2, #0
 80030ac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	2200      	movs	r2, #0
 80030b2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2200      	movs	r2, #0
 80030b8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80030ba:	68b9      	ldr	r1, [r7, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	3206      	adds	r2, #6
 80030c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	3301      	adds	r3, #1
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d9de      	bls.n	8003090 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030e0:	461a      	mov	r2, r3
 80030e2:	2303      	movs	r3, #3
 80030e4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030f4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003104:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	e023      	b.n	800316a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6919      	ldr	r1, [r3, #16]
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4613      	mov	r3, r2
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	4413      	add	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	440b      	add	r3, r1
 8003132:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2200      	movs	r2, #0
 800313e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2200      	movs	r2, #0
 8003144:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	2200      	movs	r2, #0
 800314a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2200      	movs	r2, #0
 8003150:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2200      	movs	r2, #0
 8003156:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	3212      	adds	r2, #18
 8003160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	3301      	adds	r3, #1
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b03      	cmp	r3, #3
 800316e:	d9d8      	bls.n	8003122 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003196:	461a      	mov	r2, r3
 8003198:	2303      	movs	r3, #3
 800319a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691a      	ldr	r2, [r3, #16]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031aa:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031be:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80031c2:	bf00      	nop
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
	...

080031d0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b08d      	sub	sp, #52	; 0x34
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	3318      	adds	r3, #24
 80031e0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031fa:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800320e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003212:	d007      	beq.n	8003224 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	3304      	adds	r3, #4
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003224:	2302      	movs	r3, #2
 8003226:	e259      	b.n	80036dc <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d044      	beq.n	80032be <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	4b75      	ldr	r3, [pc, #468]	; (8003410 <ETH_Prepare_Tx_Descriptors+0x240>)
 800323a:	4013      	ands	r3, r2
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003240:	431a      	orrs	r2, r3
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003260:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d027      	beq.n	80032be <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	b29a      	uxth	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	041b      	lsls	r3, r3, #16
 800327a:	431a      	orrs	r2, r3
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003280:	6a3b      	ldr	r3, [r7, #32]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 800328c:	6a3b      	ldr	r3, [r7, #32]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	431a      	orrs	r2, r3
 800329a:	6a3b      	ldr	r3, [r7, #32]
 800329c:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80032ac:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80032bc:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0310 	and.w	r3, r3, #16
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00e      	beq.n	80032e8 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	4b51      	ldr	r3, [pc, #324]	; (8003414 <ETH_Prepare_Tx_Descriptors+0x244>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	6992      	ldr	r2, [r2, #24]
 80032d6:	431a      	orrs	r2, r3
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80032dc:	6a3b      	ldr	r3, [r7, #32]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d105      	bne.n	8003300 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d036      	beq.n	800336e <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003308:	6a3b      	ldr	r3, [r7, #32]
 800330a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800330c:	f3bf 8f5f 	dmb	sy
}
 8003310:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800331e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003320:	3301      	adds	r3, #1
 8003322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003326:	2b03      	cmp	r3, #3
 8003328:	d902      	bls.n	8003330 <ETH_Prepare_Tx_Descriptors+0x160>
 800332a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800332c:	3b04      	subs	r3, #4
 800332e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003338:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	3301      	adds	r3, #1
 800333e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003348:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800334c:	d10f      	bne.n	800336e <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003356:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8003358:	f3bf 8f5f 	dmb	sy
}
 800335c:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800336a:	2302      	movs	r3, #2
 800336c:	e1b6      	b.n	80036dc <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	3301      	adds	r3, #1
 8003372:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	461a      	mov	r2, r3
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	4b24      	ldr	r3, [pc, #144]	; (8003414 <ETH_Prepare_Tx_Descriptors+0x244>)
 8003384:	4013      	ands	r3, r2
 8003386:	69fa      	ldr	r2, [r7, #28]
 8003388:	6852      	ldr	r2, [r2, #4]
 800338a:	431a      	orrs	r2, r3
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d012      	beq.n	80033be <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	461a      	mov	r2, r3
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	4b1a      	ldr	r3, [pc, #104]	; (8003418 <ETH_Prepare_Tx_Descriptors+0x248>)
 80033ae:	4013      	ands	r3, r2
 80033b0:	69fa      	ldr	r2, [r7, #28]
 80033b2:	6852      	ldr	r2, [r2, #4]
 80033b4:	0412      	lsls	r2, r2, #16
 80033b6:	431a      	orrs	r2, r3
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	609a      	str	r2, [r3, #8]
 80033bc:	e008      	b.n	80033d0 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	2200      	movs	r2, #0
 80033c2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	4b13      	ldr	r3, [pc, #76]	; (8003418 <ETH_Prepare_Tx_Descriptors+0x248>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	6a3a      	ldr	r2, [r7, #32]
 80033ce:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d021      	beq.n	8003420 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80033dc:	6a3b      	ldr	r3, [r7, #32]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	04db      	lsls	r3, r3, #19
 80033ea:	431a      	orrs	r2, r3
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	4b09      	ldr	r3, [pc, #36]	; (800341c <ETH_Prepare_Tx_Descriptors+0x24c>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	69d2      	ldr	r2, [r2, #28]
 80033fc:	431a      	orrs	r2, r3
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	e02e      	b.n	800346e <ETH_Prepare_Tx_Descriptors+0x29e>
 8003410:	ffff0000 	.word	0xffff0000
 8003414:	ffffc000 	.word	0xffffc000
 8003418:	c000ffff 	.word	0xc000ffff
 800341c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	4b7b      	ldr	r3, [pc, #492]	; (8003614 <ETH_Prepare_Tx_Descriptors+0x444>)
 8003426:	4013      	ands	r3, r2
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	6852      	ldr	r2, [r2, #4]
 800342c:	431a      	orrs	r2, r3
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d008      	beq.n	8003450 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	431a      	orrs	r2, r3
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0320 	and.w	r3, r3, #32
 8003458:	2b00      	cmp	r3, #0
 800345a:	d008      	beq.n	800346e <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	431a      	orrs	r2, r3
 800346a:	6a3b      	ldr	r3, [r7, #32]
 800346c:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	2b00      	cmp	r3, #0
 8003478:	d008      	beq.n	800348c <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003486:	431a      	orrs	r2, r3
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80034a4:	f3bf 8f5f 	dmb	sy
}
 80034a8:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 80da 	beq.w	8003678 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	431a      	orrs	r2, r3
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80034d6:	e0cf      	b.n	8003678 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80034e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e6:	3301      	adds	r3, #1
 80034e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ec:	2b03      	cmp	r3, #3
 80034ee:	d902      	bls.n	80034f6 <ETH_Prepare_Tx_Descriptors+0x326>
 80034f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f2:	3b04      	subs	r3, #4
 80034f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034fe:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003514:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003518:	d007      	beq.n	800352a <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351e:	3304      	adds	r3, #4
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d029      	beq.n	800357e <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003536:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003538:	2300      	movs	r3, #0
 800353a:	62bb      	str	r3, [r7, #40]	; 0x28
 800353c:	e019      	b.n	8003572 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 800353e:	f3bf 8f5f 	dmb	sy
}
 8003542:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800354c:	6a3b      	ldr	r3, [r7, #32]
 800354e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003552:	3301      	adds	r3, #1
 8003554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003558:	2b03      	cmp	r3, #3
 800355a:	d902      	bls.n	8003562 <ETH_Prepare_Tx_Descriptors+0x392>
 800355c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800355e:	3b04      	subs	r3, #4
 8003560:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800356a:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800356c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356e:	3301      	adds	r3, #1
 8003570:	62bb      	str	r3, [r7, #40]	; 0x28
 8003572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003576:	429a      	cmp	r2, r3
 8003578:	d3e1      	bcc.n	800353e <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 800357a:	2302      	movs	r3, #2
 800357c:	e0ae      	b.n	80036dc <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	3301      	adds	r3, #1
 8003582:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	461a      	mov	r2, r3
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	4b1f      	ldr	r3, [pc, #124]	; (8003618 <ETH_Prepare_Tx_Descriptors+0x448>)
 800359a:	4013      	ands	r3, r2
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	6852      	ldr	r2, [r2, #4]
 80035a0:	431a      	orrs	r2, r3
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d012      	beq.n	80035d4 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	461a      	mov	r2, r3
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	4b16      	ldr	r3, [pc, #88]	; (800361c <ETH_Prepare_Tx_Descriptors+0x44c>)
 80035c4:	4013      	ands	r3, r2
 80035c6:	69fa      	ldr	r2, [r7, #28]
 80035c8:	6852      	ldr	r2, [r2, #4]
 80035ca:	0412      	lsls	r2, r2, #16
 80035cc:	431a      	orrs	r2, r3
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	609a      	str	r2, [r3, #8]
 80035d2:	e008      	b.n	80035e6 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80035d4:	6a3b      	ldr	r3, [r7, #32]
 80035d6:	2200      	movs	r2, #0
 80035d8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	4b0f      	ldr	r3, [pc, #60]	; (800361c <ETH_Prepare_Tx_Descriptors+0x44c>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	6a3a      	ldr	r2, [r7, #32]
 80035e4:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0310 	and.w	r3, r3, #16
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d018      	beq.n	8003624 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <ETH_Prepare_Tx_Descriptors+0x450>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	69d2      	ldr	r2, [r2, #28]
 80035fe:	431a      	orrs	r2, r3
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	60da      	str	r2, [r3, #12]
 8003610:	e020      	b.n	8003654 <ETH_Prepare_Tx_Descriptors+0x484>
 8003612:	bf00      	nop
 8003614:	ffff8000 	.word	0xffff8000
 8003618:	ffffc000 	.word	0xffffc000
 800361c:	c000ffff 	.word	0xc000ffff
 8003620:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	68da      	ldr	r2, [r3, #12]
 8003628:	4b2f      	ldr	r3, [pc, #188]	; (80036e8 <ETH_Prepare_Tx_Descriptors+0x518>)
 800362a:	4013      	ands	r3, r2
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	6852      	ldr	r2, [r2, #4]
 8003630:	431a      	orrs	r2, r3
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d008      	beq.n	8003654 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	431a      	orrs	r2, r3
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	3301      	adds	r3, #1
 8003658:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800365a:	f3bf 8f5f 	dmb	sy
}
 800365e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b00      	cmp	r3, #0
 800367e:	f47f af2b 	bne.w	80034d8 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d006      	beq.n	8003696 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003688:	6a3b      	ldr	r3, [r7, #32]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	e005      	b.n	80036a2 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036b2:	6979      	ldr	r1, [r7, #20]
 80036b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b6:	3304      	adds	r3, #4
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036c2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80036c4:	b672      	cpsid	i
}
 80036c6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	4413      	add	r3, r2
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80036d6:	b662      	cpsie	i
}
 80036d8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3734      	adds	r7, #52	; 0x34
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	ffff8000 	.word	0xffff8000

080036ec <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b098      	sub	sp, #96	; 0x60
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80036f4:	4a84      	ldr	r2, [pc, #528]	; (8003908 <HAL_FDCAN_Init+0x21c>)
 80036f6:	f107 030c 	add.w	r3, r7, #12
 80036fa:	4611      	mov	r1, r2
 80036fc:	224c      	movs	r2, #76	; 0x4c
 80036fe:	4618      	mov	r0, r3
 8003700:	f015 f983 	bl	8018a0a <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e1c6      	b.n	8003a9c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a7e      	ldr	r2, [pc, #504]	; (800390c <HAL_FDCAN_Init+0x220>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d106      	bne.n	8003726 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003720:	461a      	mov	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d106      	bne.n	8003740 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7fd fc28 	bl	8000f90 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0210 	bic.w	r2, r2, #16
 800374e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003750:	f7fe f8e2 	bl	8001918 <HAL_GetTick>
 8003754:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003756:	e014      	b.n	8003782 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003758:	f7fe f8de 	bl	8001918 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b0a      	cmp	r3, #10
 8003764:	d90d      	bls.n	8003782 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800376c:	f043 0201 	orr.w	r2, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2203      	movs	r2, #3
 800377a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e18c      	b.n	8003a9c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b08      	cmp	r3, #8
 800378e:	d0e3      	beq.n	8003758 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699a      	ldr	r2, [r3, #24]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0201 	orr.w	r2, r2, #1
 800379e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037a0:	f7fe f8ba 	bl	8001918 <HAL_GetTick>
 80037a4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80037a6:	e014      	b.n	80037d2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80037a8:	f7fe f8b6 	bl	8001918 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b0a      	cmp	r3, #10
 80037b4:	d90d      	bls.n	80037d2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037bc:	f043 0201 	orr.w	r2, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2203      	movs	r2, #3
 80037ca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e164      	b.n	8003a9c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0e3      	beq.n	80037a8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0202 	orr.w	r2, r2, #2
 80037ee:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	7c1b      	ldrb	r3, [r3, #16]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d108      	bne.n	800380a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699a      	ldr	r2, [r3, #24]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003806:	619a      	str	r2, [r3, #24]
 8003808:	e007      	b.n	800381a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699a      	ldr	r2, [r3, #24]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003818:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	7c5b      	ldrb	r3, [r3, #17]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d108      	bne.n	8003834 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699a      	ldr	r2, [r3, #24]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003830:	619a      	str	r2, [r3, #24]
 8003832:	e007      	b.n	8003844 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699a      	ldr	r2, [r3, #24]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003842:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	7c9b      	ldrb	r3, [r3, #18]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d108      	bne.n	800385e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800385a:	619a      	str	r2, [r3, #24]
 800385c:	e007      	b.n	800386e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699a      	ldr	r2, [r3, #24]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800386c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689a      	ldr	r2, [r3, #8]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003892:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0210 	bic.w	r2, r2, #16
 80038a2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d108      	bne.n	80038be <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699a      	ldr	r2, [r3, #24]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0204 	orr.w	r2, r2, #4
 80038ba:	619a      	str	r2, [r3, #24]
 80038bc:	e030      	b.n	8003920 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d02c      	beq.n	8003920 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d020      	beq.n	8003910 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	699a      	ldr	r2, [r3, #24]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038dc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 0210 	orr.w	r2, r2, #16
 80038ec:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	2b03      	cmp	r3, #3
 80038f4:	d114      	bne.n	8003920 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	699a      	ldr	r2, [r3, #24]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f042 0220 	orr.w	r2, r2, #32
 8003904:	619a      	str	r2, [r3, #24]
 8003906:	e00b      	b.n	8003920 <HAL_FDCAN_Init+0x234>
 8003908:	08019a44 	.word	0x08019a44
 800390c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699a      	ldr	r2, [r3, #24]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0220 	orr.w	r2, r2, #32
 800391e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	3b01      	subs	r3, #1
 8003926:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	3b01      	subs	r3, #1
 800392e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003930:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003938:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	3b01      	subs	r3, #1
 8003942:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003948:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800394a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003954:	d115      	bne.n	8003982 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	3b01      	subs	r3, #1
 8003962:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003964:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	3b01      	subs	r3, #1
 800396c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800396e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003976:	3b01      	subs	r3, #1
 8003978:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800397e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003980:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a8:	4413      	add	r3, r2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d011      	beq.n	80039d2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80039b6:	f023 0107 	bic.w	r1, r3, #7
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	3360      	adds	r3, #96	; 0x60
 80039c2:	443b      	add	r3, r7
 80039c4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d011      	beq.n	80039fe <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80039e2:	f023 0107 	bic.w	r1, r3, #7
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	3360      	adds	r3, #96	; 0x60
 80039ee:	443b      	add	r3, r7
 80039f0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d012      	beq.n	8003a2c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003a0e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	3360      	adds	r3, #96	; 0x60
 8003a1a:	443b      	add	r3, r7
 8003a1c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003a20:	011a      	lsls	r2, r3, #4
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d012      	beq.n	8003a5a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003a3c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	3360      	adds	r3, #96	; 0x60
 8003a48:	443b      	add	r3, r7
 8003a4a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003a4e:	021a      	lsls	r2, r3, #8
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a11      	ldr	r2, [pc, #68]	; (8003aa4 <HAL_FDCAN_Init+0x3b8>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d107      	bne.n	8003a74 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f022 0203 	bic.w	r2, r2, #3
 8003a72:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 fdf9 	bl	8004684 <FDCAN_CalcultateRamBlockAddresses>
 8003a92:	4603      	mov	r3, r0
 8003a94:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8003a98:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3760      	adds	r7, #96	; 0x60
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	4000a000 	.word	0x4000a000

08003aa8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003ab8:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d002      	beq.n	8003ac6 <HAL_FDCAN_ConfigFilter+0x1e>
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d157      	bne.n	8003b76 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d12b      	bne.n	8003b26 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	2b07      	cmp	r3, #7
 8003ad4:	d10d      	bne.n	8003af2 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003ae2:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003ae8:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8003aea:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8003aee:	617b      	str	r3, [r7, #20]
 8003af0:	e00e      	b.n	8003b10 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003afe:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8003b06:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	e025      	b.n	8003b72 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	075a      	lsls	r2, r3, #29
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b07      	cmp	r3, #7
 8003b3a:	d103      	bne.n	8003b44 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	e006      	b.n	8003b52 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	079a      	lsls	r2, r3, #30
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	4413      	add	r3, r2
 8003b5e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	3304      	adds	r3, #4
 8003b6a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003b72:	2300      	movs	r3, #0
 8003b74:	e008      	b.n	8003b88 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b7c:	f043 0202 	orr.w	r2, r3, #2
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
  }
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	371c      	adds	r7, #28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d111      	bne.n	8003bcc <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699a      	ldr	r2, [r3, #24]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0201 	bic.w	r2, r2, #1
 8003bbe:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	e008      	b.n	8003bde <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bd2:	f043 0204 	orr.w	r2, r3, #4
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
  }
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b086      	sub	sp, #24
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d141      	bne.n	8003c86 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003c0a:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c18:	f043 0220 	orr.w	r2, r3, #32
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e038      	b.n	8003c98 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d009      	beq.n	8003c4a <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e026      	b.n	8003c98 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003c52:	0c1b      	lsrs	r3, r3, #16
 8003c54:	f003 031f 	and.w	r3, r3, #31
 8003c58:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	68b9      	ldr	r1, [r7, #8]
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 fe95 	bl	8004990 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c72:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003c76:	2201      	movs	r2, #1
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	e008      	b.n	8003c98 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c8c:	f043 0208 	orr.w	r2, r3, #8
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
  }
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b08b      	sub	sp, #44	; 0x2c
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
 8003cac:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003cb8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8003cba:	7efb      	ldrb	r3, [r7, #27]
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	f040 814b 	bne.w	8003f58 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b40      	cmp	r3, #64	; 0x40
 8003cc6:	d14d      	bne.n	8003d64 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003cd0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d109      	bne.n	8003cec <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cde:	f043 0220 	orr.w	r2, r3, #32
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e13e      	b.n	8003f6a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d109      	bne.n	8003d10 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e12c      	b.n	8003f6a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d18:	0e1b      	lsrs	r3, r3, #24
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d10b      	bne.n	8003d3a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d2a:	0fdb      	lsrs	r3, r3, #31
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d34:	d101      	bne.n	8003d3a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003d36:	2301      	movs	r3, #1
 8003d38:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003d42:	0a1b      	lsrs	r3, r3, #8
 8003d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d48:	69fa      	ldr	r2, [r7, #28]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d56:	69f9      	ldr	r1, [r7, #28]
 8003d58:	fb01 f303 	mul.w	r3, r1, r3
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
 8003d62:	e069      	b.n	8003e38 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b41      	cmp	r3, #65	; 0x41
 8003d68:	d14d      	bne.n	8003e06 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d109      	bne.n	8003d8e <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d80:	f043 0220 	orr.w	r2, r3, #32
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e0ed      	b.n	8003f6a <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d109      	bne.n	8003db2 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003da4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e0db      	b.n	8003f6a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003dba:	0e1b      	lsrs	r3, r3, #24
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d10b      	bne.n	8003ddc <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dcc:	0fdb      	lsrs	r3, r3, #31
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dd6:	d101      	bne.n	8003ddc <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003de4:	0a1b      	lsrs	r3, r3, #8
 8003de6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dea:	69fa      	ldr	r2, [r7, #28]
 8003dec:	4413      	add	r3, r2
 8003dee:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df8:	69f9      	ldr	r1, [r7, #28]
 8003dfa:	fb01 f303 	mul.w	r3, r1, r3
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
 8003e04:	e018      	b.n	8003e38 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d309      	bcc.n	8003e24 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e16:	f043 0220 	orr.w	r2, r3, #32
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e0a2      	b.n	8003f6a <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2c:	68b9      	ldr	r1, [r7, #8]
 8003e2e:	fb01 f303 	mul.w	r3, r1, r3
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d107      	bne.n	8003e5c <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	0c9b      	lsrs	r3, r3, #18
 8003e52:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	e005      	b.n	8003e68 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	3304      	adds	r3, #4
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	0e1b      	lsrs	r3, r3, #24
 8003eba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	0fda      	lsrs	r2, r3, #31
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	3304      	adds	r3, #4
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	623b      	str	r3, [r7, #32]
 8003eda:	e00a      	b.n	8003ef2 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	441a      	add	r2, r3
 8003ee2:	6839      	ldr	r1, [r7, #0]
 8003ee4:	6a3b      	ldr	r3, [r7, #32]
 8003ee6:	440b      	add	r3, r1
 8003ee8:	7812      	ldrb	r2, [r2, #0]
 8003eea:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	623b      	str	r3, [r7, #32]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	0c1b      	lsrs	r3, r3, #16
 8003ef8:	4a1f      	ldr	r2, [pc, #124]	; (8003f78 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8003efa:	5cd3      	ldrb	r3, [r2, r3]
 8003efc:	461a      	mov	r2, r3
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d3eb      	bcc.n	8003edc <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b40      	cmp	r3, #64	; 0x40
 8003f08:	d105      	bne.n	8003f16 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8003f14:	e01e      	b.n	8003f54 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b41      	cmp	r3, #65	; 0x41
 8003f1a:	d105      	bne.n	8003f28 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8003f26:	e015      	b.n	8003f54 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b1f      	cmp	r3, #31
 8003f2c:	d808      	bhi.n	8003f40 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2101      	movs	r1, #1
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	fa01 f202 	lsl.w	r2, r1, r2
 8003f3a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003f3e:	e009      	b.n	8003f54 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f003 021f 	and.w	r2, r3, #31
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f50:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	e008      	b.n	8003f6a <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f5e:	f043 0208 	orr.w	r2, r3, #8
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
  }
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	372c      	adds	r7, #44	; 0x2c
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	0801c854 	.word	0x0801c854

08003f7c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003f8e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003f90:	7dfb      	ldrb	r3, [r7, #23]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d002      	beq.n	8003f9c <HAL_FDCAN_ActivateNotification+0x20>
 8003f96:	7dfb      	ldrb	r3, [r7, #23]
 8003f98:	2b02      	cmp	r3, #2
 8003f9a:	d155      	bne.n	8004048 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d108      	bne.n	8003fbc <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f042 0201 	orr.w	r2, r2, #1
 8003fb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003fba:	e014      	b.n	8003fe6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	68ba      	ldr	r2, [r7, #8]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d108      	bne.n	8003fde <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0202 	orr.w	r2, r2, #2
 8003fda:	65da      	str	r2, [r3, #92]	; 0x5c
 8003fdc:	e003      	b.n	8003fe6 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d009      	beq.n	8004004 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800400a:	2b00      	cmp	r3, #0
 800400c:	d009      	beq.n	8004022 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	430a      	orrs	r2, r1
 800401e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	4b0f      	ldr	r3, [pc, #60]	; (8004068 <HAL_FDCAN_ActivateNotification+0xec>)
 800402c:	4013      	ands	r3, r2
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	6812      	ldr	r2, [r2, #0]
 8004032:	430b      	orrs	r3, r1
 8004034:	6553      	str	r3, [r2, #84]	; 0x54
 8004036:	4b0d      	ldr	r3, [pc, #52]	; (800406c <HAL_FDCAN_ActivateNotification+0xf0>)
 8004038:	695a      	ldr	r2, [r3, #20]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	0f9b      	lsrs	r3, r3, #30
 800403e:	490b      	ldr	r1, [pc, #44]	; (800406c <HAL_FDCAN_ActivateNotification+0xf0>)
 8004040:	4313      	orrs	r3, r2
 8004042:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	e008      	b.n	800405a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800404e:	f043 0202 	orr.w	r2, r3, #2
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
  }
}
 800405a:	4618      	mov	r0, r3
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	3fcfffff 	.word	0x3fcfffff
 800406c:	4000a800 	.word	0x4000a800

08004070 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b096      	sub	sp, #88	; 0x58
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8004078:	4b9a      	ldr	r3, [pc, #616]	; (80042e4 <HAL_FDCAN_IRQHandler+0x274>)
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	079b      	lsls	r3, r3, #30
 800407e:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8004080:	4b98      	ldr	r3, [pc, #608]	; (80042e4 <HAL_FDCAN_IRQHandler+0x274>)
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	079b      	lsls	r3, r3, #30
 8004086:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004088:	4013      	ands	r3, r2
 800408a:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004092:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004096:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80040a0:	4013      	ands	r3, r2
 80040a2:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040b8:	4013      	ands	r3, r2
 80040ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040d0:	4013      	ands	r3, r2
 80040d2:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040da:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80040de:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040e8:	4013      	ands	r3, r2
 80040ea:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f2:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80040f6:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004100:	4013      	ands	r3, r2
 8004102:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410a:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004112:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004116:	0a1b      	lsrs	r3, r3, #8
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d010      	beq.n	8004142 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004122:	0a1b      	lsrs	r3, r3, #8
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004134:	651a      	str	r2, [r3, #80]	; 0x50
 8004136:	4b6b      	ldr	r3, [pc, #428]	; (80042e4 <HAL_FDCAN_IRQHandler+0x274>)
 8004138:	2200      	movs	r2, #0
 800413a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 fa54 	bl	80045ea <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004144:	0a9b      	lsrs	r3, r3, #10
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d01d      	beq.n	800418a <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800414e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004150:	0a9b      	lsrs	r3, r3, #10
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d017      	beq.n	800418a <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004162:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800416c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800416e:	4013      	ands	r3, r2
 8004170:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800417a:	651a      	str	r2, [r3, #80]	; 0x50
 800417c:	4b59      	ldr	r3, [pc, #356]	; (80042e4 <HAL_FDCAN_IRQHandler+0x274>)
 800417e:	2200      	movs	r2, #0
 8004180:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004182:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 fa07 	bl	8004598 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800418a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00d      	beq.n	80041ac <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004196:	4b54      	ldr	r3, [pc, #336]	; (80042e8 <HAL_FDCAN_IRQHandler+0x278>)
 8004198:	400b      	ands	r3, r1
 800419a:	6513      	str	r3, [r2, #80]	; 0x50
 800419c:	4a51      	ldr	r2, [pc, #324]	; (80042e4 <HAL_FDCAN_IRQHandler+0x274>)
 800419e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a0:	0f9b      	lsrs	r3, r3, #30
 80041a2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80041a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f9c0 	bl	800452c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80041ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00d      	beq.n	80041ce <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80041b8:	4b4b      	ldr	r3, [pc, #300]	; (80042e8 <HAL_FDCAN_IRQHandler+0x278>)
 80041ba:	400b      	ands	r3, r1
 80041bc:	6513      	str	r3, [r2, #80]	; 0x50
 80041be:	4a49      	ldr	r2, [pc, #292]	; (80042e4 <HAL_FDCAN_IRQHandler+0x274>)
 80041c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041c2:	0f9b      	lsrs	r3, r3, #30
 80041c4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80041c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f9ba 	bl	8004542 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80041ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00d      	beq.n	80041f0 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80041da:	4b43      	ldr	r3, [pc, #268]	; (80042e8 <HAL_FDCAN_IRQHandler+0x278>)
 80041dc:	400b      	ands	r3, r1
 80041de:	6513      	str	r3, [r2, #80]	; 0x50
 80041e0:	4a40      	ldr	r2, [pc, #256]	; (80042e4 <HAL_FDCAN_IRQHandler+0x274>)
 80041e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e4:	0f9b      	lsrs	r3, r3, #30
 80041e6:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80041e8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fc f8e0 	bl	80003b0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80041f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00d      	beq.n	8004212 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80041fc:	4b3a      	ldr	r3, [pc, #232]	; (80042e8 <HAL_FDCAN_IRQHandler+0x278>)
 80041fe:	400b      	ands	r3, r1
 8004200:	6513      	str	r3, [r2, #80]	; 0x50
 8004202:	4a38      	ldr	r2, [pc, #224]	; (80042e4 <HAL_FDCAN_IRQHandler+0x274>)
 8004204:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004206:	0f9b      	lsrs	r3, r3, #30
 8004208:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800420a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 f9a3 	bl	8004558 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004214:	0adb      	lsrs	r3, r3, #11
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d010      	beq.n	8004240 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800421e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004220:	0adb      	lsrs	r3, r3, #11
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004232:	651a      	str	r2, [r3, #80]	; 0x50
 8004234:	4b2b      	ldr	r3, [pc, #172]	; (80042e4 <HAL_FDCAN_IRQHandler+0x274>)
 8004236:	2200      	movs	r2, #0
 8004238:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f997 	bl	800456e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8004240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004242:	0a5b      	lsrs	r3, r3, #9
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d01d      	beq.n	8004288 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800424c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800424e:	0a5b      	lsrs	r3, r3, #9
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	d017      	beq.n	8004288 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004260:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800426a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800426c:	4013      	ands	r3, r2
 800426e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004278:	651a      	str	r2, [r3, #80]	; 0x50
 800427a:	4b1a      	ldr	r3, [pc, #104]	; (80042e4 <HAL_FDCAN_IRQHandler+0x274>)
 800427c:	2200      	movs	r2, #0
 800427e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004280:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f97d 	bl	8004582 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800428a:	0cdb      	lsrs	r3, r3, #19
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b00      	cmp	r3, #0
 8004292:	d010      	beq.n	80042b6 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8004294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004296:	0cdb      	lsrs	r3, r3, #19
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00a      	beq.n	80042b6 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80042a8:	651a      	str	r2, [r3, #80]	; 0x50
 80042aa:	4b0e      	ldr	r3, [pc, #56]	; (80042e4 <HAL_FDCAN_IRQHandler+0x274>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f97c 	bl	80045ae <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80042b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042b8:	0c1b      	lsrs	r3, r3, #16
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d016      	beq.n	80042f0 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80042c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c4:	0c1b      	lsrs	r3, r3, #16
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d010      	beq.n	80042f0 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80042d6:	651a      	str	r2, [r3, #80]	; 0x50
 80042d8:	4b02      	ldr	r3, [pc, #8]	; (80042e4 <HAL_FDCAN_IRQHandler+0x274>)
 80042da:	2200      	movs	r2, #0
 80042dc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	e004      	b.n	80042ec <HAL_FDCAN_IRQHandler+0x27c>
 80042e2:	bf00      	nop
 80042e4:	4000a800 	.word	0x4000a800
 80042e8:	3fcfffff 	.word	0x3fcfffff
 80042ec:	f000 f969 	bl	80045c2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80042f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042f2:	0c9b      	lsrs	r3, r3, #18
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d010      	beq.n	800431e <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80042fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fe:	0c9b      	lsrs	r3, r3, #18
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004310:	651a      	str	r2, [r3, #80]	; 0x50
 8004312:	4b83      	ldr	r3, [pc, #524]	; (8004520 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004314:	2200      	movs	r2, #0
 8004316:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f95c 	bl	80045d6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800431e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004320:	0c5b      	lsrs	r3, r3, #17
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d015      	beq.n	8004356 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800432a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432c:	0c5b      	lsrs	r3, r3, #17
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00f      	beq.n	8004356 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800433e:	651a      	str	r2, [r3, #80]	; 0x50
 8004340:	4b77      	ldr	r3, [pc, #476]	; (8004520 <HAL_FDCAN_IRQHandler+0x4b0>)
 8004342:	2200      	movs	r2, #0
 8004344:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800434c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00d      	beq.n	8004378 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004362:	4b70      	ldr	r3, [pc, #448]	; (8004524 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004364:	400b      	ands	r3, r1
 8004366:	6513      	str	r3, [r2, #80]	; 0x50
 8004368:	4a6d      	ldr	r2, [pc, #436]	; (8004520 <HAL_FDCAN_IRQHandler+0x4b0>)
 800436a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800436c:	0f9b      	lsrs	r3, r3, #30
 800436e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004370:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f94d 	bl	8004612 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800437a:	2b00      	cmp	r3, #0
 800437c:	d011      	beq.n	80043a2 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004384:	4b67      	ldr	r3, [pc, #412]	; (8004524 <HAL_FDCAN_IRQHandler+0x4b4>)
 8004386:	400b      	ands	r3, r1
 8004388:	6513      	str	r3, [r2, #80]	; 0x50
 800438a:	4a65      	ldr	r2, [pc, #404]	; (8004520 <HAL_FDCAN_IRQHandler+0x4b0>)
 800438c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800438e:	0f9b      	lsrs	r3, r3, #30
 8004390:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a60      	ldr	r2, [pc, #384]	; (8004528 <HAL_FDCAN_IRQHandler+0x4b8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	f040 80ac 	bne.w	8004506 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f003 0303 	and.w	r3, r3, #3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 80a4 	beq.w	8004506 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	f003 030f 	and.w	r3, r3, #15
 80043c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043d2:	4013      	ands	r3, r2
 80043d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043e0:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043ea:	4013      	ands	r3, r2
 80043ec:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80043f8:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004402:	4013      	ands	r3, r2
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8004410:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	6a3a      	ldr	r2, [r7, #32]
 800441a:	4013      	ands	r3, r2
 800441c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8004428:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004430:	69fa      	ldr	r2, [r7, #28]
 8004432:	4013      	ands	r3, r2
 8004434:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8004446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004448:	2b00      	cmp	r3, #0
 800444a:	d007      	beq.n	800445c <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004452:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8004454:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f8e6 	bl	8004628 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800445c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445e:	2b00      	cmp	r3, #0
 8004460:	d007      	beq.n	8004472 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004468:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800446a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 f8e6 	bl	800463e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	099b      	lsrs	r3, r3, #6
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d01a      	beq.n	80044b4 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	099b      	lsrs	r3, r3, #6
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d014      	beq.n	80044b4 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004490:	0c1b      	lsrs	r3, r3, #16
 8004492:	b29b      	uxth	r3, r3
 8004494:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044a0:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2240      	movs	r2, #64	; 0x40
 80044a8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	6939      	ldr	r1, [r7, #16]
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f8d0 	bl	8004654 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d007      	beq.n	80044ca <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80044c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f8d1 	bl	800466c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00b      	beq.n	80044e8 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	6a3a      	ldr	r2, [r7, #32]
 80044d6:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	431a      	orrs	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00b      	beq.n	8004506 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	69fa      	ldr	r2, [r7, #28]
 80044f4:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800450c:	2b00      	cmp	r3, #0
 800450e:	d002      	beq.n	8004516 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f874 	bl	80045fe <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004516:	bf00      	nop
 8004518:	3758      	adds	r7, #88	; 0x58
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	4000a800 	.word	0x4000a800
 8004524:	3fcfffff 	.word	0x3fcfffff
 8004528:	4000a000 	.word	0x4000a000

0800452c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
 800454a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004582:	b480      	push	{r7}
 8004584:	b083      	sub	sp, #12
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
 800458a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80045ca:	bf00      	nop
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80045f2:	bf00      	nop
 80045f4:	370c      	adds	r7, #12
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800463e:	b480      	push	{r7}
 8004640:	b083      	sub	sp, #12
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
 8004646:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
	...

08004684 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004690:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800469a:	4ba7      	ldr	r3, [pc, #668]	; (8004938 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800469c:	4013      	ands	r3, r2
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	0091      	lsls	r1, r2, #2
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6812      	ldr	r2, [r2, #0]
 80046a6:	430b      	orrs	r3, r1
 80046a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046bc:	041a      	lsls	r2, r3, #16
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	4413      	add	r3, r2
 80046d0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80046da:	4b97      	ldr	r3, [pc, #604]	; (8004938 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80046dc:	4013      	ands	r3, r2
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	0091      	lsls	r1, r2, #2
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6812      	ldr	r2, [r2, #0]
 80046e6:	430b      	orrs	r3, r1
 80046e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fc:	041a      	lsls	r2, r3, #16
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	430a      	orrs	r2, r1
 8004704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	4413      	add	r3, r2
 8004712:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800471c:	4b86      	ldr	r3, [pc, #536]	; (8004938 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800471e:	4013      	ands	r3, r2
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	0091      	lsls	r1, r2, #2
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6812      	ldr	r2, [r2, #0]
 8004728:	430b      	orrs	r3, r1
 800472a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004736:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	041a      	lsls	r2, r3, #16
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	430a      	orrs	r2, r1
 8004746:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004752:	fb02 f303 	mul.w	r3, r2, r3
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	4413      	add	r3, r2
 800475a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004764:	4b74      	ldr	r3, [pc, #464]	; (8004938 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8004766:	4013      	ands	r3, r2
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	0091      	lsls	r1, r2, #2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6812      	ldr	r2, [r2, #0]
 8004770:	430b      	orrs	r3, r1
 8004772:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800477e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004786:	041a      	lsls	r2, r3, #16
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800479a:	fb02 f303 	mul.w	r3, r2, r3
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	4413      	add	r3, r2
 80047a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80047ac:	4b62      	ldr	r3, [pc, #392]	; (8004938 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80047ae:	4013      	ands	r3, r2
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	0091      	lsls	r1, r2, #2
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6812      	ldr	r2, [r2, #0]
 80047b8:	430b      	orrs	r3, r1
 80047ba:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80047c6:	fb02 f303 	mul.w	r3, r2, r3
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	4413      	add	r3, r2
 80047ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80047d8:	4b57      	ldr	r3, [pc, #348]	; (8004938 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80047da:	4013      	ands	r3, r2
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	0091      	lsls	r1, r2, #2
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6812      	ldr	r2, [r2, #0]
 80047e4:	430b      	orrs	r3, r1
 80047e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047f2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047fa:	041a      	lsls	r2, r3, #16
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	4413      	add	r3, r2
 8004810:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800481a:	4b47      	ldr	r3, [pc, #284]	; (8004938 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800481c:	4013      	ands	r3, r2
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	0091      	lsls	r1, r2, #2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6812      	ldr	r2, [r2, #0]
 8004826:	430b      	orrs	r3, r1
 8004828:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004834:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483c:	041a      	lsls	r2, r3, #16
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004850:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004858:	061a      	lsls	r2, r3, #24
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004868:	4b34      	ldr	r3, [pc, #208]	; (800493c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800486a:	4413      	add	r3, r2
 800486c:	009a      	lsls	r2, r3, #2
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	441a      	add	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	441a      	add	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800489e:	fb01 f303 	mul.w	r3, r1, r3
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	441a      	add	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80048b6:	fb01 f303 	mul.w	r3, r1, r3
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	441a      	add	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ca:	6879      	ldr	r1, [r7, #4]
 80048cc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80048ce:	fb01 f303 	mul.w	r3, r1, r3
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	441a      	add	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	441a      	add	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fa:	6879      	ldr	r1, [r7, #4]
 80048fc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80048fe:	fb01 f303 	mul.w	r3, r1, r3
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	441a      	add	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800491a:	fb01 f303 	mul.w	r3, r1, r3
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	441a      	add	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492e:	4a04      	ldr	r2, [pc, #16]	; (8004940 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d915      	bls.n	8004960 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8004934:	e006      	b.n	8004944 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8004936:	bf00      	nop
 8004938:	ffff0003 	.word	0xffff0003
 800493c:	10002b00 	.word	0x10002b00
 8004940:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800494a:	f043 0220 	orr.w	r2, r3, #32
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2203      	movs	r2, #3
 8004958:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e010      	b.n	8004982 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	e005      	b.n	8004974 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3304      	adds	r3, #4
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	429a      	cmp	r2, r3
 800497e:	d3f3      	bcc.n	8004968 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop

08004990 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8004990:	b480      	push	{r7}
 8004992:	b089      	sub	sp, #36	; 0x24
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
 800499c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10a      	bne.n	80049bc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80049ae:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80049b6:	4313      	orrs	r3, r2
 80049b8:	61fb      	str	r3, [r7, #28]
 80049ba:	e00a      	b.n	80049d2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80049c4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80049ca:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80049cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049d0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80049dc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80049e2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80049e8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80049ee:	4313      	orrs	r3, r2
 80049f0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049fc:	6839      	ldr	r1, [r7, #0]
 80049fe:	fb01 f303 	mul.w	r3, r1, r3
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	69fa      	ldr	r2, [r7, #28]
 8004a0c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	3304      	adds	r3, #4
 8004a12:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8004a20:	2300      	movs	r3, #0
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	e020      	b.n	8004a68 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	3303      	adds	r3, #3
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	3302      	adds	r3, #2
 8004a36:	6879      	ldr	r1, [r7, #4]
 8004a38:	440b      	add	r3, r1
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8004a3e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	3301      	adds	r3, #1
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	440b      	add	r3, r1
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8004a4c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	440a      	add	r2, r1
 8004a54:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8004a56:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	3304      	adds	r3, #4
 8004a60:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	3304      	adds	r3, #4
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	0c1b      	lsrs	r3, r3, #16
 8004a6e:	4a06      	ldr	r2, [pc, #24]	; (8004a88 <FDCAN_CopyMessageToRAM+0xf8>)
 8004a70:	5cd3      	ldrb	r3, [r2, r3]
 8004a72:	461a      	mov	r2, r3
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d3d5      	bcc.n	8004a26 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8004a7a:	bf00      	nop
 8004a7c:	bf00      	nop
 8004a7e:	3724      	adds	r7, #36	; 0x24
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr
 8004a88:	0801c854 	.word	0x0801c854

08004a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b089      	sub	sp, #36	; 0x24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004a9a:	4b89      	ldr	r3, [pc, #548]	; (8004cc0 <HAL_GPIO_Init+0x234>)
 8004a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004a9e:	e194      	b.n	8004dca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8004aac:	4013      	ands	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 8186 	beq.w	8004dc4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f003 0303 	and.w	r3, r3, #3
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d005      	beq.n	8004ad0 <HAL_GPIO_Init+0x44>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f003 0303 	and.w	r3, r3, #3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d130      	bne.n	8004b32 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	2203      	movs	r2, #3
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	43db      	mvns	r3, r3
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	68da      	ldr	r2, [r3, #12]
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	4313      	orrs	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b06:	2201      	movs	r2, #1
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0e:	43db      	mvns	r3, r3
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	4013      	ands	r3, r2
 8004b14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	091b      	lsrs	r3, r3, #4
 8004b1c:	f003 0201 	and.w	r2, r3, #1
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d017      	beq.n	8004b6e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	2203      	movs	r2, #3
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	43db      	mvns	r3, r3
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	4013      	ands	r3, r2
 8004b54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	689a      	ldr	r2, [r3, #8]
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	005b      	lsls	r3, r3, #1
 8004b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d123      	bne.n	8004bc2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	08da      	lsrs	r2, r3, #3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	3208      	adds	r2, #8
 8004b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	220f      	movs	r2, #15
 8004b92:	fa02 f303 	lsl.w	r3, r2, r3
 8004b96:	43db      	mvns	r3, r3
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	691a      	ldr	r2, [r3, #16]
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bae:	69ba      	ldr	r2, [r7, #24]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	08da      	lsrs	r2, r3, #3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3208      	adds	r2, #8
 8004bbc:	69b9      	ldr	r1, [r7, #24]
 8004bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	2203      	movs	r2, #3
 8004bce:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd2:	43db      	mvns	r3, r3
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f003 0203 	and.w	r2, r3, #3
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	f000 80e0 	beq.w	8004dc4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c04:	4b2f      	ldr	r3, [pc, #188]	; (8004cc4 <HAL_GPIO_Init+0x238>)
 8004c06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c0a:	4a2e      	ldr	r2, [pc, #184]	; (8004cc4 <HAL_GPIO_Init+0x238>)
 8004c0c:	f043 0302 	orr.w	r3, r3, #2
 8004c10:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004c14:	4b2b      	ldr	r3, [pc, #172]	; (8004cc4 <HAL_GPIO_Init+0x238>)
 8004c16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004c1a:	f003 0302 	and.w	r3, r3, #2
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c22:	4a29      	ldr	r2, [pc, #164]	; (8004cc8 <HAL_GPIO_Init+0x23c>)
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	089b      	lsrs	r3, r3, #2
 8004c28:	3302      	adds	r3, #2
 8004c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	220f      	movs	r2, #15
 8004c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3e:	43db      	mvns	r3, r3
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	4013      	ands	r3, r2
 8004c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a20      	ldr	r2, [pc, #128]	; (8004ccc <HAL_GPIO_Init+0x240>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d052      	beq.n	8004cf4 <HAL_GPIO_Init+0x268>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a1f      	ldr	r2, [pc, #124]	; (8004cd0 <HAL_GPIO_Init+0x244>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d031      	beq.n	8004cba <HAL_GPIO_Init+0x22e>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a1e      	ldr	r2, [pc, #120]	; (8004cd4 <HAL_GPIO_Init+0x248>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d02b      	beq.n	8004cb6 <HAL_GPIO_Init+0x22a>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a1d      	ldr	r2, [pc, #116]	; (8004cd8 <HAL_GPIO_Init+0x24c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d025      	beq.n	8004cb2 <HAL_GPIO_Init+0x226>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a1c      	ldr	r2, [pc, #112]	; (8004cdc <HAL_GPIO_Init+0x250>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d01f      	beq.n	8004cae <HAL_GPIO_Init+0x222>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a1b      	ldr	r2, [pc, #108]	; (8004ce0 <HAL_GPIO_Init+0x254>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d019      	beq.n	8004caa <HAL_GPIO_Init+0x21e>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a1a      	ldr	r2, [pc, #104]	; (8004ce4 <HAL_GPIO_Init+0x258>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d013      	beq.n	8004ca6 <HAL_GPIO_Init+0x21a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a19      	ldr	r2, [pc, #100]	; (8004ce8 <HAL_GPIO_Init+0x25c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d00d      	beq.n	8004ca2 <HAL_GPIO_Init+0x216>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a18      	ldr	r2, [pc, #96]	; (8004cec <HAL_GPIO_Init+0x260>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d007      	beq.n	8004c9e <HAL_GPIO_Init+0x212>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a17      	ldr	r2, [pc, #92]	; (8004cf0 <HAL_GPIO_Init+0x264>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d101      	bne.n	8004c9a <HAL_GPIO_Init+0x20e>
 8004c96:	2309      	movs	r3, #9
 8004c98:	e02d      	b.n	8004cf6 <HAL_GPIO_Init+0x26a>
 8004c9a:	230a      	movs	r3, #10
 8004c9c:	e02b      	b.n	8004cf6 <HAL_GPIO_Init+0x26a>
 8004c9e:	2308      	movs	r3, #8
 8004ca0:	e029      	b.n	8004cf6 <HAL_GPIO_Init+0x26a>
 8004ca2:	2307      	movs	r3, #7
 8004ca4:	e027      	b.n	8004cf6 <HAL_GPIO_Init+0x26a>
 8004ca6:	2306      	movs	r3, #6
 8004ca8:	e025      	b.n	8004cf6 <HAL_GPIO_Init+0x26a>
 8004caa:	2305      	movs	r3, #5
 8004cac:	e023      	b.n	8004cf6 <HAL_GPIO_Init+0x26a>
 8004cae:	2304      	movs	r3, #4
 8004cb0:	e021      	b.n	8004cf6 <HAL_GPIO_Init+0x26a>
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e01f      	b.n	8004cf6 <HAL_GPIO_Init+0x26a>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e01d      	b.n	8004cf6 <HAL_GPIO_Init+0x26a>
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e01b      	b.n	8004cf6 <HAL_GPIO_Init+0x26a>
 8004cbe:	bf00      	nop
 8004cc0:	58000080 	.word	0x58000080
 8004cc4:	58024400 	.word	0x58024400
 8004cc8:	58000400 	.word	0x58000400
 8004ccc:	58020000 	.word	0x58020000
 8004cd0:	58020400 	.word	0x58020400
 8004cd4:	58020800 	.word	0x58020800
 8004cd8:	58020c00 	.word	0x58020c00
 8004cdc:	58021000 	.word	0x58021000
 8004ce0:	58021400 	.word	0x58021400
 8004ce4:	58021800 	.word	0x58021800
 8004ce8:	58021c00 	.word	0x58021c00
 8004cec:	58022000 	.word	0x58022000
 8004cf0:	58022400 	.word	0x58022400
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	69fa      	ldr	r2, [r7, #28]
 8004cf8:	f002 0203 	and.w	r2, r2, #3
 8004cfc:	0092      	lsls	r2, r2, #2
 8004cfe:	4093      	lsls	r3, r2
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d06:	4938      	ldr	r1, [pc, #224]	; (8004de8 <HAL_GPIO_Init+0x35c>)
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	089b      	lsrs	r3, r3, #2
 8004d0c:	3302      	adds	r3, #2
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	43db      	mvns	r3, r3
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	4013      	ands	r3, r2
 8004d24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004d3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	43db      	mvns	r3, r3
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	4013      	ands	r3, r2
 8004d52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004d68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	43db      	mvns	r3, r3
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	43db      	mvns	r3, r3
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	4013      	ands	r3, r2
 8004da8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f47f ae63 	bne.w	8004aa0 <HAL_GPIO_Init+0x14>
  }
}
 8004dda:	bf00      	nop
 8004ddc:	bf00      	nop
 8004dde:	3724      	adds	r7, #36	; 0x24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	58000400 	.word	0x58000400

08004dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	460b      	mov	r3, r1
 8004df6:	807b      	strh	r3, [r7, #2]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004dfc:	787b      	ldrb	r3, [r7, #1]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e02:	887a      	ldrh	r2, [r7, #2]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004e08:	e003      	b.n	8004e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004e0a:	887b      	ldrh	r3, [r7, #2]
 8004e0c:	041a      	lsls	r2, r3, #16
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	619a      	str	r2, [r3, #24]
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
	...

08004e20 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004e28:	4b19      	ldr	r3, [pc, #100]	; (8004e90 <HAL_PWREx_ConfigSupply+0x70>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d00a      	beq.n	8004e4a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004e34:	4b16      	ldr	r3, [pc, #88]	; (8004e90 <HAL_PWREx_ConfigSupply+0x70>)
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f003 0307 	and.w	r3, r3, #7
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d001      	beq.n	8004e46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e01f      	b.n	8004e86 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004e46:	2300      	movs	r3, #0
 8004e48:	e01d      	b.n	8004e86 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004e4a:	4b11      	ldr	r3, [pc, #68]	; (8004e90 <HAL_PWREx_ConfigSupply+0x70>)
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	f023 0207 	bic.w	r2, r3, #7
 8004e52:	490f      	ldr	r1, [pc, #60]	; (8004e90 <HAL_PWREx_ConfigSupply+0x70>)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004e5a:	f7fc fd5d 	bl	8001918 <HAL_GetTick>
 8004e5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e60:	e009      	b.n	8004e76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004e62:	f7fc fd59 	bl	8001918 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e70:	d901      	bls.n	8004e76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e007      	b.n	8004e86 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004e76:	4b06      	ldr	r3, [pc, #24]	; (8004e90 <HAL_PWREx_ConfigSupply+0x70>)
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e82:	d1ee      	bne.n	8004e62 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	58024800 	.word	0x58024800

08004e94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b08c      	sub	sp, #48	; 0x30
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d102      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	f000 bc48 	b.w	8005738 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 8088 	beq.w	8004fc6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eb6:	4b99      	ldr	r3, [pc, #612]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004ec0:	4b96      	ldr	r3, [pc, #600]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec8:	2b10      	cmp	r3, #16
 8004eca:	d007      	beq.n	8004edc <HAL_RCC_OscConfig+0x48>
 8004ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ece:	2b18      	cmp	r3, #24
 8004ed0:	d111      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x62>
 8004ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed4:	f003 0303 	and.w	r3, r3, #3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d10c      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004edc:	4b8f      	ldr	r3, [pc, #572]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d06d      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x130>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d169      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	f000 bc21 	b.w	8005738 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004efe:	d106      	bne.n	8004f0e <HAL_RCC_OscConfig+0x7a>
 8004f00:	4b86      	ldr	r3, [pc, #536]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a85      	ldr	r2, [pc, #532]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8004f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f0a:	6013      	str	r3, [r2, #0]
 8004f0c:	e02e      	b.n	8004f6c <HAL_RCC_OscConfig+0xd8>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10c      	bne.n	8004f30 <HAL_RCC_OscConfig+0x9c>
 8004f16:	4b81      	ldr	r3, [pc, #516]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a80      	ldr	r2, [pc, #512]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8004f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	4b7e      	ldr	r3, [pc, #504]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a7d      	ldr	r2, [pc, #500]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8004f28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	e01d      	b.n	8004f6c <HAL_RCC_OscConfig+0xd8>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f38:	d10c      	bne.n	8004f54 <HAL_RCC_OscConfig+0xc0>
 8004f3a:	4b78      	ldr	r3, [pc, #480]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a77      	ldr	r2, [pc, #476]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8004f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	4b75      	ldr	r3, [pc, #468]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a74      	ldr	r2, [pc, #464]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8004f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f50:	6013      	str	r3, [r2, #0]
 8004f52:	e00b      	b.n	8004f6c <HAL_RCC_OscConfig+0xd8>
 8004f54:	4b71      	ldr	r3, [pc, #452]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a70      	ldr	r2, [pc, #448]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8004f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f5e:	6013      	str	r3, [r2, #0]
 8004f60:	4b6e      	ldr	r3, [pc, #440]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a6d      	ldr	r2, [pc, #436]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8004f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d013      	beq.n	8004f9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f74:	f7fc fcd0 	bl	8001918 <HAL_GetTick>
 8004f78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f7c:	f7fc fccc 	bl	8001918 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b64      	cmp	r3, #100	; 0x64
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e3d4      	b.n	8005738 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f8e:	4b63      	ldr	r3, [pc, #396]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0f0      	beq.n	8004f7c <HAL_RCC_OscConfig+0xe8>
 8004f9a:	e014      	b.n	8004fc6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9c:	f7fc fcbc 	bl	8001918 <HAL_GetTick>
 8004fa0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fa4:	f7fc fcb8 	bl	8001918 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b64      	cmp	r3, #100	; 0x64
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e3c0      	b.n	8005738 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004fb6:	4b59      	ldr	r3, [pc, #356]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f0      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x110>
 8004fc2:	e000      	b.n	8004fc6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 80ca 	beq.w	8005168 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fd4:	4b51      	ldr	r3, [pc, #324]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fdc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004fde:	4b4f      	ldr	r3, [pc, #316]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d007      	beq.n	8004ffa <HAL_RCC_OscConfig+0x166>
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	2b18      	cmp	r3, #24
 8004fee:	d156      	bne.n	800509e <HAL_RCC_OscConfig+0x20a>
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d151      	bne.n	800509e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ffa:	4b48      	ldr	r3, [pc, #288]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	2b00      	cmp	r3, #0
 8005004:	d005      	beq.n	8005012 <HAL_RCC_OscConfig+0x17e>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e392      	b.n	8005738 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005012:	4b42      	ldr	r3, [pc, #264]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f023 0219 	bic.w	r2, r3, #25
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	493f      	ldr	r1, [pc, #252]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8005020:	4313      	orrs	r3, r2
 8005022:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005024:	f7fc fc78 	bl	8001918 <HAL_GetTick>
 8005028:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800502c:	f7fc fc74 	bl	8001918 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e37c      	b.n	8005738 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800503e:	4b37      	ldr	r3, [pc, #220]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0304 	and.w	r3, r3, #4
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0f0      	beq.n	800502c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800504a:	f7fc fc71 	bl	8001930 <HAL_GetREVID>
 800504e:	4603      	mov	r3, r0
 8005050:	f241 0203 	movw	r2, #4099	; 0x1003
 8005054:	4293      	cmp	r3, r2
 8005056:	d817      	bhi.n	8005088 <HAL_RCC_OscConfig+0x1f4>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	2b40      	cmp	r3, #64	; 0x40
 800505e:	d108      	bne.n	8005072 <HAL_RCC_OscConfig+0x1de>
 8005060:	4b2e      	ldr	r3, [pc, #184]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005068:	4a2c      	ldr	r2, [pc, #176]	; (800511c <HAL_RCC_OscConfig+0x288>)
 800506a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800506e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005070:	e07a      	b.n	8005168 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005072:	4b2a      	ldr	r3, [pc, #168]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	031b      	lsls	r3, r3, #12
 8005080:	4926      	ldr	r1, [pc, #152]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8005082:	4313      	orrs	r3, r2
 8005084:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005086:	e06f      	b.n	8005168 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005088:	4b24      	ldr	r3, [pc, #144]	; (800511c <HAL_RCC_OscConfig+0x288>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	061b      	lsls	r3, r3, #24
 8005096:	4921      	ldr	r1, [pc, #132]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8005098:	4313      	orrs	r3, r2
 800509a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800509c:	e064      	b.n	8005168 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d047      	beq.n	8005136 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80050a6:	4b1d      	ldr	r3, [pc, #116]	; (800511c <HAL_RCC_OscConfig+0x288>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f023 0219 	bic.w	r2, r3, #25
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	491a      	ldr	r1, [pc, #104]	; (800511c <HAL_RCC_OscConfig+0x288>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b8:	f7fc fc2e 	bl	8001918 <HAL_GetTick>
 80050bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050c0:	f7fc fc2a 	bl	8001918 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e332      	b.n	8005738 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050d2:	4b12      	ldr	r3, [pc, #72]	; (800511c <HAL_RCC_OscConfig+0x288>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0304 	and.w	r3, r3, #4
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0f0      	beq.n	80050c0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050de:	f7fc fc27 	bl	8001930 <HAL_GetREVID>
 80050e2:	4603      	mov	r3, r0
 80050e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d819      	bhi.n	8005120 <HAL_RCC_OscConfig+0x28c>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	2b40      	cmp	r3, #64	; 0x40
 80050f2:	d108      	bne.n	8005106 <HAL_RCC_OscConfig+0x272>
 80050f4:	4b09      	ldr	r3, [pc, #36]	; (800511c <HAL_RCC_OscConfig+0x288>)
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80050fc:	4a07      	ldr	r2, [pc, #28]	; (800511c <HAL_RCC_OscConfig+0x288>)
 80050fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005102:	6053      	str	r3, [r2, #4]
 8005104:	e030      	b.n	8005168 <HAL_RCC_OscConfig+0x2d4>
 8005106:	4b05      	ldr	r3, [pc, #20]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	031b      	lsls	r3, r3, #12
 8005114:	4901      	ldr	r1, [pc, #4]	; (800511c <HAL_RCC_OscConfig+0x288>)
 8005116:	4313      	orrs	r3, r2
 8005118:	604b      	str	r3, [r1, #4]
 800511a:	e025      	b.n	8005168 <HAL_RCC_OscConfig+0x2d4>
 800511c:	58024400 	.word	0x58024400
 8005120:	4b9a      	ldr	r3, [pc, #616]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	061b      	lsls	r3, r3, #24
 800512e:	4997      	ldr	r1, [pc, #604]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 8005130:	4313      	orrs	r3, r2
 8005132:	604b      	str	r3, [r1, #4]
 8005134:	e018      	b.n	8005168 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005136:	4b95      	ldr	r3, [pc, #596]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a94      	ldr	r2, [pc, #592]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 800513c:	f023 0301 	bic.w	r3, r3, #1
 8005140:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005142:	f7fc fbe9 	bl	8001918 <HAL_GetTick>
 8005146:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005148:	e008      	b.n	800515c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800514a:	f7fc fbe5 	bl	8001918 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d901      	bls.n	800515c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e2ed      	b.n	8005738 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800515c:	4b8b      	ldr	r3, [pc, #556]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1f0      	bne.n	800514a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0310 	and.w	r3, r3, #16
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 80a9 	beq.w	80052c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005176:	4b85      	ldr	r3, [pc, #532]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800517e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005180:	4b82      	ldr	r3, [pc, #520]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 8005182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005184:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	2b08      	cmp	r3, #8
 800518a:	d007      	beq.n	800519c <HAL_RCC_OscConfig+0x308>
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	2b18      	cmp	r3, #24
 8005190:	d13a      	bne.n	8005208 <HAL_RCC_OscConfig+0x374>
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f003 0303 	and.w	r3, r3, #3
 8005198:	2b01      	cmp	r3, #1
 800519a:	d135      	bne.n	8005208 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800519c:	4b7b      	ldr	r3, [pc, #492]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <HAL_RCC_OscConfig+0x320>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	2b80      	cmp	r3, #128	; 0x80
 80051ae:	d001      	beq.n	80051b4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e2c1      	b.n	8005738 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051b4:	f7fc fbbc 	bl	8001930 <HAL_GetREVID>
 80051b8:	4603      	mov	r3, r0
 80051ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80051be:	4293      	cmp	r3, r2
 80051c0:	d817      	bhi.n	80051f2 <HAL_RCC_OscConfig+0x35e>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	2b20      	cmp	r3, #32
 80051c8:	d108      	bne.n	80051dc <HAL_RCC_OscConfig+0x348>
 80051ca:	4b70      	ldr	r3, [pc, #448]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80051d2:	4a6e      	ldr	r2, [pc, #440]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 80051d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051d8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051da:	e075      	b.n	80052c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051dc:	4b6b      	ldr	r3, [pc, #428]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	069b      	lsls	r3, r3, #26
 80051ea:	4968      	ldr	r1, [pc, #416]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80051f0:	e06a      	b.n	80052c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80051f2:	4b66      	ldr	r3, [pc, #408]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	061b      	lsls	r3, r3, #24
 8005200:	4962      	ldr	r1, [pc, #392]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 8005202:	4313      	orrs	r3, r2
 8005204:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005206:	e05f      	b.n	80052c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d042      	beq.n	8005296 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005210:	4b5e      	ldr	r3, [pc, #376]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a5d      	ldr	r2, [pc, #372]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 8005216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800521a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800521c:	f7fc fb7c 	bl	8001918 <HAL_GetTick>
 8005220:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005222:	e008      	b.n	8005236 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005224:	f7fc fb78 	bl	8001918 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e280      	b.n	8005738 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005236:	4b55      	ldr	r3, [pc, #340]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523e:	2b00      	cmp	r3, #0
 8005240:	d0f0      	beq.n	8005224 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005242:	f7fc fb75 	bl	8001930 <HAL_GetREVID>
 8005246:	4603      	mov	r3, r0
 8005248:	f241 0203 	movw	r2, #4099	; 0x1003
 800524c:	4293      	cmp	r3, r2
 800524e:	d817      	bhi.n	8005280 <HAL_RCC_OscConfig+0x3ec>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	2b20      	cmp	r3, #32
 8005256:	d108      	bne.n	800526a <HAL_RCC_OscConfig+0x3d6>
 8005258:	4b4c      	ldr	r3, [pc, #304]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005260:	4a4a      	ldr	r2, [pc, #296]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 8005262:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005266:	6053      	str	r3, [r2, #4]
 8005268:	e02e      	b.n	80052c8 <HAL_RCC_OscConfig+0x434>
 800526a:	4b48      	ldr	r3, [pc, #288]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	069b      	lsls	r3, r3, #26
 8005278:	4944      	ldr	r1, [pc, #272]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 800527a:	4313      	orrs	r3, r2
 800527c:	604b      	str	r3, [r1, #4]
 800527e:	e023      	b.n	80052c8 <HAL_RCC_OscConfig+0x434>
 8005280:	4b42      	ldr	r3, [pc, #264]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	061b      	lsls	r3, r3, #24
 800528e:	493f      	ldr	r1, [pc, #252]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 8005290:	4313      	orrs	r3, r2
 8005292:	60cb      	str	r3, [r1, #12]
 8005294:	e018      	b.n	80052c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005296:	4b3d      	ldr	r3, [pc, #244]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a3c      	ldr	r2, [pc, #240]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 800529c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052a2:	f7fc fb39 	bl	8001918 <HAL_GetTick>
 80052a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80052aa:	f7fc fb35 	bl	8001918 <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e23d      	b.n	8005738 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80052bc:	4b33      	ldr	r3, [pc, #204]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1f0      	bne.n	80052aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0308 	and.w	r3, r3, #8
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d036      	beq.n	8005342 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d019      	beq.n	8005310 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052dc:	4b2b      	ldr	r3, [pc, #172]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 80052de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052e0:	4a2a      	ldr	r2, [pc, #168]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 80052e2:	f043 0301 	orr.w	r3, r3, #1
 80052e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052e8:	f7fc fb16 	bl	8001918 <HAL_GetTick>
 80052ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052f0:	f7fc fb12 	bl	8001918 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e21a      	b.n	8005738 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005302:	4b22      	ldr	r3, [pc, #136]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 8005304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0f0      	beq.n	80052f0 <HAL_RCC_OscConfig+0x45c>
 800530e:	e018      	b.n	8005342 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005310:	4b1e      	ldr	r3, [pc, #120]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 8005312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005314:	4a1d      	ldr	r2, [pc, #116]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 8005316:	f023 0301 	bic.w	r3, r3, #1
 800531a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800531c:	f7fc fafc 	bl	8001918 <HAL_GetTick>
 8005320:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005322:	e008      	b.n	8005336 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005324:	f7fc faf8 	bl	8001918 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d901      	bls.n	8005336 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e200      	b.n	8005738 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005336:	4b15      	ldr	r3, [pc, #84]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 8005338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1f0      	bne.n	8005324 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 0320 	and.w	r3, r3, #32
 800534a:	2b00      	cmp	r3, #0
 800534c:	d039      	beq.n	80053c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d01c      	beq.n	8005390 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005356:	4b0d      	ldr	r3, [pc, #52]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a0c      	ldr	r2, [pc, #48]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 800535c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005360:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005362:	f7fc fad9 	bl	8001918 <HAL_GetTick>
 8005366:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005368:	e008      	b.n	800537c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800536a:	f7fc fad5 	bl	8001918 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e1dd      	b.n	8005738 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800537c:	4b03      	ldr	r3, [pc, #12]	; (800538c <HAL_RCC_OscConfig+0x4f8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0f0      	beq.n	800536a <HAL_RCC_OscConfig+0x4d6>
 8005388:	e01b      	b.n	80053c2 <HAL_RCC_OscConfig+0x52e>
 800538a:	bf00      	nop
 800538c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005390:	4b9b      	ldr	r3, [pc, #620]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a9a      	ldr	r2, [pc, #616]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 8005396:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800539a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800539c:	f7fc fabc 	bl	8001918 <HAL_GetTick>
 80053a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053a4:	f7fc fab8 	bl	8001918 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e1c0      	b.n	8005738 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80053b6:	4b92      	ldr	r3, [pc, #584]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1f0      	bne.n	80053a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 8081 	beq.w	80054d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80053d0:	4b8c      	ldr	r3, [pc, #560]	; (8005604 <HAL_RCC_OscConfig+0x770>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a8b      	ldr	r2, [pc, #556]	; (8005604 <HAL_RCC_OscConfig+0x770>)
 80053d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053dc:	f7fc fa9c 	bl	8001918 <HAL_GetTick>
 80053e0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053e4:	f7fc fa98 	bl	8001918 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b64      	cmp	r3, #100	; 0x64
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e1a0      	b.n	8005738 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053f6:	4b83      	ldr	r3, [pc, #524]	; (8005604 <HAL_RCC_OscConfig+0x770>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0f0      	beq.n	80053e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d106      	bne.n	8005418 <HAL_RCC_OscConfig+0x584>
 800540a:	4b7d      	ldr	r3, [pc, #500]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 800540c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540e:	4a7c      	ldr	r2, [pc, #496]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 8005410:	f043 0301 	orr.w	r3, r3, #1
 8005414:	6713      	str	r3, [r2, #112]	; 0x70
 8005416:	e02d      	b.n	8005474 <HAL_RCC_OscConfig+0x5e0>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10c      	bne.n	800543a <HAL_RCC_OscConfig+0x5a6>
 8005420:	4b77      	ldr	r3, [pc, #476]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 8005422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005424:	4a76      	ldr	r2, [pc, #472]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 8005426:	f023 0301 	bic.w	r3, r3, #1
 800542a:	6713      	str	r3, [r2, #112]	; 0x70
 800542c:	4b74      	ldr	r3, [pc, #464]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 800542e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005430:	4a73      	ldr	r2, [pc, #460]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 8005432:	f023 0304 	bic.w	r3, r3, #4
 8005436:	6713      	str	r3, [r2, #112]	; 0x70
 8005438:	e01c      	b.n	8005474 <HAL_RCC_OscConfig+0x5e0>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	2b05      	cmp	r3, #5
 8005440:	d10c      	bne.n	800545c <HAL_RCC_OscConfig+0x5c8>
 8005442:	4b6f      	ldr	r3, [pc, #444]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 8005444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005446:	4a6e      	ldr	r2, [pc, #440]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 8005448:	f043 0304 	orr.w	r3, r3, #4
 800544c:	6713      	str	r3, [r2, #112]	; 0x70
 800544e:	4b6c      	ldr	r3, [pc, #432]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 8005450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005452:	4a6b      	ldr	r2, [pc, #428]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 8005454:	f043 0301 	orr.w	r3, r3, #1
 8005458:	6713      	str	r3, [r2, #112]	; 0x70
 800545a:	e00b      	b.n	8005474 <HAL_RCC_OscConfig+0x5e0>
 800545c:	4b68      	ldr	r3, [pc, #416]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 800545e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005460:	4a67      	ldr	r2, [pc, #412]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 8005462:	f023 0301 	bic.w	r3, r3, #1
 8005466:	6713      	str	r3, [r2, #112]	; 0x70
 8005468:	4b65      	ldr	r3, [pc, #404]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 800546a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546c:	4a64      	ldr	r2, [pc, #400]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 800546e:	f023 0304 	bic.w	r3, r3, #4
 8005472:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d015      	beq.n	80054a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800547c:	f7fc fa4c 	bl	8001918 <HAL_GetTick>
 8005480:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005482:	e00a      	b.n	800549a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005484:	f7fc fa48 	bl	8001918 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005492:	4293      	cmp	r3, r2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e14e      	b.n	8005738 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800549a:	4b59      	ldr	r3, [pc, #356]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 800549c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549e:	f003 0302 	and.w	r3, r3, #2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0ee      	beq.n	8005484 <HAL_RCC_OscConfig+0x5f0>
 80054a6:	e014      	b.n	80054d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a8:	f7fc fa36 	bl	8001918 <HAL_GetTick>
 80054ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054ae:	e00a      	b.n	80054c6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054b0:	f7fc fa32 	bl	8001918 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80054be:	4293      	cmp	r3, r2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e138      	b.n	8005738 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054c6:	4b4e      	ldr	r3, [pc, #312]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 80054c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1ee      	bne.n	80054b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f000 812d 	beq.w	8005736 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80054dc:	4b48      	ldr	r3, [pc, #288]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054e4:	2b18      	cmp	r3, #24
 80054e6:	f000 80bd 	beq.w	8005664 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	f040 809e 	bne.w	8005630 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f4:	4b42      	ldr	r3, [pc, #264]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a41      	ldr	r2, [pc, #260]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 80054fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005500:	f7fc fa0a 	bl	8001918 <HAL_GetTick>
 8005504:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005506:	e008      	b.n	800551a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005508:	f7fc fa06 	bl	8001918 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e10e      	b.n	8005738 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800551a:	4b39      	ldr	r3, [pc, #228]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1f0      	bne.n	8005508 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005526:	4b36      	ldr	r3, [pc, #216]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 8005528:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800552a:	4b37      	ldr	r3, [pc, #220]	; (8005608 <HAL_RCC_OscConfig+0x774>)
 800552c:	4013      	ands	r3, r2
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005536:	0112      	lsls	r2, r2, #4
 8005538:	430a      	orrs	r2, r1
 800553a:	4931      	ldr	r1, [pc, #196]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 800553c:	4313      	orrs	r3, r2
 800553e:	628b      	str	r3, [r1, #40]	; 0x28
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005544:	3b01      	subs	r3, #1
 8005546:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800554e:	3b01      	subs	r3, #1
 8005550:	025b      	lsls	r3, r3, #9
 8005552:	b29b      	uxth	r3, r3
 8005554:	431a      	orrs	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555a:	3b01      	subs	r3, #1
 800555c:	041b      	lsls	r3, r3, #16
 800555e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005562:	431a      	orrs	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005568:	3b01      	subs	r3, #1
 800556a:	061b      	lsls	r3, r3, #24
 800556c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005570:	4923      	ldr	r1, [pc, #140]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 8005572:	4313      	orrs	r3, r2
 8005574:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005576:	4b22      	ldr	r3, [pc, #136]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 8005578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557a:	4a21      	ldr	r2, [pc, #132]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 800557c:	f023 0301 	bic.w	r3, r3, #1
 8005580:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005582:	4b1f      	ldr	r3, [pc, #124]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 8005584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005586:	4b21      	ldr	r3, [pc, #132]	; (800560c <HAL_RCC_OscConfig+0x778>)
 8005588:	4013      	ands	r3, r2
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800558e:	00d2      	lsls	r2, r2, #3
 8005590:	491b      	ldr	r1, [pc, #108]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 8005592:	4313      	orrs	r3, r2
 8005594:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005596:	4b1a      	ldr	r3, [pc, #104]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 8005598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559a:	f023 020c 	bic.w	r2, r3, #12
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a2:	4917      	ldr	r1, [pc, #92]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80055a8:	4b15      	ldr	r3, [pc, #84]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 80055aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ac:	f023 0202 	bic.w	r2, r3, #2
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b4:	4912      	ldr	r1, [pc, #72]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80055ba:	4b11      	ldr	r3, [pc, #68]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 80055bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055be:	4a10      	ldr	r2, [pc, #64]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 80055c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055c6:	4b0e      	ldr	r3, [pc, #56]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 80055c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ca:	4a0d      	ldr	r2, [pc, #52]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 80055cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80055d2:	4b0b      	ldr	r3, [pc, #44]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 80055d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d6:	4a0a      	ldr	r2, [pc, #40]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 80055d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80055de:	4b08      	ldr	r3, [pc, #32]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 80055e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e2:	4a07      	ldr	r2, [pc, #28]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 80055e4:	f043 0301 	orr.w	r3, r3, #1
 80055e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055ea:	4b05      	ldr	r3, [pc, #20]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a04      	ldr	r2, [pc, #16]	; (8005600 <HAL_RCC_OscConfig+0x76c>)
 80055f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f6:	f7fc f98f 	bl	8001918 <HAL_GetTick>
 80055fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055fc:	e011      	b.n	8005622 <HAL_RCC_OscConfig+0x78e>
 80055fe:	bf00      	nop
 8005600:	58024400 	.word	0x58024400
 8005604:	58024800 	.word	0x58024800
 8005608:	fffffc0c 	.word	0xfffffc0c
 800560c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005610:	f7fc f982 	bl	8001918 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	2b02      	cmp	r3, #2
 800561c:	d901      	bls.n	8005622 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e08a      	b.n	8005738 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005622:	4b47      	ldr	r3, [pc, #284]	; (8005740 <HAL_RCC_OscConfig+0x8ac>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d0f0      	beq.n	8005610 <HAL_RCC_OscConfig+0x77c>
 800562e:	e082      	b.n	8005736 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005630:	4b43      	ldr	r3, [pc, #268]	; (8005740 <HAL_RCC_OscConfig+0x8ac>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a42      	ldr	r2, [pc, #264]	; (8005740 <HAL_RCC_OscConfig+0x8ac>)
 8005636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800563a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563c:	f7fc f96c 	bl	8001918 <HAL_GetTick>
 8005640:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005642:	e008      	b.n	8005656 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005644:	f7fc f968 	bl	8001918 <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d901      	bls.n	8005656 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e070      	b.n	8005738 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005656:	4b3a      	ldr	r3, [pc, #232]	; (8005740 <HAL_RCC_OscConfig+0x8ac>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1f0      	bne.n	8005644 <HAL_RCC_OscConfig+0x7b0>
 8005662:	e068      	b.n	8005736 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005664:	4b36      	ldr	r3, [pc, #216]	; (8005740 <HAL_RCC_OscConfig+0x8ac>)
 8005666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005668:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800566a:	4b35      	ldr	r3, [pc, #212]	; (8005740 <HAL_RCC_OscConfig+0x8ac>)
 800566c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800566e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	2b01      	cmp	r3, #1
 8005676:	d031      	beq.n	80056dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	f003 0203 	and.w	r2, r3, #3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005682:	429a      	cmp	r2, r3
 8005684:	d12a      	bne.n	80056dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	091b      	lsrs	r3, r3, #4
 800568a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005692:	429a      	cmp	r2, r3
 8005694:	d122      	bne.n	80056dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d11a      	bne.n	80056dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	0a5b      	lsrs	r3, r3, #9
 80056aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d111      	bne.n	80056dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	0c1b      	lsrs	r3, r3, #16
 80056bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d108      	bne.n	80056dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	0e1b      	lsrs	r3, r3, #24
 80056ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056d8:	429a      	cmp	r2, r3
 80056da:	d001      	beq.n	80056e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e02b      	b.n	8005738 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80056e0:	4b17      	ldr	r3, [pc, #92]	; (8005740 <HAL_RCC_OscConfig+0x8ac>)
 80056e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e4:	08db      	lsrs	r3, r3, #3
 80056e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d01f      	beq.n	8005736 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80056f6:	4b12      	ldr	r3, [pc, #72]	; (8005740 <HAL_RCC_OscConfig+0x8ac>)
 80056f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fa:	4a11      	ldr	r2, [pc, #68]	; (8005740 <HAL_RCC_OscConfig+0x8ac>)
 80056fc:	f023 0301 	bic.w	r3, r3, #1
 8005700:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005702:	f7fc f909 	bl	8001918 <HAL_GetTick>
 8005706:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005708:	bf00      	nop
 800570a:	f7fc f905 	bl	8001918 <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	4293      	cmp	r3, r2
 8005714:	d0f9      	beq.n	800570a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005716:	4b0a      	ldr	r3, [pc, #40]	; (8005740 <HAL_RCC_OscConfig+0x8ac>)
 8005718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800571a:	4b0a      	ldr	r3, [pc, #40]	; (8005744 <HAL_RCC_OscConfig+0x8b0>)
 800571c:	4013      	ands	r3, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005722:	00d2      	lsls	r2, r2, #3
 8005724:	4906      	ldr	r1, [pc, #24]	; (8005740 <HAL_RCC_OscConfig+0x8ac>)
 8005726:	4313      	orrs	r3, r2
 8005728:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800572a:	4b05      	ldr	r3, [pc, #20]	; (8005740 <HAL_RCC_OscConfig+0x8ac>)
 800572c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572e:	4a04      	ldr	r2, [pc, #16]	; (8005740 <HAL_RCC_OscConfig+0x8ac>)
 8005730:	f043 0301 	orr.w	r3, r3, #1
 8005734:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3730      	adds	r7, #48	; 0x30
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	58024400 	.word	0x58024400
 8005744:	ffff0007 	.word	0xffff0007

08005748 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e19c      	b.n	8005a96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800575c:	4b8a      	ldr	r3, [pc, #552]	; (8005988 <HAL_RCC_ClockConfig+0x240>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 030f 	and.w	r3, r3, #15
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d910      	bls.n	800578c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800576a:	4b87      	ldr	r3, [pc, #540]	; (8005988 <HAL_RCC_ClockConfig+0x240>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f023 020f 	bic.w	r2, r3, #15
 8005772:	4985      	ldr	r1, [pc, #532]	; (8005988 <HAL_RCC_ClockConfig+0x240>)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	4313      	orrs	r3, r2
 8005778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800577a:	4b83      	ldr	r3, [pc, #524]	; (8005988 <HAL_RCC_ClockConfig+0x240>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 030f 	and.w	r3, r3, #15
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	429a      	cmp	r2, r3
 8005786:	d001      	beq.n	800578c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e184      	b.n	8005a96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b00      	cmp	r3, #0
 8005796:	d010      	beq.n	80057ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	4b7b      	ldr	r3, [pc, #492]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d908      	bls.n	80057ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80057a8:	4b78      	ldr	r3, [pc, #480]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	4975      	ldr	r1, [pc, #468]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0308 	and.w	r3, r3, #8
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d010      	beq.n	80057e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	695a      	ldr	r2, [r3, #20]
 80057ca:	4b70      	ldr	r3, [pc, #448]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 80057cc:	69db      	ldr	r3, [r3, #28]
 80057ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d908      	bls.n	80057e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80057d6:	4b6d      	ldr	r3, [pc, #436]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	496a      	ldr	r1, [pc, #424]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0310 	and.w	r3, r3, #16
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d010      	beq.n	8005816 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	699a      	ldr	r2, [r3, #24]
 80057f8:	4b64      	ldr	r3, [pc, #400]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 80057fa:	69db      	ldr	r3, [r3, #28]
 80057fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005800:	429a      	cmp	r2, r3
 8005802:	d908      	bls.n	8005816 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005804:	4b61      	ldr	r3, [pc, #388]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 8005806:	69db      	ldr	r3, [r3, #28]
 8005808:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	495e      	ldr	r1, [pc, #376]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 8005812:	4313      	orrs	r3, r2
 8005814:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0320 	and.w	r3, r3, #32
 800581e:	2b00      	cmp	r3, #0
 8005820:	d010      	beq.n	8005844 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	69da      	ldr	r2, [r3, #28]
 8005826:	4b59      	ldr	r3, [pc, #356]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800582e:	429a      	cmp	r2, r3
 8005830:	d908      	bls.n	8005844 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005832:	4b56      	ldr	r3, [pc, #344]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	4953      	ldr	r1, [pc, #332]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 8005840:	4313      	orrs	r3, r2
 8005842:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d010      	beq.n	8005872 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	4b4d      	ldr	r3, [pc, #308]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	f003 030f 	and.w	r3, r3, #15
 800585c:	429a      	cmp	r2, r3
 800585e:	d908      	bls.n	8005872 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005860:	4b4a      	ldr	r3, [pc, #296]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	f023 020f 	bic.w	r2, r3, #15
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	4947      	ldr	r1, [pc, #284]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 800586e:	4313      	orrs	r3, r2
 8005870:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b00      	cmp	r3, #0
 800587c:	d055      	beq.n	800592a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800587e:	4b43      	ldr	r3, [pc, #268]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	4940      	ldr	r1, [pc, #256]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 800588c:	4313      	orrs	r3, r2
 800588e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	2b02      	cmp	r3, #2
 8005896:	d107      	bne.n	80058a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005898:	4b3c      	ldr	r3, [pc, #240]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d121      	bne.n	80058e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e0f6      	b.n	8005a96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d107      	bne.n	80058c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80058b0:	4b36      	ldr	r3, [pc, #216]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d115      	bne.n	80058e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e0ea      	b.n	8005a96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d107      	bne.n	80058d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80058c8:	4b30      	ldr	r3, [pc, #192]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d109      	bne.n	80058e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e0de      	b.n	8005a96 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058d8:	4b2c      	ldr	r3, [pc, #176]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e0d6      	b.n	8005a96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058e8:	4b28      	ldr	r3, [pc, #160]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	f023 0207 	bic.w	r2, r3, #7
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	4925      	ldr	r1, [pc, #148]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058fa:	f7fc f80d 	bl	8001918 <HAL_GetTick>
 80058fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005900:	e00a      	b.n	8005918 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005902:	f7fc f809 	bl	8001918 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005910:	4293      	cmp	r3, r2
 8005912:	d901      	bls.n	8005918 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e0be      	b.n	8005a96 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005918:	4b1c      	ldr	r3, [pc, #112]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	00db      	lsls	r3, r3, #3
 8005926:	429a      	cmp	r2, r3
 8005928:	d1eb      	bne.n	8005902 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d010      	beq.n	8005958 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	4b14      	ldr	r3, [pc, #80]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	429a      	cmp	r2, r3
 8005944:	d208      	bcs.n	8005958 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005946:	4b11      	ldr	r3, [pc, #68]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	f023 020f 	bic.w	r2, r3, #15
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	490e      	ldr	r1, [pc, #56]	; (800598c <HAL_RCC_ClockConfig+0x244>)
 8005954:	4313      	orrs	r3, r2
 8005956:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005958:	4b0b      	ldr	r3, [pc, #44]	; (8005988 <HAL_RCC_ClockConfig+0x240>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 030f 	and.w	r3, r3, #15
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	429a      	cmp	r2, r3
 8005964:	d214      	bcs.n	8005990 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005966:	4b08      	ldr	r3, [pc, #32]	; (8005988 <HAL_RCC_ClockConfig+0x240>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f023 020f 	bic.w	r2, r3, #15
 800596e:	4906      	ldr	r1, [pc, #24]	; (8005988 <HAL_RCC_ClockConfig+0x240>)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	4313      	orrs	r3, r2
 8005974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005976:	4b04      	ldr	r3, [pc, #16]	; (8005988 <HAL_RCC_ClockConfig+0x240>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 030f 	and.w	r3, r3, #15
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	429a      	cmp	r2, r3
 8005982:	d005      	beq.n	8005990 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	e086      	b.n	8005a96 <HAL_RCC_ClockConfig+0x34e>
 8005988:	52002000 	.word	0x52002000
 800598c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b00      	cmp	r3, #0
 800599a:	d010      	beq.n	80059be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	691a      	ldr	r2, [r3, #16]
 80059a0:	4b3f      	ldr	r3, [pc, #252]	; (8005aa0 <HAL_RCC_ClockConfig+0x358>)
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d208      	bcs.n	80059be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80059ac:	4b3c      	ldr	r3, [pc, #240]	; (8005aa0 <HAL_RCC_ClockConfig+0x358>)
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	4939      	ldr	r1, [pc, #228]	; (8005aa0 <HAL_RCC_ClockConfig+0x358>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0308 	and.w	r3, r3, #8
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d010      	beq.n	80059ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	695a      	ldr	r2, [r3, #20]
 80059ce:	4b34      	ldr	r3, [pc, #208]	; (8005aa0 <HAL_RCC_ClockConfig+0x358>)
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d208      	bcs.n	80059ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80059da:	4b31      	ldr	r3, [pc, #196]	; (8005aa0 <HAL_RCC_ClockConfig+0x358>)
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	492e      	ldr	r1, [pc, #184]	; (8005aa0 <HAL_RCC_ClockConfig+0x358>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0310 	and.w	r3, r3, #16
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d010      	beq.n	8005a1a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	699a      	ldr	r2, [r3, #24]
 80059fc:	4b28      	ldr	r3, [pc, #160]	; (8005aa0 <HAL_RCC_ClockConfig+0x358>)
 80059fe:	69db      	ldr	r3, [r3, #28]
 8005a00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d208      	bcs.n	8005a1a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005a08:	4b25      	ldr	r3, [pc, #148]	; (8005aa0 <HAL_RCC_ClockConfig+0x358>)
 8005a0a:	69db      	ldr	r3, [r3, #28]
 8005a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	4922      	ldr	r1, [pc, #136]	; (8005aa0 <HAL_RCC_ClockConfig+0x358>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0320 	and.w	r3, r3, #32
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d010      	beq.n	8005a48 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	69da      	ldr	r2, [r3, #28]
 8005a2a:	4b1d      	ldr	r3, [pc, #116]	; (8005aa0 <HAL_RCC_ClockConfig+0x358>)
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d208      	bcs.n	8005a48 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a36:	4b1a      	ldr	r3, [pc, #104]	; (8005aa0 <HAL_RCC_ClockConfig+0x358>)
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	4917      	ldr	r1, [pc, #92]	; (8005aa0 <HAL_RCC_ClockConfig+0x358>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a48:	f000 f834 	bl	8005ab4 <HAL_RCC_GetSysClockFreq>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	4b14      	ldr	r3, [pc, #80]	; (8005aa0 <HAL_RCC_ClockConfig+0x358>)
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	0a1b      	lsrs	r3, r3, #8
 8005a54:	f003 030f 	and.w	r3, r3, #15
 8005a58:	4912      	ldr	r1, [pc, #72]	; (8005aa4 <HAL_RCC_ClockConfig+0x35c>)
 8005a5a:	5ccb      	ldrb	r3, [r1, r3]
 8005a5c:	f003 031f 	and.w	r3, r3, #31
 8005a60:	fa22 f303 	lsr.w	r3, r2, r3
 8005a64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a66:	4b0e      	ldr	r3, [pc, #56]	; (8005aa0 <HAL_RCC_ClockConfig+0x358>)
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	4a0d      	ldr	r2, [pc, #52]	; (8005aa4 <HAL_RCC_ClockConfig+0x35c>)
 8005a70:	5cd3      	ldrb	r3, [r2, r3]
 8005a72:	f003 031f 	and.w	r3, r3, #31
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	fa22 f303 	lsr.w	r3, r2, r3
 8005a7c:	4a0a      	ldr	r2, [pc, #40]	; (8005aa8 <HAL_RCC_ClockConfig+0x360>)
 8005a7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a80:	4a0a      	ldr	r2, [pc, #40]	; (8005aac <HAL_RCC_ClockConfig+0x364>)
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005a86:	4b0a      	ldr	r3, [pc, #40]	; (8005ab0 <HAL_RCC_ClockConfig+0x368>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7fb fb5e 	bl	800114c <HAL_InitTick>
 8005a90:	4603      	mov	r3, r0
 8005a92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	58024400 	.word	0x58024400
 8005aa4:	0801c844 	.word	0x0801c844
 8005aa8:	24000008 	.word	0x24000008
 8005aac:	24000004 	.word	0x24000004
 8005ab0:	2400000c 	.word	0x2400000c

08005ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b089      	sub	sp, #36	; 0x24
 8005ab8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005aba:	4bb3      	ldr	r3, [pc, #716]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ac2:	2b18      	cmp	r3, #24
 8005ac4:	f200 8155 	bhi.w	8005d72 <HAL_RCC_GetSysClockFreq+0x2be>
 8005ac8:	a201      	add	r2, pc, #4	; (adr r2, 8005ad0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ace:	bf00      	nop
 8005ad0:	08005b35 	.word	0x08005b35
 8005ad4:	08005d73 	.word	0x08005d73
 8005ad8:	08005d73 	.word	0x08005d73
 8005adc:	08005d73 	.word	0x08005d73
 8005ae0:	08005d73 	.word	0x08005d73
 8005ae4:	08005d73 	.word	0x08005d73
 8005ae8:	08005d73 	.word	0x08005d73
 8005aec:	08005d73 	.word	0x08005d73
 8005af0:	08005b5b 	.word	0x08005b5b
 8005af4:	08005d73 	.word	0x08005d73
 8005af8:	08005d73 	.word	0x08005d73
 8005afc:	08005d73 	.word	0x08005d73
 8005b00:	08005d73 	.word	0x08005d73
 8005b04:	08005d73 	.word	0x08005d73
 8005b08:	08005d73 	.word	0x08005d73
 8005b0c:	08005d73 	.word	0x08005d73
 8005b10:	08005b61 	.word	0x08005b61
 8005b14:	08005d73 	.word	0x08005d73
 8005b18:	08005d73 	.word	0x08005d73
 8005b1c:	08005d73 	.word	0x08005d73
 8005b20:	08005d73 	.word	0x08005d73
 8005b24:	08005d73 	.word	0x08005d73
 8005b28:	08005d73 	.word	0x08005d73
 8005b2c:	08005d73 	.word	0x08005d73
 8005b30:	08005b67 	.word	0x08005b67
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b34:	4b94      	ldr	r3, [pc, #592]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0320 	and.w	r3, r3, #32
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d009      	beq.n	8005b54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b40:	4b91      	ldr	r3, [pc, #580]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	08db      	lsrs	r3, r3, #3
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	4a90      	ldr	r2, [pc, #576]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005b52:	e111      	b.n	8005d78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005b54:	4b8d      	ldr	r3, [pc, #564]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005b56:	61bb      	str	r3, [r7, #24]
      break;
 8005b58:	e10e      	b.n	8005d78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005b5a:	4b8d      	ldr	r3, [pc, #564]	; (8005d90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005b5c:	61bb      	str	r3, [r7, #24]
      break;
 8005b5e:	e10b      	b.n	8005d78 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005b60:	4b8c      	ldr	r3, [pc, #560]	; (8005d94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005b62:	61bb      	str	r3, [r7, #24]
      break;
 8005b64:	e108      	b.n	8005d78 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b66:	4b88      	ldr	r3, [pc, #544]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6a:	f003 0303 	and.w	r3, r3, #3
 8005b6e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005b70:	4b85      	ldr	r3, [pc, #532]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b74:	091b      	lsrs	r3, r3, #4
 8005b76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b7a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005b7c:	4b82      	ldr	r3, [pc, #520]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005b86:	4b80      	ldr	r3, [pc, #512]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b8a:	08db      	lsrs	r3, r3, #3
 8005b8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	fb02 f303 	mul.w	r3, r2, r3
 8005b96:	ee07 3a90 	vmov	s15, r3
 8005b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b9e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 80e1 	beq.w	8005d6c <HAL_RCC_GetSysClockFreq+0x2b8>
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	f000 8083 	beq.w	8005cb8 <HAL_RCC_GetSysClockFreq+0x204>
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	f200 80a1 	bhi.w	8005cfc <HAL_RCC_GetSysClockFreq+0x248>
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <HAL_RCC_GetSysClockFreq+0x114>
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d056      	beq.n	8005c74 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005bc6:	e099      	b.n	8005cfc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bc8:	4b6f      	ldr	r3, [pc, #444]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0320 	and.w	r3, r3, #32
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d02d      	beq.n	8005c30 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bd4:	4b6c      	ldr	r3, [pc, #432]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	08db      	lsrs	r3, r3, #3
 8005bda:	f003 0303 	and.w	r3, r3, #3
 8005bde:	4a6b      	ldr	r2, [pc, #428]	; (8005d8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005be0:	fa22 f303 	lsr.w	r3, r2, r3
 8005be4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	ee07 3a90 	vmov	s15, r3
 8005bec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	ee07 3a90 	vmov	s15, r3
 8005bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bfe:	4b62      	ldr	r3, [pc, #392]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c06:	ee07 3a90 	vmov	s15, r3
 8005c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c12:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005d98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c2a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005c2e:	e087      	b.n	8005d40 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	ee07 3a90 	vmov	s15, r3
 8005c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c3a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005d9c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c42:	4b51      	ldr	r3, [pc, #324]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c4a:	ee07 3a90 	vmov	s15, r3
 8005c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c52:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c56:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005d98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005c72:	e065      	b.n	8005d40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	ee07 3a90 	vmov	s15, r3
 8005c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c7e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005da0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c86:	4b40      	ldr	r3, [pc, #256]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c8e:	ee07 3a90 	vmov	s15, r3
 8005c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c96:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c9a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005d98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005cb6:	e043      	b.n	8005d40 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	ee07 3a90 	vmov	s15, r3
 8005cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005da4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cca:	4b2f      	ldr	r3, [pc, #188]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd2:	ee07 3a90 	vmov	s15, r3
 8005cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cda:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cde:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005d98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005cfa:	e021      	b.n	8005d40 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	ee07 3a90 	vmov	s15, r3
 8005d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d06:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005da0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d0e:	4b1e      	ldr	r3, [pc, #120]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d16:	ee07 3a90 	vmov	s15, r3
 8005d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d22:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005d98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005d3e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005d40:	4b11      	ldr	r3, [pc, #68]	; (8005d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d44:	0a5b      	lsrs	r3, r3, #9
 8005d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	ee07 3a90 	vmov	s15, r3
 8005d54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d58:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d64:	ee17 3a90 	vmov	r3, s15
 8005d68:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005d6a:	e005      	b.n	8005d78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	61bb      	str	r3, [r7, #24]
      break;
 8005d70:	e002      	b.n	8005d78 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005d72:	4b07      	ldr	r3, [pc, #28]	; (8005d90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d74:	61bb      	str	r3, [r7, #24]
      break;
 8005d76:	bf00      	nop
  }

  return sysclockfreq;
 8005d78:	69bb      	ldr	r3, [r7, #24]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3724      	adds	r7, #36	; 0x24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	58024400 	.word	0x58024400
 8005d8c:	03d09000 	.word	0x03d09000
 8005d90:	003d0900 	.word	0x003d0900
 8005d94:	016e3600 	.word	0x016e3600
 8005d98:	46000000 	.word	0x46000000
 8005d9c:	4c742400 	.word	0x4c742400
 8005da0:	4a742400 	.word	0x4a742400
 8005da4:	4bb71b00 	.word	0x4bb71b00

08005da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005dae:	f7ff fe81 	bl	8005ab4 <HAL_RCC_GetSysClockFreq>
 8005db2:	4602      	mov	r2, r0
 8005db4:	4b10      	ldr	r3, [pc, #64]	; (8005df8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	0a1b      	lsrs	r3, r3, #8
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	490f      	ldr	r1, [pc, #60]	; (8005dfc <HAL_RCC_GetHCLKFreq+0x54>)
 8005dc0:	5ccb      	ldrb	r3, [r1, r3]
 8005dc2:	f003 031f 	and.w	r3, r3, #31
 8005dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005dcc:	4b0a      	ldr	r3, [pc, #40]	; (8005df8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	f003 030f 	and.w	r3, r3, #15
 8005dd4:	4a09      	ldr	r2, [pc, #36]	; (8005dfc <HAL_RCC_GetHCLKFreq+0x54>)
 8005dd6:	5cd3      	ldrb	r3, [r2, r3]
 8005dd8:	f003 031f 	and.w	r3, r3, #31
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	fa22 f303 	lsr.w	r3, r2, r3
 8005de2:	4a07      	ldr	r2, [pc, #28]	; (8005e00 <HAL_RCC_GetHCLKFreq+0x58>)
 8005de4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005de6:	4a07      	ldr	r2, [pc, #28]	; (8005e04 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005dec:	4b04      	ldr	r3, [pc, #16]	; (8005e00 <HAL_RCC_GetHCLKFreq+0x58>)
 8005dee:	681b      	ldr	r3, [r3, #0]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	58024400 	.word	0x58024400
 8005dfc:	0801c844 	.word	0x0801c844
 8005e00:	24000008 	.word	0x24000008
 8005e04:	24000004 	.word	0x24000004

08005e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005e0c:	f7ff ffcc 	bl	8005da8 <HAL_RCC_GetHCLKFreq>
 8005e10:	4602      	mov	r2, r0
 8005e12:	4b06      	ldr	r3, [pc, #24]	; (8005e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	091b      	lsrs	r3, r3, #4
 8005e18:	f003 0307 	and.w	r3, r3, #7
 8005e1c:	4904      	ldr	r1, [pc, #16]	; (8005e30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e1e:	5ccb      	ldrb	r3, [r1, r3]
 8005e20:	f003 031f 	and.w	r3, r3, #31
 8005e24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	58024400 	.word	0x58024400
 8005e30:	0801c844 	.word	0x0801c844

08005e34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	223f      	movs	r2, #63	; 0x3f
 8005e42:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005e44:	4b1a      	ldr	r3, [pc, #104]	; (8005eb0 <HAL_RCC_GetClockConfig+0x7c>)
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	f003 0207 	and.w	r2, r3, #7
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005e50:	4b17      	ldr	r3, [pc, #92]	; (8005eb0 <HAL_RCC_GetClockConfig+0x7c>)
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005e5c:	4b14      	ldr	r3, [pc, #80]	; (8005eb0 <HAL_RCC_GetClockConfig+0x7c>)
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	f003 020f 	and.w	r2, r3, #15
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005e68:	4b11      	ldr	r3, [pc, #68]	; (8005eb0 <HAL_RCC_GetClockConfig+0x7c>)
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005e74:	4b0e      	ldr	r3, [pc, #56]	; (8005eb0 <HAL_RCC_GetClockConfig+0x7c>)
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005e80:	4b0b      	ldr	r3, [pc, #44]	; (8005eb0 <HAL_RCC_GetClockConfig+0x7c>)
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005e8c:	4b08      	ldr	r3, [pc, #32]	; (8005eb0 <HAL_RCC_GetClockConfig+0x7c>)
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e98:	4b06      	ldr	r3, [pc, #24]	; (8005eb4 <HAL_RCC_GetClockConfig+0x80>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 020f 	and.w	r2, r3, #15
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	601a      	str	r2, [r3, #0]
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	58024400 	.word	0x58024400
 8005eb4:	52002000 	.word	0x52002000

08005eb8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ebc:	b0ca      	sub	sp, #296	; 0x128
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005edc:	2500      	movs	r5, #0
 8005ede:	ea54 0305 	orrs.w	r3, r4, r5
 8005ee2:	d049      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005ee8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005eea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005eee:	d02f      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005ef0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005ef4:	d828      	bhi.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005ef6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005efa:	d01a      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005efc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f00:	d822      	bhi.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f0a:	d007      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005f0c:	e01c      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f0e:	4bb8      	ldr	r3, [pc, #736]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f12:	4ab7      	ldr	r2, [pc, #732]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f1a:	e01a      	b.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f20:	3308      	adds	r3, #8
 8005f22:	2102      	movs	r1, #2
 8005f24:	4618      	mov	r0, r3
 8005f26:	f001 f9d1 	bl	80072cc <RCCEx_PLL2_Config>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f30:	e00f      	b.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f36:	3328      	adds	r3, #40	; 0x28
 8005f38:	2102      	movs	r1, #2
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f001 fa78 	bl	8007430 <RCCEx_PLL3_Config>
 8005f40:	4603      	mov	r3, r0
 8005f42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005f46:	e004      	b.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005f4e:	e000      	b.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10a      	bne.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005f5a:	4ba5      	ldr	r3, [pc, #660]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f5e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f68:	4aa1      	ldr	r2, [pc, #644]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005f6a:	430b      	orrs	r3, r1
 8005f6c:	6513      	str	r3, [r2, #80]	; 0x50
 8005f6e:	e003      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005f74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f80:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005f84:	f04f 0900 	mov.w	r9, #0
 8005f88:	ea58 0309 	orrs.w	r3, r8, r9
 8005f8c:	d047      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d82a      	bhi.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005f98:	a201      	add	r2, pc, #4	; (adr r2, 8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f9e:	bf00      	nop
 8005fa0:	08005fb5 	.word	0x08005fb5
 8005fa4:	08005fc3 	.word	0x08005fc3
 8005fa8:	08005fd9 	.word	0x08005fd9
 8005fac:	08005ff7 	.word	0x08005ff7
 8005fb0:	08005ff7 	.word	0x08005ff7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fb4:	4b8e      	ldr	r3, [pc, #568]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	4a8d      	ldr	r2, [pc, #564]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fc0:	e01a      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fc6:	3308      	adds	r3, #8
 8005fc8:	2100      	movs	r1, #0
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f001 f97e 	bl	80072cc <RCCEx_PLL2_Config>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fd6:	e00f      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005fdc:	3328      	adds	r3, #40	; 0x28
 8005fde:	2100      	movs	r1, #0
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f001 fa25 	bl	8007430 <RCCEx_PLL3_Config>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005fec:	e004      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8005ff4:	e000      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005ff6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10a      	bne.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006000:	4b7b      	ldr	r3, [pc, #492]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006004:	f023 0107 	bic.w	r1, r3, #7
 8006008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800600c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800600e:	4a78      	ldr	r2, [pc, #480]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006010:	430b      	orrs	r3, r1
 8006012:	6513      	str	r3, [r2, #80]	; 0x50
 8006014:	e003      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006016:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800601a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800601e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006026:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800602a:	f04f 0b00 	mov.w	fp, #0
 800602e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006032:	d04c      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800603a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800603e:	d030      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006044:	d829      	bhi.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006046:	2bc0      	cmp	r3, #192	; 0xc0
 8006048:	d02d      	beq.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800604a:	2bc0      	cmp	r3, #192	; 0xc0
 800604c:	d825      	bhi.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800604e:	2b80      	cmp	r3, #128	; 0x80
 8006050:	d018      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006052:	2b80      	cmp	r3, #128	; 0x80
 8006054:	d821      	bhi.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006056:	2b00      	cmp	r3, #0
 8006058:	d002      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800605a:	2b40      	cmp	r3, #64	; 0x40
 800605c:	d007      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800605e:	e01c      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006060:	4b63      	ldr	r3, [pc, #396]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006064:	4a62      	ldr	r2, [pc, #392]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800606a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800606c:	e01c      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800606e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006072:	3308      	adds	r3, #8
 8006074:	2100      	movs	r1, #0
 8006076:	4618      	mov	r0, r3
 8006078:	f001 f928 	bl	80072cc <RCCEx_PLL2_Config>
 800607c:	4603      	mov	r3, r0
 800607e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006082:	e011      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006088:	3328      	adds	r3, #40	; 0x28
 800608a:	2100      	movs	r1, #0
 800608c:	4618      	mov	r0, r3
 800608e:	f001 f9cf 	bl	8007430 <RCCEx_PLL3_Config>
 8006092:	4603      	mov	r3, r0
 8006094:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006098:	e006      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80060a0:	e002      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80060a2:	bf00      	nop
 80060a4:	e000      	b.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80060a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10a      	bne.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80060b0:	4b4f      	ldr	r3, [pc, #316]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060b4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80060b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060be:	4a4c      	ldr	r2, [pc, #304]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80060c0:	430b      	orrs	r3, r1
 80060c2:	6513      	str	r3, [r2, #80]	; 0x50
 80060c4:	e003      	b.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80060ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80060ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80060da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80060de:	2300      	movs	r3, #0
 80060e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80060e4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80060e8:	460b      	mov	r3, r1
 80060ea:	4313      	orrs	r3, r2
 80060ec:	d053      	beq.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80060ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80060f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80060f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060fa:	d035      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80060fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006100:	d82e      	bhi.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006102:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006106:	d031      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006108:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800610c:	d828      	bhi.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800610e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006112:	d01a      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006114:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006118:	d822      	bhi.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800611e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006122:	d007      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006124:	e01c      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006126:	4b32      	ldr	r3, [pc, #200]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612a:	4a31      	ldr	r2, [pc, #196]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800612c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006130:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006132:	e01c      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006138:	3308      	adds	r3, #8
 800613a:	2100      	movs	r1, #0
 800613c:	4618      	mov	r0, r3
 800613e:	f001 f8c5 	bl	80072cc <RCCEx_PLL2_Config>
 8006142:	4603      	mov	r3, r0
 8006144:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006148:	e011      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800614a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800614e:	3328      	adds	r3, #40	; 0x28
 8006150:	2100      	movs	r1, #0
 8006152:	4618      	mov	r0, r3
 8006154:	f001 f96c 	bl	8007430 <RCCEx_PLL3_Config>
 8006158:	4603      	mov	r3, r0
 800615a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800615e:	e006      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006166:	e002      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006168:	bf00      	nop
 800616a:	e000      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800616c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800616e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10b      	bne.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006176:	4b1e      	ldr	r3, [pc, #120]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800617a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800617e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006182:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006186:	4a1a      	ldr	r2, [pc, #104]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006188:	430b      	orrs	r3, r1
 800618a:	6593      	str	r3, [r2, #88]	; 0x58
 800618c:	e003      	b.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800618e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006192:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006196:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800619a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80061a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80061a6:	2300      	movs	r3, #0
 80061a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80061ac:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80061b0:	460b      	mov	r3, r1
 80061b2:	4313      	orrs	r3, r2
 80061b4:	d056      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80061b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80061ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80061be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061c2:	d038      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80061c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061c8:	d831      	bhi.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80061ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80061ce:	d034      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80061d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80061d4:	d82b      	bhi.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80061d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061da:	d01d      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80061dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061e0:	d825      	bhi.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d006      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80061e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061ea:	d00a      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80061ec:	e01f      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80061ee:	bf00      	nop
 80061f0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061f4:	4ba2      	ldr	r3, [pc, #648]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f8:	4aa1      	ldr	r2, [pc, #644]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80061fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006200:	e01c      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006206:	3308      	adds	r3, #8
 8006208:	2100      	movs	r1, #0
 800620a:	4618      	mov	r0, r3
 800620c:	f001 f85e 	bl	80072cc <RCCEx_PLL2_Config>
 8006210:	4603      	mov	r3, r0
 8006212:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006216:	e011      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006218:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800621c:	3328      	adds	r3, #40	; 0x28
 800621e:	2100      	movs	r1, #0
 8006220:	4618      	mov	r0, r3
 8006222:	f001 f905 	bl	8007430 <RCCEx_PLL3_Config>
 8006226:	4603      	mov	r3, r0
 8006228:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800622c:	e006      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006234:	e002      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006236:	bf00      	nop
 8006238:	e000      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800623a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800623c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10b      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006244:	4b8e      	ldr	r3, [pc, #568]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006248:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800624c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006250:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006254:	4a8a      	ldr	r2, [pc, #552]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006256:	430b      	orrs	r3, r1
 8006258:	6593      	str	r3, [r2, #88]	; 0x58
 800625a:	e003      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006260:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006270:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006274:	2300      	movs	r3, #0
 8006276:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800627a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800627e:	460b      	mov	r3, r1
 8006280:	4313      	orrs	r3, r2
 8006282:	d03a      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800628a:	2b30      	cmp	r3, #48	; 0x30
 800628c:	d01f      	beq.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x416>
 800628e:	2b30      	cmp	r3, #48	; 0x30
 8006290:	d819      	bhi.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006292:	2b20      	cmp	r3, #32
 8006294:	d00c      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006296:	2b20      	cmp	r3, #32
 8006298:	d815      	bhi.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800629a:	2b00      	cmp	r3, #0
 800629c:	d019      	beq.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800629e:	2b10      	cmp	r3, #16
 80062a0:	d111      	bne.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062a2:	4b77      	ldr	r3, [pc, #476]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a6:	4a76      	ldr	r2, [pc, #472]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80062ae:	e011      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80062b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062b4:	3308      	adds	r3, #8
 80062b6:	2102      	movs	r1, #2
 80062b8:	4618      	mov	r0, r3
 80062ba:	f001 f807 	bl	80072cc <RCCEx_PLL2_Config>
 80062be:	4603      	mov	r3, r0
 80062c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80062c4:	e006      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80062cc:	e002      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80062ce:	bf00      	nop
 80062d0:	e000      	b.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80062d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10a      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80062dc:	4b68      	ldr	r3, [pc, #416]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062e0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80062e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ea:	4a65      	ldr	r2, [pc, #404]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80062ec:	430b      	orrs	r3, r1
 80062ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80062f0:	e003      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80062f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80062fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006302:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006306:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800630a:	2300      	movs	r3, #0
 800630c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006310:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006314:	460b      	mov	r3, r1
 8006316:	4313      	orrs	r3, r2
 8006318:	d051      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800631a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800631e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006320:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006324:	d035      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006326:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800632a:	d82e      	bhi.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800632c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006330:	d031      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006332:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006336:	d828      	bhi.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800633c:	d01a      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800633e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006342:	d822      	bhi.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800634c:	d007      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800634e:	e01c      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006350:	4b4b      	ldr	r3, [pc, #300]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006354:	4a4a      	ldr	r2, [pc, #296]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800635a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800635c:	e01c      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800635e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006362:	3308      	adds	r3, #8
 8006364:	2100      	movs	r1, #0
 8006366:	4618      	mov	r0, r3
 8006368:	f000 ffb0 	bl	80072cc <RCCEx_PLL2_Config>
 800636c:	4603      	mov	r3, r0
 800636e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006372:	e011      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006378:	3328      	adds	r3, #40	; 0x28
 800637a:	2100      	movs	r1, #0
 800637c:	4618      	mov	r0, r3
 800637e:	f001 f857 	bl	8007430 <RCCEx_PLL3_Config>
 8006382:	4603      	mov	r3, r0
 8006384:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006388:	e006      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006390:	e002      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006392:	bf00      	nop
 8006394:	e000      	b.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006396:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006398:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10a      	bne.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80063a0:	4b37      	ldr	r3, [pc, #220]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80063a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ae:	4a34      	ldr	r2, [pc, #208]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80063b0:	430b      	orrs	r3, r1
 80063b2:	6513      	str	r3, [r2, #80]	; 0x50
 80063b4:	e003      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80063ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80063be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80063ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063ce:	2300      	movs	r3, #0
 80063d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80063d4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80063d8:	460b      	mov	r3, r1
 80063da:	4313      	orrs	r3, r2
 80063dc:	d056      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80063de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80063e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063e8:	d033      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80063ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063ee:	d82c      	bhi.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80063f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063f4:	d02f      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80063f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063fa:	d826      	bhi.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80063fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006400:	d02b      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006402:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006406:	d820      	bhi.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006408:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800640c:	d012      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800640e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006412:	d81a      	bhi.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006414:	2b00      	cmp	r3, #0
 8006416:	d022      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800641c:	d115      	bne.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800641e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006422:	3308      	adds	r3, #8
 8006424:	2101      	movs	r1, #1
 8006426:	4618      	mov	r0, r3
 8006428:	f000 ff50 	bl	80072cc <RCCEx_PLL2_Config>
 800642c:	4603      	mov	r3, r0
 800642e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006432:	e015      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006438:	3328      	adds	r3, #40	; 0x28
 800643a:	2101      	movs	r1, #1
 800643c:	4618      	mov	r0, r3
 800643e:	f000 fff7 	bl	8007430 <RCCEx_PLL3_Config>
 8006442:	4603      	mov	r3, r0
 8006444:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006448:	e00a      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006450:	e006      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006452:	bf00      	nop
 8006454:	e004      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006456:	bf00      	nop
 8006458:	e002      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800645a:	bf00      	nop
 800645c:	e000      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800645e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006460:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10d      	bne.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006468:	4b05      	ldr	r3, [pc, #20]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800646a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800646c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006474:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006476:	4a02      	ldr	r2, [pc, #8]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006478:	430b      	orrs	r3, r1
 800647a:	6513      	str	r3, [r2, #80]	; 0x50
 800647c:	e006      	b.n	800648c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800647e:	bf00      	nop
 8006480:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006484:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006488:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800648c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006494:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006498:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800649c:	2300      	movs	r3, #0
 800649e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064a2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80064a6:	460b      	mov	r3, r1
 80064a8:	4313      	orrs	r3, r2
 80064aa:	d055      	beq.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80064ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80064b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064b8:	d033      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80064ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064be:	d82c      	bhi.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80064c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c4:	d02f      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80064c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ca:	d826      	bhi.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80064cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064d0:	d02b      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80064d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80064d6:	d820      	bhi.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80064d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064dc:	d012      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80064de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064e2:	d81a      	bhi.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d022      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80064e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064ec:	d115      	bne.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80064f2:	3308      	adds	r3, #8
 80064f4:	2101      	movs	r1, #1
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 fee8 	bl	80072cc <RCCEx_PLL2_Config>
 80064fc:	4603      	mov	r3, r0
 80064fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006502:	e015      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006508:	3328      	adds	r3, #40	; 0x28
 800650a:	2101      	movs	r1, #1
 800650c:	4618      	mov	r0, r3
 800650e:	f000 ff8f 	bl	8007430 <RCCEx_PLL3_Config>
 8006512:	4603      	mov	r3, r0
 8006514:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006518:	e00a      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006520:	e006      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006522:	bf00      	nop
 8006524:	e004      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006526:	bf00      	nop
 8006528:	e002      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800652a:	bf00      	nop
 800652c:	e000      	b.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800652e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006530:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10b      	bne.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006538:	4ba3      	ldr	r3, [pc, #652]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800653a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800653c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006544:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006548:	4a9f      	ldr	r2, [pc, #636]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800654a:	430b      	orrs	r3, r1
 800654c:	6593      	str	r3, [r2, #88]	; 0x58
 800654e:	e003      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006550:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006554:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006558:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006564:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006568:	2300      	movs	r3, #0
 800656a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800656e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006572:	460b      	mov	r3, r1
 8006574:	4313      	orrs	r3, r2
 8006576:	d037      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800657c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006582:	d00e      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006588:	d816      	bhi.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800658a:	2b00      	cmp	r3, #0
 800658c:	d018      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800658e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006592:	d111      	bne.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006594:	4b8c      	ldr	r3, [pc, #560]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006598:	4a8b      	ldr	r2, [pc, #556]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800659a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800659e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80065a0:	e00f      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065a6:	3308      	adds	r3, #8
 80065a8:	2101      	movs	r1, #1
 80065aa:	4618      	mov	r0, r3
 80065ac:	f000 fe8e 	bl	80072cc <RCCEx_PLL2_Config>
 80065b0:	4603      	mov	r3, r0
 80065b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80065b6:	e004      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80065be:	e000      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80065c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10a      	bne.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80065ca:	4b7f      	ldr	r3, [pc, #508]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ce:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80065d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d8:	4a7b      	ldr	r2, [pc, #492]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80065da:	430b      	orrs	r3, r1
 80065dc:	6513      	str	r3, [r2, #80]	; 0x50
 80065de:	e003      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80065e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80065e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80065ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80065f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065f8:	2300      	movs	r3, #0
 80065fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80065fe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006602:	460b      	mov	r3, r1
 8006604:	4313      	orrs	r3, r2
 8006606:	d039      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800660c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800660e:	2b03      	cmp	r3, #3
 8006610:	d81c      	bhi.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006612:	a201      	add	r2, pc, #4	; (adr r2, 8006618 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006618:	08006655 	.word	0x08006655
 800661c:	08006629 	.word	0x08006629
 8006620:	08006637 	.word	0x08006637
 8006624:	08006655 	.word	0x08006655
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006628:	4b67      	ldr	r3, [pc, #412]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800662a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800662c:	4a66      	ldr	r2, [pc, #408]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800662e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006632:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006634:	e00f      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006636:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800663a:	3308      	adds	r3, #8
 800663c:	2102      	movs	r1, #2
 800663e:	4618      	mov	r0, r3
 8006640:	f000 fe44 	bl	80072cc <RCCEx_PLL2_Config>
 8006644:	4603      	mov	r3, r0
 8006646:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800664a:	e004      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006652:	e000      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006656:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10a      	bne.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800665e:	4b5a      	ldr	r3, [pc, #360]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006662:	f023 0103 	bic.w	r1, r3, #3
 8006666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800666a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800666c:	4a56      	ldr	r2, [pc, #344]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800666e:	430b      	orrs	r3, r1
 8006670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006672:	e003      	b.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006674:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006678:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800667c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006684:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006688:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800668c:	2300      	movs	r3, #0
 800668e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006692:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006696:	460b      	mov	r3, r1
 8006698:	4313      	orrs	r3, r2
 800669a:	f000 809f 	beq.w	80067dc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800669e:	4b4b      	ldr	r3, [pc, #300]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a4a      	ldr	r2, [pc, #296]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80066a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066aa:	f7fb f935 	bl	8001918 <HAL_GetTick>
 80066ae:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066b2:	e00b      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066b4:	f7fb f930 	bl	8001918 <HAL_GetTick>
 80066b8:	4602      	mov	r2, r0
 80066ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	2b64      	cmp	r3, #100	; 0x64
 80066c2:	d903      	bls.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80066ca:	e005      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066cc:	4b3f      	ldr	r3, [pc, #252]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d0ed      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80066d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d179      	bne.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80066e0:	4b39      	ldr	r3, [pc, #228]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80066e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80066ec:	4053      	eors	r3, r2
 80066ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d015      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066f6:	4b34      	ldr	r3, [pc, #208]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80066f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066fe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006702:	4b31      	ldr	r3, [pc, #196]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006706:	4a30      	ldr	r2, [pc, #192]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800670c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800670e:	4b2e      	ldr	r3, [pc, #184]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006712:	4a2d      	ldr	r2, [pc, #180]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006718:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800671a:	4a2b      	ldr	r2, [pc, #172]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800671c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006720:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006726:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800672a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800672e:	d118      	bne.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006730:	f7fb f8f2 	bl	8001918 <HAL_GetTick>
 8006734:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006738:	e00d      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800673a:	f7fb f8ed 	bl	8001918 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006744:	1ad2      	subs	r2, r2, r3
 8006746:	f241 3388 	movw	r3, #5000	; 0x1388
 800674a:	429a      	cmp	r2, r3
 800674c:	d903      	bls.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8006754:	e005      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006756:	4b1c      	ldr	r3, [pc, #112]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d0eb      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006762:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006766:	2b00      	cmp	r3, #0
 8006768:	d129      	bne.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800676a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800676e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006776:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800677a:	d10e      	bne.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800677c:	4b12      	ldr	r3, [pc, #72]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006788:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800678c:	091a      	lsrs	r2, r3, #4
 800678e:	4b10      	ldr	r3, [pc, #64]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006790:	4013      	ands	r3, r2
 8006792:	4a0d      	ldr	r2, [pc, #52]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006794:	430b      	orrs	r3, r1
 8006796:	6113      	str	r3, [r2, #16]
 8006798:	e005      	b.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800679a:	4b0b      	ldr	r3, [pc, #44]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	4a0a      	ldr	r2, [pc, #40]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80067a4:	6113      	str	r3, [r2, #16]
 80067a6:	4b08      	ldr	r3, [pc, #32]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067a8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80067aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80067b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067b6:	4a04      	ldr	r2, [pc, #16]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80067b8:	430b      	orrs	r3, r1
 80067ba:	6713      	str	r3, [r2, #112]	; 0x70
 80067bc:	e00e      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80067c6:	e009      	b.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80067c8:	58024400 	.word	0x58024400
 80067cc:	58024800 	.word	0x58024800
 80067d0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80067d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80067dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80067e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e4:	f002 0301 	and.w	r3, r2, #1
 80067e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067ec:	2300      	movs	r3, #0
 80067ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80067f6:	460b      	mov	r3, r1
 80067f8:	4313      	orrs	r3, r2
 80067fa:	f000 8089 	beq.w	8006910 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80067fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006802:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006804:	2b28      	cmp	r3, #40	; 0x28
 8006806:	d86b      	bhi.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006808:	a201      	add	r2, pc, #4	; (adr r2, 8006810 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800680a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680e:	bf00      	nop
 8006810:	080068e9 	.word	0x080068e9
 8006814:	080068e1 	.word	0x080068e1
 8006818:	080068e1 	.word	0x080068e1
 800681c:	080068e1 	.word	0x080068e1
 8006820:	080068e1 	.word	0x080068e1
 8006824:	080068e1 	.word	0x080068e1
 8006828:	080068e1 	.word	0x080068e1
 800682c:	080068e1 	.word	0x080068e1
 8006830:	080068b5 	.word	0x080068b5
 8006834:	080068e1 	.word	0x080068e1
 8006838:	080068e1 	.word	0x080068e1
 800683c:	080068e1 	.word	0x080068e1
 8006840:	080068e1 	.word	0x080068e1
 8006844:	080068e1 	.word	0x080068e1
 8006848:	080068e1 	.word	0x080068e1
 800684c:	080068e1 	.word	0x080068e1
 8006850:	080068cb 	.word	0x080068cb
 8006854:	080068e1 	.word	0x080068e1
 8006858:	080068e1 	.word	0x080068e1
 800685c:	080068e1 	.word	0x080068e1
 8006860:	080068e1 	.word	0x080068e1
 8006864:	080068e1 	.word	0x080068e1
 8006868:	080068e1 	.word	0x080068e1
 800686c:	080068e1 	.word	0x080068e1
 8006870:	080068e9 	.word	0x080068e9
 8006874:	080068e1 	.word	0x080068e1
 8006878:	080068e1 	.word	0x080068e1
 800687c:	080068e1 	.word	0x080068e1
 8006880:	080068e1 	.word	0x080068e1
 8006884:	080068e1 	.word	0x080068e1
 8006888:	080068e1 	.word	0x080068e1
 800688c:	080068e1 	.word	0x080068e1
 8006890:	080068e9 	.word	0x080068e9
 8006894:	080068e1 	.word	0x080068e1
 8006898:	080068e1 	.word	0x080068e1
 800689c:	080068e1 	.word	0x080068e1
 80068a0:	080068e1 	.word	0x080068e1
 80068a4:	080068e1 	.word	0x080068e1
 80068a8:	080068e1 	.word	0x080068e1
 80068ac:	080068e1 	.word	0x080068e1
 80068b0:	080068e9 	.word	0x080068e9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068b8:	3308      	adds	r3, #8
 80068ba:	2101      	movs	r1, #1
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 fd05 	bl	80072cc <RCCEx_PLL2_Config>
 80068c2:	4603      	mov	r3, r0
 80068c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80068c8:	e00f      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068ce:	3328      	adds	r3, #40	; 0x28
 80068d0:	2101      	movs	r1, #1
 80068d2:	4618      	mov	r0, r3
 80068d4:	f000 fdac 	bl	8007430 <RCCEx_PLL3_Config>
 80068d8:	4603      	mov	r3, r0
 80068da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80068de:	e004      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80068e6:	e000      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80068e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10a      	bne.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80068f2:	4bbf      	ldr	r3, [pc, #764]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80068f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068f6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80068fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80068fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006900:	4abb      	ldr	r2, [pc, #748]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006902:	430b      	orrs	r3, r1
 8006904:	6553      	str	r3, [r2, #84]	; 0x54
 8006906:	e003      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006908:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800690c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006918:	f002 0302 	and.w	r3, r2, #2
 800691c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006920:	2300      	movs	r3, #0
 8006922:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006926:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800692a:	460b      	mov	r3, r1
 800692c:	4313      	orrs	r3, r2
 800692e:	d041      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006934:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006936:	2b05      	cmp	r3, #5
 8006938:	d824      	bhi.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800693a:	a201      	add	r2, pc, #4	; (adr r2, 8006940 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800693c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006940:	0800698d 	.word	0x0800698d
 8006944:	08006959 	.word	0x08006959
 8006948:	0800696f 	.word	0x0800696f
 800694c:	0800698d 	.word	0x0800698d
 8006950:	0800698d 	.word	0x0800698d
 8006954:	0800698d 	.word	0x0800698d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800695c:	3308      	adds	r3, #8
 800695e:	2101      	movs	r1, #1
 8006960:	4618      	mov	r0, r3
 8006962:	f000 fcb3 	bl	80072cc <RCCEx_PLL2_Config>
 8006966:	4603      	mov	r3, r0
 8006968:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800696c:	e00f      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800696e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006972:	3328      	adds	r3, #40	; 0x28
 8006974:	2101      	movs	r1, #1
 8006976:	4618      	mov	r0, r3
 8006978:	f000 fd5a 	bl	8007430 <RCCEx_PLL3_Config>
 800697c:	4603      	mov	r3, r0
 800697e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006982:	e004      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800698a:	e000      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800698c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800698e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10a      	bne.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006996:	4b96      	ldr	r3, [pc, #600]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800699a:	f023 0107 	bic.w	r1, r3, #7
 800699e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069a4:	4a92      	ldr	r2, [pc, #584]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80069a6:	430b      	orrs	r3, r1
 80069a8:	6553      	str	r3, [r2, #84]	; 0x54
 80069aa:	e003      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80069b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80069b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069bc:	f002 0304 	and.w	r3, r2, #4
 80069c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069c4:	2300      	movs	r3, #0
 80069c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069ca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80069ce:	460b      	mov	r3, r1
 80069d0:	4313      	orrs	r3, r2
 80069d2:	d044      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80069d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80069d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069dc:	2b05      	cmp	r3, #5
 80069de:	d825      	bhi.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80069e0:	a201      	add	r2, pc, #4	; (adr r2, 80069e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80069e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e6:	bf00      	nop
 80069e8:	08006a35 	.word	0x08006a35
 80069ec:	08006a01 	.word	0x08006a01
 80069f0:	08006a17 	.word	0x08006a17
 80069f4:	08006a35 	.word	0x08006a35
 80069f8:	08006a35 	.word	0x08006a35
 80069fc:	08006a35 	.word	0x08006a35
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a04:	3308      	adds	r3, #8
 8006a06:	2101      	movs	r1, #1
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 fc5f 	bl	80072cc <RCCEx_PLL2_Config>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006a14:	e00f      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a1a:	3328      	adds	r3, #40	; 0x28
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fd06 	bl	8007430 <RCCEx_PLL3_Config>
 8006a24:	4603      	mov	r3, r0
 8006a26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006a2a:	e004      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006a32:	e000      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10b      	bne.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a3e:	4b6c      	ldr	r3, [pc, #432]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a42:	f023 0107 	bic.w	r1, r3, #7
 8006a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a4e:	4a68      	ldr	r2, [pc, #416]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006a50:	430b      	orrs	r3, r1
 8006a52:	6593      	str	r3, [r2, #88]	; 0x58
 8006a54:	e003      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006a5a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	f002 0320 	and.w	r3, r2, #32
 8006a6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a78:	460b      	mov	r3, r1
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	d055      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a8a:	d033      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a90:	d82c      	bhi.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a96:	d02f      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a9c:	d826      	bhi.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006a9e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006aa2:	d02b      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006aa4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006aa8:	d820      	bhi.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006aaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aae:	d012      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006ab0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ab4:	d81a      	bhi.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d022      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006aba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006abe:	d115      	bne.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ac4:	3308      	adds	r3, #8
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 fbff 	bl	80072cc <RCCEx_PLL2_Config>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006ad4:	e015      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ada:	3328      	adds	r3, #40	; 0x28
 8006adc:	2102      	movs	r1, #2
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f000 fca6 	bl	8007430 <RCCEx_PLL3_Config>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006aea:	e00a      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006af2:	e006      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006af4:	bf00      	nop
 8006af6:	e004      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006af8:	bf00      	nop
 8006afa:	e002      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006afc:	bf00      	nop
 8006afe:	e000      	b.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d10b      	bne.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b0a:	4b39      	ldr	r3, [pc, #228]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b1a:	4a35      	ldr	r2, [pc, #212]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006b1c:	430b      	orrs	r3, r1
 8006b1e:	6553      	str	r3, [r2, #84]	; 0x54
 8006b20:	e003      	b.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006b26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b32:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006b36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006b40:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006b44:	460b      	mov	r3, r1
 8006b46:	4313      	orrs	r3, r2
 8006b48:	d058      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b52:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b56:	d033      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006b58:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006b5c:	d82c      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b62:	d02f      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b68:	d826      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006b6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b6e:	d02b      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006b70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b74:	d820      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b7a:	d012      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006b7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b80:	d81a      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d022      	beq.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b8a:	d115      	bne.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006b90:	3308      	adds	r3, #8
 8006b92:	2100      	movs	r1, #0
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 fb99 	bl	80072cc <RCCEx_PLL2_Config>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006ba0:	e015      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ba6:	3328      	adds	r3, #40	; 0x28
 8006ba8:	2102      	movs	r1, #2
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 fc40 	bl	8007430 <RCCEx_PLL3_Config>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006bb6:	e00a      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006bbe:	e006      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006bc0:	bf00      	nop
 8006bc2:	e004      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006bc4:	bf00      	nop
 8006bc6:	e002      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006bc8:	bf00      	nop
 8006bca:	e000      	b.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006bcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10e      	bne.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006bd6:	4b06      	ldr	r3, [pc, #24]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bda:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006be2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006be6:	4a02      	ldr	r2, [pc, #8]	; (8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006be8:	430b      	orrs	r3, r1
 8006bea:	6593      	str	r3, [r2, #88]	; 0x58
 8006bec:	e006      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006bee:	bf00      	nop
 8006bf0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006bf8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c04:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006c08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c12:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006c16:	460b      	mov	r3, r1
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	d055      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c20:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006c24:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c28:	d033      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006c2a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006c2e:	d82c      	bhi.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c34:	d02f      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c3a:	d826      	bhi.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006c3c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c40:	d02b      	beq.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006c42:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006c46:	d820      	bhi.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c4c:	d012      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006c4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c52:	d81a      	bhi.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d022      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c5c:	d115      	bne.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c62:	3308      	adds	r3, #8
 8006c64:	2100      	movs	r1, #0
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 fb30 	bl	80072cc <RCCEx_PLL2_Config>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c72:	e015      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006c78:	3328      	adds	r3, #40	; 0x28
 8006c7a:	2102      	movs	r1, #2
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 fbd7 	bl	8007430 <RCCEx_PLL3_Config>
 8006c82:	4603      	mov	r3, r0
 8006c84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006c88:	e00a      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006c90:	e006      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006c92:	bf00      	nop
 8006c94:	e004      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006c96:	bf00      	nop
 8006c98:	e002      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006c9a:	bf00      	nop
 8006c9c:	e000      	b.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006c9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ca0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10b      	bne.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ca8:	4ba1      	ldr	r3, [pc, #644]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cac:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cb4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006cb8:	4a9d      	ldr	r2, [pc, #628]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006cba:	430b      	orrs	r3, r1
 8006cbc:	6593      	str	r3, [r2, #88]	; 0x58
 8006cbe:	e003      	b.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006cc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd0:	f002 0308 	and.w	r3, r2, #8
 8006cd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006cd8:	2300      	movs	r3, #0
 8006cda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006cde:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	d01e      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf4:	d10c      	bne.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006cfa:	3328      	adds	r3, #40	; 0x28
 8006cfc:	2102      	movs	r1, #2
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 fb96 	bl	8007430 <RCCEx_PLL3_Config>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d002      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006d10:	4b87      	ldr	r3, [pc, #540]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d20:	4a83      	ldr	r2, [pc, #524]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d22:	430b      	orrs	r3, r1
 8006d24:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	f002 0310 	and.w	r3, r2, #16
 8006d32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d36:	2300      	movs	r3, #0
 8006d38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006d3c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006d40:	460b      	mov	r3, r1
 8006d42:	4313      	orrs	r3, r2
 8006d44:	d01e      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d52:	d10c      	bne.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d58:	3328      	adds	r3, #40	; 0x28
 8006d5a:	2102      	movs	r1, #2
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f000 fb67 	bl	8007430 <RCCEx_PLL3_Config>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d002      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006d6e:	4b70      	ldr	r3, [pc, #448]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d7e:	4a6c      	ldr	r2, [pc, #432]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006d80:	430b      	orrs	r3, r1
 8006d82:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006d90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d94:	2300      	movs	r3, #0
 8006d96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d9a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4313      	orrs	r3, r2
 8006da2:	d03e      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006da8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006db0:	d022      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006db2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006db6:	d81b      	bhi.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dc0:	d00b      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006dc2:	e015      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dc8:	3308      	adds	r3, #8
 8006dca:	2100      	movs	r1, #0
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 fa7d 	bl	80072cc <RCCEx_PLL2_Config>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006dd8:	e00f      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006dde:	3328      	adds	r3, #40	; 0x28
 8006de0:	2102      	movs	r1, #2
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 fb24 	bl	8007430 <RCCEx_PLL3_Config>
 8006de8:	4603      	mov	r3, r0
 8006dea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006dee:	e004      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006df6:	e000      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006df8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10b      	bne.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e02:	4b4b      	ldr	r3, [pc, #300]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e06:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e12:	4a47      	ldr	r2, [pc, #284]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e14:	430b      	orrs	r3, r1
 8006e16:	6593      	str	r3, [r2, #88]	; 0x58
 8006e18:	e003      	b.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006e2e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e30:	2300      	movs	r3, #0
 8006e32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e34:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006e38:	460b      	mov	r3, r1
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	d03b      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e4a:	d01f      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006e4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e50:	d818      	bhi.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006e52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e56:	d003      	beq.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006e58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e5c:	d007      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006e5e:	e011      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e60:	4b33      	ldr	r3, [pc, #204]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e64:	4a32      	ldr	r2, [pc, #200]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e6c:	e00f      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006e72:	3328      	adds	r3, #40	; 0x28
 8006e74:	2101      	movs	r1, #1
 8006e76:	4618      	mov	r0, r3
 8006e78:	f000 fada 	bl	8007430 <RCCEx_PLL3_Config>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006e82:	e004      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006e8a:	e000      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006e8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10b      	bne.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006e96:	4b26      	ldr	r3, [pc, #152]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ea6:	4a22      	ldr	r2, [pc, #136]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ea8:	430b      	orrs	r3, r1
 8006eaa:	6553      	str	r3, [r2, #84]	; 0x54
 8006eac:	e003      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006eb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebe:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006ec2:	673b      	str	r3, [r7, #112]	; 0x70
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	677b      	str	r3, [r7, #116]	; 0x74
 8006ec8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006ecc:	460b      	mov	r3, r1
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	d034      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ed6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee0:	d007      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006ee2:	e011      	b.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ee4:	4b12      	ldr	r3, [pc, #72]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee8:	4a11      	ldr	r2, [pc, #68]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006ef0:	e00e      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006ef6:	3308      	adds	r3, #8
 8006ef8:	2102      	movs	r1, #2
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 f9e6 	bl	80072cc <RCCEx_PLL2_Config>
 8006f00:	4603      	mov	r3, r0
 8006f02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006f06:	e003      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006f0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10d      	bne.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006f18:	4b05      	ldr	r3, [pc, #20]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f26:	4a02      	ldr	r2, [pc, #8]	; (8006f30 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006f28:	430b      	orrs	r3, r1
 8006f2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f2c:	e006      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006f2e:	bf00      	nop
 8006f30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006f38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f44:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006f48:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f4e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006f52:	460b      	mov	r3, r1
 8006f54:	4313      	orrs	r3, r2
 8006f56:	d00c      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f5c:	3328      	adds	r3, #40	; 0x28
 8006f5e:	2102      	movs	r1, #2
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 fa65 	bl	8007430 <RCCEx_PLL3_Config>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006f7e:	663b      	str	r3, [r7, #96]	; 0x60
 8006f80:	2300      	movs	r3, #0
 8006f82:	667b      	str	r3, [r7, #100]	; 0x64
 8006f84:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006f88:	460b      	mov	r3, r1
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	d038      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f9a:	d018      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006f9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fa0:	d811      	bhi.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006fa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fa6:	d014      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fac:	d80b      	bhi.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d011      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fb6:	d106      	bne.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fb8:	4bc3      	ldr	r3, [pc, #780]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbc:	4ac2      	ldr	r2, [pc, #776]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006fc4:	e008      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8006fcc:	e004      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006fce:	bf00      	nop
 8006fd0:	e002      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006fd2:	bf00      	nop
 8006fd4:	e000      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006fd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10b      	bne.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006fe0:	4bb9      	ldr	r3, [pc, #740]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ff0:	4ab5      	ldr	r2, [pc, #724]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006ff2:	430b      	orrs	r3, r1
 8006ff4:	6553      	str	r3, [r2, #84]	; 0x54
 8006ff6:	e003      	b.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8006ffc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007008:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800700c:	65bb      	str	r3, [r7, #88]	; 0x58
 800700e:	2300      	movs	r3, #0
 8007010:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007012:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007016:	460b      	mov	r3, r1
 8007018:	4313      	orrs	r3, r2
 800701a:	d009      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800701c:	4baa      	ldr	r3, [pc, #680]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800701e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007020:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800702a:	4aa7      	ldr	r2, [pc, #668]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800702c:	430b      	orrs	r3, r1
 800702e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007038:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800703c:	653b      	str	r3, [r7, #80]	; 0x50
 800703e:	2300      	movs	r3, #0
 8007040:	657b      	str	r3, [r7, #84]	; 0x54
 8007042:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007046:	460b      	mov	r3, r1
 8007048:	4313      	orrs	r3, r2
 800704a:	d00a      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800704c:	4b9e      	ldr	r3, [pc, #632]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007058:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800705c:	4a9a      	ldr	r2, [pc, #616]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800705e:	430b      	orrs	r3, r1
 8007060:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007062:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800706e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007070:	2300      	movs	r3, #0
 8007072:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007074:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007078:	460b      	mov	r3, r1
 800707a:	4313      	orrs	r3, r2
 800707c:	d009      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800707e:	4b92      	ldr	r3, [pc, #584]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007082:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800708a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800708c:	4a8e      	ldr	r2, [pc, #568]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800708e:	430b      	orrs	r3, r1
 8007090:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800709e:	643b      	str	r3, [r7, #64]	; 0x40
 80070a0:	2300      	movs	r3, #0
 80070a2:	647b      	str	r3, [r7, #68]	; 0x44
 80070a4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80070a8:	460b      	mov	r3, r1
 80070aa:	4313      	orrs	r3, r2
 80070ac:	d00e      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070ae:	4b86      	ldr	r3, [pc, #536]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	4a85      	ldr	r2, [pc, #532]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070b8:	6113      	str	r3, [r2, #16]
 80070ba:	4b83      	ldr	r3, [pc, #524]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070bc:	6919      	ldr	r1, [r3, #16]
 80070be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80070c6:	4a80      	ldr	r2, [pc, #512]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070c8:	430b      	orrs	r3, r1
 80070ca:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80070cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80070d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80070da:	2300      	movs	r3, #0
 80070dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070de:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80070e2:	460b      	mov	r3, r1
 80070e4:	4313      	orrs	r3, r2
 80070e6:	d009      	beq.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80070e8:	4b77      	ldr	r3, [pc, #476]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ec:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80070f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f6:	4a74      	ldr	r2, [pc, #464]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80070f8:	430b      	orrs	r3, r1
 80070fa:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80070fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007104:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007108:	633b      	str	r3, [r7, #48]	; 0x30
 800710a:	2300      	movs	r3, #0
 800710c:	637b      	str	r3, [r7, #52]	; 0x34
 800710e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007112:	460b      	mov	r3, r1
 8007114:	4313      	orrs	r3, r2
 8007116:	d00a      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007118:	4b6b      	ldr	r3, [pc, #428]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800711a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800711c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8007120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007128:	4a67      	ldr	r2, [pc, #412]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800712a:	430b      	orrs	r3, r1
 800712c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800712e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007136:	2100      	movs	r1, #0
 8007138:	62b9      	str	r1, [r7, #40]	; 0x28
 800713a:	f003 0301 	and.w	r3, r3, #1
 800713e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007140:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007144:	460b      	mov	r3, r1
 8007146:	4313      	orrs	r3, r2
 8007148:	d011      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800714a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800714e:	3308      	adds	r3, #8
 8007150:	2100      	movs	r1, #0
 8007152:	4618      	mov	r0, r3
 8007154:	f000 f8ba 	bl	80072cc <RCCEx_PLL2_Config>
 8007158:	4603      	mov	r3, r0
 800715a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800715e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007162:	2b00      	cmp	r3, #0
 8007164:	d003      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007166:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800716a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800716e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007176:	2100      	movs	r1, #0
 8007178:	6239      	str	r1, [r7, #32]
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	627b      	str	r3, [r7, #36]	; 0x24
 8007180:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007184:	460b      	mov	r3, r1
 8007186:	4313      	orrs	r3, r2
 8007188:	d011      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800718a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800718e:	3308      	adds	r3, #8
 8007190:	2101      	movs	r1, #1
 8007192:	4618      	mov	r0, r3
 8007194:	f000 f89a 	bl	80072cc <RCCEx_PLL2_Config>
 8007198:	4603      	mov	r3, r0
 800719a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800719e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d003      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80071ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b6:	2100      	movs	r1, #0
 80071b8:	61b9      	str	r1, [r7, #24]
 80071ba:	f003 0304 	and.w	r3, r3, #4
 80071be:	61fb      	str	r3, [r7, #28]
 80071c0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80071c4:	460b      	mov	r3, r1
 80071c6:	4313      	orrs	r3, r2
 80071c8:	d011      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80071ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071ce:	3308      	adds	r3, #8
 80071d0:	2102      	movs	r1, #2
 80071d2:	4618      	mov	r0, r3
 80071d4:	f000 f87a 	bl	80072cc <RCCEx_PLL2_Config>
 80071d8:	4603      	mov	r3, r0
 80071da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80071de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80071ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80071ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f6:	2100      	movs	r1, #0
 80071f8:	6139      	str	r1, [r7, #16]
 80071fa:	f003 0308 	and.w	r3, r3, #8
 80071fe:	617b      	str	r3, [r7, #20]
 8007200:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007204:	460b      	mov	r3, r1
 8007206:	4313      	orrs	r3, r2
 8007208:	d011      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800720a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800720e:	3328      	adds	r3, #40	; 0x28
 8007210:	2100      	movs	r1, #0
 8007212:	4618      	mov	r0, r3
 8007214:	f000 f90c 	bl	8007430 <RCCEx_PLL3_Config>
 8007218:	4603      	mov	r3, r0
 800721a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800721e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007226:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800722a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800722e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007236:	2100      	movs	r1, #0
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	f003 0310 	and.w	r3, r3, #16
 800723e:	60fb      	str	r3, [r7, #12]
 8007240:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007244:	460b      	mov	r3, r1
 8007246:	4313      	orrs	r3, r2
 8007248:	d011      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800724a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800724e:	3328      	adds	r3, #40	; 0x28
 8007250:	2101      	movs	r1, #1
 8007252:	4618      	mov	r0, r3
 8007254:	f000 f8ec 	bl	8007430 <RCCEx_PLL3_Config>
 8007258:	4603      	mov	r3, r0
 800725a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800725e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007262:	2b00      	cmp	r3, #0
 8007264:	d003      	beq.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007266:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800726a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800726e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	2100      	movs	r1, #0
 8007278:	6039      	str	r1, [r7, #0]
 800727a:	f003 0320 	and.w	r3, r3, #32
 800727e:	607b      	str	r3, [r7, #4]
 8007280:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007284:	460b      	mov	r3, r1
 8007286:	4313      	orrs	r3, r2
 8007288:	d011      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800728a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800728e:	3328      	adds	r3, #40	; 0x28
 8007290:	2102      	movs	r1, #2
 8007292:	4618      	mov	r0, r3
 8007294:	f000 f8cc 	bl	8007430 <RCCEx_PLL3_Config>
 8007298:	4603      	mov	r3, r0
 800729a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800729e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d003      	beq.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80072aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80072ae:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d101      	bne.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80072b6:	2300      	movs	r3, #0
 80072b8:	e000      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
}
 80072bc:	4618      	mov	r0, r3
 80072be:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80072c2:	46bd      	mov	sp, r7
 80072c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072c8:	58024400 	.word	0x58024400

080072cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80072da:	4b53      	ldr	r3, [pc, #332]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 80072dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072de:	f003 0303 	and.w	r3, r3, #3
 80072e2:	2b03      	cmp	r3, #3
 80072e4:	d101      	bne.n	80072ea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	e099      	b.n	800741e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80072ea:	4b4f      	ldr	r3, [pc, #316]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a4e      	ldr	r2, [pc, #312]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 80072f0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80072f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072f6:	f7fa fb0f 	bl	8001918 <HAL_GetTick>
 80072fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072fc:	e008      	b.n	8007310 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80072fe:	f7fa fb0b 	bl	8001918 <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	2b02      	cmp	r3, #2
 800730a:	d901      	bls.n	8007310 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800730c:	2303      	movs	r3, #3
 800730e:	e086      	b.n	800741e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007310:	4b45      	ldr	r3, [pc, #276]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1f0      	bne.n	80072fe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800731c:	4b42      	ldr	r3, [pc, #264]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 800731e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007320:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	031b      	lsls	r3, r3, #12
 800732a:	493f      	ldr	r1, [pc, #252]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 800732c:	4313      	orrs	r3, r2
 800732e:	628b      	str	r3, [r1, #40]	; 0x28
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	3b01      	subs	r3, #1
 8007336:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	3b01      	subs	r3, #1
 8007340:	025b      	lsls	r3, r3, #9
 8007342:	b29b      	uxth	r3, r3
 8007344:	431a      	orrs	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	3b01      	subs	r3, #1
 800734c:	041b      	lsls	r3, r3, #16
 800734e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007352:	431a      	orrs	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	3b01      	subs	r3, #1
 800735a:	061b      	lsls	r3, r3, #24
 800735c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007360:	4931      	ldr	r1, [pc, #196]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 8007362:	4313      	orrs	r3, r2
 8007364:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007366:	4b30      	ldr	r3, [pc, #192]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 8007368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800736a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	492d      	ldr	r1, [pc, #180]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 8007374:	4313      	orrs	r3, r2
 8007376:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007378:	4b2b      	ldr	r3, [pc, #172]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	f023 0220 	bic.w	r2, r3, #32
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	4928      	ldr	r1, [pc, #160]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 8007386:	4313      	orrs	r3, r2
 8007388:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800738a:	4b27      	ldr	r3, [pc, #156]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 800738c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738e:	4a26      	ldr	r2, [pc, #152]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 8007390:	f023 0310 	bic.w	r3, r3, #16
 8007394:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007396:	4b24      	ldr	r3, [pc, #144]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 8007398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800739a:	4b24      	ldr	r3, [pc, #144]	; (800742c <RCCEx_PLL2_Config+0x160>)
 800739c:	4013      	ands	r3, r2
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	69d2      	ldr	r2, [r2, #28]
 80073a2:	00d2      	lsls	r2, r2, #3
 80073a4:	4920      	ldr	r1, [pc, #128]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80073aa:	4b1f      	ldr	r3, [pc, #124]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 80073ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ae:	4a1e      	ldr	r2, [pc, #120]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 80073b0:	f043 0310 	orr.w	r3, r3, #16
 80073b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d106      	bne.n	80073ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80073bc:	4b1a      	ldr	r3, [pc, #104]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 80073be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c0:	4a19      	ldr	r2, [pc, #100]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 80073c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80073c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80073c8:	e00f      	b.n	80073ea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d106      	bne.n	80073de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80073d0:	4b15      	ldr	r3, [pc, #84]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 80073d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d4:	4a14      	ldr	r2, [pc, #80]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 80073d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80073dc:	e005      	b.n	80073ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80073de:	4b12      	ldr	r3, [pc, #72]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 80073e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e2:	4a11      	ldr	r2, [pc, #68]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 80073e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80073ea:	4b0f      	ldr	r3, [pc, #60]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a0e      	ldr	r2, [pc, #56]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 80073f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073f6:	f7fa fa8f 	bl	8001918 <HAL_GetTick>
 80073fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80073fc:	e008      	b.n	8007410 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073fe:	f7fa fa8b 	bl	8001918 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	2b02      	cmp	r3, #2
 800740a:	d901      	bls.n	8007410 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e006      	b.n	800741e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007410:	4b05      	ldr	r3, [pc, #20]	; (8007428 <RCCEx_PLL2_Config+0x15c>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d0f0      	beq.n	80073fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800741c:	7bfb      	ldrb	r3, [r7, #15]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	58024400 	.word	0x58024400
 800742c:	ffff0007 	.word	0xffff0007

08007430 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800743e:	4b53      	ldr	r3, [pc, #332]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 8007440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007442:	f003 0303 	and.w	r3, r3, #3
 8007446:	2b03      	cmp	r3, #3
 8007448:	d101      	bne.n	800744e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	e099      	b.n	8007582 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800744e:	4b4f      	ldr	r3, [pc, #316]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a4e      	ldr	r2, [pc, #312]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 8007454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007458:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800745a:	f7fa fa5d 	bl	8001918 <HAL_GetTick>
 800745e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007460:	e008      	b.n	8007474 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007462:	f7fa fa59 	bl	8001918 <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	2b02      	cmp	r3, #2
 800746e:	d901      	bls.n	8007474 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e086      	b.n	8007582 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007474:	4b45      	ldr	r3, [pc, #276]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1f0      	bne.n	8007462 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007480:	4b42      	ldr	r3, [pc, #264]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 8007482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007484:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	051b      	lsls	r3, r3, #20
 800748e:	493f      	ldr	r1, [pc, #252]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 8007490:	4313      	orrs	r3, r2
 8007492:	628b      	str	r3, [r1, #40]	; 0x28
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	3b01      	subs	r3, #1
 800749a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	3b01      	subs	r3, #1
 80074a4:	025b      	lsls	r3, r3, #9
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	431a      	orrs	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	3b01      	subs	r3, #1
 80074b0:	041b      	lsls	r3, r3, #16
 80074b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80074b6:	431a      	orrs	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	3b01      	subs	r3, #1
 80074be:	061b      	lsls	r3, r3, #24
 80074c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80074c4:	4931      	ldr	r1, [pc, #196]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 80074c6:	4313      	orrs	r3, r2
 80074c8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80074ca:	4b30      	ldr	r3, [pc, #192]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 80074cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	492d      	ldr	r1, [pc, #180]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 80074d8:	4313      	orrs	r3, r2
 80074da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80074dc:	4b2b      	ldr	r3, [pc, #172]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 80074de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	699b      	ldr	r3, [r3, #24]
 80074e8:	4928      	ldr	r1, [pc, #160]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80074ee:	4b27      	ldr	r3, [pc, #156]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 80074f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f2:	4a26      	ldr	r2, [pc, #152]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 80074f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80074fa:	4b24      	ldr	r3, [pc, #144]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 80074fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074fe:	4b24      	ldr	r3, [pc, #144]	; (8007590 <RCCEx_PLL3_Config+0x160>)
 8007500:	4013      	ands	r3, r2
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	69d2      	ldr	r2, [r2, #28]
 8007506:	00d2      	lsls	r2, r2, #3
 8007508:	4920      	ldr	r1, [pc, #128]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 800750a:	4313      	orrs	r3, r2
 800750c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800750e:	4b1f      	ldr	r3, [pc, #124]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 8007510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007512:	4a1e      	ldr	r2, [pc, #120]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 8007514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007518:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d106      	bne.n	800752e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007520:	4b1a      	ldr	r3, [pc, #104]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 8007522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007524:	4a19      	ldr	r2, [pc, #100]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 8007526:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800752a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800752c:	e00f      	b.n	800754e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	2b01      	cmp	r3, #1
 8007532:	d106      	bne.n	8007542 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007534:	4b15      	ldr	r3, [pc, #84]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 8007536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007538:	4a14      	ldr	r2, [pc, #80]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 800753a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800753e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007540:	e005      	b.n	800754e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007542:	4b12      	ldr	r3, [pc, #72]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 8007544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007546:	4a11      	ldr	r2, [pc, #68]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 8007548:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800754c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800754e:	4b0f      	ldr	r3, [pc, #60]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a0e      	ldr	r2, [pc, #56]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 8007554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007558:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800755a:	f7fa f9dd 	bl	8001918 <HAL_GetTick>
 800755e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007560:	e008      	b.n	8007574 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007562:	f7fa f9d9 	bl	8001918 <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	1ad3      	subs	r3, r2, r3
 800756c:	2b02      	cmp	r3, #2
 800756e:	d901      	bls.n	8007574 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007570:	2303      	movs	r3, #3
 8007572:	e006      	b.n	8007582 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007574:	4b05      	ldr	r3, [pc, #20]	; (800758c <RCCEx_PLL3_Config+0x15c>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d0f0      	beq.n	8007562 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007580:	7bfb      	ldrb	r3, [r7, #15]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	58024400 	.word	0x58024400
 8007590:	ffff0007 	.word	0xffff0007

08007594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e049      	b.n	800763a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d106      	bne.n	80075c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f841 	bl	8007642 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	3304      	adds	r3, #4
 80075d0:	4619      	mov	r1, r3
 80075d2:	4610      	mov	r0, r2
 80075d4:	f000 fa00 	bl	80079d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2201      	movs	r2, #1
 80075f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007638:	2300      	movs	r3, #0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007642:	b480      	push	{r7}
 8007644:	b083      	sub	sp, #12
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800764a:	bf00      	nop
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
	...

08007658 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007658:	b480      	push	{r7}
 800765a:	b085      	sub	sp, #20
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007666:	b2db      	uxtb	r3, r3
 8007668:	2b01      	cmp	r3, #1
 800766a:	d001      	beq.n	8007670 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e054      	b.n	800771a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	68da      	ldr	r2, [r3, #12]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f042 0201 	orr.w	r2, r2, #1
 8007686:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a26      	ldr	r2, [pc, #152]	; (8007728 <HAL_TIM_Base_Start_IT+0xd0>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d022      	beq.n	80076d8 <HAL_TIM_Base_Start_IT+0x80>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800769a:	d01d      	beq.n	80076d8 <HAL_TIM_Base_Start_IT+0x80>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a22      	ldr	r2, [pc, #136]	; (800772c <HAL_TIM_Base_Start_IT+0xd4>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d018      	beq.n	80076d8 <HAL_TIM_Base_Start_IT+0x80>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a21      	ldr	r2, [pc, #132]	; (8007730 <HAL_TIM_Base_Start_IT+0xd8>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d013      	beq.n	80076d8 <HAL_TIM_Base_Start_IT+0x80>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a1f      	ldr	r2, [pc, #124]	; (8007734 <HAL_TIM_Base_Start_IT+0xdc>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d00e      	beq.n	80076d8 <HAL_TIM_Base_Start_IT+0x80>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a1e      	ldr	r2, [pc, #120]	; (8007738 <HAL_TIM_Base_Start_IT+0xe0>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d009      	beq.n	80076d8 <HAL_TIM_Base_Start_IT+0x80>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a1c      	ldr	r2, [pc, #112]	; (800773c <HAL_TIM_Base_Start_IT+0xe4>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d004      	beq.n	80076d8 <HAL_TIM_Base_Start_IT+0x80>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a1b      	ldr	r2, [pc, #108]	; (8007740 <HAL_TIM_Base_Start_IT+0xe8>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d115      	bne.n	8007704 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	689a      	ldr	r2, [r3, #8]
 80076de:	4b19      	ldr	r3, [pc, #100]	; (8007744 <HAL_TIM_Base_Start_IT+0xec>)
 80076e0:	4013      	ands	r3, r2
 80076e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2b06      	cmp	r3, #6
 80076e8:	d015      	beq.n	8007716 <HAL_TIM_Base_Start_IT+0xbe>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076f0:	d011      	beq.n	8007716 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f042 0201 	orr.w	r2, r2, #1
 8007700:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007702:	e008      	b.n	8007716 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f042 0201 	orr.w	r2, r2, #1
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	e000      	b.n	8007718 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007716:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop
 8007728:	40010000 	.word	0x40010000
 800772c:	40000400 	.word	0x40000400
 8007730:	40000800 	.word	0x40000800
 8007734:	40000c00 	.word	0x40000c00
 8007738:	40010400 	.word	0x40010400
 800773c:	40001800 	.word	0x40001800
 8007740:	40014000 	.word	0x40014000
 8007744:	00010007 	.word	0x00010007

08007748 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	2b02      	cmp	r3, #2
 800775c:	d122      	bne.n	80077a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	f003 0302 	and.w	r3, r3, #2
 8007768:	2b02      	cmp	r3, #2
 800776a:	d11b      	bne.n	80077a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f06f 0202 	mvn.w	r2, #2
 8007774:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	f003 0303 	and.w	r3, r3, #3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d003      	beq.n	8007792 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 f905 	bl	800799a <HAL_TIM_IC_CaptureCallback>
 8007790:	e005      	b.n	800779e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f8f7 	bl	8007986 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f908 	bl	80079ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	f003 0304 	and.w	r3, r3, #4
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	d122      	bne.n	80077f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	f003 0304 	and.w	r3, r3, #4
 80077bc:	2b04      	cmp	r3, #4
 80077be:	d11b      	bne.n	80077f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f06f 0204 	mvn.w	r2, #4
 80077c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2202      	movs	r2, #2
 80077ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d003      	beq.n	80077e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f8db 	bl	800799a <HAL_TIM_IC_CaptureCallback>
 80077e4:	e005      	b.n	80077f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f8cd 	bl	8007986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f8de 	bl	80079ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	f003 0308 	and.w	r3, r3, #8
 8007802:	2b08      	cmp	r3, #8
 8007804:	d122      	bne.n	800784c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	f003 0308 	and.w	r3, r3, #8
 8007810:	2b08      	cmp	r3, #8
 8007812:	d11b      	bne.n	800784c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f06f 0208 	mvn.w	r2, #8
 800781c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2204      	movs	r2, #4
 8007822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	69db      	ldr	r3, [r3, #28]
 800782a:	f003 0303 	and.w	r3, r3, #3
 800782e:	2b00      	cmp	r3, #0
 8007830:	d003      	beq.n	800783a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f8b1 	bl	800799a <HAL_TIM_IC_CaptureCallback>
 8007838:	e005      	b.n	8007846 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f8a3 	bl	8007986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f8b4 	bl	80079ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	f003 0310 	and.w	r3, r3, #16
 8007856:	2b10      	cmp	r3, #16
 8007858:	d122      	bne.n	80078a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	f003 0310 	and.w	r3, r3, #16
 8007864:	2b10      	cmp	r3, #16
 8007866:	d11b      	bne.n	80078a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f06f 0210 	mvn.w	r2, #16
 8007870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2208      	movs	r2, #8
 8007876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007882:	2b00      	cmp	r3, #0
 8007884:	d003      	beq.n	800788e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 f887 	bl	800799a <HAL_TIM_IC_CaptureCallback>
 800788c:	e005      	b.n	800789a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f879 	bl	8007986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f88a 	bl	80079ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d10e      	bne.n	80078cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d107      	bne.n	80078cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f06f 0201 	mvn.w	r2, #1
 80078c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7f9 fb2c 	bl	8000f24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d6:	2b80      	cmp	r3, #128	; 0x80
 80078d8:	d10e      	bne.n	80078f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078e4:	2b80      	cmp	r3, #128	; 0x80
 80078e6:	d107      	bne.n	80078f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80078f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f914 	bl	8007b20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007906:	d10e      	bne.n	8007926 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007912:	2b80      	cmp	r3, #128	; 0x80
 8007914:	d107      	bne.n	8007926 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800791e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f907 	bl	8007b34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	691b      	ldr	r3, [r3, #16]
 800792c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007930:	2b40      	cmp	r3, #64	; 0x40
 8007932:	d10e      	bne.n	8007952 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800793e:	2b40      	cmp	r3, #64	; 0x40
 8007940:	d107      	bne.n	8007952 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800794a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 f838 	bl	80079c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	f003 0320 	and.w	r3, r3, #32
 800795c:	2b20      	cmp	r3, #32
 800795e:	d10e      	bne.n	800797e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	f003 0320 	and.w	r3, r3, #32
 800796a:	2b20      	cmp	r3, #32
 800796c:	d107      	bne.n	800797e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f06f 0220 	mvn.w	r2, #32
 8007976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f8c7 	bl	8007b0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800797e:	bf00      	nop
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007986:	b480      	push	{r7}
 8007988:	b083      	sub	sp, #12
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800798e:	bf00      	nop
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800799a:	b480      	push	{r7}
 800799c:	b083      	sub	sp, #12
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079a2:	bf00      	nop
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079b6:	bf00      	nop
 80079b8:	370c      	adds	r7, #12
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b083      	sub	sp, #12
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079ca:	bf00      	nop
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
	...

080079d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a40      	ldr	r2, [pc, #256]	; (8007aec <TIM_Base_SetConfig+0x114>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d013      	beq.n	8007a18 <TIM_Base_SetConfig+0x40>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079f6:	d00f      	beq.n	8007a18 <TIM_Base_SetConfig+0x40>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a3d      	ldr	r2, [pc, #244]	; (8007af0 <TIM_Base_SetConfig+0x118>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d00b      	beq.n	8007a18 <TIM_Base_SetConfig+0x40>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a3c      	ldr	r2, [pc, #240]	; (8007af4 <TIM_Base_SetConfig+0x11c>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d007      	beq.n	8007a18 <TIM_Base_SetConfig+0x40>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a3b      	ldr	r2, [pc, #236]	; (8007af8 <TIM_Base_SetConfig+0x120>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d003      	beq.n	8007a18 <TIM_Base_SetConfig+0x40>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a3a      	ldr	r2, [pc, #232]	; (8007afc <TIM_Base_SetConfig+0x124>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d108      	bne.n	8007a2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a2f      	ldr	r2, [pc, #188]	; (8007aec <TIM_Base_SetConfig+0x114>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d01f      	beq.n	8007a72 <TIM_Base_SetConfig+0x9a>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a38:	d01b      	beq.n	8007a72 <TIM_Base_SetConfig+0x9a>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a2c      	ldr	r2, [pc, #176]	; (8007af0 <TIM_Base_SetConfig+0x118>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d017      	beq.n	8007a72 <TIM_Base_SetConfig+0x9a>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a2b      	ldr	r2, [pc, #172]	; (8007af4 <TIM_Base_SetConfig+0x11c>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d013      	beq.n	8007a72 <TIM_Base_SetConfig+0x9a>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a2a      	ldr	r2, [pc, #168]	; (8007af8 <TIM_Base_SetConfig+0x120>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d00f      	beq.n	8007a72 <TIM_Base_SetConfig+0x9a>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a29      	ldr	r2, [pc, #164]	; (8007afc <TIM_Base_SetConfig+0x124>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d00b      	beq.n	8007a72 <TIM_Base_SetConfig+0x9a>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a28      	ldr	r2, [pc, #160]	; (8007b00 <TIM_Base_SetConfig+0x128>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d007      	beq.n	8007a72 <TIM_Base_SetConfig+0x9a>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a27      	ldr	r2, [pc, #156]	; (8007b04 <TIM_Base_SetConfig+0x12c>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d003      	beq.n	8007a72 <TIM_Base_SetConfig+0x9a>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a26      	ldr	r2, [pc, #152]	; (8007b08 <TIM_Base_SetConfig+0x130>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d108      	bne.n	8007a84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a10      	ldr	r2, [pc, #64]	; (8007aec <TIM_Base_SetConfig+0x114>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d00f      	beq.n	8007ad0 <TIM_Base_SetConfig+0xf8>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a12      	ldr	r2, [pc, #72]	; (8007afc <TIM_Base_SetConfig+0x124>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d00b      	beq.n	8007ad0 <TIM_Base_SetConfig+0xf8>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a11      	ldr	r2, [pc, #68]	; (8007b00 <TIM_Base_SetConfig+0x128>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d007      	beq.n	8007ad0 <TIM_Base_SetConfig+0xf8>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a10      	ldr	r2, [pc, #64]	; (8007b04 <TIM_Base_SetConfig+0x12c>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d003      	beq.n	8007ad0 <TIM_Base_SetConfig+0xf8>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a0f      	ldr	r2, [pc, #60]	; (8007b08 <TIM_Base_SetConfig+0x130>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d103      	bne.n	8007ad8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	691a      	ldr	r2, [r3, #16]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	615a      	str	r2, [r3, #20]
}
 8007ade:	bf00      	nop
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	40010000 	.word	0x40010000
 8007af0:	40000400 	.word	0x40000400
 8007af4:	40000800 	.word	0x40000800
 8007af8:	40000c00 	.word	0x40000c00
 8007afc:	40010400 	.word	0x40010400
 8007b00:	40014000 	.word	0x40014000
 8007b04:	40014400 	.word	0x40014400
 8007b08:	40014800 	.word	0x40014800

08007b0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007b4e:	4b98      	ldr	r3, [pc, #608]	; (8007db0 <MX_LWIP_Init+0x268>)
 8007b50:	22c0      	movs	r2, #192	; 0xc0
 8007b52:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007b54:	4b96      	ldr	r3, [pc, #600]	; (8007db0 <MX_LWIP_Init+0x268>)
 8007b56:	22a8      	movs	r2, #168	; 0xa8
 8007b58:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 100;
 8007b5a:	4b95      	ldr	r3, [pc, #596]	; (8007db0 <MX_LWIP_Init+0x268>)
 8007b5c:	2264      	movs	r2, #100	; 0x64
 8007b5e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 8007b60:	4b93      	ldr	r3, [pc, #588]	; (8007db0 <MX_LWIP_Init+0x268>)
 8007b62:	2264      	movs	r2, #100	; 0x64
 8007b64:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007b66:	4b93      	ldr	r3, [pc, #588]	; (8007db4 <MX_LWIP_Init+0x26c>)
 8007b68:	22ff      	movs	r2, #255	; 0xff
 8007b6a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007b6c:	4b91      	ldr	r3, [pc, #580]	; (8007db4 <MX_LWIP_Init+0x26c>)
 8007b6e:	22ff      	movs	r2, #255	; 0xff
 8007b70:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007b72:	4b90      	ldr	r3, [pc, #576]	; (8007db4 <MX_LWIP_Init+0x26c>)
 8007b74:	22ff      	movs	r2, #255	; 0xff
 8007b76:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007b78:	4b8e      	ldr	r3, [pc, #568]	; (8007db4 <MX_LWIP_Init+0x26c>)
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8007b7e:	4b8e      	ldr	r3, [pc, #568]	; (8007db8 <MX_LWIP_Init+0x270>)
 8007b80:	22c0      	movs	r2, #192	; 0xc0
 8007b82:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007b84:	4b8c      	ldr	r3, [pc, #560]	; (8007db8 <MX_LWIP_Init+0x270>)
 8007b86:	22a8      	movs	r2, #168	; 0xa8
 8007b88:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 100;
 8007b8a:	4b8b      	ldr	r3, [pc, #556]	; (8007db8 <MX_LWIP_Init+0x270>)
 8007b8c:	2264      	movs	r2, #100	; 0x64
 8007b8e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007b90:	4b89      	ldr	r3, [pc, #548]	; (8007db8 <MX_LWIP_Init+0x270>)
 8007b92:	2201      	movs	r2, #1
 8007b94:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8007b96:	2100      	movs	r1, #0
 8007b98:	2000      	movs	r0, #0
 8007b9a:	f004 fd7f 	bl	800c69c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007b9e:	4b84      	ldr	r3, [pc, #528]	; (8007db0 <MX_LWIP_Init+0x268>)
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	061a      	lsls	r2, r3, #24
 8007ba4:	4b82      	ldr	r3, [pc, #520]	; (8007db0 <MX_LWIP_Init+0x268>)
 8007ba6:	785b      	ldrb	r3, [r3, #1]
 8007ba8:	041b      	lsls	r3, r3, #16
 8007baa:	431a      	orrs	r2, r3
 8007bac:	4b80      	ldr	r3, [pc, #512]	; (8007db0 <MX_LWIP_Init+0x268>)
 8007bae:	789b      	ldrb	r3, [r3, #2]
 8007bb0:	021b      	lsls	r3, r3, #8
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	4a7e      	ldr	r2, [pc, #504]	; (8007db0 <MX_LWIP_Init+0x268>)
 8007bb6:	78d2      	ldrb	r2, [r2, #3]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	061a      	lsls	r2, r3, #24
 8007bbc:	4b7c      	ldr	r3, [pc, #496]	; (8007db0 <MX_LWIP_Init+0x268>)
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	0619      	lsls	r1, r3, #24
 8007bc2:	4b7b      	ldr	r3, [pc, #492]	; (8007db0 <MX_LWIP_Init+0x268>)
 8007bc4:	785b      	ldrb	r3, [r3, #1]
 8007bc6:	041b      	lsls	r3, r3, #16
 8007bc8:	4319      	orrs	r1, r3
 8007bca:	4b79      	ldr	r3, [pc, #484]	; (8007db0 <MX_LWIP_Init+0x268>)
 8007bcc:	789b      	ldrb	r3, [r3, #2]
 8007bce:	021b      	lsls	r3, r3, #8
 8007bd0:	430b      	orrs	r3, r1
 8007bd2:	4977      	ldr	r1, [pc, #476]	; (8007db0 <MX_LWIP_Init+0x268>)
 8007bd4:	78c9      	ldrb	r1, [r1, #3]
 8007bd6:	430b      	orrs	r3, r1
 8007bd8:	021b      	lsls	r3, r3, #8
 8007bda:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007bde:	431a      	orrs	r2, r3
 8007be0:	4b73      	ldr	r3, [pc, #460]	; (8007db0 <MX_LWIP_Init+0x268>)
 8007be2:	781b      	ldrb	r3, [r3, #0]
 8007be4:	0619      	lsls	r1, r3, #24
 8007be6:	4b72      	ldr	r3, [pc, #456]	; (8007db0 <MX_LWIP_Init+0x268>)
 8007be8:	785b      	ldrb	r3, [r3, #1]
 8007bea:	041b      	lsls	r3, r3, #16
 8007bec:	4319      	orrs	r1, r3
 8007bee:	4b70      	ldr	r3, [pc, #448]	; (8007db0 <MX_LWIP_Init+0x268>)
 8007bf0:	789b      	ldrb	r3, [r3, #2]
 8007bf2:	021b      	lsls	r3, r3, #8
 8007bf4:	430b      	orrs	r3, r1
 8007bf6:	496e      	ldr	r1, [pc, #440]	; (8007db0 <MX_LWIP_Init+0x268>)
 8007bf8:	78c9      	ldrb	r1, [r1, #3]
 8007bfa:	430b      	orrs	r3, r1
 8007bfc:	0a1b      	lsrs	r3, r3, #8
 8007bfe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007c02:	431a      	orrs	r2, r3
 8007c04:	4b6a      	ldr	r3, [pc, #424]	; (8007db0 <MX_LWIP_Init+0x268>)
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	0619      	lsls	r1, r3, #24
 8007c0a:	4b69      	ldr	r3, [pc, #420]	; (8007db0 <MX_LWIP_Init+0x268>)
 8007c0c:	785b      	ldrb	r3, [r3, #1]
 8007c0e:	041b      	lsls	r3, r3, #16
 8007c10:	4319      	orrs	r1, r3
 8007c12:	4b67      	ldr	r3, [pc, #412]	; (8007db0 <MX_LWIP_Init+0x268>)
 8007c14:	789b      	ldrb	r3, [r3, #2]
 8007c16:	021b      	lsls	r3, r3, #8
 8007c18:	430b      	orrs	r3, r1
 8007c1a:	4965      	ldr	r1, [pc, #404]	; (8007db0 <MX_LWIP_Init+0x268>)
 8007c1c:	78c9      	ldrb	r1, [r1, #3]
 8007c1e:	430b      	orrs	r3, r1
 8007c20:	0e1b      	lsrs	r3, r3, #24
 8007c22:	4313      	orrs	r3, r2
 8007c24:	4a65      	ldr	r2, [pc, #404]	; (8007dbc <MX_LWIP_Init+0x274>)
 8007c26:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007c28:	4b62      	ldr	r3, [pc, #392]	; (8007db4 <MX_LWIP_Init+0x26c>)
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	061a      	lsls	r2, r3, #24
 8007c2e:	4b61      	ldr	r3, [pc, #388]	; (8007db4 <MX_LWIP_Init+0x26c>)
 8007c30:	785b      	ldrb	r3, [r3, #1]
 8007c32:	041b      	lsls	r3, r3, #16
 8007c34:	431a      	orrs	r2, r3
 8007c36:	4b5f      	ldr	r3, [pc, #380]	; (8007db4 <MX_LWIP_Init+0x26c>)
 8007c38:	789b      	ldrb	r3, [r3, #2]
 8007c3a:	021b      	lsls	r3, r3, #8
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	4a5d      	ldr	r2, [pc, #372]	; (8007db4 <MX_LWIP_Init+0x26c>)
 8007c40:	78d2      	ldrb	r2, [r2, #3]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	061a      	lsls	r2, r3, #24
 8007c46:	4b5b      	ldr	r3, [pc, #364]	; (8007db4 <MX_LWIP_Init+0x26c>)
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	0619      	lsls	r1, r3, #24
 8007c4c:	4b59      	ldr	r3, [pc, #356]	; (8007db4 <MX_LWIP_Init+0x26c>)
 8007c4e:	785b      	ldrb	r3, [r3, #1]
 8007c50:	041b      	lsls	r3, r3, #16
 8007c52:	4319      	orrs	r1, r3
 8007c54:	4b57      	ldr	r3, [pc, #348]	; (8007db4 <MX_LWIP_Init+0x26c>)
 8007c56:	789b      	ldrb	r3, [r3, #2]
 8007c58:	021b      	lsls	r3, r3, #8
 8007c5a:	430b      	orrs	r3, r1
 8007c5c:	4955      	ldr	r1, [pc, #340]	; (8007db4 <MX_LWIP_Init+0x26c>)
 8007c5e:	78c9      	ldrb	r1, [r1, #3]
 8007c60:	430b      	orrs	r3, r1
 8007c62:	021b      	lsls	r3, r3, #8
 8007c64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c68:	431a      	orrs	r2, r3
 8007c6a:	4b52      	ldr	r3, [pc, #328]	; (8007db4 <MX_LWIP_Init+0x26c>)
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	0619      	lsls	r1, r3, #24
 8007c70:	4b50      	ldr	r3, [pc, #320]	; (8007db4 <MX_LWIP_Init+0x26c>)
 8007c72:	785b      	ldrb	r3, [r3, #1]
 8007c74:	041b      	lsls	r3, r3, #16
 8007c76:	4319      	orrs	r1, r3
 8007c78:	4b4e      	ldr	r3, [pc, #312]	; (8007db4 <MX_LWIP_Init+0x26c>)
 8007c7a:	789b      	ldrb	r3, [r3, #2]
 8007c7c:	021b      	lsls	r3, r3, #8
 8007c7e:	430b      	orrs	r3, r1
 8007c80:	494c      	ldr	r1, [pc, #304]	; (8007db4 <MX_LWIP_Init+0x26c>)
 8007c82:	78c9      	ldrb	r1, [r1, #3]
 8007c84:	430b      	orrs	r3, r1
 8007c86:	0a1b      	lsrs	r3, r3, #8
 8007c88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007c8c:	431a      	orrs	r2, r3
 8007c8e:	4b49      	ldr	r3, [pc, #292]	; (8007db4 <MX_LWIP_Init+0x26c>)
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	0619      	lsls	r1, r3, #24
 8007c94:	4b47      	ldr	r3, [pc, #284]	; (8007db4 <MX_LWIP_Init+0x26c>)
 8007c96:	785b      	ldrb	r3, [r3, #1]
 8007c98:	041b      	lsls	r3, r3, #16
 8007c9a:	4319      	orrs	r1, r3
 8007c9c:	4b45      	ldr	r3, [pc, #276]	; (8007db4 <MX_LWIP_Init+0x26c>)
 8007c9e:	789b      	ldrb	r3, [r3, #2]
 8007ca0:	021b      	lsls	r3, r3, #8
 8007ca2:	430b      	orrs	r3, r1
 8007ca4:	4943      	ldr	r1, [pc, #268]	; (8007db4 <MX_LWIP_Init+0x26c>)
 8007ca6:	78c9      	ldrb	r1, [r1, #3]
 8007ca8:	430b      	orrs	r3, r1
 8007caa:	0e1b      	lsrs	r3, r3, #24
 8007cac:	4313      	orrs	r3, r2
 8007cae:	4a44      	ldr	r2, [pc, #272]	; (8007dc0 <MX_LWIP_Init+0x278>)
 8007cb0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007cb2:	4b41      	ldr	r3, [pc, #260]	; (8007db8 <MX_LWIP_Init+0x270>)
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	061a      	lsls	r2, r3, #24
 8007cb8:	4b3f      	ldr	r3, [pc, #252]	; (8007db8 <MX_LWIP_Init+0x270>)
 8007cba:	785b      	ldrb	r3, [r3, #1]
 8007cbc:	041b      	lsls	r3, r3, #16
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	4b3d      	ldr	r3, [pc, #244]	; (8007db8 <MX_LWIP_Init+0x270>)
 8007cc2:	789b      	ldrb	r3, [r3, #2]
 8007cc4:	021b      	lsls	r3, r3, #8
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	4a3b      	ldr	r2, [pc, #236]	; (8007db8 <MX_LWIP_Init+0x270>)
 8007cca:	78d2      	ldrb	r2, [r2, #3]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	061a      	lsls	r2, r3, #24
 8007cd0:	4b39      	ldr	r3, [pc, #228]	; (8007db8 <MX_LWIP_Init+0x270>)
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	0619      	lsls	r1, r3, #24
 8007cd6:	4b38      	ldr	r3, [pc, #224]	; (8007db8 <MX_LWIP_Init+0x270>)
 8007cd8:	785b      	ldrb	r3, [r3, #1]
 8007cda:	041b      	lsls	r3, r3, #16
 8007cdc:	4319      	orrs	r1, r3
 8007cde:	4b36      	ldr	r3, [pc, #216]	; (8007db8 <MX_LWIP_Init+0x270>)
 8007ce0:	789b      	ldrb	r3, [r3, #2]
 8007ce2:	021b      	lsls	r3, r3, #8
 8007ce4:	430b      	orrs	r3, r1
 8007ce6:	4934      	ldr	r1, [pc, #208]	; (8007db8 <MX_LWIP_Init+0x270>)
 8007ce8:	78c9      	ldrb	r1, [r1, #3]
 8007cea:	430b      	orrs	r3, r1
 8007cec:	021b      	lsls	r3, r3, #8
 8007cee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007cf2:	431a      	orrs	r2, r3
 8007cf4:	4b30      	ldr	r3, [pc, #192]	; (8007db8 <MX_LWIP_Init+0x270>)
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	0619      	lsls	r1, r3, #24
 8007cfa:	4b2f      	ldr	r3, [pc, #188]	; (8007db8 <MX_LWIP_Init+0x270>)
 8007cfc:	785b      	ldrb	r3, [r3, #1]
 8007cfe:	041b      	lsls	r3, r3, #16
 8007d00:	4319      	orrs	r1, r3
 8007d02:	4b2d      	ldr	r3, [pc, #180]	; (8007db8 <MX_LWIP_Init+0x270>)
 8007d04:	789b      	ldrb	r3, [r3, #2]
 8007d06:	021b      	lsls	r3, r3, #8
 8007d08:	430b      	orrs	r3, r1
 8007d0a:	492b      	ldr	r1, [pc, #172]	; (8007db8 <MX_LWIP_Init+0x270>)
 8007d0c:	78c9      	ldrb	r1, [r1, #3]
 8007d0e:	430b      	orrs	r3, r1
 8007d10:	0a1b      	lsrs	r3, r3, #8
 8007d12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d16:	431a      	orrs	r2, r3
 8007d18:	4b27      	ldr	r3, [pc, #156]	; (8007db8 <MX_LWIP_Init+0x270>)
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	0619      	lsls	r1, r3, #24
 8007d1e:	4b26      	ldr	r3, [pc, #152]	; (8007db8 <MX_LWIP_Init+0x270>)
 8007d20:	785b      	ldrb	r3, [r3, #1]
 8007d22:	041b      	lsls	r3, r3, #16
 8007d24:	4319      	orrs	r1, r3
 8007d26:	4b24      	ldr	r3, [pc, #144]	; (8007db8 <MX_LWIP_Init+0x270>)
 8007d28:	789b      	ldrb	r3, [r3, #2]
 8007d2a:	021b      	lsls	r3, r3, #8
 8007d2c:	430b      	orrs	r3, r1
 8007d2e:	4922      	ldr	r1, [pc, #136]	; (8007db8 <MX_LWIP_Init+0x270>)
 8007d30:	78c9      	ldrb	r1, [r1, #3]
 8007d32:	430b      	orrs	r3, r1
 8007d34:	0e1b      	lsrs	r3, r3, #24
 8007d36:	4313      	orrs	r3, r2
 8007d38:	4a22      	ldr	r2, [pc, #136]	; (8007dc4 <MX_LWIP_Init+0x27c>)
 8007d3a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007d3c:	4b22      	ldr	r3, [pc, #136]	; (8007dc8 <MX_LWIP_Init+0x280>)
 8007d3e:	9302      	str	r3, [sp, #8]
 8007d40:	4b22      	ldr	r3, [pc, #136]	; (8007dcc <MX_LWIP_Init+0x284>)
 8007d42:	9301      	str	r3, [sp, #4]
 8007d44:	2300      	movs	r3, #0
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	4b1e      	ldr	r3, [pc, #120]	; (8007dc4 <MX_LWIP_Init+0x27c>)
 8007d4a:	4a1d      	ldr	r2, [pc, #116]	; (8007dc0 <MX_LWIP_Init+0x278>)
 8007d4c:	491b      	ldr	r1, [pc, #108]	; (8007dbc <MX_LWIP_Init+0x274>)
 8007d4e:	4820      	ldr	r0, [pc, #128]	; (8007dd0 <MX_LWIP_Init+0x288>)
 8007d50:	f006 f976 	bl	800e040 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007d54:	481e      	ldr	r0, [pc, #120]	; (8007dd0 <MX_LWIP_Init+0x288>)
 8007d56:	f006 fb25 	bl	800e3a4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007d5a:	4b1d      	ldr	r3, [pc, #116]	; (8007dd0 <MX_LWIP_Init+0x288>)
 8007d5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d60:	089b      	lsrs	r3, r3, #2
 8007d62:	f003 0301 	and.w	r3, r3, #1
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d003      	beq.n	8007d74 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007d6c:	4818      	ldr	r0, [pc, #96]	; (8007dd0 <MX_LWIP_Init+0x288>)
 8007d6e:	f006 fb29 	bl	800e3c4 <netif_set_up>
 8007d72:	e002      	b.n	8007d7a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007d74:	4816      	ldr	r0, [pc, #88]	; (8007dd0 <MX_LWIP_Init+0x288>)
 8007d76:	f006 fb91 	bl	800e49c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007d7a:	4916      	ldr	r1, [pc, #88]	; (8007dd4 <MX_LWIP_Init+0x28c>)
 8007d7c:	4814      	ldr	r0, [pc, #80]	; (8007dd0 <MX_LWIP_Init+0x288>)
 8007d7e:	f006 fc23 	bl	800e5c8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007d82:	2224      	movs	r2, #36	; 0x24
 8007d84:	2100      	movs	r1, #0
 8007d86:	4814      	ldr	r0, [pc, #80]	; (8007dd8 <MX_LWIP_Init+0x290>)
 8007d88:	f010 fe4d 	bl	8018a26 <memset>
  attributes.name = "EthLink";
 8007d8c:	4b12      	ldr	r3, [pc, #72]	; (8007dd8 <MX_LWIP_Init+0x290>)
 8007d8e:	4a13      	ldr	r2, [pc, #76]	; (8007ddc <MX_LWIP_Init+0x294>)
 8007d90:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8007d92:	4b11      	ldr	r3, [pc, #68]	; (8007dd8 <MX_LWIP_Init+0x290>)
 8007d94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d98:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8007d9a:	4b0f      	ldr	r3, [pc, #60]	; (8007dd8 <MX_LWIP_Init+0x290>)
 8007d9c:	2210      	movs	r2, #16
 8007d9e:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8007da0:	4a0d      	ldr	r2, [pc, #52]	; (8007dd8 <MX_LWIP_Init+0x290>)
 8007da2:	490b      	ldr	r1, [pc, #44]	; (8007dd0 <MX_LWIP_Init+0x288>)
 8007da4:	480e      	ldr	r0, [pc, #56]	; (8007de0 <MX_LWIP_Init+0x298>)
 8007da6:	f000 fd9c 	bl	80088e2 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007daa:	bf00      	nop
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	240003d8 	.word	0x240003d8
 8007db4:	240003dc 	.word	0x240003dc
 8007db8:	240003e0 	.word	0x240003e0
 8007dbc:	240003cc 	.word	0x240003cc
 8007dc0:	240003d0 	.word	0x240003d0
 8007dc4:	240003d4 	.word	0x240003d4
 8007dc8:	0800c5d9 	.word	0x0800c5d9
 8007dcc:	08008289 	.word	0x08008289
 8007dd0:	24000398 	.word	0x24000398
 8007dd4:	08007de5 	.word	0x08007de5
 8007dd8:	240003e4 	.word	0x240003e4
 8007ddc:	08019a90 	.word	0x08019a90
 8007de0:	08008539 	.word	0x08008539

08007de4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8007e00:	4b04      	ldr	r3, [pc, #16]	; (8007e14 <HAL_ETH_RxCpltCallback+0x1c>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4618      	mov	r0, r3
 8007e06:	f001 f803 	bl	8008e10 <osSemaphoreRelease>
}
 8007e0a:	bf00      	nop
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	24000410 	.word	0x24000410

08007e18 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8007e20:	4b04      	ldr	r3, [pc, #16]	; (8007e34 <HAL_ETH_TxCpltCallback+0x1c>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f000 fff3 	bl	8008e10 <osSemaphoreRelease>
}
 8007e2a:	bf00      	nop
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	24000414 	.word	0x24000414

08007e38 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f7fa fed1 	bl	8002be8 <HAL_ETH_GetDMAError>
 8007e46:	4603      	mov	r3, r0
 8007e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e4c:	2b80      	cmp	r3, #128	; 0x80
 8007e4e:	d104      	bne.n	8007e5a <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8007e50:	4b04      	ldr	r3, [pc, #16]	; (8007e64 <HAL_ETH_ErrorCallback+0x2c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 ffdb 	bl	8008e10 <osSemaphoreRelease>
  }
}
 8007e5a:	bf00      	nop
 8007e5c:	3708      	adds	r7, #8
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	24000410 	.word	0x24000410

08007e68 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b0aa      	sub	sp, #168	; 0xa8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007e70:	2300      	movs	r3, #0
 8007e72:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8007e76:	2300      	movs	r3, #0
 8007e78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8007e82:	f107 0310 	add.w	r3, r7, #16
 8007e86:	2264      	movs	r2, #100	; 0x64
 8007e88:	2100      	movs	r1, #0
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f010 fdcb 	bl	8018a26 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007e90:	4b85      	ldr	r3, [pc, #532]	; (80080a8 <low_level_init+0x240>)
 8007e92:	4a86      	ldr	r2, [pc, #536]	; (80080ac <low_level_init+0x244>)
 8007e94:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8007e96:	2300      	movs	r3, #0
 8007e98:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8007e9a:	2380      	movs	r3, #128	; 0x80
 8007e9c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8007e9e:	23e1      	movs	r3, #225	; 0xe1
 8007ea0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8007eae:	4a7e      	ldr	r2, [pc, #504]	; (80080a8 <low_level_init+0x240>)
 8007eb0:	f107 0308 	add.w	r3, r7, #8
 8007eb4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007eb6:	4b7c      	ldr	r3, [pc, #496]	; (80080a8 <low_level_init+0x240>)
 8007eb8:	2201      	movs	r2, #1
 8007eba:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8007ebc:	4b7a      	ldr	r3, [pc, #488]	; (80080a8 <low_level_init+0x240>)
 8007ebe:	4a7c      	ldr	r2, [pc, #496]	; (80080b0 <low_level_init+0x248>)
 8007ec0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007ec2:	4b79      	ldr	r3, [pc, #484]	; (80080a8 <low_level_init+0x240>)
 8007ec4:	4a7b      	ldr	r2, [pc, #492]	; (80080b4 <low_level_init+0x24c>)
 8007ec6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8007ec8:	4b77      	ldr	r3, [pc, #476]	; (80080a8 <low_level_init+0x240>)
 8007eca:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007ece:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007ed0:	4875      	ldr	r0, [pc, #468]	; (80080a8 <low_level_init+0x240>)
 8007ed2:	f7f9 fea9 	bl	8001c28 <HAL_ETH_Init>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8007edc:	2238      	movs	r2, #56	; 0x38
 8007ede:	2100      	movs	r1, #0
 8007ee0:	4875      	ldr	r0, [pc, #468]	; (80080b8 <low_level_init+0x250>)
 8007ee2:	f010 fda0 	bl	8018a26 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007ee6:	4b74      	ldr	r3, [pc, #464]	; (80080b8 <low_level_init+0x250>)
 8007ee8:	2221      	movs	r2, #33	; 0x21
 8007eea:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8007eec:	4b72      	ldr	r3, [pc, #456]	; (80080b8 <low_level_init+0x250>)
 8007eee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007ef2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007ef4:	4b70      	ldr	r3, [pc, #448]	; (80080b8 <low_level_init+0x250>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8007efa:	4870      	ldr	r0, [pc, #448]	; (80080bc <low_level_init+0x254>)
 8007efc:	f005 ff5a 	bl	800ddb4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2206      	movs	r2, #6
 8007f04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8007f08:	4b67      	ldr	r3, [pc, #412]	; (80080a8 <low_level_init+0x240>)
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	781a      	ldrb	r2, [r3, #0]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007f14:	4b64      	ldr	r3, [pc, #400]	; (80080a8 <low_level_init+0x240>)
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	785a      	ldrb	r2, [r3, #1]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007f20:	4b61      	ldr	r3, [pc, #388]	; (80080a8 <low_level_init+0x240>)
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	789a      	ldrb	r2, [r3, #2]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8007f2c:	4b5e      	ldr	r3, [pc, #376]	; (80080a8 <low_level_init+0x240>)
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	78da      	ldrb	r2, [r3, #3]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8007f38:	4b5b      	ldr	r3, [pc, #364]	; (80080a8 <low_level_init+0x240>)
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	791a      	ldrb	r2, [r3, #4]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007f44:	4b58      	ldr	r3, [pc, #352]	; (80080a8 <low_level_init+0x240>)
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	795a      	ldrb	r2, [r3, #5]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007f56:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007f5e:	f043 030a 	orr.w	r3, r3, #10
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	2101      	movs	r1, #1
 8007f6e:	2001      	movs	r0, #1
 8007f70:	f000 fe73 	bl	8008c5a <osSemaphoreNew>
 8007f74:	4603      	mov	r3, r0
 8007f76:	4a52      	ldr	r2, [pc, #328]	; (80080c0 <low_level_init+0x258>)
 8007f78:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	2101      	movs	r1, #1
 8007f7e:	2001      	movs	r0, #1
 8007f80:	f000 fe6b 	bl	8008c5a <osSemaphoreNew>
 8007f84:	4603      	mov	r3, r0
 8007f86:	4a4f      	ldr	r2, [pc, #316]	; (80080c4 <low_level_init+0x25c>)
 8007f88:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007f8a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007f8e:	2224      	movs	r2, #36	; 0x24
 8007f90:	2100      	movs	r1, #0
 8007f92:	4618      	mov	r0, r3
 8007f94:	f010 fd47 	bl	8018a26 <memset>
  attributes.name = "EthIf";
 8007f98:	4b4b      	ldr	r3, [pc, #300]	; (80080c8 <low_level_init+0x260>)
 8007f9a:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8007f9c:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8007fa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8007fa4:	2330      	movs	r3, #48	; 0x30
 8007fa6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8007faa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8007fae:	461a      	mov	r2, r3
 8007fb0:	6879      	ldr	r1, [r7, #4]
 8007fb2:	4846      	ldr	r0, [pc, #280]	; (80080cc <low_level_init+0x264>)
 8007fb4:	f000 fc95 	bl	80088e2 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8007fb8:	4945      	ldr	r1, [pc, #276]	; (80080d0 <low_level_init+0x268>)
 8007fba:	4846      	ldr	r0, [pc, #280]	; (80080d4 <low_level_init+0x26c>)
 8007fbc:	f7f9 fafb 	bl	80015b6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8007fc0:	4844      	ldr	r0, [pc, #272]	; (80080d4 <low_level_init+0x26c>)
 8007fc2:	f7f9 fb2a 	bl	800161a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8007fc6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d165      	bne.n	800809a <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007fce:	4841      	ldr	r0, [pc, #260]	; (80080d4 <low_level_init+0x26c>)
 8007fd0:	f7f9 fbcb 	bl	800176a <LAN8742_GetLinkState>
 8007fd4:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8007fd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	dc06      	bgt.n	8007fee <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f006 fac1 	bl	800e568 <netif_set_link_down>
      netif_set_down(netif);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f006 fa58 	bl	800e49c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007fec:	e057      	b.n	800809e <low_level_init+0x236>
      switch (PHYLinkState)
 8007fee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ff2:	3b02      	subs	r3, #2
 8007ff4:	2b03      	cmp	r3, #3
 8007ff6:	d82b      	bhi.n	8008050 <low_level_init+0x1e8>
 8007ff8:	a201      	add	r2, pc, #4	; (adr r2, 8008000 <low_level_init+0x198>)
 8007ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffe:	bf00      	nop
 8008000:	08008011 	.word	0x08008011
 8008004:	08008023 	.word	0x08008023
 8008008:	08008033 	.word	0x08008033
 800800c:	08008043 	.word	0x08008043
        duplex = ETH_FULLDUPLEX_MODE;
 8008010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008014:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8008018:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800801c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008020:	e01f      	b.n	8008062 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8008022:	2300      	movs	r3, #0
 8008024:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8008028:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800802c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008030:	e017      	b.n	8008062 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8008032:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008036:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 800803a:	2300      	movs	r3, #0
 800803c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008040:	e00f      	b.n	8008062 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8008042:	2300      	movs	r3, #0
 8008044:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8008048:	2300      	movs	r3, #0
 800804a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 800804e:	e008      	b.n	8008062 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8008050:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008054:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8008058:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800805c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8008060:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008062:	f107 0310 	add.w	r3, r7, #16
 8008066:	4619      	mov	r1, r3
 8008068:	480f      	ldr	r0, [pc, #60]	; (80080a8 <low_level_init+0x240>)
 800806a:	f7fa fb77 	bl	800275c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800806e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008072:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8008074:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008078:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800807a:	f107 0310 	add.w	r3, r7, #16
 800807e:	4619      	mov	r1, r3
 8008080:	4809      	ldr	r0, [pc, #36]	; (80080a8 <low_level_init+0x240>)
 8008082:	f7fa fd3f 	bl	8002b04 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8008086:	4808      	ldr	r0, [pc, #32]	; (80080a8 <low_level_init+0x240>)
 8008088:	f7f9 feb4 	bl	8001df4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f006 f999 	bl	800e3c4 <netif_set_up>
    netif_set_link_up(netif);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f006 fa34 	bl	800e500 <netif_set_link_up>
}
 8008098:	e001      	b.n	800809e <low_level_init+0x236>
    Error_Handler();
 800809a:	f7f8 ff55 	bl	8000f48 <Error_Handler>
}
 800809e:	bf00      	nop
 80080a0:	37a8      	adds	r7, #168	; 0xa8
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bd80      	pop	{r7, pc}
 80080a6:	bf00      	nop
 80080a8:	24000418 	.word	0x24000418
 80080ac:	40028000 	.word	0x40028000
 80080b0:	30040060 	.word	0x30040060
 80080b4:	30040000 	.word	0x30040000
 80080b8:	240004c8 	.word	0x240004c8
 80080bc:	0801c864 	.word	0x0801c864
 80080c0:	24000410 	.word	0x24000410
 80080c4:	24000414 	.word	0x24000414
 80080c8:	08019a98 	.word	0x08019a98
 80080cc:	08008235 	.word	0x08008235
 80080d0:	24000014 	.word	0x24000014
 80080d4:	24000500 	.word	0x24000500

080080d8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b092      	sub	sp, #72	; 0x48
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80080e2:	2300      	movs	r3, #0
 80080e4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80080e6:	2300      	movs	r3, #0
 80080e8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80080ea:	2300      	movs	r3, #0
 80080ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80080f0:	f107 030c 	add.w	r3, r7, #12
 80080f4:	2230      	movs	r2, #48	; 0x30
 80080f6:	2100      	movs	r1, #0
 80080f8:	4618      	mov	r0, r3
 80080fa:	f010 fc94 	bl	8018a26 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80080fe:	f107 030c 	add.w	r3, r7, #12
 8008102:	2230      	movs	r2, #48	; 0x30
 8008104:	2100      	movs	r1, #0
 8008106:	4618      	mov	r0, r3
 8008108:	f010 fc8d 	bl	8018a26 <memset>

  for(q = p; q != NULL; q = q->next)
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	643b      	str	r3, [r7, #64]	; 0x40
 8008110:	e045      	b.n	800819e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8008112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008114:	2b03      	cmp	r3, #3
 8008116:	d902      	bls.n	800811e <low_level_output+0x46>
      return ERR_IF;
 8008118:	f06f 030b 	mvn.w	r3, #11
 800811c:	e065      	b.n	80081ea <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 800811e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008120:	6859      	ldr	r1, [r3, #4]
 8008122:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008124:	4613      	mov	r3, r2
 8008126:	005b      	lsls	r3, r3, #1
 8008128:	4413      	add	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	3348      	adds	r3, #72	; 0x48
 800812e:	443b      	add	r3, r7
 8008130:	3b3c      	subs	r3, #60	; 0x3c
 8008132:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8008134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008136:	895b      	ldrh	r3, [r3, #10]
 8008138:	4619      	mov	r1, r3
 800813a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800813c:	4613      	mov	r3, r2
 800813e:	005b      	lsls	r3, r3, #1
 8008140:	4413      	add	r3, r2
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	3348      	adds	r3, #72	; 0x48
 8008146:	443b      	add	r3, r7
 8008148:	3b38      	subs	r3, #56	; 0x38
 800814a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800814c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800814e:	2b00      	cmp	r3, #0
 8008150:	d011      	beq.n	8008176 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8008152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008154:	1e5a      	subs	r2, r3, #1
 8008156:	f107 000c 	add.w	r0, r7, #12
 800815a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800815c:	460b      	mov	r3, r1
 800815e:	005b      	lsls	r3, r3, #1
 8008160:	440b      	add	r3, r1
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	18c1      	adds	r1, r0, r3
 8008166:	4613      	mov	r3, r2
 8008168:	005b      	lsls	r3, r3, #1
 800816a:	4413      	add	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	3348      	adds	r3, #72	; 0x48
 8008170:	443b      	add	r3, r7
 8008172:	3b34      	subs	r3, #52	; 0x34
 8008174:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8008176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d109      	bne.n	8008192 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800817e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008180:	4613      	mov	r3, r2
 8008182:	005b      	lsls	r3, r3, #1
 8008184:	4413      	add	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	3348      	adds	r3, #72	; 0x48
 800818a:	443b      	add	r3, r7
 800818c:	3b34      	subs	r3, #52	; 0x34
 800818e:	2200      	movs	r2, #0
 8008190:	601a      	str	r2, [r3, #0]
    }

    i++;
 8008192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008194:	3301      	adds	r3, #1
 8008196:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8008198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	643b      	str	r3, [r7, #64]	; 0x40
 800819e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1b6      	bne.n	8008112 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	891b      	ldrh	r3, [r3, #8]
 80081a8:	461a      	mov	r2, r3
 80081aa:	4b12      	ldr	r3, [pc, #72]	; (80081f4 <low_level_output+0x11c>)
 80081ac:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80081ae:	4a11      	ldr	r2, [pc, #68]	; (80081f4 <low_level_output+0x11c>)
 80081b0:	f107 030c 	add.w	r3, r7, #12
 80081b4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80081b6:	4a0f      	ldr	r2, [pc, #60]	; (80081f4 <low_level_output+0x11c>)
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 80081bc:	6838      	ldr	r0, [r7, #0]
 80081be:	f006 fe57 	bl	800ee70 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80081c2:	490c      	ldr	r1, [pc, #48]	; (80081f4 <low_level_output+0x11c>)
 80081c4:	480c      	ldr	r0, [pc, #48]	; (80081f8 <low_level_output+0x120>)
 80081c6:	f7f9 ff19 	bl	8001ffc <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80081ca:	bf00      	nop
 80081cc:	4b0b      	ldr	r3, [pc, #44]	; (80081fc <low_level_output+0x124>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f04f 31ff 	mov.w	r1, #4294967295
 80081d4:	4618      	mov	r0, r3
 80081d6:	f000 fdc9 	bl	8008d6c <osSemaphoreAcquire>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1f5      	bne.n	80081cc <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80081e0:	4805      	ldr	r0, [pc, #20]	; (80081f8 <low_level_output+0x120>)
 80081e2:	f7fa f88a 	bl	80022fa <HAL_ETH_ReleaseTxPacket>

  return errval;
 80081e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3748      	adds	r7, #72	; 0x48
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	240004c8 	.word	0x240004c8
 80081f8:	24000418 	.word	0x24000418
 80081fc:	24000414 	.word	0x24000414

08008200 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8008208:	2300      	movs	r3, #0
 800820a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800820c:	4b07      	ldr	r3, [pc, #28]	; (800822c <low_level_input+0x2c>)
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d105      	bne.n	8008220 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8008214:	f107 030c 	add.w	r3, r7, #12
 8008218:	4619      	mov	r1, r3
 800821a:	4805      	ldr	r0, [pc, #20]	; (8008230 <low_level_input+0x30>)
 800821c:	f7f9 ff3f 	bl	800209e <HAL_ETH_ReadData>
  }

  return p;
 8008220:	68fb      	ldr	r3, [r7, #12]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	2400040c 	.word	0x2400040c
 8008230:	24000418 	.word	0x24000418

08008234 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800823c:	2300      	movs	r3, #0
 800823e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008244:	4b0f      	ldr	r3, [pc, #60]	; (8008284 <ethernetif_input+0x50>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f04f 31ff 	mov.w	r1, #4294967295
 800824c:	4618      	mov	r0, r3
 800824e:	f000 fd8d 	bl	8008d6c <osSemaphoreAcquire>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1f5      	bne.n	8008244 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8008258:	68b8      	ldr	r0, [r7, #8]
 800825a:	f7ff ffd1 	bl	8008200 <low_level_input>
 800825e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00a      	beq.n	800827c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	68b9      	ldr	r1, [r7, #8]
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	4798      	blx	r3
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d002      	beq.n	800827c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f006 fd54 	bl	800ed24 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1ea      	bne.n	8008258 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008282:	e7df      	b.n	8008244 <ethernetif_input+0x10>
 8008284:	24000410 	.word	0x24000410

08008288 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d106      	bne.n	80082a4 <ethernetif_init+0x1c>
 8008296:	4b0e      	ldr	r3, [pc, #56]	; (80082d0 <ethernetif_init+0x48>)
 8008298:	f240 2201 	movw	r2, #513	; 0x201
 800829c:	490d      	ldr	r1, [pc, #52]	; (80082d4 <ethernetif_init+0x4c>)
 800829e:	480e      	ldr	r0, [pc, #56]	; (80082d8 <ethernetif_init+0x50>)
 80082a0:	f010 fc5e 	bl	8018b60 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2273      	movs	r2, #115	; 0x73
 80082a8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2274      	movs	r2, #116	; 0x74
 80082b0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	4a09      	ldr	r2, [pc, #36]	; (80082dc <ethernetif_init+0x54>)
 80082b8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a08      	ldr	r2, [pc, #32]	; (80082e0 <ethernetif_init+0x58>)
 80082be:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f7ff fdd1 	bl	8007e68 <low_level_init>

  return ERR_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	08019aa0 	.word	0x08019aa0
 80082d4:	08019abc 	.word	0x08019abc
 80082d8:	08019acc 	.word	0x08019acc
 80082dc:	0801688d 	.word	0x0801688d
 80082e0:	080080d9 	.word	0x080080d9

080082e4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80082f0:	68f9      	ldr	r1, [r7, #12]
 80082f2:	4809      	ldr	r0, [pc, #36]	; (8008318 <pbuf_free_custom+0x34>)
 80082f4:	f005 fe4e 	bl	800df94 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80082f8:	4b08      	ldr	r3, [pc, #32]	; (800831c <pbuf_free_custom+0x38>)
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d107      	bne.n	8008310 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8008300:	4b06      	ldr	r3, [pc, #24]	; (800831c <pbuf_free_custom+0x38>)
 8008302:	2200      	movs	r2, #0
 8008304:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8008306:	4b06      	ldr	r3, [pc, #24]	; (8008320 <pbuf_free_custom+0x3c>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4618      	mov	r0, r3
 800830c:	f000 fd80 	bl	8008e10 <osSemaphoreRelease>
  }
}
 8008310:	bf00      	nop
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	0801c864 	.word	0x0801c864
 800831c:	2400040c 	.word	0x2400040c
 8008320:	24000410 	.word	0x24000410

08008324 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008328:	f7f9 faf6 	bl	8001918 <HAL_GetTick>
 800832c:	4603      	mov	r3, r0
}
 800832e:	4618      	mov	r0, r3
 8008330:	bd80      	pop	{r7, pc}
	...

08008334 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b08e      	sub	sp, #56	; 0x38
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800833c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008340:	2200      	movs	r2, #0
 8008342:	601a      	str	r2, [r3, #0]
 8008344:	605a      	str	r2, [r3, #4]
 8008346:	609a      	str	r2, [r3, #8]
 8008348:	60da      	str	r2, [r3, #12]
 800834a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a4d      	ldr	r2, [pc, #308]	; (8008488 <HAL_ETH_MspInit+0x154>)
 8008352:	4293      	cmp	r3, r2
 8008354:	f040 8093 	bne.w	800847e <HAL_ETH_MspInit+0x14a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8008358:	4b4c      	ldr	r3, [pc, #304]	; (800848c <HAL_ETH_MspInit+0x158>)
 800835a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800835e:	4a4b      	ldr	r2, [pc, #300]	; (800848c <HAL_ETH_MspInit+0x158>)
 8008360:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008364:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008368:	4b48      	ldr	r3, [pc, #288]	; (800848c <HAL_ETH_MspInit+0x158>)
 800836a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800836e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008372:	623b      	str	r3, [r7, #32]
 8008374:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8008376:	4b45      	ldr	r3, [pc, #276]	; (800848c <HAL_ETH_MspInit+0x158>)
 8008378:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800837c:	4a43      	ldr	r2, [pc, #268]	; (800848c <HAL_ETH_MspInit+0x158>)
 800837e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008382:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8008386:	4b41      	ldr	r3, [pc, #260]	; (800848c <HAL_ETH_MspInit+0x158>)
 8008388:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800838c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008390:	61fb      	str	r3, [r7, #28]
 8008392:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8008394:	4b3d      	ldr	r3, [pc, #244]	; (800848c <HAL_ETH_MspInit+0x158>)
 8008396:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800839a:	4a3c      	ldr	r2, [pc, #240]	; (800848c <HAL_ETH_MspInit+0x158>)
 800839c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083a0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80083a4:	4b39      	ldr	r3, [pc, #228]	; (800848c <HAL_ETH_MspInit+0x158>)
 80083a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80083aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083ae:	61bb      	str	r3, [r7, #24]
 80083b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80083b2:	4b36      	ldr	r3, [pc, #216]	; (800848c <HAL_ETH_MspInit+0x158>)
 80083b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80083b8:	4a34      	ldr	r2, [pc, #208]	; (800848c <HAL_ETH_MspInit+0x158>)
 80083ba:	f043 0304 	orr.w	r3, r3, #4
 80083be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80083c2:	4b32      	ldr	r3, [pc, #200]	; (800848c <HAL_ETH_MspInit+0x158>)
 80083c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80083c8:	f003 0304 	and.w	r3, r3, #4
 80083cc:	617b      	str	r3, [r7, #20]
 80083ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083d0:	4b2e      	ldr	r3, [pc, #184]	; (800848c <HAL_ETH_MspInit+0x158>)
 80083d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80083d6:	4a2d      	ldr	r2, [pc, #180]	; (800848c <HAL_ETH_MspInit+0x158>)
 80083d8:	f043 0301 	orr.w	r3, r3, #1
 80083dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80083e0:	4b2a      	ldr	r3, [pc, #168]	; (800848c <HAL_ETH_MspInit+0x158>)
 80083e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80083e6:	f003 0301 	and.w	r3, r3, #1
 80083ea:	613b      	str	r3, [r7, #16]
 80083ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80083ee:	4b27      	ldr	r3, [pc, #156]	; (800848c <HAL_ETH_MspInit+0x158>)
 80083f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80083f4:	4a25      	ldr	r2, [pc, #148]	; (800848c <HAL_ETH_MspInit+0x158>)
 80083f6:	f043 0302 	orr.w	r3, r3, #2
 80083fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80083fe:	4b23      	ldr	r3, [pc, #140]	; (800848c <HAL_ETH_MspInit+0x158>)
 8008400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008404:	f003 0302 	and.w	r3, r3, #2
 8008408:	60fb      	str	r3, [r7, #12]
 800840a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800840c:	2332      	movs	r3, #50	; 0x32
 800840e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008410:	2302      	movs	r3, #2
 8008412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008414:	2300      	movs	r3, #0
 8008416:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008418:	2303      	movs	r3, #3
 800841a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800841c:	230b      	movs	r3, #11
 800841e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008424:	4619      	mov	r1, r3
 8008426:	481a      	ldr	r0, [pc, #104]	; (8008490 <HAL_ETH_MspInit+0x15c>)
 8008428:	f7fc fb30 	bl	8004a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800842c:	2386      	movs	r3, #134	; 0x86
 800842e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008430:	2302      	movs	r3, #2
 8008432:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008434:	2300      	movs	r3, #0
 8008436:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008438:	2303      	movs	r3, #3
 800843a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800843c:	230b      	movs	r3, #11
 800843e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008444:	4619      	mov	r1, r3
 8008446:	4813      	ldr	r0, [pc, #76]	; (8008494 <HAL_ETH_MspInit+0x160>)
 8008448:	f7fc fb20 	bl	8004a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800844c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8008450:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008452:	2302      	movs	r3, #2
 8008454:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008456:	2300      	movs	r3, #0
 8008458:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800845a:	2303      	movs	r3, #3
 800845c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800845e:	230b      	movs	r3, #11
 8008460:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008466:	4619      	mov	r1, r3
 8008468:	480b      	ldr	r0, [pc, #44]	; (8008498 <HAL_ETH_MspInit+0x164>)
 800846a:	f7fc fb0f 	bl	8004a8c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800846e:	2200      	movs	r2, #0
 8008470:	2105      	movs	r1, #5
 8008472:	203d      	movs	r0, #61	; 0x3d
 8008474:	f7f9 fb34 	bl	8001ae0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008478:	203d      	movs	r0, #61	; 0x3d
 800847a:	f7f9 fb4b 	bl	8001b14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800847e:	bf00      	nop
 8008480:	3738      	adds	r7, #56	; 0x38
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	40028000 	.word	0x40028000
 800848c:	58024400 	.word	0x58024400
 8008490:	58020800 	.word	0x58020800
 8008494:	58020000 	.word	0x58020000
 8008498:	58020400 	.word	0x58020400

0800849c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80084a0:	4802      	ldr	r0, [pc, #8]	; (80084ac <ETH_PHY_IO_Init+0x10>)
 80084a2:	f7fa fb49 	bl	8002b38 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	24000418 	.word	0x24000418

080084b0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80084b0:	b480      	push	{r7}
 80084b2:	af00      	add	r7, sp, #0
  return 0;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	68f9      	ldr	r1, [r7, #12]
 80084d2:	4807      	ldr	r0, [pc, #28]	; (80084f0 <ETH_PHY_IO_ReadReg+0x30>)
 80084d4:	f7fa f89a 	bl	800260c <HAL_ETH_ReadPHYRegister>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d002      	beq.n	80084e4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80084de:	f04f 33ff 	mov.w	r3, #4294967295
 80084e2:	e000      	b.n	80084e6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	24000418 	.word	0x24000418

080084f4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68ba      	ldr	r2, [r7, #8]
 8008504:	68f9      	ldr	r1, [r7, #12]
 8008506:	4807      	ldr	r0, [pc, #28]	; (8008524 <ETH_PHY_IO_WriteReg+0x30>)
 8008508:	f7fa f8d4 	bl	80026b4 <HAL_ETH_WritePHYRegister>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d002      	beq.n	8008518 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8008512:	f04f 33ff 	mov.w	r3, #4294967295
 8008516:	e000      	b.n	800851a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3710      	adds	r7, #16
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	24000418 	.word	0x24000418

08008528 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800852c:	f7f9 f9f4 	bl	8001918 <HAL_GetTick>
 8008530:	4603      	mov	r3, r0
}
 8008532:	4618      	mov	r0, r3
 8008534:	bd80      	pop	{r7, pc}
	...

08008538 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b0a0      	sub	sp, #128	; 0x80
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8008540:	f107 0308 	add.w	r3, r7, #8
 8008544:	2264      	movs	r2, #100	; 0x64
 8008546:	2100      	movs	r1, #0
 8008548:	4618      	mov	r0, r3
 800854a:	f010 fa6c 	bl	8018a26 <memset>
  int32_t PHYLinkState = 0;
 800854e:	2300      	movs	r3, #0
 8008550:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8008552:	2300      	movs	r3, #0
 8008554:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008556:	2300      	movs	r3, #0
 8008558:	67bb      	str	r3, [r7, #120]	; 0x78
 800855a:	2300      	movs	r3, #0
 800855c:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008562:	483a      	ldr	r0, [pc, #232]	; (800864c <ethernet_link_thread+0x114>)
 8008564:	f7f9 f901 	bl	800176a <LAN8742_GetLinkState>
 8008568:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800856a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800856c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008570:	089b      	lsrs	r3, r3, #2
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	b2db      	uxtb	r3, r3
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00c      	beq.n	8008596 <ethernet_link_thread+0x5e>
 800857c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800857e:	2b01      	cmp	r3, #1
 8008580:	dc09      	bgt.n	8008596 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8008582:	4833      	ldr	r0, [pc, #204]	; (8008650 <ethernet_link_thread+0x118>)
 8008584:	f7f9 fcc2 	bl	8001f0c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8008588:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800858a:	f005 ff87 	bl	800e49c <netif_set_down>
    netif_set_link_down(netif);
 800858e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008590:	f005 ffea 	bl	800e568 <netif_set_link_down>
 8008594:	e055      	b.n	8008642 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8008596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008598:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800859c:	f003 0304 	and.w	r3, r3, #4
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d14e      	bne.n	8008642 <ethernet_link_thread+0x10a>
 80085a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	dd4b      	ble.n	8008642 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80085aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80085ac:	3b02      	subs	r3, #2
 80085ae:	2b03      	cmp	r3, #3
 80085b0:	d82a      	bhi.n	8008608 <ethernet_link_thread+0xd0>
 80085b2:	a201      	add	r2, pc, #4	; (adr r2, 80085b8 <ethernet_link_thread+0x80>)
 80085b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b8:	080085c9 	.word	0x080085c9
 80085bc:	080085db 	.word	0x080085db
 80085c0:	080085eb 	.word	0x080085eb
 80085c4:	080085fb 	.word	0x080085fb
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80085c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80085cc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80085ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80085d2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80085d4:	2301      	movs	r3, #1
 80085d6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80085d8:	e017      	b.n	800860a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80085da:	2300      	movs	r3, #0
 80085dc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80085de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80085e2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80085e4:	2301      	movs	r3, #1
 80085e6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80085e8:	e00f      	b.n	800860a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80085ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80085ee:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80085f0:	2300      	movs	r3, #0
 80085f2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80085f4:	2301      	movs	r3, #1
 80085f6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80085f8:	e007      	b.n	800860a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80085fa:	2300      	movs	r3, #0
 80085fc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80085fe:	2300      	movs	r3, #0
 8008600:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8008602:	2301      	movs	r3, #1
 8008604:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8008606:	e000      	b.n	800860a <ethernet_link_thread+0xd2>
    default:
      break;
 8008608:	bf00      	nop
    }

    if(linkchanged)
 800860a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800860c:	2b00      	cmp	r3, #0
 800860e:	d018      	beq.n	8008642 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8008610:	f107 0308 	add.w	r3, r7, #8
 8008614:	4619      	mov	r1, r3
 8008616:	480e      	ldr	r0, [pc, #56]	; (8008650 <ethernet_link_thread+0x118>)
 8008618:	f7fa f8a0 	bl	800275c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800861c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800861e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8008620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008622:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8008624:	f107 0308 	add.w	r3, r7, #8
 8008628:	4619      	mov	r1, r3
 800862a:	4809      	ldr	r0, [pc, #36]	; (8008650 <ethernet_link_thread+0x118>)
 800862c:	f7fa fa6a 	bl	8002b04 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8008630:	4807      	ldr	r0, [pc, #28]	; (8008650 <ethernet_link_thread+0x118>)
 8008632:	f7f9 fbdf 	bl	8001df4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8008636:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008638:	f005 fec4 	bl	800e3c4 <netif_set_up>
      netif_set_link_up(netif);
 800863c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800863e:	f005 ff5f 	bl	800e500 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8008642:	2064      	movs	r0, #100	; 0x64
 8008644:	f000 f9e0 	bl	8008a08 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8008648:	e78b      	b.n	8008562 <ethernet_link_thread+0x2a>
 800864a:	bf00      	nop
 800864c:	24000500 	.word	0x24000500
 8008650:	24000418 	.word	0x24000418

08008654 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af02      	add	r7, sp, #8
 800865a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800865c:	4812      	ldr	r0, [pc, #72]	; (80086a8 <HAL_ETH_RxAllocateCallback+0x54>)
 800865e:	f005 fc25 	bl	800deac <memp_malloc_pool>
 8008662:	60f8      	str	r0, [r7, #12]
  if (p)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d014      	beq.n	8008694 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f103 0220 	add.w	r2, r3, #32
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	4a0d      	ldr	r2, [pc, #52]	; (80086ac <HAL_ETH_RxAllocateCallback+0x58>)
 8008678:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8008682:	9201      	str	r2, [sp, #4]
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2241      	movs	r2, #65	; 0x41
 800868a:	2100      	movs	r1, #0
 800868c:	2000      	movs	r0, #0
 800868e:	f006 f98f 	bl	800e9b0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8008692:	e005      	b.n	80086a0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8008694:	4b06      	ldr	r3, [pc, #24]	; (80086b0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8008696:	2201      	movs	r2, #1
 8008698:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	601a      	str	r2, [r3, #0]
}
 80086a0:	bf00      	nop
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	0801c864 	.word	0x0801c864
 80086ac:	080082e5 	.word	0x080082e5
 80086b0:	2400040c 	.word	0x2400040c

080086b4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b08d      	sub	sp, #52	; 0x34
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
 80086c0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 80086ca:	2300      	movs	r3, #0
 80086cc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	3b20      	subs	r3, #32
 80086d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 80086d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d6:	2200      	movs	r2, #0
 80086d8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80086da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086dc:	2200      	movs	r2, #0
 80086de:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80086e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e2:	887a      	ldrh	r2, [r7, #2]
 80086e4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80086e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d103      	bne.n	80086f6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80086ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	e003      	b.n	80086fe <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086fc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80086fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008702:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8008704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800870a:	e009      	b.n	8008720 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800870c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870e:	891a      	ldrh	r2, [r3, #8]
 8008710:	887b      	ldrh	r3, [r7, #2]
 8008712:	4413      	add	r3, r2
 8008714:	b29a      	uxth	r2, r3
 8008716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008718:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800871a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1f2      	bne.n	800870c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8008726:	887b      	ldrh	r3, [r7, #2]
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	623a      	str	r2, [r7, #32]
 800872c:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	2b00      	cmp	r3, #0
 8008732:	dd1d      	ble.n	8008770 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	f003 021f 	and.w	r2, r3, #31
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	4413      	add	r3, r2
 800873e:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8008744:	f3bf 8f4f 	dsb	sy
}
 8008748:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800874a:	4a0d      	ldr	r2, [pc, #52]	; (8008780 <HAL_ETH_RxLinkCallback+0xcc>)
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	3320      	adds	r3, #32
 8008756:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	3b20      	subs	r3, #32
 800875c:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	2b00      	cmp	r3, #0
 8008762:	dcf2      	bgt.n	800874a <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 8008764:	f3bf 8f4f 	dsb	sy
}
 8008768:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800876a:	f3bf 8f6f 	isb	sy
}
 800876e:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8008770:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 8008772:	bf00      	nop
 8008774:	3734      	adds	r7, #52	; 0x34
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	e000ed00 	.word	0xe000ed00

08008784 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f006 fac9 	bl	800ed24 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8008792:	bf00      	nop
 8008794:	3708      	adds	r7, #8
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
	...

0800879c <__NVIC_SetPriority>:
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	4603      	mov	r3, r0
 80087a4:	6039      	str	r1, [r7, #0]
 80087a6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80087a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	db0a      	blt.n	80087c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	490c      	ldr	r1, [pc, #48]	; (80087e8 <__NVIC_SetPriority+0x4c>)
 80087b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80087ba:	0112      	lsls	r2, r2, #4
 80087bc:	b2d2      	uxtb	r2, r2
 80087be:	440b      	add	r3, r1
 80087c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80087c4:	e00a      	b.n	80087dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	4908      	ldr	r1, [pc, #32]	; (80087ec <__NVIC_SetPriority+0x50>)
 80087cc:	88fb      	ldrh	r3, [r7, #6]
 80087ce:	f003 030f 	and.w	r3, r3, #15
 80087d2:	3b04      	subs	r3, #4
 80087d4:	0112      	lsls	r2, r2, #4
 80087d6:	b2d2      	uxtb	r2, r2
 80087d8:	440b      	add	r3, r1
 80087da:	761a      	strb	r2, [r3, #24]
}
 80087dc:	bf00      	nop
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	e000e100 	.word	0xe000e100
 80087ec:	e000ed00 	.word	0xe000ed00

080087f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80087f0:	b580      	push	{r7, lr}
 80087f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80087f4:	4b05      	ldr	r3, [pc, #20]	; (800880c <SysTick_Handler+0x1c>)
 80087f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80087f8:	f002 fc96 	bl	800b128 <xTaskGetSchedulerState>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d001      	beq.n	8008806 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008802:	f003 fb79 	bl	800bef8 <xPortSysTickHandler>
  }
}
 8008806:	bf00      	nop
 8008808:	bd80      	pop	{r7, pc}
 800880a:	bf00      	nop
 800880c:	e000e010 	.word	0xe000e010

08008810 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008810:	b580      	push	{r7, lr}
 8008812:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008814:	2100      	movs	r1, #0
 8008816:	f06f 0004 	mvn.w	r0, #4
 800881a:	f7ff ffbf 	bl	800879c <__NVIC_SetPriority>
#endif
}
 800881e:	bf00      	nop
 8008820:	bd80      	pop	{r7, pc}
	...

08008824 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800882a:	f3ef 8305 	mrs	r3, IPSR
 800882e:	603b      	str	r3, [r7, #0]
  return(result);
 8008830:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008832:	2b00      	cmp	r3, #0
 8008834:	d003      	beq.n	800883e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008836:	f06f 0305 	mvn.w	r3, #5
 800883a:	607b      	str	r3, [r7, #4]
 800883c:	e00c      	b.n	8008858 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800883e:	4b0a      	ldr	r3, [pc, #40]	; (8008868 <osKernelInitialize+0x44>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d105      	bne.n	8008852 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008846:	4b08      	ldr	r3, [pc, #32]	; (8008868 <osKernelInitialize+0x44>)
 8008848:	2201      	movs	r2, #1
 800884a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800884c:	2300      	movs	r3, #0
 800884e:	607b      	str	r3, [r7, #4]
 8008850:	e002      	b.n	8008858 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008852:	f04f 33ff 	mov.w	r3, #4294967295
 8008856:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008858:	687b      	ldr	r3, [r7, #4]
}
 800885a:	4618      	mov	r0, r3
 800885c:	370c      	adds	r7, #12
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	24000520 	.word	0x24000520

0800886c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008872:	f3ef 8305 	mrs	r3, IPSR
 8008876:	603b      	str	r3, [r7, #0]
  return(result);
 8008878:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <osKernelStart+0x1a>
    stat = osErrorISR;
 800887e:	f06f 0305 	mvn.w	r3, #5
 8008882:	607b      	str	r3, [r7, #4]
 8008884:	e010      	b.n	80088a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008886:	4b0b      	ldr	r3, [pc, #44]	; (80088b4 <osKernelStart+0x48>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d109      	bne.n	80088a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800888e:	f7ff ffbf 	bl	8008810 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008892:	4b08      	ldr	r3, [pc, #32]	; (80088b4 <osKernelStart+0x48>)
 8008894:	2202      	movs	r2, #2
 8008896:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008898:	f001 ffc8 	bl	800a82c <vTaskStartScheduler>
      stat = osOK;
 800889c:	2300      	movs	r3, #0
 800889e:	607b      	str	r3, [r7, #4]
 80088a0:	e002      	b.n	80088a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80088a2:	f04f 33ff 	mov.w	r3, #4294967295
 80088a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80088a8:	687b      	ldr	r3, [r7, #4]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3708      	adds	r7, #8
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	24000520 	.word	0x24000520

080088b8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088be:	f3ef 8305 	mrs	r3, IPSR
 80088c2:	603b      	str	r3, [r7, #0]
  return(result);
 80088c4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d003      	beq.n	80088d2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80088ca:	f002 f8db 	bl	800aa84 <xTaskGetTickCountFromISR>
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	e002      	b.n	80088d8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80088d2:	f002 f8c7 	bl	800aa64 <xTaskGetTickCount>
 80088d6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80088d8:	687b      	ldr	r3, [r7, #4]
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b08e      	sub	sp, #56	; 0x38
 80088e6:	af04      	add	r7, sp, #16
 80088e8:	60f8      	str	r0, [r7, #12]
 80088ea:	60b9      	str	r1, [r7, #8]
 80088ec:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80088ee:	2300      	movs	r3, #0
 80088f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088f2:	f3ef 8305 	mrs	r3, IPSR
 80088f6:	617b      	str	r3, [r7, #20]
  return(result);
 80088f8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d17f      	bne.n	80089fe <osThreadNew+0x11c>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d07c      	beq.n	80089fe <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8008904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008908:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800890a:	2318      	movs	r3, #24
 800890c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800890e:	2300      	movs	r3, #0
 8008910:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008912:	f04f 33ff 	mov.w	r3, #4294967295
 8008916:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d045      	beq.n	80089aa <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d002      	beq.n	800892c <osThreadNew+0x4a>
        name = attr->name;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d002      	beq.n	800893a <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d008      	beq.n	8008952 <osThreadNew+0x70>
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	2b38      	cmp	r3, #56	; 0x38
 8008944:	d805      	bhi.n	8008952 <osThreadNew+0x70>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	f003 0301 	and.w	r3, r3, #1
 800894e:	2b00      	cmp	r3, #0
 8008950:	d001      	beq.n	8008956 <osThreadNew+0x74>
        return (NULL);
 8008952:	2300      	movs	r3, #0
 8008954:	e054      	b.n	8008a00 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	695b      	ldr	r3, [r3, #20]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d003      	beq.n	8008966 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	089b      	lsrs	r3, r3, #2
 8008964:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00e      	beq.n	800898c <osThreadNew+0xaa>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	2bbb      	cmp	r3, #187	; 0xbb
 8008974:	d90a      	bls.n	800898c <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800897a:	2b00      	cmp	r3, #0
 800897c:	d006      	beq.n	800898c <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	695b      	ldr	r3, [r3, #20]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d002      	beq.n	800898c <osThreadNew+0xaa>
        mem = 1;
 8008986:	2301      	movs	r3, #1
 8008988:	61bb      	str	r3, [r7, #24]
 800898a:	e010      	b.n	80089ae <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10c      	bne.n	80089ae <osThreadNew+0xcc>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d108      	bne.n	80089ae <osThreadNew+0xcc>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d104      	bne.n	80089ae <osThreadNew+0xcc>
          mem = 0;
 80089a4:	2300      	movs	r3, #0
 80089a6:	61bb      	str	r3, [r7, #24]
 80089a8:	e001      	b.n	80089ae <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80089aa:	2300      	movs	r3, #0
 80089ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d110      	bne.n	80089d6 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80089bc:	9202      	str	r2, [sp, #8]
 80089be:	9301      	str	r3, [sp, #4]
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	9300      	str	r3, [sp, #0]
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	6a3a      	ldr	r2, [r7, #32]
 80089c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f001 fd42 	bl	800a454 <xTaskCreateStatic>
 80089d0:	4603      	mov	r3, r0
 80089d2:	613b      	str	r3, [r7, #16]
 80089d4:	e013      	b.n	80089fe <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d110      	bne.n	80089fe <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80089dc:	6a3b      	ldr	r3, [r7, #32]
 80089de:	b29a      	uxth	r2, r3
 80089e0:	f107 0310 	add.w	r3, r7, #16
 80089e4:	9301      	str	r3, [sp, #4]
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f001 fd8d 	bl	800a50e <xTaskCreate>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d001      	beq.n	80089fe <osThreadNew+0x11c>
            hTask = NULL;
 80089fa:	2300      	movs	r3, #0
 80089fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80089fe:	693b      	ldr	r3, [r7, #16]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3728      	adds	r7, #40	; 0x28
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a10:	f3ef 8305 	mrs	r3, IPSR
 8008a14:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a16:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d003      	beq.n	8008a24 <osDelay+0x1c>
    stat = osErrorISR;
 8008a1c:	f06f 0305 	mvn.w	r3, #5
 8008a20:	60fb      	str	r3, [r7, #12]
 8008a22:	e007      	b.n	8008a34 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d002      	beq.n	8008a34 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f001 fec8 	bl	800a7c4 <vTaskDelay>
    }
  }

  return (stat);
 8008a34:	68fb      	ldr	r3, [r7, #12]
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	3710      	adds	r7, #16
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b088      	sub	sp, #32
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008a46:	2300      	movs	r3, #0
 8008a48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a4a:	f3ef 8305 	mrs	r3, IPSR
 8008a4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a50:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d174      	bne.n	8008b40 <osMutexNew+0x102>
    if (attr != NULL) {
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d003      	beq.n	8008a64 <osMutexNew+0x26>
      type = attr->attr_bits;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	61bb      	str	r3, [r7, #24]
 8008a62:	e001      	b.n	8008a68 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008a64:	2300      	movs	r3, #0
 8008a66:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	f003 0301 	and.w	r3, r3, #1
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d002      	beq.n	8008a78 <osMutexNew+0x3a>
      rmtx = 1U;
 8008a72:	2301      	movs	r3, #1
 8008a74:	617b      	str	r3, [r7, #20]
 8008a76:	e001      	b.n	8008a7c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	f003 0308 	and.w	r3, r3, #8
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d15c      	bne.n	8008b40 <osMutexNew+0x102>
      mem = -1;
 8008a86:	f04f 33ff 	mov.w	r3, #4294967295
 8008a8a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d015      	beq.n	8008abe <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d006      	beq.n	8008aa8 <osMutexNew+0x6a>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	2b4f      	cmp	r3, #79	; 0x4f
 8008aa0:	d902      	bls.n	8008aa8 <osMutexNew+0x6a>
          mem = 1;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	613b      	str	r3, [r7, #16]
 8008aa6:	e00c      	b.n	8008ac2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d108      	bne.n	8008ac2 <osMutexNew+0x84>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d104      	bne.n	8008ac2 <osMutexNew+0x84>
            mem = 0;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	613b      	str	r3, [r7, #16]
 8008abc:	e001      	b.n	8008ac2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d112      	bne.n	8008aee <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d007      	beq.n	8008ade <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	2004      	movs	r0, #4
 8008ad6:	f000 fd68 	bl	80095aa <xQueueCreateMutexStatic>
 8008ada:	61f8      	str	r0, [r7, #28]
 8008adc:	e016      	b.n	8008b0c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	2001      	movs	r0, #1
 8008ae6:	f000 fd60 	bl	80095aa <xQueueCreateMutexStatic>
 8008aea:	61f8      	str	r0, [r7, #28]
 8008aec:	e00e      	b.n	8008b0c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10b      	bne.n	8008b0c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d004      	beq.n	8008b04 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008afa:	2004      	movs	r0, #4
 8008afc:	f000 fd3d 	bl	800957a <xQueueCreateMutex>
 8008b00:	61f8      	str	r0, [r7, #28]
 8008b02:	e003      	b.n	8008b0c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008b04:	2001      	movs	r0, #1
 8008b06:	f000 fd38 	bl	800957a <xQueueCreateMutex>
 8008b0a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d00c      	beq.n	8008b2c <osMutexNew+0xee>
        if (attr != NULL) {
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d003      	beq.n	8008b20 <osMutexNew+0xe2>
          name = attr->name;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	60fb      	str	r3, [r7, #12]
 8008b1e:	e001      	b.n	8008b24 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008b20:	2300      	movs	r3, #0
 8008b22:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008b24:	68f9      	ldr	r1, [r7, #12]
 8008b26:	69f8      	ldr	r0, [r7, #28]
 8008b28:	f001 fc0c 	bl	800a344 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d006      	beq.n	8008b40 <osMutexNew+0x102>
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d003      	beq.n	8008b40 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	f043 0301 	orr.w	r3, r3, #1
 8008b3e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008b40:	69fb      	ldr	r3, [r7, #28]
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3720      	adds	r7, #32
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b086      	sub	sp, #24
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f023 0301 	bic.w	r3, r3, #1
 8008b5a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f003 0301 	and.w	r3, r3, #1
 8008b62:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b68:	f3ef 8305 	mrs	r3, IPSR
 8008b6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b6e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d003      	beq.n	8008b7c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008b74:	f06f 0305 	mvn.w	r3, #5
 8008b78:	617b      	str	r3, [r7, #20]
 8008b7a:	e02c      	b.n	8008bd6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d103      	bne.n	8008b8a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008b82:	f06f 0303 	mvn.w	r3, #3
 8008b86:	617b      	str	r3, [r7, #20]
 8008b88:	e025      	b.n	8008bd6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d011      	beq.n	8008bb4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	6938      	ldr	r0, [r7, #16]
 8008b94:	f000 fd58 	bl	8009648 <xQueueTakeMutexRecursive>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d01b      	beq.n	8008bd6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d003      	beq.n	8008bac <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008ba4:	f06f 0301 	mvn.w	r3, #1
 8008ba8:	617b      	str	r3, [r7, #20]
 8008baa:	e014      	b.n	8008bd6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008bac:	f06f 0302 	mvn.w	r3, #2
 8008bb0:	617b      	str	r3, [r7, #20]
 8008bb2:	e010      	b.n	8008bd6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	6938      	ldr	r0, [r7, #16]
 8008bb8:	f001 f8ec 	bl	8009d94 <xQueueSemaphoreTake>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d009      	beq.n	8008bd6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d003      	beq.n	8008bd0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008bc8:	f06f 0301 	mvn.w	r3, #1
 8008bcc:	617b      	str	r3, [r7, #20]
 8008bce:	e002      	b.n	8008bd6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008bd0:	f06f 0302 	mvn.w	r3, #2
 8008bd4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008bd6:	697b      	ldr	r3, [r7, #20]
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3718      	adds	r7, #24
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f023 0301 	bic.w	r3, r3, #1
 8008bee:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f003 0301 	and.w	r3, r3, #1
 8008bf6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bfc:	f3ef 8305 	mrs	r3, IPSR
 8008c00:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c02:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d003      	beq.n	8008c10 <osMutexRelease+0x30>
    stat = osErrorISR;
 8008c08:	f06f 0305 	mvn.w	r3, #5
 8008c0c:	617b      	str	r3, [r7, #20]
 8008c0e:	e01f      	b.n	8008c50 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d103      	bne.n	8008c1e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008c16:	f06f 0303 	mvn.w	r3, #3
 8008c1a:	617b      	str	r3, [r7, #20]
 8008c1c:	e018      	b.n	8008c50 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d009      	beq.n	8008c38 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008c24:	6938      	ldr	r0, [r7, #16]
 8008c26:	f000 fcdb 	bl	80095e0 <xQueueGiveMutexRecursive>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d00f      	beq.n	8008c50 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008c30:	f06f 0302 	mvn.w	r3, #2
 8008c34:	617b      	str	r3, [r7, #20]
 8008c36:	e00b      	b.n	8008c50 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008c38:	2300      	movs	r3, #0
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	6938      	ldr	r0, [r7, #16]
 8008c40:	f000 fda2 	bl	8009788 <xQueueGenericSend>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d002      	beq.n	8008c50 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008c4a:	f06f 0302 	mvn.w	r3, #2
 8008c4e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008c50:	697b      	ldr	r3, [r7, #20]
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3718      	adds	r7, #24
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b08a      	sub	sp, #40	; 0x28
 8008c5e:	af02      	add	r7, sp, #8
 8008c60:	60f8      	str	r0, [r7, #12]
 8008c62:	60b9      	str	r1, [r7, #8]
 8008c64:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008c66:	2300      	movs	r3, #0
 8008c68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c6a:	f3ef 8305 	mrs	r3, IPSR
 8008c6e:	613b      	str	r3, [r7, #16]
  return(result);
 8008c70:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d175      	bne.n	8008d62 <osSemaphoreNew+0x108>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d072      	beq.n	8008d62 <osSemaphoreNew+0x108>
 8008c7c:	68ba      	ldr	r2, [r7, #8]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d86e      	bhi.n	8008d62 <osSemaphoreNew+0x108>
    mem = -1;
 8008c84:	f04f 33ff 	mov.w	r3, #4294967295
 8008c88:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d015      	beq.n	8008cbc <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d006      	beq.n	8008ca6 <osSemaphoreNew+0x4c>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	2b4f      	cmp	r3, #79	; 0x4f
 8008c9e:	d902      	bls.n	8008ca6 <osSemaphoreNew+0x4c>
        mem = 1;
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	61bb      	str	r3, [r7, #24]
 8008ca4:	e00c      	b.n	8008cc0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d108      	bne.n	8008cc0 <osSemaphoreNew+0x66>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d104      	bne.n	8008cc0 <osSemaphoreNew+0x66>
          mem = 0;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	61bb      	str	r3, [r7, #24]
 8008cba:	e001      	b.n	8008cc0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc6:	d04c      	beq.n	8008d62 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d128      	bne.n	8008d20 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d10a      	bne.n	8008cea <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	2203      	movs	r2, #3
 8008cda:	9200      	str	r2, [sp, #0]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	2100      	movs	r1, #0
 8008ce0:	2001      	movs	r0, #1
 8008ce2:	f000 fb5b 	bl	800939c <xQueueGenericCreateStatic>
 8008ce6:	61f8      	str	r0, [r7, #28]
 8008ce8:	e005      	b.n	8008cf6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008cea:	2203      	movs	r2, #3
 8008cec:	2100      	movs	r1, #0
 8008cee:	2001      	movs	r0, #1
 8008cf0:	f000 fbcc 	bl	800948c <xQueueGenericCreate>
 8008cf4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d022      	beq.n	8008d42 <osSemaphoreNew+0xe8>
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d01f      	beq.n	8008d42 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008d02:	2300      	movs	r3, #0
 8008d04:	2200      	movs	r2, #0
 8008d06:	2100      	movs	r1, #0
 8008d08:	69f8      	ldr	r0, [r7, #28]
 8008d0a:	f000 fd3d 	bl	8009788 <xQueueGenericSend>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d016      	beq.n	8008d42 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008d14:	69f8      	ldr	r0, [r7, #28]
 8008d16:	f001 f9c9 	bl	800a0ac <vQueueDelete>
            hSemaphore = NULL;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	61fb      	str	r3, [r7, #28]
 8008d1e:	e010      	b.n	8008d42 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d108      	bne.n	8008d38 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	68b9      	ldr	r1, [r7, #8]
 8008d2e:	68f8      	ldr	r0, [r7, #12]
 8008d30:	f000 fcc0 	bl	80096b4 <xQueueCreateCountingSemaphoreStatic>
 8008d34:	61f8      	str	r0, [r7, #28]
 8008d36:	e004      	b.n	8008d42 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008d38:	68b9      	ldr	r1, [r7, #8]
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	f000 fcf1 	bl	8009722 <xQueueCreateCountingSemaphore>
 8008d40:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00c      	beq.n	8008d62 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d003      	beq.n	8008d56 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	617b      	str	r3, [r7, #20]
 8008d54:	e001      	b.n	8008d5a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008d56:	2300      	movs	r3, #0
 8008d58:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008d5a:	6979      	ldr	r1, [r7, #20]
 8008d5c:	69f8      	ldr	r0, [r7, #28]
 8008d5e:	f001 faf1 	bl	800a344 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008d62:	69fb      	ldr	r3, [r7, #28]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3720      	adds	r7, #32
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b086      	sub	sp, #24
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d103      	bne.n	8008d8c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008d84:	f06f 0303 	mvn.w	r3, #3
 8008d88:	617b      	str	r3, [r7, #20]
 8008d8a:	e039      	b.n	8008e00 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d8c:	f3ef 8305 	mrs	r3, IPSR
 8008d90:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d92:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d022      	beq.n	8008dde <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d003      	beq.n	8008da6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008d9e:	f06f 0303 	mvn.w	r3, #3
 8008da2:	617b      	str	r3, [r7, #20]
 8008da4:	e02c      	b.n	8008e00 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008da6:	2300      	movs	r3, #0
 8008da8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008daa:	f107 0308 	add.w	r3, r7, #8
 8008dae:	461a      	mov	r2, r3
 8008db0:	2100      	movs	r1, #0
 8008db2:	6938      	ldr	r0, [r7, #16]
 8008db4:	f001 f8fa 	bl	8009fac <xQueueReceiveFromISR>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d003      	beq.n	8008dc6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008dbe:	f06f 0302 	mvn.w	r3, #2
 8008dc2:	617b      	str	r3, [r7, #20]
 8008dc4:	e01c      	b.n	8008e00 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d019      	beq.n	8008e00 <osSemaphoreAcquire+0x94>
 8008dcc:	4b0f      	ldr	r3, [pc, #60]	; (8008e0c <osSemaphoreAcquire+0xa0>)
 8008dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dd2:	601a      	str	r2, [r3, #0]
 8008dd4:	f3bf 8f4f 	dsb	sy
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	e010      	b.n	8008e00 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008dde:	6839      	ldr	r1, [r7, #0]
 8008de0:	6938      	ldr	r0, [r7, #16]
 8008de2:	f000 ffd7 	bl	8009d94 <xQueueSemaphoreTake>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d009      	beq.n	8008e00 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d003      	beq.n	8008dfa <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008df2:	f06f 0301 	mvn.w	r3, #1
 8008df6:	617b      	str	r3, [r7, #20]
 8008df8:	e002      	b.n	8008e00 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008dfa:	f06f 0302 	mvn.w	r3, #2
 8008dfe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008e00:	697b      	ldr	r3, [r7, #20]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3718      	adds	r7, #24
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	e000ed04 	.word	0xe000ed04

08008e10 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b086      	sub	sp, #24
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d103      	bne.n	8008e2e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008e26:	f06f 0303 	mvn.w	r3, #3
 8008e2a:	617b      	str	r3, [r7, #20]
 8008e2c:	e02c      	b.n	8008e88 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e2e:	f3ef 8305 	mrs	r3, IPSR
 8008e32:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e34:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d01a      	beq.n	8008e70 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008e3e:	f107 0308 	add.w	r3, r7, #8
 8008e42:	4619      	mov	r1, r3
 8008e44:	6938      	ldr	r0, [r7, #16]
 8008e46:	f000 fe38 	bl	8009aba <xQueueGiveFromISR>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d003      	beq.n	8008e58 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008e50:	f06f 0302 	mvn.w	r3, #2
 8008e54:	617b      	str	r3, [r7, #20]
 8008e56:	e017      	b.n	8008e88 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d014      	beq.n	8008e88 <osSemaphoreRelease+0x78>
 8008e5e:	4b0d      	ldr	r3, [pc, #52]	; (8008e94 <osSemaphoreRelease+0x84>)
 8008e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e64:	601a      	str	r2, [r3, #0]
 8008e66:	f3bf 8f4f 	dsb	sy
 8008e6a:	f3bf 8f6f 	isb	sy
 8008e6e:	e00b      	b.n	8008e88 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008e70:	2300      	movs	r3, #0
 8008e72:	2200      	movs	r2, #0
 8008e74:	2100      	movs	r1, #0
 8008e76:	6938      	ldr	r0, [r7, #16]
 8008e78:	f000 fc86 	bl	8009788 <xQueueGenericSend>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d002      	beq.n	8008e88 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008e82:	f06f 0302 	mvn.w	r3, #2
 8008e86:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008e88:	697b      	ldr	r3, [r7, #20]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3718      	adds	r7, #24
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	e000ed04 	.word	0xe000ed04

08008e98 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b08a      	sub	sp, #40	; 0x28
 8008e9c:	af02      	add	r7, sp, #8
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ea8:	f3ef 8305 	mrs	r3, IPSR
 8008eac:	613b      	str	r3, [r7, #16]
  return(result);
 8008eae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d15f      	bne.n	8008f74 <osMessageQueueNew+0xdc>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d05c      	beq.n	8008f74 <osMessageQueueNew+0xdc>
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d059      	beq.n	8008f74 <osMessageQueueNew+0xdc>
    mem = -1;
 8008ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ec4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d029      	beq.n	8008f20 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d012      	beq.n	8008efa <osMessageQueueNew+0x62>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	2b4f      	cmp	r3, #79	; 0x4f
 8008eda:	d90e      	bls.n	8008efa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00a      	beq.n	8008efa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	695a      	ldr	r2, [r3, #20]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	68b9      	ldr	r1, [r7, #8]
 8008eec:	fb01 f303 	mul.w	r3, r1, r3
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d302      	bcc.n	8008efa <osMessageQueueNew+0x62>
        mem = 1;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	61bb      	str	r3, [r7, #24]
 8008ef8:	e014      	b.n	8008f24 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d110      	bne.n	8008f24 <osMessageQueueNew+0x8c>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d10c      	bne.n	8008f24 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d108      	bne.n	8008f24 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d104      	bne.n	8008f24 <osMessageQueueNew+0x8c>
          mem = 0;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	61bb      	str	r3, [r7, #24]
 8008f1e:	e001      	b.n	8008f24 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8008f20:	2300      	movs	r3, #0
 8008f22:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d10b      	bne.n	8008f42 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	691a      	ldr	r2, [r3, #16]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	2100      	movs	r1, #0
 8008f34:	9100      	str	r1, [sp, #0]
 8008f36:	68b9      	ldr	r1, [r7, #8]
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f000 fa2f 	bl	800939c <xQueueGenericCreateStatic>
 8008f3e:	61f8      	str	r0, [r7, #28]
 8008f40:	e008      	b.n	8008f54 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d105      	bne.n	8008f54 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008f48:	2200      	movs	r2, #0
 8008f4a:	68b9      	ldr	r1, [r7, #8]
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f000 fa9d 	bl	800948c <xQueueGenericCreate>
 8008f52:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00c      	beq.n	8008f74 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d003      	beq.n	8008f68 <osMessageQueueNew+0xd0>
        name = attr->name;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	617b      	str	r3, [r7, #20]
 8008f66:	e001      	b.n	8008f6c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008f6c:	6979      	ldr	r1, [r7, #20]
 8008f6e:	69f8      	ldr	r0, [r7, #28]
 8008f70:	f001 f9e8 	bl	800a344 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008f74:	69fb      	ldr	r3, [r7, #28]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3720      	adds	r7, #32
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
	...

08008f80 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b088      	sub	sp, #32
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	603b      	str	r3, [r7, #0]
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f98:	f3ef 8305 	mrs	r3, IPSR
 8008f9c:	617b      	str	r3, [r7, #20]
  return(result);
 8008f9e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d028      	beq.n	8008ff6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d005      	beq.n	8008fb6 <osMessageQueuePut+0x36>
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d002      	beq.n	8008fb6 <osMessageQueuePut+0x36>
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d003      	beq.n	8008fbe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008fb6:	f06f 0303 	mvn.w	r3, #3
 8008fba:	61fb      	str	r3, [r7, #28]
 8008fbc:	e038      	b.n	8009030 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008fc2:	f107 0210 	add.w	r2, r7, #16
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	68b9      	ldr	r1, [r7, #8]
 8008fca:	69b8      	ldr	r0, [r7, #24]
 8008fcc:	f000 fcda 	bl	8009984 <xQueueGenericSendFromISR>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d003      	beq.n	8008fde <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008fd6:	f06f 0302 	mvn.w	r3, #2
 8008fda:	61fb      	str	r3, [r7, #28]
 8008fdc:	e028      	b.n	8009030 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d025      	beq.n	8009030 <osMessageQueuePut+0xb0>
 8008fe4:	4b15      	ldr	r3, [pc, #84]	; (800903c <osMessageQueuePut+0xbc>)
 8008fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fea:	601a      	str	r2, [r3, #0]
 8008fec:	f3bf 8f4f 	dsb	sy
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	e01c      	b.n	8009030 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d002      	beq.n	8009002 <osMessageQueuePut+0x82>
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d103      	bne.n	800900a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009002:	f06f 0303 	mvn.w	r3, #3
 8009006:	61fb      	str	r3, [r7, #28]
 8009008:	e012      	b.n	8009030 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800900a:	2300      	movs	r3, #0
 800900c:	683a      	ldr	r2, [r7, #0]
 800900e:	68b9      	ldr	r1, [r7, #8]
 8009010:	69b8      	ldr	r0, [r7, #24]
 8009012:	f000 fbb9 	bl	8009788 <xQueueGenericSend>
 8009016:	4603      	mov	r3, r0
 8009018:	2b01      	cmp	r3, #1
 800901a:	d009      	beq.n	8009030 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d003      	beq.n	800902a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009022:	f06f 0301 	mvn.w	r3, #1
 8009026:	61fb      	str	r3, [r7, #28]
 8009028:	e002      	b.n	8009030 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800902a:	f06f 0302 	mvn.w	r3, #2
 800902e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009030:	69fb      	ldr	r3, [r7, #28]
}
 8009032:	4618      	mov	r0, r3
 8009034:	3720      	adds	r7, #32
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	bf00      	nop
 800903c:	e000ed04 	.word	0xe000ed04

08009040 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009040:	b580      	push	{r7, lr}
 8009042:	b088      	sub	sp, #32
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]
 800904c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009052:	2300      	movs	r3, #0
 8009054:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009056:	f3ef 8305 	mrs	r3, IPSR
 800905a:	617b      	str	r3, [r7, #20]
  return(result);
 800905c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800905e:	2b00      	cmp	r3, #0
 8009060:	d028      	beq.n	80090b4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d005      	beq.n	8009074 <osMessageQueueGet+0x34>
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d002      	beq.n	8009074 <osMessageQueueGet+0x34>
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d003      	beq.n	800907c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8009074:	f06f 0303 	mvn.w	r3, #3
 8009078:	61fb      	str	r3, [r7, #28]
 800907a:	e037      	b.n	80090ec <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800907c:	2300      	movs	r3, #0
 800907e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009080:	f107 0310 	add.w	r3, r7, #16
 8009084:	461a      	mov	r2, r3
 8009086:	68b9      	ldr	r1, [r7, #8]
 8009088:	69b8      	ldr	r0, [r7, #24]
 800908a:	f000 ff8f 	bl	8009fac <xQueueReceiveFromISR>
 800908e:	4603      	mov	r3, r0
 8009090:	2b01      	cmp	r3, #1
 8009092:	d003      	beq.n	800909c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8009094:	f06f 0302 	mvn.w	r3, #2
 8009098:	61fb      	str	r3, [r7, #28]
 800909a:	e027      	b.n	80090ec <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d024      	beq.n	80090ec <osMessageQueueGet+0xac>
 80090a2:	4b15      	ldr	r3, [pc, #84]	; (80090f8 <osMessageQueueGet+0xb8>)
 80090a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	f3bf 8f6f 	isb	sy
 80090b2:	e01b      	b.n	80090ec <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d002      	beq.n	80090c0 <osMessageQueueGet+0x80>
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d103      	bne.n	80090c8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80090c0:	f06f 0303 	mvn.w	r3, #3
 80090c4:	61fb      	str	r3, [r7, #28]
 80090c6:	e011      	b.n	80090ec <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80090c8:	683a      	ldr	r2, [r7, #0]
 80090ca:	68b9      	ldr	r1, [r7, #8]
 80090cc:	69b8      	ldr	r0, [r7, #24]
 80090ce:	f000 fd81 	bl	8009bd4 <xQueueReceive>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d009      	beq.n	80090ec <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d003      	beq.n	80090e6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80090de:	f06f 0301 	mvn.w	r3, #1
 80090e2:	61fb      	str	r3, [r7, #28]
 80090e4:	e002      	b.n	80090ec <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80090e6:	f06f 0302 	mvn.w	r3, #2
 80090ea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80090ec:	69fb      	ldr	r3, [r7, #28]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3720      	adds	r7, #32
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	e000ed04 	.word	0xe000ed04

080090fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	4a07      	ldr	r2, [pc, #28]	; (8009128 <vApplicationGetIdleTaskMemory+0x2c>)
 800910c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	4a06      	ldr	r2, [pc, #24]	; (800912c <vApplicationGetIdleTaskMemory+0x30>)
 8009112:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f44f 7280 	mov.w	r2, #256	; 0x100
 800911a:	601a      	str	r2, [r3, #0]
}
 800911c:	bf00      	nop
 800911e:	3714      	adds	r7, #20
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	24000524 	.word	0x24000524
 800912c:	240005e0 	.word	0x240005e0

08009130 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	4a07      	ldr	r2, [pc, #28]	; (800915c <vApplicationGetTimerTaskMemory+0x2c>)
 8009140:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	4a06      	ldr	r2, [pc, #24]	; (8009160 <vApplicationGetTimerTaskMemory+0x30>)
 8009146:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800914e:	601a      	str	r2, [r3, #0]
}
 8009150:	bf00      	nop
 8009152:	3714      	adds	r7, #20
 8009154:	46bd      	mov	sp, r7
 8009156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915a:	4770      	bx	lr
 800915c:	240009e0 	.word	0x240009e0
 8009160:	24000a9c 	.word	0x24000a9c

08009164 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f103 0208 	add.w	r2, r3, #8
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f04f 32ff 	mov.w	r2, #4294967295
 800917c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f103 0208 	add.w	r2, r3, #8
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f103 0208 	add.w	r2, r3, #8
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80091b2:	bf00      	nop
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80091be:	b480      	push	{r7}
 80091c0:	b085      	sub	sp, #20
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
 80091c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	689a      	ldr	r2, [r3, #8]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	683a      	ldr	r2, [r7, #0]
 80091e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	683a      	ldr	r2, [r7, #0]
 80091e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	1c5a      	adds	r2, r3, #1
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	601a      	str	r2, [r3, #0]
}
 80091fa:	bf00      	nop
 80091fc:	3714      	adds	r7, #20
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr

08009206 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009206:	b480      	push	{r7}
 8009208:	b085      	sub	sp, #20
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
 800920e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800921c:	d103      	bne.n	8009226 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	60fb      	str	r3, [r7, #12]
 8009224:	e00c      	b.n	8009240 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	3308      	adds	r3, #8
 800922a:	60fb      	str	r3, [r7, #12]
 800922c:	e002      	b.n	8009234 <vListInsert+0x2e>
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	60fb      	str	r3, [r7, #12]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	68ba      	ldr	r2, [r7, #8]
 800923c:	429a      	cmp	r2, r3
 800923e:	d2f6      	bcs.n	800922e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	685a      	ldr	r2, [r3, #4]
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	683a      	ldr	r2, [r7, #0]
 800924e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	683a      	ldr	r2, [r7, #0]
 800925a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	1c5a      	adds	r2, r3, #1
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	601a      	str	r2, [r3, #0]
}
 800926c:	bf00      	nop
 800926e:	3714      	adds	r7, #20
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	687a      	ldr	r2, [r7, #4]
 800928c:	6892      	ldr	r2, [r2, #8]
 800928e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	6852      	ldr	r2, [r2, #4]
 8009298:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	687a      	ldr	r2, [r7, #4]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d103      	bne.n	80092ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	689a      	ldr	r2, [r3, #8]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	1e5a      	subs	r2, r3, #1
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3714      	adds	r7, #20
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
 80092d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d10a      	bne.n	80092f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80092e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e4:	f383 8811 	msr	BASEPRI, r3
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80092f2:	bf00      	nop
 80092f4:	e7fe      	b.n	80092f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80092f6:	f002 fd6d 	bl	800bdd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009302:	68f9      	ldr	r1, [r7, #12]
 8009304:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009306:	fb01 f303 	mul.w	r3, r1, r3
 800930a:	441a      	add	r2, r3
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009326:	3b01      	subs	r3, #1
 8009328:	68f9      	ldr	r1, [r7, #12]
 800932a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800932c:	fb01 f303 	mul.w	r3, r1, r3
 8009330:	441a      	add	r2, r3
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	22ff      	movs	r2, #255	; 0xff
 800933a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	22ff      	movs	r2, #255	; 0xff
 8009342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d114      	bne.n	8009376 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d01a      	beq.n	800938a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	3310      	adds	r3, #16
 8009358:	4618      	mov	r0, r3
 800935a:	f001 fd13 	bl	800ad84 <xTaskRemoveFromEventList>
 800935e:	4603      	mov	r3, r0
 8009360:	2b00      	cmp	r3, #0
 8009362:	d012      	beq.n	800938a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009364:	4b0c      	ldr	r3, [pc, #48]	; (8009398 <xQueueGenericReset+0xcc>)
 8009366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800936a:	601a      	str	r2, [r3, #0]
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	f3bf 8f6f 	isb	sy
 8009374:	e009      	b.n	800938a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	3310      	adds	r3, #16
 800937a:	4618      	mov	r0, r3
 800937c:	f7ff fef2 	bl	8009164 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	3324      	adds	r3, #36	; 0x24
 8009384:	4618      	mov	r0, r3
 8009386:	f7ff feed 	bl	8009164 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800938a:	f002 fd53 	bl	800be34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800938e:	2301      	movs	r3, #1
}
 8009390:	4618      	mov	r0, r3
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	e000ed04 	.word	0xe000ed04

0800939c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800939c:	b580      	push	{r7, lr}
 800939e:	b08e      	sub	sp, #56	; 0x38
 80093a0:	af02      	add	r7, sp, #8
 80093a2:	60f8      	str	r0, [r7, #12]
 80093a4:	60b9      	str	r1, [r7, #8]
 80093a6:	607a      	str	r2, [r7, #4]
 80093a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d10a      	bne.n	80093c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80093b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b4:	f383 8811 	msr	BASEPRI, r3
 80093b8:	f3bf 8f6f 	isb	sy
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80093c2:	bf00      	nop
 80093c4:	e7fe      	b.n	80093c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d10a      	bne.n	80093e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80093cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d0:	f383 8811 	msr	BASEPRI, r3
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80093de:	bf00      	nop
 80093e0:	e7fe      	b.n	80093e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d002      	beq.n	80093ee <xQueueGenericCreateStatic+0x52>
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <xQueueGenericCreateStatic+0x56>
 80093ee:	2301      	movs	r3, #1
 80093f0:	e000      	b.n	80093f4 <xQueueGenericCreateStatic+0x58>
 80093f2:	2300      	movs	r3, #0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10a      	bne.n	800940e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80093f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fc:	f383 8811 	msr	BASEPRI, r3
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	623b      	str	r3, [r7, #32]
}
 800940a:	bf00      	nop
 800940c:	e7fe      	b.n	800940c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d102      	bne.n	800941a <xQueueGenericCreateStatic+0x7e>
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d101      	bne.n	800941e <xQueueGenericCreateStatic+0x82>
 800941a:	2301      	movs	r3, #1
 800941c:	e000      	b.n	8009420 <xQueueGenericCreateStatic+0x84>
 800941e:	2300      	movs	r3, #0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10a      	bne.n	800943a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	61fb      	str	r3, [r7, #28]
}
 8009436:	bf00      	nop
 8009438:	e7fe      	b.n	8009438 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800943a:	2350      	movs	r3, #80	; 0x50
 800943c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	2b50      	cmp	r3, #80	; 0x50
 8009442:	d00a      	beq.n	800945a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009448:	f383 8811 	msr	BASEPRI, r3
 800944c:	f3bf 8f6f 	isb	sy
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	61bb      	str	r3, [r7, #24]
}
 8009456:	bf00      	nop
 8009458:	e7fe      	b.n	8009458 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800945a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00d      	beq.n	8009482 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009468:	2201      	movs	r2, #1
 800946a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800946e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	4613      	mov	r3, r2
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	68b9      	ldr	r1, [r7, #8]
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	f000 f83f 	bl	8009500 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009484:	4618      	mov	r0, r3
 8009486:	3730      	adds	r7, #48	; 0x30
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800948c:	b580      	push	{r7, lr}
 800948e:	b08a      	sub	sp, #40	; 0x28
 8009490:	af02      	add	r7, sp, #8
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	4613      	mov	r3, r2
 8009498:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10a      	bne.n	80094b6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80094a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	613b      	str	r3, [r7, #16]
}
 80094b2:	bf00      	nop
 80094b4:	e7fe      	b.n	80094b4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	68ba      	ldr	r2, [r7, #8]
 80094ba:	fb02 f303 	mul.w	r3, r2, r3
 80094be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	3350      	adds	r3, #80	; 0x50
 80094c4:	4618      	mov	r0, r3
 80094c6:	f002 fda7 	bl	800c018 <pvPortMalloc>
 80094ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d011      	beq.n	80094f6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80094d2:	69bb      	ldr	r3, [r7, #24]
 80094d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	3350      	adds	r3, #80	; 0x50
 80094da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80094dc:	69bb      	ldr	r3, [r7, #24]
 80094de:	2200      	movs	r2, #0
 80094e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80094e4:	79fa      	ldrb	r2, [r7, #7]
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	9300      	str	r3, [sp, #0]
 80094ea:	4613      	mov	r3, r2
 80094ec:	697a      	ldr	r2, [r7, #20]
 80094ee:	68b9      	ldr	r1, [r7, #8]
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f000 f805 	bl	8009500 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80094f6:	69bb      	ldr	r3, [r7, #24]
	}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3720      	adds	r7, #32
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	607a      	str	r2, [r7, #4]
 800950c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d103      	bne.n	800951c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	69ba      	ldr	r2, [r7, #24]
 8009518:	601a      	str	r2, [r3, #0]
 800951a:	e002      	b.n	8009522 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	68ba      	ldr	r2, [r7, #8]
 800952c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800952e:	2101      	movs	r1, #1
 8009530:	69b8      	ldr	r0, [r7, #24]
 8009532:	f7ff fecb 	bl	80092cc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	78fa      	ldrb	r2, [r7, #3]
 800953a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800953e:	bf00      	nop
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}

08009546 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009546:	b580      	push	{r7, lr}
 8009548:	b082      	sub	sp, #8
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00e      	beq.n	8009572 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009566:	2300      	movs	r3, #0
 8009568:	2200      	movs	r2, #0
 800956a:	2100      	movs	r1, #0
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f90b 	bl	8009788 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009572:	bf00      	nop
 8009574:	3708      	adds	r7, #8
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800957a:	b580      	push	{r7, lr}
 800957c:	b086      	sub	sp, #24
 800957e:	af00      	add	r7, sp, #0
 8009580:	4603      	mov	r3, r0
 8009582:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009584:	2301      	movs	r3, #1
 8009586:	617b      	str	r3, [r7, #20]
 8009588:	2300      	movs	r3, #0
 800958a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800958c:	79fb      	ldrb	r3, [r7, #7]
 800958e:	461a      	mov	r2, r3
 8009590:	6939      	ldr	r1, [r7, #16]
 8009592:	6978      	ldr	r0, [r7, #20]
 8009594:	f7ff ff7a 	bl	800948c <xQueueGenericCreate>
 8009598:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f7ff ffd3 	bl	8009546 <prvInitialiseMutex>

		return xNewQueue;
 80095a0:	68fb      	ldr	r3, [r7, #12]
	}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3718      	adds	r7, #24
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b088      	sub	sp, #32
 80095ae:	af02      	add	r7, sp, #8
 80095b0:	4603      	mov	r3, r0
 80095b2:	6039      	str	r1, [r7, #0]
 80095b4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80095b6:	2301      	movs	r3, #1
 80095b8:	617b      	str	r3, [r7, #20]
 80095ba:	2300      	movs	r3, #0
 80095bc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80095be:	79fb      	ldrb	r3, [r7, #7]
 80095c0:	9300      	str	r3, [sp, #0]
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	2200      	movs	r2, #0
 80095c6:	6939      	ldr	r1, [r7, #16]
 80095c8:	6978      	ldr	r0, [r7, #20]
 80095ca:	f7ff fee7 	bl	800939c <xQueueGenericCreateStatic>
 80095ce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f7ff ffb8 	bl	8009546 <prvInitialiseMutex>

		return xNewQueue;
 80095d6:	68fb      	ldr	r3, [r7, #12]
	}
 80095d8:	4618      	mov	r0, r3
 80095da:	3718      	adds	r7, #24
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80095e0:	b590      	push	{r4, r7, lr}
 80095e2:	b087      	sub	sp, #28
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d10a      	bne.n	8009608 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80095f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f6:	f383 8811 	msr	BASEPRI, r3
 80095fa:	f3bf 8f6f 	isb	sy
 80095fe:	f3bf 8f4f 	dsb	sy
 8009602:	60fb      	str	r3, [r7, #12]
}
 8009604:	bf00      	nop
 8009606:	e7fe      	b.n	8009606 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	689c      	ldr	r4, [r3, #8]
 800960c:	f001 fd7c 	bl	800b108 <xTaskGetCurrentTaskHandle>
 8009610:	4603      	mov	r3, r0
 8009612:	429c      	cmp	r4, r3
 8009614:	d111      	bne.n	800963a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	1e5a      	subs	r2, r3, #1
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d105      	bne.n	8009634 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009628:	2300      	movs	r3, #0
 800962a:	2200      	movs	r2, #0
 800962c:	2100      	movs	r1, #0
 800962e:	6938      	ldr	r0, [r7, #16]
 8009630:	f000 f8aa 	bl	8009788 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009634:	2301      	movs	r3, #1
 8009636:	617b      	str	r3, [r7, #20]
 8009638:	e001      	b.n	800963e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800963a:	2300      	movs	r3, #0
 800963c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800963e:	697b      	ldr	r3, [r7, #20]
	}
 8009640:	4618      	mov	r0, r3
 8009642:	371c      	adds	r7, #28
 8009644:	46bd      	mov	sp, r7
 8009646:	bd90      	pop	{r4, r7, pc}

08009648 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009648:	b590      	push	{r4, r7, lr}
 800964a:	b087      	sub	sp, #28
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d10a      	bne.n	8009672 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800965c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009660:	f383 8811 	msr	BASEPRI, r3
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	f3bf 8f4f 	dsb	sy
 800966c:	60fb      	str	r3, [r7, #12]
}
 800966e:	bf00      	nop
 8009670:	e7fe      	b.n	8009670 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	689c      	ldr	r4, [r3, #8]
 8009676:	f001 fd47 	bl	800b108 <xTaskGetCurrentTaskHandle>
 800967a:	4603      	mov	r3, r0
 800967c:	429c      	cmp	r4, r3
 800967e:	d107      	bne.n	8009690 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	1c5a      	adds	r2, r3, #1
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800968a:	2301      	movs	r3, #1
 800968c:	617b      	str	r3, [r7, #20]
 800968e:	e00c      	b.n	80096aa <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009690:	6839      	ldr	r1, [r7, #0]
 8009692:	6938      	ldr	r0, [r7, #16]
 8009694:	f000 fb7e 	bl	8009d94 <xQueueSemaphoreTake>
 8009698:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d004      	beq.n	80096aa <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	1c5a      	adds	r2, r3, #1
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80096aa:	697b      	ldr	r3, [r7, #20]
	}
 80096ac:	4618      	mov	r0, r3
 80096ae:	371c      	adds	r7, #28
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd90      	pop	{r4, r7, pc}

080096b4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b08a      	sub	sp, #40	; 0x28
 80096b8:	af02      	add	r7, sp, #8
 80096ba:	60f8      	str	r0, [r7, #12]
 80096bc:	60b9      	str	r1, [r7, #8]
 80096be:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d10a      	bne.n	80096dc <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80096c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ca:	f383 8811 	msr	BASEPRI, r3
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f3bf 8f4f 	dsb	sy
 80096d6:	61bb      	str	r3, [r7, #24]
}
 80096d8:	bf00      	nop
 80096da:	e7fe      	b.n	80096da <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80096dc:	68ba      	ldr	r2, [r7, #8]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d90a      	bls.n	80096fa <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80096e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	617b      	str	r3, [r7, #20]
}
 80096f6:	bf00      	nop
 80096f8:	e7fe      	b.n	80096f8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80096fa:	2302      	movs	r3, #2
 80096fc:	9300      	str	r3, [sp, #0]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	2100      	movs	r1, #0
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	f7ff fe49 	bl	800939c <xQueueGenericCreateStatic>
 800970a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d002      	beq.n	8009718 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009718:	69fb      	ldr	r3, [r7, #28]
	}
 800971a:	4618      	mov	r0, r3
 800971c:	3720      	adds	r7, #32
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009722:	b580      	push	{r7, lr}
 8009724:	b086      	sub	sp, #24
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
 800972a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d10a      	bne.n	8009748 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009736:	f383 8811 	msr	BASEPRI, r3
 800973a:	f3bf 8f6f 	isb	sy
 800973e:	f3bf 8f4f 	dsb	sy
 8009742:	613b      	str	r3, [r7, #16]
}
 8009744:	bf00      	nop
 8009746:	e7fe      	b.n	8009746 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009748:	683a      	ldr	r2, [r7, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	429a      	cmp	r2, r3
 800974e:	d90a      	bls.n	8009766 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	60fb      	str	r3, [r7, #12]
}
 8009762:	bf00      	nop
 8009764:	e7fe      	b.n	8009764 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009766:	2202      	movs	r2, #2
 8009768:	2100      	movs	r1, #0
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f7ff fe8e 	bl	800948c <xQueueGenericCreate>
 8009770:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d002      	beq.n	800977e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	683a      	ldr	r2, [r7, #0]
 800977c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800977e:	697b      	ldr	r3, [r7, #20]
	}
 8009780:	4618      	mov	r0, r3
 8009782:	3718      	adds	r7, #24
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b08e      	sub	sp, #56	; 0x38
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
 8009794:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009796:	2300      	movs	r3, #0
 8009798:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800979e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d10a      	bne.n	80097ba <xQueueGenericSend+0x32>
	__asm volatile
 80097a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a8:	f383 8811 	msr	BASEPRI, r3
 80097ac:	f3bf 8f6f 	isb	sy
 80097b0:	f3bf 8f4f 	dsb	sy
 80097b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80097b6:	bf00      	nop
 80097b8:	e7fe      	b.n	80097b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d103      	bne.n	80097c8 <xQueueGenericSend+0x40>
 80097c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d101      	bne.n	80097cc <xQueueGenericSend+0x44>
 80097c8:	2301      	movs	r3, #1
 80097ca:	e000      	b.n	80097ce <xQueueGenericSend+0x46>
 80097cc:	2300      	movs	r3, #0
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10a      	bne.n	80097e8 <xQueueGenericSend+0x60>
	__asm volatile
 80097d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d6:	f383 8811 	msr	BASEPRI, r3
 80097da:	f3bf 8f6f 	isb	sy
 80097de:	f3bf 8f4f 	dsb	sy
 80097e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80097e4:	bf00      	nop
 80097e6:	e7fe      	b.n	80097e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	2b02      	cmp	r3, #2
 80097ec:	d103      	bne.n	80097f6 <xQueueGenericSend+0x6e>
 80097ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d101      	bne.n	80097fa <xQueueGenericSend+0x72>
 80097f6:	2301      	movs	r3, #1
 80097f8:	e000      	b.n	80097fc <xQueueGenericSend+0x74>
 80097fa:	2300      	movs	r3, #0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d10a      	bne.n	8009816 <xQueueGenericSend+0x8e>
	__asm volatile
 8009800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009804:	f383 8811 	msr	BASEPRI, r3
 8009808:	f3bf 8f6f 	isb	sy
 800980c:	f3bf 8f4f 	dsb	sy
 8009810:	623b      	str	r3, [r7, #32]
}
 8009812:	bf00      	nop
 8009814:	e7fe      	b.n	8009814 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009816:	f001 fc87 	bl	800b128 <xTaskGetSchedulerState>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d102      	bne.n	8009826 <xQueueGenericSend+0x9e>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d101      	bne.n	800982a <xQueueGenericSend+0xa2>
 8009826:	2301      	movs	r3, #1
 8009828:	e000      	b.n	800982c <xQueueGenericSend+0xa4>
 800982a:	2300      	movs	r3, #0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d10a      	bne.n	8009846 <xQueueGenericSend+0xbe>
	__asm volatile
 8009830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	61fb      	str	r3, [r7, #28]
}
 8009842:	bf00      	nop
 8009844:	e7fe      	b.n	8009844 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009846:	f002 fac5 	bl	800bdd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800984a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800984e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009852:	429a      	cmp	r2, r3
 8009854:	d302      	bcc.n	800985c <xQueueGenericSend+0xd4>
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	2b02      	cmp	r3, #2
 800985a:	d129      	bne.n	80098b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800985c:	683a      	ldr	r2, [r7, #0]
 800985e:	68b9      	ldr	r1, [r7, #8]
 8009860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009862:	f000 fc5e 	bl	800a122 <prvCopyDataToQueue>
 8009866:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986c:	2b00      	cmp	r3, #0
 800986e:	d010      	beq.n	8009892 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009872:	3324      	adds	r3, #36	; 0x24
 8009874:	4618      	mov	r0, r3
 8009876:	f001 fa85 	bl	800ad84 <xTaskRemoveFromEventList>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d013      	beq.n	80098a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009880:	4b3f      	ldr	r3, [pc, #252]	; (8009980 <xQueueGenericSend+0x1f8>)
 8009882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009886:	601a      	str	r2, [r3, #0]
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	f3bf 8f6f 	isb	sy
 8009890:	e00a      	b.n	80098a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009894:	2b00      	cmp	r3, #0
 8009896:	d007      	beq.n	80098a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009898:	4b39      	ldr	r3, [pc, #228]	; (8009980 <xQueueGenericSend+0x1f8>)
 800989a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800989e:	601a      	str	r2, [r3, #0]
 80098a0:	f3bf 8f4f 	dsb	sy
 80098a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80098a8:	f002 fac4 	bl	800be34 <vPortExitCritical>
				return pdPASS;
 80098ac:	2301      	movs	r3, #1
 80098ae:	e063      	b.n	8009978 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d103      	bne.n	80098be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098b6:	f002 fabd 	bl	800be34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80098ba:	2300      	movs	r3, #0
 80098bc:	e05c      	b.n	8009978 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d106      	bne.n	80098d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098c4:	f107 0314 	add.w	r3, r7, #20
 80098c8:	4618      	mov	r0, r3
 80098ca:	f001 fabf 	bl	800ae4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098ce:	2301      	movs	r3, #1
 80098d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80098d2:	f002 faaf 	bl	800be34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80098d6:	f001 f819 	bl	800a90c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098da:	f002 fa7b 	bl	800bdd4 <vPortEnterCritical>
 80098de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098e4:	b25b      	sxtb	r3, r3
 80098e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ea:	d103      	bne.n	80098f4 <xQueueGenericSend+0x16c>
 80098ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098fa:	b25b      	sxtb	r3, r3
 80098fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009900:	d103      	bne.n	800990a <xQueueGenericSend+0x182>
 8009902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009904:	2200      	movs	r2, #0
 8009906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800990a:	f002 fa93 	bl	800be34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800990e:	1d3a      	adds	r2, r7, #4
 8009910:	f107 0314 	add.w	r3, r7, #20
 8009914:	4611      	mov	r1, r2
 8009916:	4618      	mov	r0, r3
 8009918:	f001 faae 	bl	800ae78 <xTaskCheckForTimeOut>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	d124      	bne.n	800996c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009922:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009924:	f000 fcf5 	bl	800a312 <prvIsQueueFull>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d018      	beq.n	8009960 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800992e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009930:	3310      	adds	r3, #16
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	4611      	mov	r1, r2
 8009936:	4618      	mov	r0, r3
 8009938:	f001 f9d4 	bl	800ace4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800993c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800993e:	f000 fc80 	bl	800a242 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009942:	f000 fff1 	bl	800a928 <xTaskResumeAll>
 8009946:	4603      	mov	r3, r0
 8009948:	2b00      	cmp	r3, #0
 800994a:	f47f af7c 	bne.w	8009846 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800994e:	4b0c      	ldr	r3, [pc, #48]	; (8009980 <xQueueGenericSend+0x1f8>)
 8009950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009954:	601a      	str	r2, [r3, #0]
 8009956:	f3bf 8f4f 	dsb	sy
 800995a:	f3bf 8f6f 	isb	sy
 800995e:	e772      	b.n	8009846 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009962:	f000 fc6e 	bl	800a242 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009966:	f000 ffdf 	bl	800a928 <xTaskResumeAll>
 800996a:	e76c      	b.n	8009846 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800996c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800996e:	f000 fc68 	bl	800a242 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009972:	f000 ffd9 	bl	800a928 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009976:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009978:	4618      	mov	r0, r3
 800997a:	3738      	adds	r7, #56	; 0x38
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}
 8009980:	e000ed04 	.word	0xe000ed04

08009984 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b090      	sub	sp, #64	; 0x40
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	607a      	str	r2, [r7, #4]
 8009990:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10a      	bne.n	80099b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800999c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a0:	f383 8811 	msr	BASEPRI, r3
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	f3bf 8f4f 	dsb	sy
 80099ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80099ae:	bf00      	nop
 80099b0:	e7fe      	b.n	80099b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099b2:	68bb      	ldr	r3, [r7, #8]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d103      	bne.n	80099c0 <xQueueGenericSendFromISR+0x3c>
 80099b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d101      	bne.n	80099c4 <xQueueGenericSendFromISR+0x40>
 80099c0:	2301      	movs	r3, #1
 80099c2:	e000      	b.n	80099c6 <xQueueGenericSendFromISR+0x42>
 80099c4:	2300      	movs	r3, #0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d10a      	bne.n	80099e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80099ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ce:	f383 8811 	msr	BASEPRI, r3
 80099d2:	f3bf 8f6f 	isb	sy
 80099d6:	f3bf 8f4f 	dsb	sy
 80099da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80099dc:	bf00      	nop
 80099de:	e7fe      	b.n	80099de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	2b02      	cmp	r3, #2
 80099e4:	d103      	bne.n	80099ee <xQueueGenericSendFromISR+0x6a>
 80099e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d101      	bne.n	80099f2 <xQueueGenericSendFromISR+0x6e>
 80099ee:	2301      	movs	r3, #1
 80099f0:	e000      	b.n	80099f4 <xQueueGenericSendFromISR+0x70>
 80099f2:	2300      	movs	r3, #0
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10a      	bne.n	8009a0e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80099f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fc:	f383 8811 	msr	BASEPRI, r3
 8009a00:	f3bf 8f6f 	isb	sy
 8009a04:	f3bf 8f4f 	dsb	sy
 8009a08:	623b      	str	r3, [r7, #32]
}
 8009a0a:	bf00      	nop
 8009a0c:	e7fe      	b.n	8009a0c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a0e:	f002 fac3 	bl	800bf98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009a12:	f3ef 8211 	mrs	r2, BASEPRI
 8009a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1a:	f383 8811 	msr	BASEPRI, r3
 8009a1e:	f3bf 8f6f 	isb	sy
 8009a22:	f3bf 8f4f 	dsb	sy
 8009a26:	61fa      	str	r2, [r7, #28]
 8009a28:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009a2a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a2c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d302      	bcc.n	8009a40 <xQueueGenericSendFromISR+0xbc>
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	2b02      	cmp	r3, #2
 8009a3e:	d12f      	bne.n	8009aa0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a50:	683a      	ldr	r2, [r7, #0]
 8009a52:	68b9      	ldr	r1, [r7, #8]
 8009a54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a56:	f000 fb64 	bl	800a122 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009a5a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a62:	d112      	bne.n	8009a8a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d016      	beq.n	8009a9a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6e:	3324      	adds	r3, #36	; 0x24
 8009a70:	4618      	mov	r0, r3
 8009a72:	f001 f987 	bl	800ad84 <xTaskRemoveFromEventList>
 8009a76:	4603      	mov	r3, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d00e      	beq.n	8009a9a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00b      	beq.n	8009a9a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2201      	movs	r2, #1
 8009a86:	601a      	str	r2, [r3, #0]
 8009a88:	e007      	b.n	8009a9a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009a8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009a8e:	3301      	adds	r3, #1
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	b25a      	sxtb	r2, r3
 8009a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009a9e:	e001      	b.n	8009aa4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009aae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3740      	adds	r7, #64	; 0x40
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b08e      	sub	sp, #56	; 0x38
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
 8009ac2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d10a      	bne.n	8009ae4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad2:	f383 8811 	msr	BASEPRI, r3
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	f3bf 8f4f 	dsb	sy
 8009ade:	623b      	str	r3, [r7, #32]
}
 8009ae0:	bf00      	nop
 8009ae2:	e7fe      	b.n	8009ae2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00a      	beq.n	8009b02 <xQueueGiveFromISR+0x48>
	__asm volatile
 8009aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af0:	f383 8811 	msr	BASEPRI, r3
 8009af4:	f3bf 8f6f 	isb	sy
 8009af8:	f3bf 8f4f 	dsb	sy
 8009afc:	61fb      	str	r3, [r7, #28]
}
 8009afe:	bf00      	nop
 8009b00:	e7fe      	b.n	8009b00 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d103      	bne.n	8009b12 <xQueueGiveFromISR+0x58>
 8009b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d101      	bne.n	8009b16 <xQueueGiveFromISR+0x5c>
 8009b12:	2301      	movs	r3, #1
 8009b14:	e000      	b.n	8009b18 <xQueueGiveFromISR+0x5e>
 8009b16:	2300      	movs	r3, #0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10a      	bne.n	8009b32 <xQueueGiveFromISR+0x78>
	__asm volatile
 8009b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b20:	f383 8811 	msr	BASEPRI, r3
 8009b24:	f3bf 8f6f 	isb	sy
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	61bb      	str	r3, [r7, #24]
}
 8009b2e:	bf00      	nop
 8009b30:	e7fe      	b.n	8009b30 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009b32:	f002 fa31 	bl	800bf98 <vPortValidateInterruptPriority>
	__asm volatile
 8009b36:	f3ef 8211 	mrs	r2, BASEPRI
 8009b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3e:	f383 8811 	msr	BASEPRI, r3
 8009b42:	f3bf 8f6f 	isb	sy
 8009b46:	f3bf 8f4f 	dsb	sy
 8009b4a:	617a      	str	r2, [r7, #20]
 8009b4c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009b4e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b56:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d22b      	bcs.n	8009bba <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b6e:	1c5a      	adds	r2, r3, #1
 8009b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b72:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009b74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b7c:	d112      	bne.n	8009ba4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d016      	beq.n	8009bb4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b88:	3324      	adds	r3, #36	; 0x24
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f001 f8fa 	bl	800ad84 <xTaskRemoveFromEventList>
 8009b90:	4603      	mov	r3, r0
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00e      	beq.n	8009bb4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d00b      	beq.n	8009bb4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	e007      	b.n	8009bb4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ba8:	3301      	adds	r3, #1
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	b25a      	sxtb	r2, r3
 8009bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8009bb8:	e001      	b.n	8009bbe <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8009bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f383 8811 	msr	BASEPRI, r3
}
 8009bc8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3738      	adds	r7, #56	; 0x38
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b08c      	sub	sp, #48	; 0x30
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009be0:	2300      	movs	r3, #0
 8009be2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d10a      	bne.n	8009c04 <xQueueReceive+0x30>
	__asm volatile
 8009bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf2:	f383 8811 	msr	BASEPRI, r3
 8009bf6:	f3bf 8f6f 	isb	sy
 8009bfa:	f3bf 8f4f 	dsb	sy
 8009bfe:	623b      	str	r3, [r7, #32]
}
 8009c00:	bf00      	nop
 8009c02:	e7fe      	b.n	8009c02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d103      	bne.n	8009c12 <xQueueReceive+0x3e>
 8009c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d101      	bne.n	8009c16 <xQueueReceive+0x42>
 8009c12:	2301      	movs	r3, #1
 8009c14:	e000      	b.n	8009c18 <xQueueReceive+0x44>
 8009c16:	2300      	movs	r3, #0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d10a      	bne.n	8009c32 <xQueueReceive+0x5e>
	__asm volatile
 8009c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c20:	f383 8811 	msr	BASEPRI, r3
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	f3bf 8f4f 	dsb	sy
 8009c2c:	61fb      	str	r3, [r7, #28]
}
 8009c2e:	bf00      	nop
 8009c30:	e7fe      	b.n	8009c30 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c32:	f001 fa79 	bl	800b128 <xTaskGetSchedulerState>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d102      	bne.n	8009c42 <xQueueReceive+0x6e>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d101      	bne.n	8009c46 <xQueueReceive+0x72>
 8009c42:	2301      	movs	r3, #1
 8009c44:	e000      	b.n	8009c48 <xQueueReceive+0x74>
 8009c46:	2300      	movs	r3, #0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d10a      	bne.n	8009c62 <xQueueReceive+0x8e>
	__asm volatile
 8009c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c50:	f383 8811 	msr	BASEPRI, r3
 8009c54:	f3bf 8f6f 	isb	sy
 8009c58:	f3bf 8f4f 	dsb	sy
 8009c5c:	61bb      	str	r3, [r7, #24]
}
 8009c5e:	bf00      	nop
 8009c60:	e7fe      	b.n	8009c60 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c62:	f002 f8b7 	bl	800bdd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c6a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d01f      	beq.n	8009cb2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c72:	68b9      	ldr	r1, [r7, #8]
 8009c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c76:	f000 fabe 	bl	800a1f6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7c:	1e5a      	subs	r2, r3, #1
 8009c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00f      	beq.n	8009caa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8c:	3310      	adds	r3, #16
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f001 f878 	bl	800ad84 <xTaskRemoveFromEventList>
 8009c94:	4603      	mov	r3, r0
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d007      	beq.n	8009caa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c9a:	4b3d      	ldr	r3, [pc, #244]	; (8009d90 <xQueueReceive+0x1bc>)
 8009c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ca0:	601a      	str	r2, [r3, #0]
 8009ca2:	f3bf 8f4f 	dsb	sy
 8009ca6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009caa:	f002 f8c3 	bl	800be34 <vPortExitCritical>
				return pdPASS;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e069      	b.n	8009d86 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d103      	bne.n	8009cc0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009cb8:	f002 f8bc 	bl	800be34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	e062      	b.n	8009d86 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d106      	bne.n	8009cd4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009cc6:	f107 0310 	add.w	r3, r7, #16
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f001 f8be 	bl	800ae4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009cd4:	f002 f8ae 	bl	800be34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009cd8:	f000 fe18 	bl	800a90c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009cdc:	f002 f87a 	bl	800bdd4 <vPortEnterCritical>
 8009ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ce6:	b25b      	sxtb	r3, r3
 8009ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cec:	d103      	bne.n	8009cf6 <xQueueReceive+0x122>
 8009cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009cfc:	b25b      	sxtb	r3, r3
 8009cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d02:	d103      	bne.n	8009d0c <xQueueReceive+0x138>
 8009d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d0c:	f002 f892 	bl	800be34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d10:	1d3a      	adds	r2, r7, #4
 8009d12:	f107 0310 	add.w	r3, r7, #16
 8009d16:	4611      	mov	r1, r2
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f001 f8ad 	bl	800ae78 <xTaskCheckForTimeOut>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d123      	bne.n	8009d6c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d26:	f000 fade 	bl	800a2e6 <prvIsQueueEmpty>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d017      	beq.n	8009d60 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d32:	3324      	adds	r3, #36	; 0x24
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	4611      	mov	r1, r2
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f000 ffd3 	bl	800ace4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d40:	f000 fa7f 	bl	800a242 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d44:	f000 fdf0 	bl	800a928 <xTaskResumeAll>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d189      	bne.n	8009c62 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009d4e:	4b10      	ldr	r3, [pc, #64]	; (8009d90 <xQueueReceive+0x1bc>)
 8009d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d54:	601a      	str	r2, [r3, #0]
 8009d56:	f3bf 8f4f 	dsb	sy
 8009d5a:	f3bf 8f6f 	isb	sy
 8009d5e:	e780      	b.n	8009c62 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d62:	f000 fa6e 	bl	800a242 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d66:	f000 fddf 	bl	800a928 <xTaskResumeAll>
 8009d6a:	e77a      	b.n	8009c62 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d6e:	f000 fa68 	bl	800a242 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d72:	f000 fdd9 	bl	800a928 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d78:	f000 fab5 	bl	800a2e6 <prvIsQueueEmpty>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	f43f af6f 	beq.w	8009c62 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009d84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3730      	adds	r7, #48	; 0x30
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	e000ed04 	.word	0xe000ed04

08009d94 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b08e      	sub	sp, #56	; 0x38
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009da6:	2300      	movs	r3, #0
 8009da8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d10a      	bne.n	8009dc6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db4:	f383 8811 	msr	BASEPRI, r3
 8009db8:	f3bf 8f6f 	isb	sy
 8009dbc:	f3bf 8f4f 	dsb	sy
 8009dc0:	623b      	str	r3, [r7, #32]
}
 8009dc2:	bf00      	nop
 8009dc4:	e7fe      	b.n	8009dc4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00a      	beq.n	8009de4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	61fb      	str	r3, [r7, #28]
}
 8009de0:	bf00      	nop
 8009de2:	e7fe      	b.n	8009de2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009de4:	f001 f9a0 	bl	800b128 <xTaskGetSchedulerState>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d102      	bne.n	8009df4 <xQueueSemaphoreTake+0x60>
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d101      	bne.n	8009df8 <xQueueSemaphoreTake+0x64>
 8009df4:	2301      	movs	r3, #1
 8009df6:	e000      	b.n	8009dfa <xQueueSemaphoreTake+0x66>
 8009df8:	2300      	movs	r3, #0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d10a      	bne.n	8009e14 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e02:	f383 8811 	msr	BASEPRI, r3
 8009e06:	f3bf 8f6f 	isb	sy
 8009e0a:	f3bf 8f4f 	dsb	sy
 8009e0e:	61bb      	str	r3, [r7, #24]
}
 8009e10:	bf00      	nop
 8009e12:	e7fe      	b.n	8009e12 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e14:	f001 ffde 	bl	800bdd4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e1c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d024      	beq.n	8009e6e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e26:	1e5a      	subs	r2, r3, #1
 8009e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e2a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d104      	bne.n	8009e3e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009e34:	f001 faee 	bl	800b414 <pvTaskIncrementMutexHeldCount>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e40:	691b      	ldr	r3, [r3, #16]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00f      	beq.n	8009e66 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e48:	3310      	adds	r3, #16
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f000 ff9a 	bl	800ad84 <xTaskRemoveFromEventList>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d007      	beq.n	8009e66 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009e56:	4b54      	ldr	r3, [pc, #336]	; (8009fa8 <xQueueSemaphoreTake+0x214>)
 8009e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e5c:	601a      	str	r2, [r3, #0]
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009e66:	f001 ffe5 	bl	800be34 <vPortExitCritical>
				return pdPASS;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e097      	b.n	8009f9e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d111      	bne.n	8009e98 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00a      	beq.n	8009e90 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7e:	f383 8811 	msr	BASEPRI, r3
 8009e82:	f3bf 8f6f 	isb	sy
 8009e86:	f3bf 8f4f 	dsb	sy
 8009e8a:	617b      	str	r3, [r7, #20]
}
 8009e8c:	bf00      	nop
 8009e8e:	e7fe      	b.n	8009e8e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009e90:	f001 ffd0 	bl	800be34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009e94:	2300      	movs	r3, #0
 8009e96:	e082      	b.n	8009f9e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d106      	bne.n	8009eac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e9e:	f107 030c 	add.w	r3, r7, #12
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f000 ffd2 	bl	800ae4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009eac:	f001 ffc2 	bl	800be34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009eb0:	f000 fd2c 	bl	800a90c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009eb4:	f001 ff8e 	bl	800bdd4 <vPortEnterCritical>
 8009eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ebe:	b25b      	sxtb	r3, r3
 8009ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ec4:	d103      	bne.n	8009ece <xQueueSemaphoreTake+0x13a>
 8009ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ed4:	b25b      	sxtb	r3, r3
 8009ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eda:	d103      	bne.n	8009ee4 <xQueueSemaphoreTake+0x150>
 8009edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ee4:	f001 ffa6 	bl	800be34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ee8:	463a      	mov	r2, r7
 8009eea:	f107 030c 	add.w	r3, r7, #12
 8009eee:	4611      	mov	r1, r2
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f000 ffc1 	bl	800ae78 <xTaskCheckForTimeOut>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d132      	bne.n	8009f62 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009efc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009efe:	f000 f9f2 	bl	800a2e6 <prvIsQueueEmpty>
 8009f02:	4603      	mov	r3, r0
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d026      	beq.n	8009f56 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d109      	bne.n	8009f24 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009f10:	f001 ff60 	bl	800bdd4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f001 f923 	bl	800b164 <xTaskPriorityInherit>
 8009f1e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009f20:	f001 ff88 	bl	800be34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f26:	3324      	adds	r3, #36	; 0x24
 8009f28:	683a      	ldr	r2, [r7, #0]
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f000 fed9 	bl	800ace4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f34:	f000 f985 	bl	800a242 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f38:	f000 fcf6 	bl	800a928 <xTaskResumeAll>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	f47f af68 	bne.w	8009e14 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009f44:	4b18      	ldr	r3, [pc, #96]	; (8009fa8 <xQueueSemaphoreTake+0x214>)
 8009f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f4a:	601a      	str	r2, [r3, #0]
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	f3bf 8f6f 	isb	sy
 8009f54:	e75e      	b.n	8009e14 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009f56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f58:	f000 f973 	bl	800a242 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f5c:	f000 fce4 	bl	800a928 <xTaskResumeAll>
 8009f60:	e758      	b.n	8009e14 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009f62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f64:	f000 f96d 	bl	800a242 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f68:	f000 fcde 	bl	800a928 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f6e:	f000 f9ba 	bl	800a2e6 <prvIsQueueEmpty>
 8009f72:	4603      	mov	r3, r0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	f43f af4d 	beq.w	8009e14 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d00d      	beq.n	8009f9c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009f80:	f001 ff28 	bl	800bdd4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009f84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f86:	f000 f8b4 	bl	800a0f2 <prvGetDisinheritPriorityAfterTimeout>
 8009f8a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f92:	4618      	mov	r0, r3
 8009f94:	f001 f9bc 	bl	800b310 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009f98:	f001 ff4c 	bl	800be34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009f9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3738      	adds	r7, #56	; 0x38
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	e000ed04 	.word	0xe000ed04

08009fac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b08e      	sub	sp, #56	; 0x38
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d10a      	bne.n	8009fd8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc6:	f383 8811 	msr	BASEPRI, r3
 8009fca:	f3bf 8f6f 	isb	sy
 8009fce:	f3bf 8f4f 	dsb	sy
 8009fd2:	623b      	str	r3, [r7, #32]
}
 8009fd4:	bf00      	nop
 8009fd6:	e7fe      	b.n	8009fd6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d103      	bne.n	8009fe6 <xQueueReceiveFromISR+0x3a>
 8009fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d101      	bne.n	8009fea <xQueueReceiveFromISR+0x3e>
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e000      	b.n	8009fec <xQueueReceiveFromISR+0x40>
 8009fea:	2300      	movs	r3, #0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d10a      	bne.n	800a006 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff4:	f383 8811 	msr	BASEPRI, r3
 8009ff8:	f3bf 8f6f 	isb	sy
 8009ffc:	f3bf 8f4f 	dsb	sy
 800a000:	61fb      	str	r3, [r7, #28]
}
 800a002:	bf00      	nop
 800a004:	e7fe      	b.n	800a004 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a006:	f001 ffc7 	bl	800bf98 <vPortValidateInterruptPriority>
	__asm volatile
 800a00a:	f3ef 8211 	mrs	r2, BASEPRI
 800a00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a012:	f383 8811 	msr	BASEPRI, r3
 800a016:	f3bf 8f6f 	isb	sy
 800a01a:	f3bf 8f4f 	dsb	sy
 800a01e:	61ba      	str	r2, [r7, #24]
 800a020:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a022:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a024:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a02a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d02f      	beq.n	800a092 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a034:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a03c:	68b9      	ldr	r1, [r7, #8]
 800a03e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a040:	f000 f8d9 	bl	800a1f6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a046:	1e5a      	subs	r2, r3, #1
 800a048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a04c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a050:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a054:	d112      	bne.n	800a07c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a058:	691b      	ldr	r3, [r3, #16]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d016      	beq.n	800a08c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a060:	3310      	adds	r3, #16
 800a062:	4618      	mov	r0, r3
 800a064:	f000 fe8e 	bl	800ad84 <xTaskRemoveFromEventList>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00e      	beq.n	800a08c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00b      	beq.n	800a08c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	601a      	str	r2, [r3, #0]
 800a07a:	e007      	b.n	800a08c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a07c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a080:	3301      	adds	r3, #1
 800a082:	b2db      	uxtb	r3, r3
 800a084:	b25a      	sxtb	r2, r3
 800a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a088:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a08c:	2301      	movs	r3, #1
 800a08e:	637b      	str	r3, [r7, #52]	; 0x34
 800a090:	e001      	b.n	800a096 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a092:	2300      	movs	r3, #0
 800a094:	637b      	str	r3, [r7, #52]	; 0x34
 800a096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a098:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	f383 8811 	msr	BASEPRI, r3
}
 800a0a0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a0a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	3738      	adds	r7, #56	; 0x38
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d10a      	bne.n	800a0d4 <vQueueDelete+0x28>
	__asm volatile
 800a0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c2:	f383 8811 	msr	BASEPRI, r3
 800a0c6:	f3bf 8f6f 	isb	sy
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	60bb      	str	r3, [r7, #8]
}
 800a0d0:	bf00      	nop
 800a0d2:	e7fe      	b.n	800a0d2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f000 f95f 	bl	800a398 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d102      	bne.n	800a0ea <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a0e4:	68f8      	ldr	r0, [r7, #12]
 800a0e6:	f002 f863 	bl	800c1b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a0ea:	bf00      	nop
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}

0800a0f2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a0f2:	b480      	push	{r7}
 800a0f4:	b085      	sub	sp, #20
 800a0f6:	af00      	add	r7, sp, #0
 800a0f8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d006      	beq.n	800a110 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a10c:	60fb      	str	r3, [r7, #12]
 800a10e:	e001      	b.n	800a114 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a110:	2300      	movs	r3, #0
 800a112:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a114:	68fb      	ldr	r3, [r7, #12]
	}
 800a116:	4618      	mov	r0, r3
 800a118:	3714      	adds	r7, #20
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr

0800a122 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b086      	sub	sp, #24
 800a126:	af00      	add	r7, sp, #0
 800a128:	60f8      	str	r0, [r7, #12]
 800a12a:	60b9      	str	r1, [r7, #8]
 800a12c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a12e:	2300      	movs	r3, #0
 800a130:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a136:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d10d      	bne.n	800a15c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d14d      	bne.n	800a1e4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	689b      	ldr	r3, [r3, #8]
 800a14c:	4618      	mov	r0, r3
 800a14e:	f001 f871 	bl	800b234 <xTaskPriorityDisinherit>
 800a152:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2200      	movs	r2, #0
 800a158:	609a      	str	r2, [r3, #8]
 800a15a:	e043      	b.n	800a1e4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d119      	bne.n	800a196 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	6858      	ldr	r0, [r3, #4]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a16a:	461a      	mov	r2, r3
 800a16c:	68b9      	ldr	r1, [r7, #8]
 800a16e:	f00e fc4c 	bl	8018a0a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	685a      	ldr	r2, [r3, #4]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17a:	441a      	add	r2, r3
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	685a      	ldr	r2, [r3, #4]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	429a      	cmp	r2, r3
 800a18a:	d32b      	bcc.n	800a1e4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	605a      	str	r2, [r3, #4]
 800a194:	e026      	b.n	800a1e4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	68d8      	ldr	r0, [r3, #12]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a19e:	461a      	mov	r2, r3
 800a1a0:	68b9      	ldr	r1, [r7, #8]
 800a1a2:	f00e fc32 	bl	8018a0a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	68da      	ldr	r2, [r3, #12]
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ae:	425b      	negs	r3, r3
 800a1b0:	441a      	add	r2, r3
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	68da      	ldr	r2, [r3, #12]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d207      	bcs.n	800a1d2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	689a      	ldr	r2, [r3, #8]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ca:	425b      	negs	r3, r3
 800a1cc:	441a      	add	r2, r3
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2b02      	cmp	r3, #2
 800a1d6:	d105      	bne.n	800a1e4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d002      	beq.n	800a1e4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	3b01      	subs	r3, #1
 800a1e2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	1c5a      	adds	r2, r3, #1
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a1ec:	697b      	ldr	r3, [r7, #20]
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3718      	adds	r7, #24
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b082      	sub	sp, #8
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
 800a1fe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a204:	2b00      	cmp	r3, #0
 800a206:	d018      	beq.n	800a23a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	68da      	ldr	r2, [r3, #12]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a210:	441a      	add	r2, r3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	68da      	ldr	r2, [r3, #12]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d303      	bcc.n	800a22a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	68d9      	ldr	r1, [r3, #12]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a232:	461a      	mov	r2, r3
 800a234:	6838      	ldr	r0, [r7, #0]
 800a236:	f00e fbe8 	bl	8018a0a <memcpy>
	}
}
 800a23a:	bf00      	nop
 800a23c:	3708      	adds	r7, #8
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}

0800a242 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b084      	sub	sp, #16
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a24a:	f001 fdc3 	bl	800bdd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a254:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a256:	e011      	b.n	800a27c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d012      	beq.n	800a286 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	3324      	adds	r3, #36	; 0x24
 800a264:	4618      	mov	r0, r3
 800a266:	f000 fd8d 	bl	800ad84 <xTaskRemoveFromEventList>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d001      	beq.n	800a274 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a270:	f000 fe64 	bl	800af3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a274:	7bfb      	ldrb	r3, [r7, #15]
 800a276:	3b01      	subs	r3, #1
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a27c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a280:	2b00      	cmp	r3, #0
 800a282:	dce9      	bgt.n	800a258 <prvUnlockQueue+0x16>
 800a284:	e000      	b.n	800a288 <prvUnlockQueue+0x46>
					break;
 800a286:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	22ff      	movs	r2, #255	; 0xff
 800a28c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a290:	f001 fdd0 	bl	800be34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a294:	f001 fd9e 	bl	800bdd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a29e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2a0:	e011      	b.n	800a2c6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d012      	beq.n	800a2d0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	3310      	adds	r3, #16
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f000 fd68 	bl	800ad84 <xTaskRemoveFromEventList>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d001      	beq.n	800a2be <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a2ba:	f000 fe3f 	bl	800af3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a2be:	7bbb      	ldrb	r3, [r7, #14]
 800a2c0:	3b01      	subs	r3, #1
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	dce9      	bgt.n	800a2a2 <prvUnlockQueue+0x60>
 800a2ce:	e000      	b.n	800a2d2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a2d0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	22ff      	movs	r2, #255	; 0xff
 800a2d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a2da:	f001 fdab 	bl	800be34 <vPortExitCritical>
}
 800a2de:	bf00      	nop
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b084      	sub	sp, #16
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2ee:	f001 fd71 	bl	800bdd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d102      	bne.n	800a300 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	60fb      	str	r3, [r7, #12]
 800a2fe:	e001      	b.n	800a304 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a300:	2300      	movs	r3, #0
 800a302:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a304:	f001 fd96 	bl	800be34 <vPortExitCritical>

	return xReturn;
 800a308:	68fb      	ldr	r3, [r7, #12]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3710      	adds	r7, #16
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b084      	sub	sp, #16
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a31a:	f001 fd5b 	bl	800bdd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a326:	429a      	cmp	r2, r3
 800a328:	d102      	bne.n	800a330 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a32a:	2301      	movs	r3, #1
 800a32c:	60fb      	str	r3, [r7, #12]
 800a32e:	e001      	b.n	800a334 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a330:	2300      	movs	r3, #0
 800a332:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a334:	f001 fd7e 	bl	800be34 <vPortExitCritical>

	return xReturn;
 800a338:	68fb      	ldr	r3, [r7, #12]
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}
	...

0800a344 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a34e:	2300      	movs	r3, #0
 800a350:	60fb      	str	r3, [r7, #12]
 800a352:	e014      	b.n	800a37e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a354:	4a0f      	ldr	r2, [pc, #60]	; (800a394 <vQueueAddToRegistry+0x50>)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10b      	bne.n	800a378 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a360:	490c      	ldr	r1, [pc, #48]	; (800a394 <vQueueAddToRegistry+0x50>)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	683a      	ldr	r2, [r7, #0]
 800a366:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a36a:	4a0a      	ldr	r2, [pc, #40]	; (800a394 <vQueueAddToRegistry+0x50>)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	00db      	lsls	r3, r3, #3
 800a370:	4413      	add	r3, r2
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a376:	e006      	b.n	800a386 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	3301      	adds	r3, #1
 800a37c:	60fb      	str	r3, [r7, #12]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2b07      	cmp	r3, #7
 800a382:	d9e7      	bls.n	800a354 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a384:	bf00      	nop
 800a386:	bf00      	nop
 800a388:	3714      	adds	r7, #20
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop
 800a394:	2400129c 	.word	0x2400129c

0800a398 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	60fb      	str	r3, [r7, #12]
 800a3a4:	e016      	b.n	800a3d4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a3a6:	4a10      	ldr	r2, [pc, #64]	; (800a3e8 <vQueueUnregisterQueue+0x50>)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	00db      	lsls	r3, r3, #3
 800a3ac:	4413      	add	r3, r2
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d10b      	bne.n	800a3ce <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a3b6:	4a0c      	ldr	r2, [pc, #48]	; (800a3e8 <vQueueUnregisterQueue+0x50>)
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a3c0:	4a09      	ldr	r2, [pc, #36]	; (800a3e8 <vQueueUnregisterQueue+0x50>)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	00db      	lsls	r3, r3, #3
 800a3c6:	4413      	add	r3, r2
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	605a      	str	r2, [r3, #4]
				break;
 800a3cc:	e006      	b.n	800a3dc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	60fb      	str	r3, [r7, #12]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2b07      	cmp	r3, #7
 800a3d8:	d9e5      	bls.n	800a3a6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a3da:	bf00      	nop
 800a3dc:	bf00      	nop
 800a3de:	3714      	adds	r7, #20
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr
 800a3e8:	2400129c 	.word	0x2400129c

0800a3ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b086      	sub	sp, #24
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	60f8      	str	r0, [r7, #12]
 800a3f4:	60b9      	str	r1, [r7, #8]
 800a3f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a3fc:	f001 fcea 	bl	800bdd4 <vPortEnterCritical>
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a406:	b25b      	sxtb	r3, r3
 800a408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a40c:	d103      	bne.n	800a416 <vQueueWaitForMessageRestricted+0x2a>
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	2200      	movs	r2, #0
 800a412:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a41c:	b25b      	sxtb	r3, r3
 800a41e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a422:	d103      	bne.n	800a42c <vQueueWaitForMessageRestricted+0x40>
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	2200      	movs	r2, #0
 800a428:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a42c:	f001 fd02 	bl	800be34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a434:	2b00      	cmp	r3, #0
 800a436:	d106      	bne.n	800a446 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	3324      	adds	r3, #36	; 0x24
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	68b9      	ldr	r1, [r7, #8]
 800a440:	4618      	mov	r0, r3
 800a442:	f000 fc73 	bl	800ad2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a446:	6978      	ldr	r0, [r7, #20]
 800a448:	f7ff fefb 	bl	800a242 <prvUnlockQueue>
	}
 800a44c:	bf00      	nop
 800a44e:	3718      	adds	r7, #24
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a454:	b580      	push	{r7, lr}
 800a456:	b08e      	sub	sp, #56	; 0x38
 800a458:	af04      	add	r7, sp, #16
 800a45a:	60f8      	str	r0, [r7, #12]
 800a45c:	60b9      	str	r1, [r7, #8]
 800a45e:	607a      	str	r2, [r7, #4]
 800a460:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a464:	2b00      	cmp	r3, #0
 800a466:	d10a      	bne.n	800a47e <xTaskCreateStatic+0x2a>
	__asm volatile
 800a468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46c:	f383 8811 	msr	BASEPRI, r3
 800a470:	f3bf 8f6f 	isb	sy
 800a474:	f3bf 8f4f 	dsb	sy
 800a478:	623b      	str	r3, [r7, #32]
}
 800a47a:	bf00      	nop
 800a47c:	e7fe      	b.n	800a47c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a480:	2b00      	cmp	r3, #0
 800a482:	d10a      	bne.n	800a49a <xTaskCreateStatic+0x46>
	__asm volatile
 800a484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a488:	f383 8811 	msr	BASEPRI, r3
 800a48c:	f3bf 8f6f 	isb	sy
 800a490:	f3bf 8f4f 	dsb	sy
 800a494:	61fb      	str	r3, [r7, #28]
}
 800a496:	bf00      	nop
 800a498:	e7fe      	b.n	800a498 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a49a:	23bc      	movs	r3, #188	; 0xbc
 800a49c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	2bbc      	cmp	r3, #188	; 0xbc
 800a4a2:	d00a      	beq.n	800a4ba <xTaskCreateStatic+0x66>
	__asm volatile
 800a4a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a8:	f383 8811 	msr	BASEPRI, r3
 800a4ac:	f3bf 8f6f 	isb	sy
 800a4b0:	f3bf 8f4f 	dsb	sy
 800a4b4:	61bb      	str	r3, [r7, #24]
}
 800a4b6:	bf00      	nop
 800a4b8:	e7fe      	b.n	800a4b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a4ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d01e      	beq.n	800a500 <xTaskCreateStatic+0xac>
 800a4c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d01b      	beq.n	800a500 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d4:	2202      	movs	r2, #2
 800a4d6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a4da:	2300      	movs	r3, #0
 800a4dc:	9303      	str	r3, [sp, #12]
 800a4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e0:	9302      	str	r3, [sp, #8]
 800a4e2:	f107 0314 	add.w	r3, r7, #20
 800a4e6:	9301      	str	r3, [sp, #4]
 800a4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ea:	9300      	str	r3, [sp, #0]
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	68b9      	ldr	r1, [r7, #8]
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f000 f850 	bl	800a598 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a4f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4fa:	f000 f8f3 	bl	800a6e4 <prvAddNewTaskToReadyList>
 800a4fe:	e001      	b.n	800a504 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a500:	2300      	movs	r3, #0
 800a502:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a504:	697b      	ldr	r3, [r7, #20]
	}
 800a506:	4618      	mov	r0, r3
 800a508:	3728      	adds	r7, #40	; 0x28
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b08c      	sub	sp, #48	; 0x30
 800a512:	af04      	add	r7, sp, #16
 800a514:	60f8      	str	r0, [r7, #12]
 800a516:	60b9      	str	r1, [r7, #8]
 800a518:	603b      	str	r3, [r7, #0]
 800a51a:	4613      	mov	r3, r2
 800a51c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a51e:	88fb      	ldrh	r3, [r7, #6]
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	4618      	mov	r0, r3
 800a524:	f001 fd78 	bl	800c018 <pvPortMalloc>
 800a528:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00e      	beq.n	800a54e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a530:	20bc      	movs	r0, #188	; 0xbc
 800a532:	f001 fd71 	bl	800c018 <pvPortMalloc>
 800a536:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d003      	beq.n	800a546 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	697a      	ldr	r2, [r7, #20]
 800a542:	631a      	str	r2, [r3, #48]	; 0x30
 800a544:	e005      	b.n	800a552 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a546:	6978      	ldr	r0, [r7, #20]
 800a548:	f001 fe32 	bl	800c1b0 <vPortFree>
 800a54c:	e001      	b.n	800a552 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a54e:	2300      	movs	r3, #0
 800a550:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d017      	beq.n	800a588 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a560:	88fa      	ldrh	r2, [r7, #6]
 800a562:	2300      	movs	r3, #0
 800a564:	9303      	str	r3, [sp, #12]
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	9302      	str	r3, [sp, #8]
 800a56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56c:	9301      	str	r3, [sp, #4]
 800a56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a570:	9300      	str	r3, [sp, #0]
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	68b9      	ldr	r1, [r7, #8]
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f000 f80e 	bl	800a598 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a57c:	69f8      	ldr	r0, [r7, #28]
 800a57e:	f000 f8b1 	bl	800a6e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a582:	2301      	movs	r3, #1
 800a584:	61bb      	str	r3, [r7, #24]
 800a586:	e002      	b.n	800a58e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a588:	f04f 33ff 	mov.w	r3, #4294967295
 800a58c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a58e:	69bb      	ldr	r3, [r7, #24]
	}
 800a590:	4618      	mov	r0, r3
 800a592:	3720      	adds	r7, #32
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b088      	sub	sp, #32
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
 800a5a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	21a5      	movs	r1, #165	; 0xa5
 800a5b2:	f00e fa38 	bl	8018a26 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5ba:	6879      	ldr	r1, [r7, #4]
 800a5bc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a5c0:	440b      	add	r3, r1
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	4413      	add	r3, r2
 800a5c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a5c8:	69bb      	ldr	r3, [r7, #24]
 800a5ca:	f023 0307 	bic.w	r3, r3, #7
 800a5ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	f003 0307 	and.w	r3, r3, #7
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00a      	beq.n	800a5f0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5de:	f383 8811 	msr	BASEPRI, r3
 800a5e2:	f3bf 8f6f 	isb	sy
 800a5e6:	f3bf 8f4f 	dsb	sy
 800a5ea:	617b      	str	r3, [r7, #20]
}
 800a5ec:	bf00      	nop
 800a5ee:	e7fe      	b.n	800a5ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d01f      	beq.n	800a636 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	61fb      	str	r3, [r7, #28]
 800a5fa:	e012      	b.n	800a622 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a5fc:	68ba      	ldr	r2, [r7, #8]
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	4413      	add	r3, r2
 800a602:	7819      	ldrb	r1, [r3, #0]
 800a604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	4413      	add	r3, r2
 800a60a:	3334      	adds	r3, #52	; 0x34
 800a60c:	460a      	mov	r2, r1
 800a60e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a610:	68ba      	ldr	r2, [r7, #8]
 800a612:	69fb      	ldr	r3, [r7, #28]
 800a614:	4413      	add	r3, r2
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d006      	beq.n	800a62a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	3301      	adds	r3, #1
 800a620:	61fb      	str	r3, [r7, #28]
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	2b0f      	cmp	r3, #15
 800a626:	d9e9      	bls.n	800a5fc <prvInitialiseNewTask+0x64>
 800a628:	e000      	b.n	800a62c <prvInitialiseNewTask+0x94>
			{
				break;
 800a62a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62e:	2200      	movs	r2, #0
 800a630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a634:	e003      	b.n	800a63e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a638:	2200      	movs	r2, #0
 800a63a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a640:	2b37      	cmp	r3, #55	; 0x37
 800a642:	d901      	bls.n	800a648 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a644:	2337      	movs	r3, #55	; 0x37
 800a646:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a64c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a652:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a656:	2200      	movs	r2, #0
 800a658:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65c:	3304      	adds	r3, #4
 800a65e:	4618      	mov	r0, r3
 800a660:	f7fe fda0 	bl	80091a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a666:	3318      	adds	r3, #24
 800a668:	4618      	mov	r0, r3
 800a66a:	f7fe fd9b 	bl	80091a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a672:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a676:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a682:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a686:	2200      	movs	r2, #0
 800a688:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68e:	2200      	movs	r2, #0
 800a690:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a696:	3354      	adds	r3, #84	; 0x54
 800a698:	2260      	movs	r2, #96	; 0x60
 800a69a:	2100      	movs	r1, #0
 800a69c:	4618      	mov	r0, r3
 800a69e:	f00e f9c2 	bl	8018a26 <memset>
 800a6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a4:	4a0c      	ldr	r2, [pc, #48]	; (800a6d8 <prvInitialiseNewTask+0x140>)
 800a6a6:	659a      	str	r2, [r3, #88]	; 0x58
 800a6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6aa:	4a0c      	ldr	r2, [pc, #48]	; (800a6dc <prvInitialiseNewTask+0x144>)
 800a6ac:	65da      	str	r2, [r3, #92]	; 0x5c
 800a6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b0:	4a0b      	ldr	r2, [pc, #44]	; (800a6e0 <prvInitialiseNewTask+0x148>)
 800a6b2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a6b4:	683a      	ldr	r2, [r7, #0]
 800a6b6:	68f9      	ldr	r1, [r7, #12]
 800a6b8:	69b8      	ldr	r0, [r7, #24]
 800a6ba:	f001 fa61 	bl	800bb80 <pxPortInitialiseStack>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d002      	beq.n	800a6d0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6d0:	bf00      	nop
 800a6d2:	3720      	adds	r7, #32
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	0801ebf4 	.word	0x0801ebf4
 800a6dc:	0801ec14 	.word	0x0801ec14
 800a6e0:	0801ebd4 	.word	0x0801ebd4

0800a6e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b082      	sub	sp, #8
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a6ec:	f001 fb72 	bl	800bdd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a6f0:	4b2d      	ldr	r3, [pc, #180]	; (800a7a8 <prvAddNewTaskToReadyList+0xc4>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	4a2c      	ldr	r2, [pc, #176]	; (800a7a8 <prvAddNewTaskToReadyList+0xc4>)
 800a6f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a6fa:	4b2c      	ldr	r3, [pc, #176]	; (800a7ac <prvAddNewTaskToReadyList+0xc8>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d109      	bne.n	800a716 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a702:	4a2a      	ldr	r2, [pc, #168]	; (800a7ac <prvAddNewTaskToReadyList+0xc8>)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a708:	4b27      	ldr	r3, [pc, #156]	; (800a7a8 <prvAddNewTaskToReadyList+0xc4>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d110      	bne.n	800a732 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a710:	f000 fc38 	bl	800af84 <prvInitialiseTaskLists>
 800a714:	e00d      	b.n	800a732 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a716:	4b26      	ldr	r3, [pc, #152]	; (800a7b0 <prvAddNewTaskToReadyList+0xcc>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d109      	bne.n	800a732 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a71e:	4b23      	ldr	r3, [pc, #140]	; (800a7ac <prvAddNewTaskToReadyList+0xc8>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a728:	429a      	cmp	r2, r3
 800a72a:	d802      	bhi.n	800a732 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a72c:	4a1f      	ldr	r2, [pc, #124]	; (800a7ac <prvAddNewTaskToReadyList+0xc8>)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a732:	4b20      	ldr	r3, [pc, #128]	; (800a7b4 <prvAddNewTaskToReadyList+0xd0>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	3301      	adds	r3, #1
 800a738:	4a1e      	ldr	r2, [pc, #120]	; (800a7b4 <prvAddNewTaskToReadyList+0xd0>)
 800a73a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a73c:	4b1d      	ldr	r3, [pc, #116]	; (800a7b4 <prvAddNewTaskToReadyList+0xd0>)
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a748:	4b1b      	ldr	r3, [pc, #108]	; (800a7b8 <prvAddNewTaskToReadyList+0xd4>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d903      	bls.n	800a758 <prvAddNewTaskToReadyList+0x74>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a754:	4a18      	ldr	r2, [pc, #96]	; (800a7b8 <prvAddNewTaskToReadyList+0xd4>)
 800a756:	6013      	str	r3, [r2, #0]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a75c:	4613      	mov	r3, r2
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	4413      	add	r3, r2
 800a762:	009b      	lsls	r3, r3, #2
 800a764:	4a15      	ldr	r2, [pc, #84]	; (800a7bc <prvAddNewTaskToReadyList+0xd8>)
 800a766:	441a      	add	r2, r3
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	3304      	adds	r3, #4
 800a76c:	4619      	mov	r1, r3
 800a76e:	4610      	mov	r0, r2
 800a770:	f7fe fd25 	bl	80091be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a774:	f001 fb5e 	bl	800be34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a778:	4b0d      	ldr	r3, [pc, #52]	; (800a7b0 <prvAddNewTaskToReadyList+0xcc>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00e      	beq.n	800a79e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a780:	4b0a      	ldr	r3, [pc, #40]	; (800a7ac <prvAddNewTaskToReadyList+0xc8>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d207      	bcs.n	800a79e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a78e:	4b0c      	ldr	r3, [pc, #48]	; (800a7c0 <prvAddNewTaskToReadyList+0xdc>)
 800a790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a794:	601a      	str	r2, [r3, #0]
 800a796:	f3bf 8f4f 	dsb	sy
 800a79a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a79e:	bf00      	nop
 800a7a0:	3708      	adds	r7, #8
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	240017b0 	.word	0x240017b0
 800a7ac:	240012dc 	.word	0x240012dc
 800a7b0:	240017bc 	.word	0x240017bc
 800a7b4:	240017cc 	.word	0x240017cc
 800a7b8:	240017b8 	.word	0x240017b8
 800a7bc:	240012e0 	.word	0x240012e0
 800a7c0:	e000ed04 	.word	0xe000ed04

0800a7c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d017      	beq.n	800a806 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a7d6:	4b13      	ldr	r3, [pc, #76]	; (800a824 <vTaskDelay+0x60>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d00a      	beq.n	800a7f4 <vTaskDelay+0x30>
	__asm volatile
 800a7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	60bb      	str	r3, [r7, #8]
}
 800a7f0:	bf00      	nop
 800a7f2:	e7fe      	b.n	800a7f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a7f4:	f000 f88a 	bl	800a90c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 fe1e 	bl	800b43c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a800:	f000 f892 	bl	800a928 <xTaskResumeAll>
 800a804:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d107      	bne.n	800a81c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a80c:	4b06      	ldr	r3, [pc, #24]	; (800a828 <vTaskDelay+0x64>)
 800a80e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	f3bf 8f4f 	dsb	sy
 800a818:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a81c:	bf00      	nop
 800a81e:	3710      	adds	r7, #16
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	240017d8 	.word	0x240017d8
 800a828:	e000ed04 	.word	0xe000ed04

0800a82c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b08a      	sub	sp, #40	; 0x28
 800a830:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a832:	2300      	movs	r3, #0
 800a834:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a836:	2300      	movs	r3, #0
 800a838:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a83a:	463a      	mov	r2, r7
 800a83c:	1d39      	adds	r1, r7, #4
 800a83e:	f107 0308 	add.w	r3, r7, #8
 800a842:	4618      	mov	r0, r3
 800a844:	f7fe fc5a 	bl	80090fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a848:	6839      	ldr	r1, [r7, #0]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	68ba      	ldr	r2, [r7, #8]
 800a84e:	9202      	str	r2, [sp, #8]
 800a850:	9301      	str	r3, [sp, #4]
 800a852:	2300      	movs	r3, #0
 800a854:	9300      	str	r3, [sp, #0]
 800a856:	2300      	movs	r3, #0
 800a858:	460a      	mov	r2, r1
 800a85a:	4924      	ldr	r1, [pc, #144]	; (800a8ec <vTaskStartScheduler+0xc0>)
 800a85c:	4824      	ldr	r0, [pc, #144]	; (800a8f0 <vTaskStartScheduler+0xc4>)
 800a85e:	f7ff fdf9 	bl	800a454 <xTaskCreateStatic>
 800a862:	4603      	mov	r3, r0
 800a864:	4a23      	ldr	r2, [pc, #140]	; (800a8f4 <vTaskStartScheduler+0xc8>)
 800a866:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a868:	4b22      	ldr	r3, [pc, #136]	; (800a8f4 <vTaskStartScheduler+0xc8>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d002      	beq.n	800a876 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a870:	2301      	movs	r3, #1
 800a872:	617b      	str	r3, [r7, #20]
 800a874:	e001      	b.n	800a87a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a876:	2300      	movs	r3, #0
 800a878:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d102      	bne.n	800a886 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a880:	f000 fe30 	bl	800b4e4 <xTimerCreateTimerTask>
 800a884:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d11b      	bne.n	800a8c4 <vTaskStartScheduler+0x98>
	__asm volatile
 800a88c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a890:	f383 8811 	msr	BASEPRI, r3
 800a894:	f3bf 8f6f 	isb	sy
 800a898:	f3bf 8f4f 	dsb	sy
 800a89c:	613b      	str	r3, [r7, #16]
}
 800a89e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a8a0:	4b15      	ldr	r3, [pc, #84]	; (800a8f8 <vTaskStartScheduler+0xcc>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	3354      	adds	r3, #84	; 0x54
 800a8a6:	4a15      	ldr	r2, [pc, #84]	; (800a8fc <vTaskStartScheduler+0xd0>)
 800a8a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a8aa:	4b15      	ldr	r3, [pc, #84]	; (800a900 <vTaskStartScheduler+0xd4>)
 800a8ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a8b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a8b2:	4b14      	ldr	r3, [pc, #80]	; (800a904 <vTaskStartScheduler+0xd8>)
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a8b8:	4b13      	ldr	r3, [pc, #76]	; (800a908 <vTaskStartScheduler+0xdc>)
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a8be:	f001 f9e7 	bl	800bc90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a8c2:	e00e      	b.n	800a8e2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ca:	d10a      	bne.n	800a8e2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d0:	f383 8811 	msr	BASEPRI, r3
 800a8d4:	f3bf 8f6f 	isb	sy
 800a8d8:	f3bf 8f4f 	dsb	sy
 800a8dc:	60fb      	str	r3, [r7, #12]
}
 800a8de:	bf00      	nop
 800a8e0:	e7fe      	b.n	800a8e0 <vTaskStartScheduler+0xb4>
}
 800a8e2:	bf00      	nop
 800a8e4:	3718      	adds	r7, #24
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	08019af4 	.word	0x08019af4
 800a8f0:	0800af55 	.word	0x0800af55
 800a8f4:	240017d4 	.word	0x240017d4
 800a8f8:	240012dc 	.word	0x240012dc
 800a8fc:	24000038 	.word	0x24000038
 800a900:	240017d0 	.word	0x240017d0
 800a904:	240017bc 	.word	0x240017bc
 800a908:	240017b4 	.word	0x240017b4

0800a90c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a90c:	b480      	push	{r7}
 800a90e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a910:	4b04      	ldr	r3, [pc, #16]	; (800a924 <vTaskSuspendAll+0x18>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	3301      	adds	r3, #1
 800a916:	4a03      	ldr	r2, [pc, #12]	; (800a924 <vTaskSuspendAll+0x18>)
 800a918:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a91a:	bf00      	nop
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr
 800a924:	240017d8 	.word	0x240017d8

0800a928 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a92e:	2300      	movs	r3, #0
 800a930:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a932:	2300      	movs	r3, #0
 800a934:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a936:	4b42      	ldr	r3, [pc, #264]	; (800aa40 <xTaskResumeAll+0x118>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d10a      	bne.n	800a954 <xTaskResumeAll+0x2c>
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a942:	f383 8811 	msr	BASEPRI, r3
 800a946:	f3bf 8f6f 	isb	sy
 800a94a:	f3bf 8f4f 	dsb	sy
 800a94e:	603b      	str	r3, [r7, #0]
}
 800a950:	bf00      	nop
 800a952:	e7fe      	b.n	800a952 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a954:	f001 fa3e 	bl	800bdd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a958:	4b39      	ldr	r3, [pc, #228]	; (800aa40 <xTaskResumeAll+0x118>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	3b01      	subs	r3, #1
 800a95e:	4a38      	ldr	r2, [pc, #224]	; (800aa40 <xTaskResumeAll+0x118>)
 800a960:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a962:	4b37      	ldr	r3, [pc, #220]	; (800aa40 <xTaskResumeAll+0x118>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d162      	bne.n	800aa30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a96a:	4b36      	ldr	r3, [pc, #216]	; (800aa44 <xTaskResumeAll+0x11c>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d05e      	beq.n	800aa30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a972:	e02f      	b.n	800a9d4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a974:	4b34      	ldr	r3, [pc, #208]	; (800aa48 <xTaskResumeAll+0x120>)
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	68db      	ldr	r3, [r3, #12]
 800a97a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	3318      	adds	r3, #24
 800a980:	4618      	mov	r0, r3
 800a982:	f7fe fc79 	bl	8009278 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	3304      	adds	r3, #4
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7fe fc74 	bl	8009278 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a994:	4b2d      	ldr	r3, [pc, #180]	; (800aa4c <xTaskResumeAll+0x124>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d903      	bls.n	800a9a4 <xTaskResumeAll+0x7c>
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a0:	4a2a      	ldr	r2, [pc, #168]	; (800aa4c <xTaskResumeAll+0x124>)
 800a9a2:	6013      	str	r3, [r2, #0]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	4413      	add	r3, r2
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	4a27      	ldr	r2, [pc, #156]	; (800aa50 <xTaskResumeAll+0x128>)
 800a9b2:	441a      	add	r2, r3
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	3304      	adds	r3, #4
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	4610      	mov	r0, r2
 800a9bc:	f7fe fbff 	bl	80091be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9c4:	4b23      	ldr	r3, [pc, #140]	; (800aa54 <xTaskResumeAll+0x12c>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d302      	bcc.n	800a9d4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a9ce:	4b22      	ldr	r3, [pc, #136]	; (800aa58 <xTaskResumeAll+0x130>)
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9d4:	4b1c      	ldr	r3, [pc, #112]	; (800aa48 <xTaskResumeAll+0x120>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1cb      	bne.n	800a974 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d001      	beq.n	800a9e6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a9e2:	f000 fb71 	bl	800b0c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a9e6:	4b1d      	ldr	r3, [pc, #116]	; (800aa5c <xTaskResumeAll+0x134>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d010      	beq.n	800aa14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a9f2:	f000 f859 	bl	800aaa8 <xTaskIncrementTick>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d002      	beq.n	800aa02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a9fc:	4b16      	ldr	r3, [pc, #88]	; (800aa58 <xTaskResumeAll+0x130>)
 800a9fe:	2201      	movs	r2, #1
 800aa00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	3b01      	subs	r3, #1
 800aa06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d1f1      	bne.n	800a9f2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800aa0e:	4b13      	ldr	r3, [pc, #76]	; (800aa5c <xTaskResumeAll+0x134>)
 800aa10:	2200      	movs	r2, #0
 800aa12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aa14:	4b10      	ldr	r3, [pc, #64]	; (800aa58 <xTaskResumeAll+0x130>)
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d009      	beq.n	800aa30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aa20:	4b0f      	ldr	r3, [pc, #60]	; (800aa60 <xTaskResumeAll+0x138>)
 800aa22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa26:	601a      	str	r2, [r3, #0]
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa30:	f001 fa00 	bl	800be34 <vPortExitCritical>

	return xAlreadyYielded;
 800aa34:	68bb      	ldr	r3, [r7, #8]
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3710      	adds	r7, #16
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	240017d8 	.word	0x240017d8
 800aa44:	240017b0 	.word	0x240017b0
 800aa48:	24001770 	.word	0x24001770
 800aa4c:	240017b8 	.word	0x240017b8
 800aa50:	240012e0 	.word	0x240012e0
 800aa54:	240012dc 	.word	0x240012dc
 800aa58:	240017c4 	.word	0x240017c4
 800aa5c:	240017c0 	.word	0x240017c0
 800aa60:	e000ed04 	.word	0xe000ed04

0800aa64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aa6a:	4b05      	ldr	r3, [pc, #20]	; (800aa80 <xTaskGetTickCount+0x1c>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aa70:	687b      	ldr	r3, [r7, #4]
}
 800aa72:	4618      	mov	r0, r3
 800aa74:	370c      	adds	r7, #12
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr
 800aa7e:	bf00      	nop
 800aa80:	240017b4 	.word	0x240017b4

0800aa84 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa8a:	f001 fa85 	bl	800bf98 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800aa8e:	2300      	movs	r3, #0
 800aa90:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800aa92:	4b04      	ldr	r3, [pc, #16]	; (800aaa4 <xTaskGetTickCountFromISR+0x20>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa98:	683b      	ldr	r3, [r7, #0]
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3708      	adds	r7, #8
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop
 800aaa4:	240017b4 	.word	0x240017b4

0800aaa8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b086      	sub	sp, #24
 800aaac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aaae:	2300      	movs	r3, #0
 800aab0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aab2:	4b4f      	ldr	r3, [pc, #316]	; (800abf0 <xTaskIncrementTick+0x148>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	f040 808f 	bne.w	800abda <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aabc:	4b4d      	ldr	r3, [pc, #308]	; (800abf4 <xTaskIncrementTick+0x14c>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	3301      	adds	r3, #1
 800aac2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aac4:	4a4b      	ldr	r2, [pc, #300]	; (800abf4 <xTaskIncrementTick+0x14c>)
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d120      	bne.n	800ab12 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aad0:	4b49      	ldr	r3, [pc, #292]	; (800abf8 <xTaskIncrementTick+0x150>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d00a      	beq.n	800aaf0 <xTaskIncrementTick+0x48>
	__asm volatile
 800aada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aade:	f383 8811 	msr	BASEPRI, r3
 800aae2:	f3bf 8f6f 	isb	sy
 800aae6:	f3bf 8f4f 	dsb	sy
 800aaea:	603b      	str	r3, [r7, #0]
}
 800aaec:	bf00      	nop
 800aaee:	e7fe      	b.n	800aaee <xTaskIncrementTick+0x46>
 800aaf0:	4b41      	ldr	r3, [pc, #260]	; (800abf8 <xTaskIncrementTick+0x150>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	60fb      	str	r3, [r7, #12]
 800aaf6:	4b41      	ldr	r3, [pc, #260]	; (800abfc <xTaskIncrementTick+0x154>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a3f      	ldr	r2, [pc, #252]	; (800abf8 <xTaskIncrementTick+0x150>)
 800aafc:	6013      	str	r3, [r2, #0]
 800aafe:	4a3f      	ldr	r2, [pc, #252]	; (800abfc <xTaskIncrementTick+0x154>)
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6013      	str	r3, [r2, #0]
 800ab04:	4b3e      	ldr	r3, [pc, #248]	; (800ac00 <xTaskIncrementTick+0x158>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	3301      	adds	r3, #1
 800ab0a:	4a3d      	ldr	r2, [pc, #244]	; (800ac00 <xTaskIncrementTick+0x158>)
 800ab0c:	6013      	str	r3, [r2, #0]
 800ab0e:	f000 fadb 	bl	800b0c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ab12:	4b3c      	ldr	r3, [pc, #240]	; (800ac04 <xTaskIncrementTick+0x15c>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	693a      	ldr	r2, [r7, #16]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d349      	bcc.n	800abb0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab1c:	4b36      	ldr	r3, [pc, #216]	; (800abf8 <xTaskIncrementTick+0x150>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d104      	bne.n	800ab30 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab26:	4b37      	ldr	r3, [pc, #220]	; (800ac04 <xTaskIncrementTick+0x15c>)
 800ab28:	f04f 32ff 	mov.w	r2, #4294967295
 800ab2c:	601a      	str	r2, [r3, #0]
					break;
 800ab2e:	e03f      	b.n	800abb0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab30:	4b31      	ldr	r3, [pc, #196]	; (800abf8 <xTaskIncrementTick+0x150>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	68db      	ldr	r3, [r3, #12]
 800ab38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	685b      	ldr	r3, [r3, #4]
 800ab3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ab40:	693a      	ldr	r2, [r7, #16]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d203      	bcs.n	800ab50 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ab48:	4a2e      	ldr	r2, [pc, #184]	; (800ac04 <xTaskIncrementTick+0x15c>)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ab4e:	e02f      	b.n	800abb0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	3304      	adds	r3, #4
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7fe fb8f 	bl	8009278 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d004      	beq.n	800ab6c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	3318      	adds	r3, #24
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7fe fb86 	bl	8009278 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab70:	4b25      	ldr	r3, [pc, #148]	; (800ac08 <xTaskIncrementTick+0x160>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d903      	bls.n	800ab80 <xTaskIncrementTick+0xd8>
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab7c:	4a22      	ldr	r2, [pc, #136]	; (800ac08 <xTaskIncrementTick+0x160>)
 800ab7e:	6013      	str	r3, [r2, #0]
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab84:	4613      	mov	r3, r2
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	4413      	add	r3, r2
 800ab8a:	009b      	lsls	r3, r3, #2
 800ab8c:	4a1f      	ldr	r2, [pc, #124]	; (800ac0c <xTaskIncrementTick+0x164>)
 800ab8e:	441a      	add	r2, r3
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	3304      	adds	r3, #4
 800ab94:	4619      	mov	r1, r3
 800ab96:	4610      	mov	r0, r2
 800ab98:	f7fe fb11 	bl	80091be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aba0:	4b1b      	ldr	r3, [pc, #108]	; (800ac10 <xTaskIncrementTick+0x168>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d3b8      	bcc.n	800ab1c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800abaa:	2301      	movs	r3, #1
 800abac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abae:	e7b5      	b.n	800ab1c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800abb0:	4b17      	ldr	r3, [pc, #92]	; (800ac10 <xTaskIncrementTick+0x168>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abb6:	4915      	ldr	r1, [pc, #84]	; (800ac0c <xTaskIncrementTick+0x164>)
 800abb8:	4613      	mov	r3, r2
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	4413      	add	r3, r2
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	440b      	add	r3, r1
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d901      	bls.n	800abcc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800abc8:	2301      	movs	r3, #1
 800abca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800abcc:	4b11      	ldr	r3, [pc, #68]	; (800ac14 <xTaskIncrementTick+0x16c>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d007      	beq.n	800abe4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800abd4:	2301      	movs	r3, #1
 800abd6:	617b      	str	r3, [r7, #20]
 800abd8:	e004      	b.n	800abe4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800abda:	4b0f      	ldr	r3, [pc, #60]	; (800ac18 <xTaskIncrementTick+0x170>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	3301      	adds	r3, #1
 800abe0:	4a0d      	ldr	r2, [pc, #52]	; (800ac18 <xTaskIncrementTick+0x170>)
 800abe2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800abe4:	697b      	ldr	r3, [r7, #20]
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3718      	adds	r7, #24
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	240017d8 	.word	0x240017d8
 800abf4:	240017b4 	.word	0x240017b4
 800abf8:	24001768 	.word	0x24001768
 800abfc:	2400176c 	.word	0x2400176c
 800ac00:	240017c8 	.word	0x240017c8
 800ac04:	240017d0 	.word	0x240017d0
 800ac08:	240017b8 	.word	0x240017b8
 800ac0c:	240012e0 	.word	0x240012e0
 800ac10:	240012dc 	.word	0x240012dc
 800ac14:	240017c4 	.word	0x240017c4
 800ac18:	240017c0 	.word	0x240017c0

0800ac1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b085      	sub	sp, #20
 800ac20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ac22:	4b2a      	ldr	r3, [pc, #168]	; (800accc <vTaskSwitchContext+0xb0>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d003      	beq.n	800ac32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ac2a:	4b29      	ldr	r3, [pc, #164]	; (800acd0 <vTaskSwitchContext+0xb4>)
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ac30:	e046      	b.n	800acc0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ac32:	4b27      	ldr	r3, [pc, #156]	; (800acd0 <vTaskSwitchContext+0xb4>)
 800ac34:	2200      	movs	r2, #0
 800ac36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac38:	4b26      	ldr	r3, [pc, #152]	; (800acd4 <vTaskSwitchContext+0xb8>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	60fb      	str	r3, [r7, #12]
 800ac3e:	e010      	b.n	800ac62 <vTaskSwitchContext+0x46>
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d10a      	bne.n	800ac5c <vTaskSwitchContext+0x40>
	__asm volatile
 800ac46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac4a:	f383 8811 	msr	BASEPRI, r3
 800ac4e:	f3bf 8f6f 	isb	sy
 800ac52:	f3bf 8f4f 	dsb	sy
 800ac56:	607b      	str	r3, [r7, #4]
}
 800ac58:	bf00      	nop
 800ac5a:	e7fe      	b.n	800ac5a <vTaskSwitchContext+0x3e>
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	3b01      	subs	r3, #1
 800ac60:	60fb      	str	r3, [r7, #12]
 800ac62:	491d      	ldr	r1, [pc, #116]	; (800acd8 <vTaskSwitchContext+0xbc>)
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	4613      	mov	r3, r2
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	4413      	add	r3, r2
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	440b      	add	r3, r1
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d0e4      	beq.n	800ac40 <vTaskSwitchContext+0x24>
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	4613      	mov	r3, r2
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	4413      	add	r3, r2
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	4a15      	ldr	r2, [pc, #84]	; (800acd8 <vTaskSwitchContext+0xbc>)
 800ac82:	4413      	add	r3, r2
 800ac84:	60bb      	str	r3, [r7, #8]
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	685a      	ldr	r2, [r3, #4]
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	605a      	str	r2, [r3, #4]
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	685a      	ldr	r2, [r3, #4]
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	3308      	adds	r3, #8
 800ac98:	429a      	cmp	r2, r3
 800ac9a:	d104      	bne.n	800aca6 <vTaskSwitchContext+0x8a>
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	685a      	ldr	r2, [r3, #4]
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	605a      	str	r2, [r3, #4]
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	685b      	ldr	r3, [r3, #4]
 800acaa:	68db      	ldr	r3, [r3, #12]
 800acac:	4a0b      	ldr	r2, [pc, #44]	; (800acdc <vTaskSwitchContext+0xc0>)
 800acae:	6013      	str	r3, [r2, #0]
 800acb0:	4a08      	ldr	r2, [pc, #32]	; (800acd4 <vTaskSwitchContext+0xb8>)
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800acb6:	4b09      	ldr	r3, [pc, #36]	; (800acdc <vTaskSwitchContext+0xc0>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	3354      	adds	r3, #84	; 0x54
 800acbc:	4a08      	ldr	r2, [pc, #32]	; (800ace0 <vTaskSwitchContext+0xc4>)
 800acbe:	6013      	str	r3, [r2, #0]
}
 800acc0:	bf00      	nop
 800acc2:	3714      	adds	r7, #20
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr
 800accc:	240017d8 	.word	0x240017d8
 800acd0:	240017c4 	.word	0x240017c4
 800acd4:	240017b8 	.word	0x240017b8
 800acd8:	240012e0 	.word	0x240012e0
 800acdc:	240012dc 	.word	0x240012dc
 800ace0:	24000038 	.word	0x24000038

0800ace4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b084      	sub	sp, #16
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d10a      	bne.n	800ad0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800acf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf8:	f383 8811 	msr	BASEPRI, r3
 800acfc:	f3bf 8f6f 	isb	sy
 800ad00:	f3bf 8f4f 	dsb	sy
 800ad04:	60fb      	str	r3, [r7, #12]
}
 800ad06:	bf00      	nop
 800ad08:	e7fe      	b.n	800ad08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad0a:	4b07      	ldr	r3, [pc, #28]	; (800ad28 <vTaskPlaceOnEventList+0x44>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	3318      	adds	r3, #24
 800ad10:	4619      	mov	r1, r3
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f7fe fa77 	bl	8009206 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ad18:	2101      	movs	r1, #1
 800ad1a:	6838      	ldr	r0, [r7, #0]
 800ad1c:	f000 fb8e 	bl	800b43c <prvAddCurrentTaskToDelayedList>
}
 800ad20:	bf00      	nop
 800ad22:	3710      	adds	r7, #16
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	240012dc 	.word	0x240012dc

0800ad2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b086      	sub	sp, #24
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d10a      	bne.n	800ad54 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ad3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad42:	f383 8811 	msr	BASEPRI, r3
 800ad46:	f3bf 8f6f 	isb	sy
 800ad4a:	f3bf 8f4f 	dsb	sy
 800ad4e:	617b      	str	r3, [r7, #20]
}
 800ad50:	bf00      	nop
 800ad52:	e7fe      	b.n	800ad52 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad54:	4b0a      	ldr	r3, [pc, #40]	; (800ad80 <vTaskPlaceOnEventListRestricted+0x54>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	3318      	adds	r3, #24
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f7fe fa2e 	bl	80091be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d002      	beq.n	800ad6e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ad68:	f04f 33ff 	mov.w	r3, #4294967295
 800ad6c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ad6e:	6879      	ldr	r1, [r7, #4]
 800ad70:	68b8      	ldr	r0, [r7, #8]
 800ad72:	f000 fb63 	bl	800b43c <prvAddCurrentTaskToDelayedList>
	}
 800ad76:	bf00      	nop
 800ad78:	3718      	adds	r7, #24
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	240012dc 	.word	0x240012dc

0800ad84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b086      	sub	sp, #24
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d10a      	bne.n	800adb0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ad9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9e:	f383 8811 	msr	BASEPRI, r3
 800ada2:	f3bf 8f6f 	isb	sy
 800ada6:	f3bf 8f4f 	dsb	sy
 800adaa:	60fb      	str	r3, [r7, #12]
}
 800adac:	bf00      	nop
 800adae:	e7fe      	b.n	800adae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	3318      	adds	r3, #24
 800adb4:	4618      	mov	r0, r3
 800adb6:	f7fe fa5f 	bl	8009278 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adba:	4b1e      	ldr	r3, [pc, #120]	; (800ae34 <xTaskRemoveFromEventList+0xb0>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d11d      	bne.n	800adfe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	3304      	adds	r3, #4
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7fe fa56 	bl	8009278 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800add0:	4b19      	ldr	r3, [pc, #100]	; (800ae38 <xTaskRemoveFromEventList+0xb4>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	429a      	cmp	r2, r3
 800add6:	d903      	bls.n	800ade0 <xTaskRemoveFromEventList+0x5c>
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800addc:	4a16      	ldr	r2, [pc, #88]	; (800ae38 <xTaskRemoveFromEventList+0xb4>)
 800adde:	6013      	str	r3, [r2, #0]
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade4:	4613      	mov	r3, r2
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	4413      	add	r3, r2
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	4a13      	ldr	r2, [pc, #76]	; (800ae3c <xTaskRemoveFromEventList+0xb8>)
 800adee:	441a      	add	r2, r3
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	3304      	adds	r3, #4
 800adf4:	4619      	mov	r1, r3
 800adf6:	4610      	mov	r0, r2
 800adf8:	f7fe f9e1 	bl	80091be <vListInsertEnd>
 800adfc:	e005      	b.n	800ae0a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	3318      	adds	r3, #24
 800ae02:	4619      	mov	r1, r3
 800ae04:	480e      	ldr	r0, [pc, #56]	; (800ae40 <xTaskRemoveFromEventList+0xbc>)
 800ae06:	f7fe f9da 	bl	80091be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae0e:	4b0d      	ldr	r3, [pc, #52]	; (800ae44 <xTaskRemoveFromEventList+0xc0>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d905      	bls.n	800ae24 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ae1c:	4b0a      	ldr	r3, [pc, #40]	; (800ae48 <xTaskRemoveFromEventList+0xc4>)
 800ae1e:	2201      	movs	r2, #1
 800ae20:	601a      	str	r2, [r3, #0]
 800ae22:	e001      	b.n	800ae28 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ae24:	2300      	movs	r3, #0
 800ae26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ae28:	697b      	ldr	r3, [r7, #20]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3718      	adds	r7, #24
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	240017d8 	.word	0x240017d8
 800ae38:	240017b8 	.word	0x240017b8
 800ae3c:	240012e0 	.word	0x240012e0
 800ae40:	24001770 	.word	0x24001770
 800ae44:	240012dc 	.word	0x240012dc
 800ae48:	240017c4 	.word	0x240017c4

0800ae4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b083      	sub	sp, #12
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae54:	4b06      	ldr	r3, [pc, #24]	; (800ae70 <vTaskInternalSetTimeOutState+0x24>)
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae5c:	4b05      	ldr	r3, [pc, #20]	; (800ae74 <vTaskInternalSetTimeOutState+0x28>)
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	605a      	str	r2, [r3, #4]
}
 800ae64:	bf00      	nop
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr
 800ae70:	240017c8 	.word	0x240017c8
 800ae74:	240017b4 	.word	0x240017b4

0800ae78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b088      	sub	sp, #32
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d10a      	bne.n	800ae9e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ae88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8c:	f383 8811 	msr	BASEPRI, r3
 800ae90:	f3bf 8f6f 	isb	sy
 800ae94:	f3bf 8f4f 	dsb	sy
 800ae98:	613b      	str	r3, [r7, #16]
}
 800ae9a:	bf00      	nop
 800ae9c:	e7fe      	b.n	800ae9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d10a      	bne.n	800aeba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800aea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea8:	f383 8811 	msr	BASEPRI, r3
 800aeac:	f3bf 8f6f 	isb	sy
 800aeb0:	f3bf 8f4f 	dsb	sy
 800aeb4:	60fb      	str	r3, [r7, #12]
}
 800aeb6:	bf00      	nop
 800aeb8:	e7fe      	b.n	800aeb8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800aeba:	f000 ff8b 	bl	800bdd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aebe:	4b1d      	ldr	r3, [pc, #116]	; (800af34 <xTaskCheckForTimeOut+0xbc>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	69ba      	ldr	r2, [r7, #24]
 800aeca:	1ad3      	subs	r3, r2, r3
 800aecc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aed6:	d102      	bne.n	800aede <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aed8:	2300      	movs	r3, #0
 800aeda:	61fb      	str	r3, [r7, #28]
 800aedc:	e023      	b.n	800af26 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	4b15      	ldr	r3, [pc, #84]	; (800af38 <xTaskCheckForTimeOut+0xc0>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	429a      	cmp	r2, r3
 800aee8:	d007      	beq.n	800aefa <xTaskCheckForTimeOut+0x82>
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	69ba      	ldr	r2, [r7, #24]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d302      	bcc.n	800aefa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aef4:	2301      	movs	r3, #1
 800aef6:	61fb      	str	r3, [r7, #28]
 800aef8:	e015      	b.n	800af26 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	697a      	ldr	r2, [r7, #20]
 800af00:	429a      	cmp	r2, r3
 800af02:	d20b      	bcs.n	800af1c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	681a      	ldr	r2, [r3, #0]
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	1ad2      	subs	r2, r2, r3
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f7ff ff9b 	bl	800ae4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800af16:	2300      	movs	r3, #0
 800af18:	61fb      	str	r3, [r7, #28]
 800af1a:	e004      	b.n	800af26 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	2200      	movs	r2, #0
 800af20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800af22:	2301      	movs	r3, #1
 800af24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800af26:	f000 ff85 	bl	800be34 <vPortExitCritical>

	return xReturn;
 800af2a:	69fb      	ldr	r3, [r7, #28]
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3720      	adds	r7, #32
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}
 800af34:	240017b4 	.word	0x240017b4
 800af38:	240017c8 	.word	0x240017c8

0800af3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af3c:	b480      	push	{r7}
 800af3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800af40:	4b03      	ldr	r3, [pc, #12]	; (800af50 <vTaskMissedYield+0x14>)
 800af42:	2201      	movs	r2, #1
 800af44:	601a      	str	r2, [r3, #0]
}
 800af46:	bf00      	nop
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr
 800af50:	240017c4 	.word	0x240017c4

0800af54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b082      	sub	sp, #8
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af5c:	f000 f852 	bl	800b004 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af60:	4b06      	ldr	r3, [pc, #24]	; (800af7c <prvIdleTask+0x28>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2b01      	cmp	r3, #1
 800af66:	d9f9      	bls.n	800af5c <prvIdleTask+0x8>
			{
				taskYIELD();
 800af68:	4b05      	ldr	r3, [pc, #20]	; (800af80 <prvIdleTask+0x2c>)
 800af6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af6e:	601a      	str	r2, [r3, #0]
 800af70:	f3bf 8f4f 	dsb	sy
 800af74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800af78:	e7f0      	b.n	800af5c <prvIdleTask+0x8>
 800af7a:	bf00      	nop
 800af7c:	240012e0 	.word	0x240012e0
 800af80:	e000ed04 	.word	0xe000ed04

0800af84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af8a:	2300      	movs	r3, #0
 800af8c:	607b      	str	r3, [r7, #4]
 800af8e:	e00c      	b.n	800afaa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	4613      	mov	r3, r2
 800af94:	009b      	lsls	r3, r3, #2
 800af96:	4413      	add	r3, r2
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	4a12      	ldr	r2, [pc, #72]	; (800afe4 <prvInitialiseTaskLists+0x60>)
 800af9c:	4413      	add	r3, r2
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7fe f8e0 	bl	8009164 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	3301      	adds	r3, #1
 800afa8:	607b      	str	r3, [r7, #4]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2b37      	cmp	r3, #55	; 0x37
 800afae:	d9ef      	bls.n	800af90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800afb0:	480d      	ldr	r0, [pc, #52]	; (800afe8 <prvInitialiseTaskLists+0x64>)
 800afb2:	f7fe f8d7 	bl	8009164 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800afb6:	480d      	ldr	r0, [pc, #52]	; (800afec <prvInitialiseTaskLists+0x68>)
 800afb8:	f7fe f8d4 	bl	8009164 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800afbc:	480c      	ldr	r0, [pc, #48]	; (800aff0 <prvInitialiseTaskLists+0x6c>)
 800afbe:	f7fe f8d1 	bl	8009164 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800afc2:	480c      	ldr	r0, [pc, #48]	; (800aff4 <prvInitialiseTaskLists+0x70>)
 800afc4:	f7fe f8ce 	bl	8009164 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800afc8:	480b      	ldr	r0, [pc, #44]	; (800aff8 <prvInitialiseTaskLists+0x74>)
 800afca:	f7fe f8cb 	bl	8009164 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800afce:	4b0b      	ldr	r3, [pc, #44]	; (800affc <prvInitialiseTaskLists+0x78>)
 800afd0:	4a05      	ldr	r2, [pc, #20]	; (800afe8 <prvInitialiseTaskLists+0x64>)
 800afd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800afd4:	4b0a      	ldr	r3, [pc, #40]	; (800b000 <prvInitialiseTaskLists+0x7c>)
 800afd6:	4a05      	ldr	r2, [pc, #20]	; (800afec <prvInitialiseTaskLists+0x68>)
 800afd8:	601a      	str	r2, [r3, #0]
}
 800afda:	bf00      	nop
 800afdc:	3708      	adds	r7, #8
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	240012e0 	.word	0x240012e0
 800afe8:	24001740 	.word	0x24001740
 800afec:	24001754 	.word	0x24001754
 800aff0:	24001770 	.word	0x24001770
 800aff4:	24001784 	.word	0x24001784
 800aff8:	2400179c 	.word	0x2400179c
 800affc:	24001768 	.word	0x24001768
 800b000:	2400176c 	.word	0x2400176c

0800b004 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b00a:	e019      	b.n	800b040 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b00c:	f000 fee2 	bl	800bdd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b010:	4b10      	ldr	r3, [pc, #64]	; (800b054 <prvCheckTasksWaitingTermination+0x50>)
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	68db      	ldr	r3, [r3, #12]
 800b016:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	3304      	adds	r3, #4
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7fe f92b 	bl	8009278 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b022:	4b0d      	ldr	r3, [pc, #52]	; (800b058 <prvCheckTasksWaitingTermination+0x54>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	3b01      	subs	r3, #1
 800b028:	4a0b      	ldr	r2, [pc, #44]	; (800b058 <prvCheckTasksWaitingTermination+0x54>)
 800b02a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b02c:	4b0b      	ldr	r3, [pc, #44]	; (800b05c <prvCheckTasksWaitingTermination+0x58>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	3b01      	subs	r3, #1
 800b032:	4a0a      	ldr	r2, [pc, #40]	; (800b05c <prvCheckTasksWaitingTermination+0x58>)
 800b034:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b036:	f000 fefd 	bl	800be34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 f810 	bl	800b060 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b040:	4b06      	ldr	r3, [pc, #24]	; (800b05c <prvCheckTasksWaitingTermination+0x58>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d1e1      	bne.n	800b00c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b048:	bf00      	nop
 800b04a:	bf00      	nop
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	24001784 	.word	0x24001784
 800b058:	240017b0 	.word	0x240017b0
 800b05c:	24001798 	.word	0x24001798

0800b060 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	3354      	adds	r3, #84	; 0x54
 800b06c:	4618      	mov	r0, r3
 800b06e:	f00d fddb 	bl	8018c28 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d108      	bne.n	800b08e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b080:	4618      	mov	r0, r3
 800b082:	f001 f895 	bl	800c1b0 <vPortFree>
				vPortFree( pxTCB );
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f001 f892 	bl	800c1b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b08c:	e018      	b.n	800b0c0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b094:	2b01      	cmp	r3, #1
 800b096:	d103      	bne.n	800b0a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f001 f889 	bl	800c1b0 <vPortFree>
	}
 800b09e:	e00f      	b.n	800b0c0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b0a6:	2b02      	cmp	r3, #2
 800b0a8:	d00a      	beq.n	800b0c0 <prvDeleteTCB+0x60>
	__asm volatile
 800b0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ae:	f383 8811 	msr	BASEPRI, r3
 800b0b2:	f3bf 8f6f 	isb	sy
 800b0b6:	f3bf 8f4f 	dsb	sy
 800b0ba:	60fb      	str	r3, [r7, #12]
}
 800b0bc:	bf00      	nop
 800b0be:	e7fe      	b.n	800b0be <prvDeleteTCB+0x5e>
	}
 800b0c0:	bf00      	nop
 800b0c2:	3710      	adds	r7, #16
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0ce:	4b0c      	ldr	r3, [pc, #48]	; (800b100 <prvResetNextTaskUnblockTime+0x38>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d104      	bne.n	800b0e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b0d8:	4b0a      	ldr	r3, [pc, #40]	; (800b104 <prvResetNextTaskUnblockTime+0x3c>)
 800b0da:	f04f 32ff 	mov.w	r2, #4294967295
 800b0de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b0e0:	e008      	b.n	800b0f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0e2:	4b07      	ldr	r3, [pc, #28]	; (800b100 <prvResetNextTaskUnblockTime+0x38>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	68db      	ldr	r3, [r3, #12]
 800b0e8:	68db      	ldr	r3, [r3, #12]
 800b0ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	4a04      	ldr	r2, [pc, #16]	; (800b104 <prvResetNextTaskUnblockTime+0x3c>)
 800b0f2:	6013      	str	r3, [r2, #0]
}
 800b0f4:	bf00      	nop
 800b0f6:	370c      	adds	r7, #12
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr
 800b100:	24001768 	.word	0x24001768
 800b104:	240017d0 	.word	0x240017d0

0800b108 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b10e:	4b05      	ldr	r3, [pc, #20]	; (800b124 <xTaskGetCurrentTaskHandle+0x1c>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b114:	687b      	ldr	r3, [r7, #4]
	}
 800b116:	4618      	mov	r0, r3
 800b118:	370c      	adds	r7, #12
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop
 800b124:	240012dc 	.word	0x240012dc

0800b128 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b12e:	4b0b      	ldr	r3, [pc, #44]	; (800b15c <xTaskGetSchedulerState+0x34>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d102      	bne.n	800b13c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b136:	2301      	movs	r3, #1
 800b138:	607b      	str	r3, [r7, #4]
 800b13a:	e008      	b.n	800b14e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b13c:	4b08      	ldr	r3, [pc, #32]	; (800b160 <xTaskGetSchedulerState+0x38>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d102      	bne.n	800b14a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b144:	2302      	movs	r3, #2
 800b146:	607b      	str	r3, [r7, #4]
 800b148:	e001      	b.n	800b14e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b14a:	2300      	movs	r3, #0
 800b14c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b14e:	687b      	ldr	r3, [r7, #4]
	}
 800b150:	4618      	mov	r0, r3
 800b152:	370c      	adds	r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr
 800b15c:	240017bc 	.word	0x240017bc
 800b160:	240017d8 	.word	0x240017d8

0800b164 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b170:	2300      	movs	r3, #0
 800b172:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d051      	beq.n	800b21e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b17e:	4b2a      	ldr	r3, [pc, #168]	; (800b228 <xTaskPriorityInherit+0xc4>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b184:	429a      	cmp	r2, r3
 800b186:	d241      	bcs.n	800b20c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	699b      	ldr	r3, [r3, #24]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	db06      	blt.n	800b19e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b190:	4b25      	ldr	r3, [pc, #148]	; (800b228 <xTaskPriorityInherit+0xc4>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b196:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	6959      	ldr	r1, [r3, #20]
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a6:	4613      	mov	r3, r2
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	4413      	add	r3, r2
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	4a1f      	ldr	r2, [pc, #124]	; (800b22c <xTaskPriorityInherit+0xc8>)
 800b1b0:	4413      	add	r3, r2
 800b1b2:	4299      	cmp	r1, r3
 800b1b4:	d122      	bne.n	800b1fc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	3304      	adds	r3, #4
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7fe f85c 	bl	8009278 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b1c0:	4b19      	ldr	r3, [pc, #100]	; (800b228 <xTaskPriorityInherit+0xc4>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ce:	4b18      	ldr	r3, [pc, #96]	; (800b230 <xTaskPriorityInherit+0xcc>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d903      	bls.n	800b1de <xTaskPriorityInherit+0x7a>
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1da:	4a15      	ldr	r2, [pc, #84]	; (800b230 <xTaskPriorityInherit+0xcc>)
 800b1dc:	6013      	str	r3, [r2, #0]
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1e2:	4613      	mov	r3, r2
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	4413      	add	r3, r2
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	4a10      	ldr	r2, [pc, #64]	; (800b22c <xTaskPriorityInherit+0xc8>)
 800b1ec:	441a      	add	r2, r3
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	4610      	mov	r0, r2
 800b1f6:	f7fd ffe2 	bl	80091be <vListInsertEnd>
 800b1fa:	e004      	b.n	800b206 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b1fc:	4b0a      	ldr	r3, [pc, #40]	; (800b228 <xTaskPriorityInherit+0xc4>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b206:	2301      	movs	r3, #1
 800b208:	60fb      	str	r3, [r7, #12]
 800b20a:	e008      	b.n	800b21e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b210:	4b05      	ldr	r3, [pc, #20]	; (800b228 <xTaskPriorityInherit+0xc4>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b216:	429a      	cmp	r2, r3
 800b218:	d201      	bcs.n	800b21e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b21a:	2301      	movs	r3, #1
 800b21c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b21e:	68fb      	ldr	r3, [r7, #12]
	}
 800b220:	4618      	mov	r0, r3
 800b222:	3710      	adds	r7, #16
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}
 800b228:	240012dc 	.word	0x240012dc
 800b22c:	240012e0 	.word	0x240012e0
 800b230:	240017b8 	.word	0x240017b8

0800b234 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b234:	b580      	push	{r7, lr}
 800b236:	b086      	sub	sp, #24
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b240:	2300      	movs	r3, #0
 800b242:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d056      	beq.n	800b2f8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b24a:	4b2e      	ldr	r3, [pc, #184]	; (800b304 <xTaskPriorityDisinherit+0xd0>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	693a      	ldr	r2, [r7, #16]
 800b250:	429a      	cmp	r2, r3
 800b252:	d00a      	beq.n	800b26a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b258:	f383 8811 	msr	BASEPRI, r3
 800b25c:	f3bf 8f6f 	isb	sy
 800b260:	f3bf 8f4f 	dsb	sy
 800b264:	60fb      	str	r3, [r7, #12]
}
 800b266:	bf00      	nop
 800b268:	e7fe      	b.n	800b268 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d10a      	bne.n	800b288 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b276:	f383 8811 	msr	BASEPRI, r3
 800b27a:	f3bf 8f6f 	isb	sy
 800b27e:	f3bf 8f4f 	dsb	sy
 800b282:	60bb      	str	r3, [r7, #8]
}
 800b284:	bf00      	nop
 800b286:	e7fe      	b.n	800b286 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b28c:	1e5a      	subs	r2, r3, #1
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d02c      	beq.n	800b2f8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d128      	bne.n	800b2f8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	3304      	adds	r3, #4
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	f7fd ffe4 	bl	8009278 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c8:	4b0f      	ldr	r3, [pc, #60]	; (800b308 <xTaskPriorityDisinherit+0xd4>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d903      	bls.n	800b2d8 <xTaskPriorityDisinherit+0xa4>
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d4:	4a0c      	ldr	r2, [pc, #48]	; (800b308 <xTaskPriorityDisinherit+0xd4>)
 800b2d6:	6013      	str	r3, [r2, #0]
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2dc:	4613      	mov	r3, r2
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	4413      	add	r3, r2
 800b2e2:	009b      	lsls	r3, r3, #2
 800b2e4:	4a09      	ldr	r2, [pc, #36]	; (800b30c <xTaskPriorityDisinherit+0xd8>)
 800b2e6:	441a      	add	r2, r3
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	3304      	adds	r3, #4
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	4610      	mov	r0, r2
 800b2f0:	f7fd ff65 	bl	80091be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b2f8:	697b      	ldr	r3, [r7, #20]
	}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3718      	adds	r7, #24
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	240012dc 	.word	0x240012dc
 800b308:	240017b8 	.word	0x240017b8
 800b30c:	240012e0 	.word	0x240012e0

0800b310 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b310:	b580      	push	{r7, lr}
 800b312:	b088      	sub	sp, #32
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b31e:	2301      	movs	r3, #1
 800b320:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d06a      	beq.n	800b3fe <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b328:	69bb      	ldr	r3, [r7, #24]
 800b32a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d10a      	bne.n	800b346 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b334:	f383 8811 	msr	BASEPRI, r3
 800b338:	f3bf 8f6f 	isb	sy
 800b33c:	f3bf 8f4f 	dsb	sy
 800b340:	60fb      	str	r3, [r7, #12]
}
 800b342:	bf00      	nop
 800b344:	e7fe      	b.n	800b344 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b346:	69bb      	ldr	r3, [r7, #24]
 800b348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b34a:	683a      	ldr	r2, [r7, #0]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d902      	bls.n	800b356 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	61fb      	str	r3, [r7, #28]
 800b354:	e002      	b.n	800b35c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b35a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b35c:	69bb      	ldr	r3, [r7, #24]
 800b35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b360:	69fa      	ldr	r2, [r7, #28]
 800b362:	429a      	cmp	r2, r3
 800b364:	d04b      	beq.n	800b3fe <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b36a:	697a      	ldr	r2, [r7, #20]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d146      	bne.n	800b3fe <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b370:	4b25      	ldr	r3, [pc, #148]	; (800b408 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	69ba      	ldr	r2, [r7, #24]
 800b376:	429a      	cmp	r2, r3
 800b378:	d10a      	bne.n	800b390 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37e:	f383 8811 	msr	BASEPRI, r3
 800b382:	f3bf 8f6f 	isb	sy
 800b386:	f3bf 8f4f 	dsb	sy
 800b38a:	60bb      	str	r3, [r7, #8]
}
 800b38c:	bf00      	nop
 800b38e:	e7fe      	b.n	800b38e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b394:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	69fa      	ldr	r2, [r7, #28]
 800b39a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b39c:	69bb      	ldr	r3, [r7, #24]
 800b39e:	699b      	ldr	r3, [r3, #24]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	db04      	blt.n	800b3ae <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b3ae:	69bb      	ldr	r3, [r7, #24]
 800b3b0:	6959      	ldr	r1, [r3, #20]
 800b3b2:	693a      	ldr	r2, [r7, #16]
 800b3b4:	4613      	mov	r3, r2
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	4413      	add	r3, r2
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	4a13      	ldr	r2, [pc, #76]	; (800b40c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b3be:	4413      	add	r3, r2
 800b3c0:	4299      	cmp	r1, r3
 800b3c2:	d11c      	bne.n	800b3fe <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3c4:	69bb      	ldr	r3, [r7, #24]
 800b3c6:	3304      	adds	r3, #4
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7fd ff55 	bl	8009278 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b3ce:	69bb      	ldr	r3, [r7, #24]
 800b3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d2:	4b0f      	ldr	r3, [pc, #60]	; (800b410 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d903      	bls.n	800b3e2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b3da:	69bb      	ldr	r3, [r7, #24]
 800b3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3de:	4a0c      	ldr	r2, [pc, #48]	; (800b410 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b3e0:	6013      	str	r3, [r2, #0]
 800b3e2:	69bb      	ldr	r3, [r7, #24]
 800b3e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3e6:	4613      	mov	r3, r2
 800b3e8:	009b      	lsls	r3, r3, #2
 800b3ea:	4413      	add	r3, r2
 800b3ec:	009b      	lsls	r3, r3, #2
 800b3ee:	4a07      	ldr	r2, [pc, #28]	; (800b40c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b3f0:	441a      	add	r2, r3
 800b3f2:	69bb      	ldr	r3, [r7, #24]
 800b3f4:	3304      	adds	r3, #4
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	4610      	mov	r0, r2
 800b3fa:	f7fd fee0 	bl	80091be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b3fe:	bf00      	nop
 800b400:	3720      	adds	r7, #32
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	240012dc 	.word	0x240012dc
 800b40c:	240012e0 	.word	0x240012e0
 800b410:	240017b8 	.word	0x240017b8

0800b414 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b414:	b480      	push	{r7}
 800b416:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b418:	4b07      	ldr	r3, [pc, #28]	; (800b438 <pvTaskIncrementMutexHeldCount+0x24>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d004      	beq.n	800b42a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b420:	4b05      	ldr	r3, [pc, #20]	; (800b438 <pvTaskIncrementMutexHeldCount+0x24>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b426:	3201      	adds	r2, #1
 800b428:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b42a:	4b03      	ldr	r3, [pc, #12]	; (800b438 <pvTaskIncrementMutexHeldCount+0x24>)
 800b42c:	681b      	ldr	r3, [r3, #0]
	}
 800b42e:	4618      	mov	r0, r3
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr
 800b438:	240012dc 	.word	0x240012dc

0800b43c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b084      	sub	sp, #16
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b446:	4b21      	ldr	r3, [pc, #132]	; (800b4cc <prvAddCurrentTaskToDelayedList+0x90>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b44c:	4b20      	ldr	r3, [pc, #128]	; (800b4d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	3304      	adds	r3, #4
 800b452:	4618      	mov	r0, r3
 800b454:	f7fd ff10 	bl	8009278 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b45e:	d10a      	bne.n	800b476 <prvAddCurrentTaskToDelayedList+0x3a>
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d007      	beq.n	800b476 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b466:	4b1a      	ldr	r3, [pc, #104]	; (800b4d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	3304      	adds	r3, #4
 800b46c:	4619      	mov	r1, r3
 800b46e:	4819      	ldr	r0, [pc, #100]	; (800b4d4 <prvAddCurrentTaskToDelayedList+0x98>)
 800b470:	f7fd fea5 	bl	80091be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b474:	e026      	b.n	800b4c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b476:	68fa      	ldr	r2, [r7, #12]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	4413      	add	r3, r2
 800b47c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b47e:	4b14      	ldr	r3, [pc, #80]	; (800b4d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	68ba      	ldr	r2, [r7, #8]
 800b484:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b486:	68ba      	ldr	r2, [r7, #8]
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d209      	bcs.n	800b4a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b48e:	4b12      	ldr	r3, [pc, #72]	; (800b4d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	4b0f      	ldr	r3, [pc, #60]	; (800b4d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	3304      	adds	r3, #4
 800b498:	4619      	mov	r1, r3
 800b49a:	4610      	mov	r0, r2
 800b49c:	f7fd feb3 	bl	8009206 <vListInsert>
}
 800b4a0:	e010      	b.n	800b4c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4a2:	4b0e      	ldr	r3, [pc, #56]	; (800b4dc <prvAddCurrentTaskToDelayedList+0xa0>)
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	4b0a      	ldr	r3, [pc, #40]	; (800b4d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	3304      	adds	r3, #4
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	4610      	mov	r0, r2
 800b4b0:	f7fd fea9 	bl	8009206 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b4b4:	4b0a      	ldr	r3, [pc, #40]	; (800b4e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	68ba      	ldr	r2, [r7, #8]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d202      	bcs.n	800b4c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b4be:	4a08      	ldr	r2, [pc, #32]	; (800b4e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	6013      	str	r3, [r2, #0]
}
 800b4c4:	bf00      	nop
 800b4c6:	3710      	adds	r7, #16
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	240017b4 	.word	0x240017b4
 800b4d0:	240012dc 	.word	0x240012dc
 800b4d4:	2400179c 	.word	0x2400179c
 800b4d8:	2400176c 	.word	0x2400176c
 800b4dc:	24001768 	.word	0x24001768
 800b4e0:	240017d0 	.word	0x240017d0

0800b4e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b08a      	sub	sp, #40	; 0x28
 800b4e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b4ee:	f000 fb07 	bl	800bb00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b4f2:	4b1c      	ldr	r3, [pc, #112]	; (800b564 <xTimerCreateTimerTask+0x80>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d021      	beq.n	800b53e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b4fe:	2300      	movs	r3, #0
 800b500:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b502:	1d3a      	adds	r2, r7, #4
 800b504:	f107 0108 	add.w	r1, r7, #8
 800b508:	f107 030c 	add.w	r3, r7, #12
 800b50c:	4618      	mov	r0, r3
 800b50e:	f7fd fe0f 	bl	8009130 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b512:	6879      	ldr	r1, [r7, #4]
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	68fa      	ldr	r2, [r7, #12]
 800b518:	9202      	str	r2, [sp, #8]
 800b51a:	9301      	str	r3, [sp, #4]
 800b51c:	2302      	movs	r3, #2
 800b51e:	9300      	str	r3, [sp, #0]
 800b520:	2300      	movs	r3, #0
 800b522:	460a      	mov	r2, r1
 800b524:	4910      	ldr	r1, [pc, #64]	; (800b568 <xTimerCreateTimerTask+0x84>)
 800b526:	4811      	ldr	r0, [pc, #68]	; (800b56c <xTimerCreateTimerTask+0x88>)
 800b528:	f7fe ff94 	bl	800a454 <xTaskCreateStatic>
 800b52c:	4603      	mov	r3, r0
 800b52e:	4a10      	ldr	r2, [pc, #64]	; (800b570 <xTimerCreateTimerTask+0x8c>)
 800b530:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b532:	4b0f      	ldr	r3, [pc, #60]	; (800b570 <xTimerCreateTimerTask+0x8c>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d001      	beq.n	800b53e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b53a:	2301      	movs	r3, #1
 800b53c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d10a      	bne.n	800b55a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b548:	f383 8811 	msr	BASEPRI, r3
 800b54c:	f3bf 8f6f 	isb	sy
 800b550:	f3bf 8f4f 	dsb	sy
 800b554:	613b      	str	r3, [r7, #16]
}
 800b556:	bf00      	nop
 800b558:	e7fe      	b.n	800b558 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b55a:	697b      	ldr	r3, [r7, #20]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3718      	adds	r7, #24
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	2400180c 	.word	0x2400180c
 800b568:	08019afc 	.word	0x08019afc
 800b56c:	0800b6a9 	.word	0x0800b6a9
 800b570:	24001810 	.word	0x24001810

0800b574 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b08a      	sub	sp, #40	; 0x28
 800b578:	af00      	add	r7, sp, #0
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	60b9      	str	r1, [r7, #8]
 800b57e:	607a      	str	r2, [r7, #4]
 800b580:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b582:	2300      	movs	r3, #0
 800b584:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d10a      	bne.n	800b5a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b590:	f383 8811 	msr	BASEPRI, r3
 800b594:	f3bf 8f6f 	isb	sy
 800b598:	f3bf 8f4f 	dsb	sy
 800b59c:	623b      	str	r3, [r7, #32]
}
 800b59e:	bf00      	nop
 800b5a0:	e7fe      	b.n	800b5a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b5a2:	4b1a      	ldr	r3, [pc, #104]	; (800b60c <xTimerGenericCommand+0x98>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d02a      	beq.n	800b600 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	2b05      	cmp	r3, #5
 800b5ba:	dc18      	bgt.n	800b5ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b5bc:	f7ff fdb4 	bl	800b128 <xTaskGetSchedulerState>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	2b02      	cmp	r3, #2
 800b5c4:	d109      	bne.n	800b5da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b5c6:	4b11      	ldr	r3, [pc, #68]	; (800b60c <xTimerGenericCommand+0x98>)
 800b5c8:	6818      	ldr	r0, [r3, #0]
 800b5ca:	f107 0110 	add.w	r1, r7, #16
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5d2:	f7fe f8d9 	bl	8009788 <xQueueGenericSend>
 800b5d6:	6278      	str	r0, [r7, #36]	; 0x24
 800b5d8:	e012      	b.n	800b600 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b5da:	4b0c      	ldr	r3, [pc, #48]	; (800b60c <xTimerGenericCommand+0x98>)
 800b5dc:	6818      	ldr	r0, [r3, #0]
 800b5de:	f107 0110 	add.w	r1, r7, #16
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	f7fe f8cf 	bl	8009788 <xQueueGenericSend>
 800b5ea:	6278      	str	r0, [r7, #36]	; 0x24
 800b5ec:	e008      	b.n	800b600 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b5ee:	4b07      	ldr	r3, [pc, #28]	; (800b60c <xTimerGenericCommand+0x98>)
 800b5f0:	6818      	ldr	r0, [r3, #0]
 800b5f2:	f107 0110 	add.w	r1, r7, #16
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	683a      	ldr	r2, [r7, #0]
 800b5fa:	f7fe f9c3 	bl	8009984 <xQueueGenericSendFromISR>
 800b5fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b602:	4618      	mov	r0, r3
 800b604:	3728      	adds	r7, #40	; 0x28
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	2400180c 	.word	0x2400180c

0800b610 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b088      	sub	sp, #32
 800b614:	af02      	add	r7, sp, #8
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b61a:	4b22      	ldr	r3, [pc, #136]	; (800b6a4 <prvProcessExpiredTimer+0x94>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	68db      	ldr	r3, [r3, #12]
 800b620:	68db      	ldr	r3, [r3, #12]
 800b622:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	3304      	adds	r3, #4
 800b628:	4618      	mov	r0, r3
 800b62a:	f7fd fe25 	bl	8009278 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b634:	f003 0304 	and.w	r3, r3, #4
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d022      	beq.n	800b682 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	699a      	ldr	r2, [r3, #24]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	18d1      	adds	r1, r2, r3
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	683a      	ldr	r2, [r7, #0]
 800b648:	6978      	ldr	r0, [r7, #20]
 800b64a:	f000 f8d1 	bl	800b7f0 <prvInsertTimerInActiveList>
 800b64e:	4603      	mov	r3, r0
 800b650:	2b00      	cmp	r3, #0
 800b652:	d01f      	beq.n	800b694 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b654:	2300      	movs	r3, #0
 800b656:	9300      	str	r3, [sp, #0]
 800b658:	2300      	movs	r3, #0
 800b65a:	687a      	ldr	r2, [r7, #4]
 800b65c:	2100      	movs	r1, #0
 800b65e:	6978      	ldr	r0, [r7, #20]
 800b660:	f7ff ff88 	bl	800b574 <xTimerGenericCommand>
 800b664:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d113      	bne.n	800b694 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b670:	f383 8811 	msr	BASEPRI, r3
 800b674:	f3bf 8f6f 	isb	sy
 800b678:	f3bf 8f4f 	dsb	sy
 800b67c:	60fb      	str	r3, [r7, #12]
}
 800b67e:	bf00      	nop
 800b680:	e7fe      	b.n	800b680 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b688:	f023 0301 	bic.w	r3, r3, #1
 800b68c:	b2da      	uxtb	r2, r3
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	6a1b      	ldr	r3, [r3, #32]
 800b698:	6978      	ldr	r0, [r7, #20]
 800b69a:	4798      	blx	r3
}
 800b69c:	bf00      	nop
 800b69e:	3718      	adds	r7, #24
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	24001804 	.word	0x24001804

0800b6a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b6b0:	f107 0308 	add.w	r3, r7, #8
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f000 f857 	bl	800b768 <prvGetNextExpireTime>
 800b6ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	4619      	mov	r1, r3
 800b6c0:	68f8      	ldr	r0, [r7, #12]
 800b6c2:	f000 f803 	bl	800b6cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b6c6:	f000 f8d5 	bl	800b874 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b6ca:	e7f1      	b.n	800b6b0 <prvTimerTask+0x8>

0800b6cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b6d6:	f7ff f919 	bl	800a90c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b6da:	f107 0308 	add.w	r3, r7, #8
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f000 f866 	bl	800b7b0 <prvSampleTimeNow>
 800b6e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d130      	bne.n	800b74e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d10a      	bne.n	800b708 <prvProcessTimerOrBlockTask+0x3c>
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d806      	bhi.n	800b708 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b6fa:	f7ff f915 	bl	800a928 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b6fe:	68f9      	ldr	r1, [r7, #12]
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f7ff ff85 	bl	800b610 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b706:	e024      	b.n	800b752 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d008      	beq.n	800b720 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b70e:	4b13      	ldr	r3, [pc, #76]	; (800b75c <prvProcessTimerOrBlockTask+0x90>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d101      	bne.n	800b71c <prvProcessTimerOrBlockTask+0x50>
 800b718:	2301      	movs	r3, #1
 800b71a:	e000      	b.n	800b71e <prvProcessTimerOrBlockTask+0x52>
 800b71c:	2300      	movs	r3, #0
 800b71e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b720:	4b0f      	ldr	r3, [pc, #60]	; (800b760 <prvProcessTimerOrBlockTask+0x94>)
 800b722:	6818      	ldr	r0, [r3, #0]
 800b724:	687a      	ldr	r2, [r7, #4]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	1ad3      	subs	r3, r2, r3
 800b72a:	683a      	ldr	r2, [r7, #0]
 800b72c:	4619      	mov	r1, r3
 800b72e:	f7fe fe5d 	bl	800a3ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b732:	f7ff f8f9 	bl	800a928 <xTaskResumeAll>
 800b736:	4603      	mov	r3, r0
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d10a      	bne.n	800b752 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b73c:	4b09      	ldr	r3, [pc, #36]	; (800b764 <prvProcessTimerOrBlockTask+0x98>)
 800b73e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b742:	601a      	str	r2, [r3, #0]
 800b744:	f3bf 8f4f 	dsb	sy
 800b748:	f3bf 8f6f 	isb	sy
}
 800b74c:	e001      	b.n	800b752 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b74e:	f7ff f8eb 	bl	800a928 <xTaskResumeAll>
}
 800b752:	bf00      	nop
 800b754:	3710      	adds	r7, #16
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	24001808 	.word	0x24001808
 800b760:	2400180c 	.word	0x2400180c
 800b764:	e000ed04 	.word	0xe000ed04

0800b768 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b770:	4b0e      	ldr	r3, [pc, #56]	; (800b7ac <prvGetNextExpireTime+0x44>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d101      	bne.n	800b77e <prvGetNextExpireTime+0x16>
 800b77a:	2201      	movs	r2, #1
 800b77c:	e000      	b.n	800b780 <prvGetNextExpireTime+0x18>
 800b77e:	2200      	movs	r2, #0
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d105      	bne.n	800b798 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b78c:	4b07      	ldr	r3, [pc, #28]	; (800b7ac <prvGetNextExpireTime+0x44>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	68db      	ldr	r3, [r3, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	60fb      	str	r3, [r7, #12]
 800b796:	e001      	b.n	800b79c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b798:	2300      	movs	r3, #0
 800b79a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b79c:	68fb      	ldr	r3, [r7, #12]
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3714      	adds	r7, #20
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr
 800b7aa:	bf00      	nop
 800b7ac:	24001804 	.word	0x24001804

0800b7b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b7b8:	f7ff f954 	bl	800aa64 <xTaskGetTickCount>
 800b7bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b7be:	4b0b      	ldr	r3, [pc, #44]	; (800b7ec <prvSampleTimeNow+0x3c>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	68fa      	ldr	r2, [r7, #12]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d205      	bcs.n	800b7d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b7c8:	f000 f936 	bl	800ba38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	601a      	str	r2, [r3, #0]
 800b7d2:	e002      	b.n	800b7da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b7da:	4a04      	ldr	r2, [pc, #16]	; (800b7ec <prvSampleTimeNow+0x3c>)
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3710      	adds	r7, #16
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	24001814 	.word	0x24001814

0800b7f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	60f8      	str	r0, [r7, #12]
 800b7f8:	60b9      	str	r1, [r7, #8]
 800b7fa:	607a      	str	r2, [r7, #4]
 800b7fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b7fe:	2300      	movs	r3, #0
 800b800:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	68ba      	ldr	r2, [r7, #8]
 800b806:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	68fa      	ldr	r2, [r7, #12]
 800b80c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b80e:	68ba      	ldr	r2, [r7, #8]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	429a      	cmp	r2, r3
 800b814:	d812      	bhi.n	800b83c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	1ad2      	subs	r2, r2, r3
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	699b      	ldr	r3, [r3, #24]
 800b820:	429a      	cmp	r2, r3
 800b822:	d302      	bcc.n	800b82a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b824:	2301      	movs	r3, #1
 800b826:	617b      	str	r3, [r7, #20]
 800b828:	e01b      	b.n	800b862 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b82a:	4b10      	ldr	r3, [pc, #64]	; (800b86c <prvInsertTimerInActiveList+0x7c>)
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	3304      	adds	r3, #4
 800b832:	4619      	mov	r1, r3
 800b834:	4610      	mov	r0, r2
 800b836:	f7fd fce6 	bl	8009206 <vListInsert>
 800b83a:	e012      	b.n	800b862 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	429a      	cmp	r2, r3
 800b842:	d206      	bcs.n	800b852 <prvInsertTimerInActiveList+0x62>
 800b844:	68ba      	ldr	r2, [r7, #8]
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d302      	bcc.n	800b852 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b84c:	2301      	movs	r3, #1
 800b84e:	617b      	str	r3, [r7, #20]
 800b850:	e007      	b.n	800b862 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b852:	4b07      	ldr	r3, [pc, #28]	; (800b870 <prvInsertTimerInActiveList+0x80>)
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	3304      	adds	r3, #4
 800b85a:	4619      	mov	r1, r3
 800b85c:	4610      	mov	r0, r2
 800b85e:	f7fd fcd2 	bl	8009206 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b862:	697b      	ldr	r3, [r7, #20]
}
 800b864:	4618      	mov	r0, r3
 800b866:	3718      	adds	r7, #24
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}
 800b86c:	24001808 	.word	0x24001808
 800b870:	24001804 	.word	0x24001804

0800b874 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b08e      	sub	sp, #56	; 0x38
 800b878:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b87a:	e0ca      	b.n	800ba12 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	da18      	bge.n	800b8b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b882:	1d3b      	adds	r3, r7, #4
 800b884:	3304      	adds	r3, #4
 800b886:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d10a      	bne.n	800b8a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b892:	f383 8811 	msr	BASEPRI, r3
 800b896:	f3bf 8f6f 	isb	sy
 800b89a:	f3bf 8f4f 	dsb	sy
 800b89e:	61fb      	str	r3, [r7, #28]
}
 800b8a0:	bf00      	nop
 800b8a2:	e7fe      	b.n	800b8a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8aa:	6850      	ldr	r0, [r2, #4]
 800b8ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8ae:	6892      	ldr	r2, [r2, #8]
 800b8b0:	4611      	mov	r1, r2
 800b8b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	f2c0 80aa 	blt.w	800ba10 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c2:	695b      	ldr	r3, [r3, #20]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d004      	beq.n	800b8d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ca:	3304      	adds	r3, #4
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f7fd fcd3 	bl	8009278 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b8d2:	463b      	mov	r3, r7
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7ff ff6b 	bl	800b7b0 <prvSampleTimeNow>
 800b8da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b09      	cmp	r3, #9
 800b8e0:	f200 8097 	bhi.w	800ba12 <prvProcessReceivedCommands+0x19e>
 800b8e4:	a201      	add	r2, pc, #4	; (adr r2, 800b8ec <prvProcessReceivedCommands+0x78>)
 800b8e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8ea:	bf00      	nop
 800b8ec:	0800b915 	.word	0x0800b915
 800b8f0:	0800b915 	.word	0x0800b915
 800b8f4:	0800b915 	.word	0x0800b915
 800b8f8:	0800b989 	.word	0x0800b989
 800b8fc:	0800b99d 	.word	0x0800b99d
 800b900:	0800b9e7 	.word	0x0800b9e7
 800b904:	0800b915 	.word	0x0800b915
 800b908:	0800b915 	.word	0x0800b915
 800b90c:	0800b989 	.word	0x0800b989
 800b910:	0800b99d 	.word	0x0800b99d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b916:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b91a:	f043 0301 	orr.w	r3, r3, #1
 800b91e:	b2da      	uxtb	r2, r3
 800b920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b922:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b926:	68ba      	ldr	r2, [r7, #8]
 800b928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92a:	699b      	ldr	r3, [r3, #24]
 800b92c:	18d1      	adds	r1, r2, r3
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b934:	f7ff ff5c 	bl	800b7f0 <prvInsertTimerInActiveList>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d069      	beq.n	800ba12 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b940:	6a1b      	ldr	r3, [r3, #32]
 800b942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b944:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b948:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b94c:	f003 0304 	and.w	r3, r3, #4
 800b950:	2b00      	cmp	r3, #0
 800b952:	d05e      	beq.n	800ba12 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b954:	68ba      	ldr	r2, [r7, #8]
 800b956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b958:	699b      	ldr	r3, [r3, #24]
 800b95a:	441a      	add	r2, r3
 800b95c:	2300      	movs	r3, #0
 800b95e:	9300      	str	r3, [sp, #0]
 800b960:	2300      	movs	r3, #0
 800b962:	2100      	movs	r1, #0
 800b964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b966:	f7ff fe05 	bl	800b574 <xTimerGenericCommand>
 800b96a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b96c:	6a3b      	ldr	r3, [r7, #32]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d14f      	bne.n	800ba12 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b976:	f383 8811 	msr	BASEPRI, r3
 800b97a:	f3bf 8f6f 	isb	sy
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	61bb      	str	r3, [r7, #24]
}
 800b984:	bf00      	nop
 800b986:	e7fe      	b.n	800b986 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b98e:	f023 0301 	bic.w	r3, r3, #1
 800b992:	b2da      	uxtb	r2, r3
 800b994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b996:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b99a:	e03a      	b.n	800ba12 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9a2:	f043 0301 	orr.w	r3, r3, #1
 800b9a6:	b2da      	uxtb	r2, r3
 800b9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b9ae:	68ba      	ldr	r2, [r7, #8]
 800b9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b6:	699b      	ldr	r3, [r3, #24]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d10a      	bne.n	800b9d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c0:	f383 8811 	msr	BASEPRI, r3
 800b9c4:	f3bf 8f6f 	isb	sy
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	617b      	str	r3, [r7, #20]
}
 800b9ce:	bf00      	nop
 800b9d0:	e7fe      	b.n	800b9d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d4:	699a      	ldr	r2, [r3, #24]
 800b9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d8:	18d1      	adds	r1, r2, r3
 800b9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9e0:	f7ff ff06 	bl	800b7f0 <prvInsertTimerInActiveList>
					break;
 800b9e4:	e015      	b.n	800ba12 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9ec:	f003 0302 	and.w	r3, r3, #2
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d103      	bne.n	800b9fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b9f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9f6:	f000 fbdb 	bl	800c1b0 <vPortFree>
 800b9fa:	e00a      	b.n	800ba12 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba02:	f023 0301 	bic.w	r3, r3, #1
 800ba06:	b2da      	uxtb	r2, r3
 800ba08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ba0e:	e000      	b.n	800ba12 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ba10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba12:	4b08      	ldr	r3, [pc, #32]	; (800ba34 <prvProcessReceivedCommands+0x1c0>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	1d39      	adds	r1, r7, #4
 800ba18:	2200      	movs	r2, #0
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f7fe f8da 	bl	8009bd4 <xQueueReceive>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	f47f af2a 	bne.w	800b87c <prvProcessReceivedCommands+0x8>
	}
}
 800ba28:	bf00      	nop
 800ba2a:	bf00      	nop
 800ba2c:	3730      	adds	r7, #48	; 0x30
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	2400180c 	.word	0x2400180c

0800ba38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b088      	sub	sp, #32
 800ba3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba3e:	e048      	b.n	800bad2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba40:	4b2d      	ldr	r3, [pc, #180]	; (800baf8 <prvSwitchTimerLists+0xc0>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	68db      	ldr	r3, [r3, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba4a:	4b2b      	ldr	r3, [pc, #172]	; (800baf8 <prvSwitchTimerLists+0xc0>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	68db      	ldr	r3, [r3, #12]
 800ba50:	68db      	ldr	r3, [r3, #12]
 800ba52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	3304      	adds	r3, #4
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7fd fc0d 	bl	8009278 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6a1b      	ldr	r3, [r3, #32]
 800ba62:	68f8      	ldr	r0, [r7, #12]
 800ba64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba6c:	f003 0304 	and.w	r3, r3, #4
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d02e      	beq.n	800bad2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	699b      	ldr	r3, [r3, #24]
 800ba78:	693a      	ldr	r2, [r7, #16]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ba7e:	68ba      	ldr	r2, [r7, #8]
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d90e      	bls.n	800baa4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	68ba      	ldr	r2, [r7, #8]
 800ba8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	68fa      	ldr	r2, [r7, #12]
 800ba90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba92:	4b19      	ldr	r3, [pc, #100]	; (800baf8 <prvSwitchTimerLists+0xc0>)
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	3304      	adds	r3, #4
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	4610      	mov	r0, r2
 800ba9e:	f7fd fbb2 	bl	8009206 <vListInsert>
 800baa2:	e016      	b.n	800bad2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800baa4:	2300      	movs	r3, #0
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	2300      	movs	r3, #0
 800baaa:	693a      	ldr	r2, [r7, #16]
 800baac:	2100      	movs	r1, #0
 800baae:	68f8      	ldr	r0, [r7, #12]
 800bab0:	f7ff fd60 	bl	800b574 <xTimerGenericCommand>
 800bab4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d10a      	bne.n	800bad2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800babc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bac0:	f383 8811 	msr	BASEPRI, r3
 800bac4:	f3bf 8f6f 	isb	sy
 800bac8:	f3bf 8f4f 	dsb	sy
 800bacc:	603b      	str	r3, [r7, #0]
}
 800bace:	bf00      	nop
 800bad0:	e7fe      	b.n	800bad0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bad2:	4b09      	ldr	r3, [pc, #36]	; (800baf8 <prvSwitchTimerLists+0xc0>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d1b1      	bne.n	800ba40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800badc:	4b06      	ldr	r3, [pc, #24]	; (800baf8 <prvSwitchTimerLists+0xc0>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bae2:	4b06      	ldr	r3, [pc, #24]	; (800bafc <prvSwitchTimerLists+0xc4>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a04      	ldr	r2, [pc, #16]	; (800baf8 <prvSwitchTimerLists+0xc0>)
 800bae8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800baea:	4a04      	ldr	r2, [pc, #16]	; (800bafc <prvSwitchTimerLists+0xc4>)
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	6013      	str	r3, [r2, #0]
}
 800baf0:	bf00      	nop
 800baf2:	3718      	adds	r7, #24
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	24001804 	.word	0x24001804
 800bafc:	24001808 	.word	0x24001808

0800bb00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bb06:	f000 f965 	bl	800bdd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bb0a:	4b15      	ldr	r3, [pc, #84]	; (800bb60 <prvCheckForValidListAndQueue+0x60>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d120      	bne.n	800bb54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bb12:	4814      	ldr	r0, [pc, #80]	; (800bb64 <prvCheckForValidListAndQueue+0x64>)
 800bb14:	f7fd fb26 	bl	8009164 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bb18:	4813      	ldr	r0, [pc, #76]	; (800bb68 <prvCheckForValidListAndQueue+0x68>)
 800bb1a:	f7fd fb23 	bl	8009164 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bb1e:	4b13      	ldr	r3, [pc, #76]	; (800bb6c <prvCheckForValidListAndQueue+0x6c>)
 800bb20:	4a10      	ldr	r2, [pc, #64]	; (800bb64 <prvCheckForValidListAndQueue+0x64>)
 800bb22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bb24:	4b12      	ldr	r3, [pc, #72]	; (800bb70 <prvCheckForValidListAndQueue+0x70>)
 800bb26:	4a10      	ldr	r2, [pc, #64]	; (800bb68 <prvCheckForValidListAndQueue+0x68>)
 800bb28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	9300      	str	r3, [sp, #0]
 800bb2e:	4b11      	ldr	r3, [pc, #68]	; (800bb74 <prvCheckForValidListAndQueue+0x74>)
 800bb30:	4a11      	ldr	r2, [pc, #68]	; (800bb78 <prvCheckForValidListAndQueue+0x78>)
 800bb32:	2110      	movs	r1, #16
 800bb34:	200a      	movs	r0, #10
 800bb36:	f7fd fc31 	bl	800939c <xQueueGenericCreateStatic>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	4a08      	ldr	r2, [pc, #32]	; (800bb60 <prvCheckForValidListAndQueue+0x60>)
 800bb3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bb40:	4b07      	ldr	r3, [pc, #28]	; (800bb60 <prvCheckForValidListAndQueue+0x60>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d005      	beq.n	800bb54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bb48:	4b05      	ldr	r3, [pc, #20]	; (800bb60 <prvCheckForValidListAndQueue+0x60>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	490b      	ldr	r1, [pc, #44]	; (800bb7c <prvCheckForValidListAndQueue+0x7c>)
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7fe fbf8 	bl	800a344 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb54:	f000 f96e 	bl	800be34 <vPortExitCritical>
}
 800bb58:	bf00      	nop
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	2400180c 	.word	0x2400180c
 800bb64:	240017dc 	.word	0x240017dc
 800bb68:	240017f0 	.word	0x240017f0
 800bb6c:	24001804 	.word	0x24001804
 800bb70:	24001808 	.word	0x24001808
 800bb74:	240018b8 	.word	0x240018b8
 800bb78:	24001818 	.word	0x24001818
 800bb7c:	08019b04 	.word	0x08019b04

0800bb80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bb80:	b480      	push	{r7}
 800bb82:	b085      	sub	sp, #20
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	3b04      	subs	r3, #4
 800bb90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bb98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	3b04      	subs	r3, #4
 800bb9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	f023 0201 	bic.w	r2, r3, #1
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	3b04      	subs	r3, #4
 800bbae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bbb0:	4a0c      	ldr	r2, [pc, #48]	; (800bbe4 <pxPortInitialiseStack+0x64>)
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	3b14      	subs	r3, #20
 800bbba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bbbc:	687a      	ldr	r2, [r7, #4]
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	3b04      	subs	r3, #4
 800bbc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	f06f 0202 	mvn.w	r2, #2
 800bbce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	3b20      	subs	r3, #32
 800bbd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3714      	adds	r7, #20
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr
 800bbe4:	0800bbe9 	.word	0x0800bbe9

0800bbe8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b085      	sub	sp, #20
 800bbec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bbf2:	4b12      	ldr	r3, [pc, #72]	; (800bc3c <prvTaskExitError+0x54>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbfa:	d00a      	beq.n	800bc12 <prvTaskExitError+0x2a>
	__asm volatile
 800bbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc00:	f383 8811 	msr	BASEPRI, r3
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	60fb      	str	r3, [r7, #12]
}
 800bc0e:	bf00      	nop
 800bc10:	e7fe      	b.n	800bc10 <prvTaskExitError+0x28>
	__asm volatile
 800bc12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc16:	f383 8811 	msr	BASEPRI, r3
 800bc1a:	f3bf 8f6f 	isb	sy
 800bc1e:	f3bf 8f4f 	dsb	sy
 800bc22:	60bb      	str	r3, [r7, #8]
}
 800bc24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bc26:	bf00      	nop
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d0fc      	beq.n	800bc28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bc2e:	bf00      	nop
 800bc30:	bf00      	nop
 800bc32:	3714      	adds	r7, #20
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr
 800bc3c:	24000028 	.word	0x24000028

0800bc40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bc40:	4b07      	ldr	r3, [pc, #28]	; (800bc60 <pxCurrentTCBConst2>)
 800bc42:	6819      	ldr	r1, [r3, #0]
 800bc44:	6808      	ldr	r0, [r1, #0]
 800bc46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc4a:	f380 8809 	msr	PSP, r0
 800bc4e:	f3bf 8f6f 	isb	sy
 800bc52:	f04f 0000 	mov.w	r0, #0
 800bc56:	f380 8811 	msr	BASEPRI, r0
 800bc5a:	4770      	bx	lr
 800bc5c:	f3af 8000 	nop.w

0800bc60 <pxCurrentTCBConst2>:
 800bc60:	240012dc 	.word	0x240012dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bc64:	bf00      	nop
 800bc66:	bf00      	nop

0800bc68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bc68:	4808      	ldr	r0, [pc, #32]	; (800bc8c <prvPortStartFirstTask+0x24>)
 800bc6a:	6800      	ldr	r0, [r0, #0]
 800bc6c:	6800      	ldr	r0, [r0, #0]
 800bc6e:	f380 8808 	msr	MSP, r0
 800bc72:	f04f 0000 	mov.w	r0, #0
 800bc76:	f380 8814 	msr	CONTROL, r0
 800bc7a:	b662      	cpsie	i
 800bc7c:	b661      	cpsie	f
 800bc7e:	f3bf 8f4f 	dsb	sy
 800bc82:	f3bf 8f6f 	isb	sy
 800bc86:	df00      	svc	0
 800bc88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bc8a:	bf00      	nop
 800bc8c:	e000ed08 	.word	0xe000ed08

0800bc90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b086      	sub	sp, #24
 800bc94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bc96:	4b46      	ldr	r3, [pc, #280]	; (800bdb0 <xPortStartScheduler+0x120>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4a46      	ldr	r2, [pc, #280]	; (800bdb4 <xPortStartScheduler+0x124>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d10a      	bne.n	800bcb6 <xPortStartScheduler+0x26>
	__asm volatile
 800bca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca4:	f383 8811 	msr	BASEPRI, r3
 800bca8:	f3bf 8f6f 	isb	sy
 800bcac:	f3bf 8f4f 	dsb	sy
 800bcb0:	613b      	str	r3, [r7, #16]
}
 800bcb2:	bf00      	nop
 800bcb4:	e7fe      	b.n	800bcb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bcb6:	4b3e      	ldr	r3, [pc, #248]	; (800bdb0 <xPortStartScheduler+0x120>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a3f      	ldr	r2, [pc, #252]	; (800bdb8 <xPortStartScheduler+0x128>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d10a      	bne.n	800bcd6 <xPortStartScheduler+0x46>
	__asm volatile
 800bcc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcc4:	f383 8811 	msr	BASEPRI, r3
 800bcc8:	f3bf 8f6f 	isb	sy
 800bccc:	f3bf 8f4f 	dsb	sy
 800bcd0:	60fb      	str	r3, [r7, #12]
}
 800bcd2:	bf00      	nop
 800bcd4:	e7fe      	b.n	800bcd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bcd6:	4b39      	ldr	r3, [pc, #228]	; (800bdbc <xPortStartScheduler+0x12c>)
 800bcd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	b2db      	uxtb	r3, r3
 800bce0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bce2:	697b      	ldr	r3, [r7, #20]
 800bce4:	22ff      	movs	r2, #255	; 0xff
 800bce6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bcf0:	78fb      	ldrb	r3, [r7, #3]
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bcf8:	b2da      	uxtb	r2, r3
 800bcfa:	4b31      	ldr	r3, [pc, #196]	; (800bdc0 <xPortStartScheduler+0x130>)
 800bcfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bcfe:	4b31      	ldr	r3, [pc, #196]	; (800bdc4 <xPortStartScheduler+0x134>)
 800bd00:	2207      	movs	r2, #7
 800bd02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd04:	e009      	b.n	800bd1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bd06:	4b2f      	ldr	r3, [pc, #188]	; (800bdc4 <xPortStartScheduler+0x134>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	4a2d      	ldr	r2, [pc, #180]	; (800bdc4 <xPortStartScheduler+0x134>)
 800bd0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd10:	78fb      	ldrb	r3, [r7, #3]
 800bd12:	b2db      	uxtb	r3, r3
 800bd14:	005b      	lsls	r3, r3, #1
 800bd16:	b2db      	uxtb	r3, r3
 800bd18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd1a:	78fb      	ldrb	r3, [r7, #3]
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd22:	2b80      	cmp	r3, #128	; 0x80
 800bd24:	d0ef      	beq.n	800bd06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bd26:	4b27      	ldr	r3, [pc, #156]	; (800bdc4 <xPortStartScheduler+0x134>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f1c3 0307 	rsb	r3, r3, #7
 800bd2e:	2b04      	cmp	r3, #4
 800bd30:	d00a      	beq.n	800bd48 <xPortStartScheduler+0xb8>
	__asm volatile
 800bd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd36:	f383 8811 	msr	BASEPRI, r3
 800bd3a:	f3bf 8f6f 	isb	sy
 800bd3e:	f3bf 8f4f 	dsb	sy
 800bd42:	60bb      	str	r3, [r7, #8]
}
 800bd44:	bf00      	nop
 800bd46:	e7fe      	b.n	800bd46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bd48:	4b1e      	ldr	r3, [pc, #120]	; (800bdc4 <xPortStartScheduler+0x134>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	021b      	lsls	r3, r3, #8
 800bd4e:	4a1d      	ldr	r2, [pc, #116]	; (800bdc4 <xPortStartScheduler+0x134>)
 800bd50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd52:	4b1c      	ldr	r3, [pc, #112]	; (800bdc4 <xPortStartScheduler+0x134>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd5a:	4a1a      	ldr	r2, [pc, #104]	; (800bdc4 <xPortStartScheduler+0x134>)
 800bd5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	b2da      	uxtb	r2, r3
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bd66:	4b18      	ldr	r3, [pc, #96]	; (800bdc8 <xPortStartScheduler+0x138>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	4a17      	ldr	r2, [pc, #92]	; (800bdc8 <xPortStartScheduler+0x138>)
 800bd6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bd70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bd72:	4b15      	ldr	r3, [pc, #84]	; (800bdc8 <xPortStartScheduler+0x138>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	4a14      	ldr	r2, [pc, #80]	; (800bdc8 <xPortStartScheduler+0x138>)
 800bd78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bd7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bd7e:	f000 f8dd 	bl	800bf3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bd82:	4b12      	ldr	r3, [pc, #72]	; (800bdcc <xPortStartScheduler+0x13c>)
 800bd84:	2200      	movs	r2, #0
 800bd86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bd88:	f000 f8fc 	bl	800bf84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bd8c:	4b10      	ldr	r3, [pc, #64]	; (800bdd0 <xPortStartScheduler+0x140>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4a0f      	ldr	r2, [pc, #60]	; (800bdd0 <xPortStartScheduler+0x140>)
 800bd92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bd96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bd98:	f7ff ff66 	bl	800bc68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bd9c:	f7fe ff3e 	bl	800ac1c <vTaskSwitchContext>
	prvTaskExitError();
 800bda0:	f7ff ff22 	bl	800bbe8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bda4:	2300      	movs	r3, #0
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3718      	adds	r7, #24
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	e000ed00 	.word	0xe000ed00
 800bdb4:	410fc271 	.word	0x410fc271
 800bdb8:	410fc270 	.word	0x410fc270
 800bdbc:	e000e400 	.word	0xe000e400
 800bdc0:	24001908 	.word	0x24001908
 800bdc4:	2400190c 	.word	0x2400190c
 800bdc8:	e000ed20 	.word	0xe000ed20
 800bdcc:	24000028 	.word	0x24000028
 800bdd0:	e000ef34 	.word	0xe000ef34

0800bdd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b083      	sub	sp, #12
 800bdd8:	af00      	add	r7, sp, #0
	__asm volatile
 800bdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdde:	f383 8811 	msr	BASEPRI, r3
 800bde2:	f3bf 8f6f 	isb	sy
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	607b      	str	r3, [r7, #4]
}
 800bdec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bdee:	4b0f      	ldr	r3, [pc, #60]	; (800be2c <vPortEnterCritical+0x58>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	3301      	adds	r3, #1
 800bdf4:	4a0d      	ldr	r2, [pc, #52]	; (800be2c <vPortEnterCritical+0x58>)
 800bdf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bdf8:	4b0c      	ldr	r3, [pc, #48]	; (800be2c <vPortEnterCritical+0x58>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d10f      	bne.n	800be20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800be00:	4b0b      	ldr	r3, [pc, #44]	; (800be30 <vPortEnterCritical+0x5c>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	b2db      	uxtb	r3, r3
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00a      	beq.n	800be20 <vPortEnterCritical+0x4c>
	__asm volatile
 800be0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0e:	f383 8811 	msr	BASEPRI, r3
 800be12:	f3bf 8f6f 	isb	sy
 800be16:	f3bf 8f4f 	dsb	sy
 800be1a:	603b      	str	r3, [r7, #0]
}
 800be1c:	bf00      	nop
 800be1e:	e7fe      	b.n	800be1e <vPortEnterCritical+0x4a>
	}
}
 800be20:	bf00      	nop
 800be22:	370c      	adds	r7, #12
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr
 800be2c:	24000028 	.word	0x24000028
 800be30:	e000ed04 	.word	0xe000ed04

0800be34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be3a:	4b12      	ldr	r3, [pc, #72]	; (800be84 <vPortExitCritical+0x50>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d10a      	bne.n	800be58 <vPortExitCritical+0x24>
	__asm volatile
 800be42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be46:	f383 8811 	msr	BASEPRI, r3
 800be4a:	f3bf 8f6f 	isb	sy
 800be4e:	f3bf 8f4f 	dsb	sy
 800be52:	607b      	str	r3, [r7, #4]
}
 800be54:	bf00      	nop
 800be56:	e7fe      	b.n	800be56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800be58:	4b0a      	ldr	r3, [pc, #40]	; (800be84 <vPortExitCritical+0x50>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	3b01      	subs	r3, #1
 800be5e:	4a09      	ldr	r2, [pc, #36]	; (800be84 <vPortExitCritical+0x50>)
 800be60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800be62:	4b08      	ldr	r3, [pc, #32]	; (800be84 <vPortExitCritical+0x50>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d105      	bne.n	800be76 <vPortExitCritical+0x42>
 800be6a:	2300      	movs	r3, #0
 800be6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	f383 8811 	msr	BASEPRI, r3
}
 800be74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800be76:	bf00      	nop
 800be78:	370c      	adds	r7, #12
 800be7a:	46bd      	mov	sp, r7
 800be7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be80:	4770      	bx	lr
 800be82:	bf00      	nop
 800be84:	24000028 	.word	0x24000028
	...

0800be90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800be90:	f3ef 8009 	mrs	r0, PSP
 800be94:	f3bf 8f6f 	isb	sy
 800be98:	4b15      	ldr	r3, [pc, #84]	; (800bef0 <pxCurrentTCBConst>)
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	f01e 0f10 	tst.w	lr, #16
 800bea0:	bf08      	it	eq
 800bea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beaa:	6010      	str	r0, [r2, #0]
 800beac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800beb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800beb4:	f380 8811 	msr	BASEPRI, r0
 800beb8:	f3bf 8f4f 	dsb	sy
 800bebc:	f3bf 8f6f 	isb	sy
 800bec0:	f7fe feac 	bl	800ac1c <vTaskSwitchContext>
 800bec4:	f04f 0000 	mov.w	r0, #0
 800bec8:	f380 8811 	msr	BASEPRI, r0
 800becc:	bc09      	pop	{r0, r3}
 800bece:	6819      	ldr	r1, [r3, #0]
 800bed0:	6808      	ldr	r0, [r1, #0]
 800bed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed6:	f01e 0f10 	tst.w	lr, #16
 800beda:	bf08      	it	eq
 800bedc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bee0:	f380 8809 	msr	PSP, r0
 800bee4:	f3bf 8f6f 	isb	sy
 800bee8:	4770      	bx	lr
 800beea:	bf00      	nop
 800beec:	f3af 8000 	nop.w

0800bef0 <pxCurrentTCBConst>:
 800bef0:	240012dc 	.word	0x240012dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bef4:	bf00      	nop
 800bef6:	bf00      	nop

0800bef8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
	__asm volatile
 800befe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf02:	f383 8811 	msr	BASEPRI, r3
 800bf06:	f3bf 8f6f 	isb	sy
 800bf0a:	f3bf 8f4f 	dsb	sy
 800bf0e:	607b      	str	r3, [r7, #4]
}
 800bf10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf12:	f7fe fdc9 	bl	800aaa8 <xTaskIncrementTick>
 800bf16:	4603      	mov	r3, r0
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d003      	beq.n	800bf24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf1c:	4b06      	ldr	r3, [pc, #24]	; (800bf38 <xPortSysTickHandler+0x40>)
 800bf1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf22:	601a      	str	r2, [r3, #0]
 800bf24:	2300      	movs	r3, #0
 800bf26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	f383 8811 	msr	BASEPRI, r3
}
 800bf2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf30:	bf00      	nop
 800bf32:	3708      	adds	r7, #8
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	e000ed04 	.word	0xe000ed04

0800bf3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf40:	4b0b      	ldr	r3, [pc, #44]	; (800bf70 <vPortSetupTimerInterrupt+0x34>)
 800bf42:	2200      	movs	r2, #0
 800bf44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bf46:	4b0b      	ldr	r3, [pc, #44]	; (800bf74 <vPortSetupTimerInterrupt+0x38>)
 800bf48:	2200      	movs	r2, #0
 800bf4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bf4c:	4b0a      	ldr	r3, [pc, #40]	; (800bf78 <vPortSetupTimerInterrupt+0x3c>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4a0a      	ldr	r2, [pc, #40]	; (800bf7c <vPortSetupTimerInterrupt+0x40>)
 800bf52:	fba2 2303 	umull	r2, r3, r2, r3
 800bf56:	099b      	lsrs	r3, r3, #6
 800bf58:	4a09      	ldr	r2, [pc, #36]	; (800bf80 <vPortSetupTimerInterrupt+0x44>)
 800bf5a:	3b01      	subs	r3, #1
 800bf5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bf5e:	4b04      	ldr	r3, [pc, #16]	; (800bf70 <vPortSetupTimerInterrupt+0x34>)
 800bf60:	2207      	movs	r2, #7
 800bf62:	601a      	str	r2, [r3, #0]
}
 800bf64:	bf00      	nop
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr
 800bf6e:	bf00      	nop
 800bf70:	e000e010 	.word	0xe000e010
 800bf74:	e000e018 	.word	0xe000e018
 800bf78:	24000004 	.word	0x24000004
 800bf7c:	10624dd3 	.word	0x10624dd3
 800bf80:	e000e014 	.word	0xe000e014

0800bf84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bf84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bf94 <vPortEnableVFP+0x10>
 800bf88:	6801      	ldr	r1, [r0, #0]
 800bf8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bf8e:	6001      	str	r1, [r0, #0]
 800bf90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bf92:	bf00      	nop
 800bf94:	e000ed88 	.word	0xe000ed88

0800bf98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bf98:	b480      	push	{r7}
 800bf9a:	b085      	sub	sp, #20
 800bf9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bf9e:	f3ef 8305 	mrs	r3, IPSR
 800bfa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	2b0f      	cmp	r3, #15
 800bfa8:	d914      	bls.n	800bfd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bfaa:	4a17      	ldr	r2, [pc, #92]	; (800c008 <vPortValidateInterruptPriority+0x70>)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	4413      	add	r3, r2
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bfb4:	4b15      	ldr	r3, [pc, #84]	; (800c00c <vPortValidateInterruptPriority+0x74>)
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	7afa      	ldrb	r2, [r7, #11]
 800bfba:	429a      	cmp	r2, r3
 800bfbc:	d20a      	bcs.n	800bfd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc2:	f383 8811 	msr	BASEPRI, r3
 800bfc6:	f3bf 8f6f 	isb	sy
 800bfca:	f3bf 8f4f 	dsb	sy
 800bfce:	607b      	str	r3, [r7, #4]
}
 800bfd0:	bf00      	nop
 800bfd2:	e7fe      	b.n	800bfd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bfd4:	4b0e      	ldr	r3, [pc, #56]	; (800c010 <vPortValidateInterruptPriority+0x78>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bfdc:	4b0d      	ldr	r3, [pc, #52]	; (800c014 <vPortValidateInterruptPriority+0x7c>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d90a      	bls.n	800bffa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bfe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe8:	f383 8811 	msr	BASEPRI, r3
 800bfec:	f3bf 8f6f 	isb	sy
 800bff0:	f3bf 8f4f 	dsb	sy
 800bff4:	603b      	str	r3, [r7, #0]
}
 800bff6:	bf00      	nop
 800bff8:	e7fe      	b.n	800bff8 <vPortValidateInterruptPriority+0x60>
	}
 800bffa:	bf00      	nop
 800bffc:	3714      	adds	r7, #20
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr
 800c006:	bf00      	nop
 800c008:	e000e3f0 	.word	0xe000e3f0
 800c00c:	24001908 	.word	0x24001908
 800c010:	e000ed0c 	.word	0xe000ed0c
 800c014:	2400190c 	.word	0x2400190c

0800c018 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b08a      	sub	sp, #40	; 0x28
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c020:	2300      	movs	r3, #0
 800c022:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c024:	f7fe fc72 	bl	800a90c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c028:	4b5b      	ldr	r3, [pc, #364]	; (800c198 <pvPortMalloc+0x180>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d101      	bne.n	800c034 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c030:	f000 f920 	bl	800c274 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c034:	4b59      	ldr	r3, [pc, #356]	; (800c19c <pvPortMalloc+0x184>)
 800c036:	681a      	ldr	r2, [r3, #0]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	4013      	ands	r3, r2
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	f040 8093 	bne.w	800c168 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d01d      	beq.n	800c084 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c048:	2208      	movs	r2, #8
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	4413      	add	r3, r2
 800c04e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f003 0307 	and.w	r3, r3, #7
 800c056:	2b00      	cmp	r3, #0
 800c058:	d014      	beq.n	800c084 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f023 0307 	bic.w	r3, r3, #7
 800c060:	3308      	adds	r3, #8
 800c062:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f003 0307 	and.w	r3, r3, #7
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d00a      	beq.n	800c084 <pvPortMalloc+0x6c>
	__asm volatile
 800c06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c072:	f383 8811 	msr	BASEPRI, r3
 800c076:	f3bf 8f6f 	isb	sy
 800c07a:	f3bf 8f4f 	dsb	sy
 800c07e:	617b      	str	r3, [r7, #20]
}
 800c080:	bf00      	nop
 800c082:	e7fe      	b.n	800c082 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d06e      	beq.n	800c168 <pvPortMalloc+0x150>
 800c08a:	4b45      	ldr	r3, [pc, #276]	; (800c1a0 <pvPortMalloc+0x188>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	429a      	cmp	r2, r3
 800c092:	d869      	bhi.n	800c168 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c094:	4b43      	ldr	r3, [pc, #268]	; (800c1a4 <pvPortMalloc+0x18c>)
 800c096:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c098:	4b42      	ldr	r3, [pc, #264]	; (800c1a4 <pvPortMalloc+0x18c>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c09e:	e004      	b.n	800c0aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d903      	bls.n	800c0bc <pvPortMalloc+0xa4>
 800c0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d1f1      	bne.n	800c0a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c0bc:	4b36      	ldr	r3, [pc, #216]	; (800c198 <pvPortMalloc+0x180>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d050      	beq.n	800c168 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c0c6:	6a3b      	ldr	r3, [r7, #32]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	2208      	movs	r2, #8
 800c0cc:	4413      	add	r3, r2
 800c0ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d2:	681a      	ldr	r2, [r3, #0]
 800c0d4:	6a3b      	ldr	r3, [r7, #32]
 800c0d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0da:	685a      	ldr	r2, [r3, #4]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	1ad2      	subs	r2, r2, r3
 800c0e0:	2308      	movs	r3, #8
 800c0e2:	005b      	lsls	r3, r3, #1
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d91f      	bls.n	800c128 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c0e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0f0:	69bb      	ldr	r3, [r7, #24]
 800c0f2:	f003 0307 	and.w	r3, r3, #7
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d00a      	beq.n	800c110 <pvPortMalloc+0xf8>
	__asm volatile
 800c0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fe:	f383 8811 	msr	BASEPRI, r3
 800c102:	f3bf 8f6f 	isb	sy
 800c106:	f3bf 8f4f 	dsb	sy
 800c10a:	613b      	str	r3, [r7, #16]
}
 800c10c:	bf00      	nop
 800c10e:	e7fe      	b.n	800c10e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c112:	685a      	ldr	r2, [r3, #4]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	1ad2      	subs	r2, r2, r3
 800c118:	69bb      	ldr	r3, [r7, #24]
 800c11a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c122:	69b8      	ldr	r0, [r7, #24]
 800c124:	f000 f908 	bl	800c338 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c128:	4b1d      	ldr	r3, [pc, #116]	; (800c1a0 <pvPortMalloc+0x188>)
 800c12a:	681a      	ldr	r2, [r3, #0]
 800c12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	1ad3      	subs	r3, r2, r3
 800c132:	4a1b      	ldr	r2, [pc, #108]	; (800c1a0 <pvPortMalloc+0x188>)
 800c134:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c136:	4b1a      	ldr	r3, [pc, #104]	; (800c1a0 <pvPortMalloc+0x188>)
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	4b1b      	ldr	r3, [pc, #108]	; (800c1a8 <pvPortMalloc+0x190>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d203      	bcs.n	800c14a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c142:	4b17      	ldr	r3, [pc, #92]	; (800c1a0 <pvPortMalloc+0x188>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	4a18      	ldr	r2, [pc, #96]	; (800c1a8 <pvPortMalloc+0x190>)
 800c148:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14c:	685a      	ldr	r2, [r3, #4]
 800c14e:	4b13      	ldr	r3, [pc, #76]	; (800c19c <pvPortMalloc+0x184>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	431a      	orrs	r2, r3
 800c154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c156:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c15a:	2200      	movs	r2, #0
 800c15c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c15e:	4b13      	ldr	r3, [pc, #76]	; (800c1ac <pvPortMalloc+0x194>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	3301      	adds	r3, #1
 800c164:	4a11      	ldr	r2, [pc, #68]	; (800c1ac <pvPortMalloc+0x194>)
 800c166:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c168:	f7fe fbde 	bl	800a928 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c16c:	69fb      	ldr	r3, [r7, #28]
 800c16e:	f003 0307 	and.w	r3, r3, #7
 800c172:	2b00      	cmp	r3, #0
 800c174:	d00a      	beq.n	800c18c <pvPortMalloc+0x174>
	__asm volatile
 800c176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17a:	f383 8811 	msr	BASEPRI, r3
 800c17e:	f3bf 8f6f 	isb	sy
 800c182:	f3bf 8f4f 	dsb	sy
 800c186:	60fb      	str	r3, [r7, #12]
}
 800c188:	bf00      	nop
 800c18a:	e7fe      	b.n	800c18a <pvPortMalloc+0x172>
	return pvReturn;
 800c18c:	69fb      	ldr	r3, [r7, #28]
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3728      	adds	r7, #40	; 0x28
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	24005518 	.word	0x24005518
 800c19c:	2400552c 	.word	0x2400552c
 800c1a0:	2400551c 	.word	0x2400551c
 800c1a4:	24005510 	.word	0x24005510
 800c1a8:	24005520 	.word	0x24005520
 800c1ac:	24005524 	.word	0x24005524

0800c1b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b086      	sub	sp, #24
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d04d      	beq.n	800c25e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c1c2:	2308      	movs	r3, #8
 800c1c4:	425b      	negs	r3, r3
 800c1c6:	697a      	ldr	r2, [r7, #20]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	685a      	ldr	r2, [r3, #4]
 800c1d4:	4b24      	ldr	r3, [pc, #144]	; (800c268 <vPortFree+0xb8>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4013      	ands	r3, r2
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d10a      	bne.n	800c1f4 <vPortFree+0x44>
	__asm volatile
 800c1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e2:	f383 8811 	msr	BASEPRI, r3
 800c1e6:	f3bf 8f6f 	isb	sy
 800c1ea:	f3bf 8f4f 	dsb	sy
 800c1ee:	60fb      	str	r3, [r7, #12]
}
 800c1f0:	bf00      	nop
 800c1f2:	e7fe      	b.n	800c1f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d00a      	beq.n	800c212 <vPortFree+0x62>
	__asm volatile
 800c1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c200:	f383 8811 	msr	BASEPRI, r3
 800c204:	f3bf 8f6f 	isb	sy
 800c208:	f3bf 8f4f 	dsb	sy
 800c20c:	60bb      	str	r3, [r7, #8]
}
 800c20e:	bf00      	nop
 800c210:	e7fe      	b.n	800c210 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	685a      	ldr	r2, [r3, #4]
 800c216:	4b14      	ldr	r3, [pc, #80]	; (800c268 <vPortFree+0xb8>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	4013      	ands	r3, r2
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d01e      	beq.n	800c25e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d11a      	bne.n	800c25e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	685a      	ldr	r2, [r3, #4]
 800c22c:	4b0e      	ldr	r3, [pc, #56]	; (800c268 <vPortFree+0xb8>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	43db      	mvns	r3, r3
 800c232:	401a      	ands	r2, r3
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c238:	f7fe fb68 	bl	800a90c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	685a      	ldr	r2, [r3, #4]
 800c240:	4b0a      	ldr	r3, [pc, #40]	; (800c26c <vPortFree+0xbc>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	4413      	add	r3, r2
 800c246:	4a09      	ldr	r2, [pc, #36]	; (800c26c <vPortFree+0xbc>)
 800c248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c24a:	6938      	ldr	r0, [r7, #16]
 800c24c:	f000 f874 	bl	800c338 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c250:	4b07      	ldr	r3, [pc, #28]	; (800c270 <vPortFree+0xc0>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	3301      	adds	r3, #1
 800c256:	4a06      	ldr	r2, [pc, #24]	; (800c270 <vPortFree+0xc0>)
 800c258:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c25a:	f7fe fb65 	bl	800a928 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c25e:	bf00      	nop
 800c260:	3718      	adds	r7, #24
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}
 800c266:	bf00      	nop
 800c268:	2400552c 	.word	0x2400552c
 800c26c:	2400551c 	.word	0x2400551c
 800c270:	24005528 	.word	0x24005528

0800c274 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c274:	b480      	push	{r7}
 800c276:	b085      	sub	sp, #20
 800c278:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c27a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c27e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c280:	4b27      	ldr	r3, [pc, #156]	; (800c320 <prvHeapInit+0xac>)
 800c282:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f003 0307 	and.w	r3, r3, #7
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d00c      	beq.n	800c2a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	3307      	adds	r3, #7
 800c292:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f023 0307 	bic.w	r3, r3, #7
 800c29a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c29c:	68ba      	ldr	r2, [r7, #8]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	1ad3      	subs	r3, r2, r3
 800c2a2:	4a1f      	ldr	r2, [pc, #124]	; (800c320 <prvHeapInit+0xac>)
 800c2a4:	4413      	add	r3, r2
 800c2a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c2ac:	4a1d      	ldr	r2, [pc, #116]	; (800c324 <prvHeapInit+0xb0>)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c2b2:	4b1c      	ldr	r3, [pc, #112]	; (800c324 <prvHeapInit+0xb0>)
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	68ba      	ldr	r2, [r7, #8]
 800c2bc:	4413      	add	r3, r2
 800c2be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c2c0:	2208      	movs	r2, #8
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	1a9b      	subs	r3, r3, r2
 800c2c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f023 0307 	bic.w	r3, r3, #7
 800c2ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	4a15      	ldr	r2, [pc, #84]	; (800c328 <prvHeapInit+0xb4>)
 800c2d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c2d6:	4b14      	ldr	r3, [pc, #80]	; (800c328 <prvHeapInit+0xb4>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c2de:	4b12      	ldr	r3, [pc, #72]	; (800c328 <prvHeapInit+0xb4>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	68fa      	ldr	r2, [r7, #12]
 800c2ee:	1ad2      	subs	r2, r2, r3
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c2f4:	4b0c      	ldr	r3, [pc, #48]	; (800c328 <prvHeapInit+0xb4>)
 800c2f6:	681a      	ldr	r2, [r3, #0]
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	4a0a      	ldr	r2, [pc, #40]	; (800c32c <prvHeapInit+0xb8>)
 800c302:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	4a09      	ldr	r2, [pc, #36]	; (800c330 <prvHeapInit+0xbc>)
 800c30a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c30c:	4b09      	ldr	r3, [pc, #36]	; (800c334 <prvHeapInit+0xc0>)
 800c30e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c312:	601a      	str	r2, [r3, #0]
}
 800c314:	bf00      	nop
 800c316:	3714      	adds	r7, #20
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr
 800c320:	24001910 	.word	0x24001910
 800c324:	24005510 	.word	0x24005510
 800c328:	24005518 	.word	0x24005518
 800c32c:	24005520 	.word	0x24005520
 800c330:	2400551c 	.word	0x2400551c
 800c334:	2400552c 	.word	0x2400552c

0800c338 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c338:	b480      	push	{r7}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c340:	4b28      	ldr	r3, [pc, #160]	; (800c3e4 <prvInsertBlockIntoFreeList+0xac>)
 800c342:	60fb      	str	r3, [r7, #12]
 800c344:	e002      	b.n	800c34c <prvInsertBlockIntoFreeList+0x14>
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	60fb      	str	r3, [r7, #12]
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	429a      	cmp	r2, r3
 800c354:	d8f7      	bhi.n	800c346 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	68ba      	ldr	r2, [r7, #8]
 800c360:	4413      	add	r3, r2
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	429a      	cmp	r2, r3
 800c366:	d108      	bne.n	800c37a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	685a      	ldr	r2, [r3, #4]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	441a      	add	r2, r3
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	68ba      	ldr	r2, [r7, #8]
 800c384:	441a      	add	r2, r3
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d118      	bne.n	800c3c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681a      	ldr	r2, [r3, #0]
 800c392:	4b15      	ldr	r3, [pc, #84]	; (800c3e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	429a      	cmp	r2, r3
 800c398:	d00d      	beq.n	800c3b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	685a      	ldr	r2, [r3, #4]
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	441a      	add	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	681a      	ldr	r2, [r3, #0]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	601a      	str	r2, [r3, #0]
 800c3b4:	e008      	b.n	800c3c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c3b6:	4b0c      	ldr	r3, [pc, #48]	; (800c3e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c3b8:	681a      	ldr	r2, [r3, #0]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	601a      	str	r2, [r3, #0]
 800c3be:	e003      	b.n	800c3c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c3c8:	68fa      	ldr	r2, [r7, #12]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d002      	beq.n	800c3d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c3d6:	bf00      	nop
 800c3d8:	3714      	adds	r7, #20
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr
 800c3e2:	bf00      	nop
 800c3e4:	24005510 	.word	0x24005510
 800c3e8:	24005518 	.word	0x24005518

0800c3ec <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c3f6:	f009 f8db 	bl	80155b0 <sys_timeouts_sleeptime>
 800c3fa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c402:	d10b      	bne.n	800c41c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c404:	4813      	ldr	r0, [pc, #76]	; (800c454 <tcpip_timeouts_mbox_fetch+0x68>)
 800c406:	f00c f988 	bl	801871a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c40a:	2200      	movs	r2, #0
 800c40c:	6839      	ldr	r1, [r7, #0]
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f00c f910 	bl	8018634 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c414:	480f      	ldr	r0, [pc, #60]	; (800c454 <tcpip_timeouts_mbox_fetch+0x68>)
 800c416:	f00c f971 	bl	80186fc <sys_mutex_lock>
    return;
 800c41a:	e018      	b.n	800c44e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d102      	bne.n	800c428 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c422:	f009 f88b 	bl	801553c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c426:	e7e6      	b.n	800c3f6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c428:	480a      	ldr	r0, [pc, #40]	; (800c454 <tcpip_timeouts_mbox_fetch+0x68>)
 800c42a:	f00c f976 	bl	801871a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c42e:	68fa      	ldr	r2, [r7, #12]
 800c430:	6839      	ldr	r1, [r7, #0]
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f00c f8fe 	bl	8018634 <sys_arch_mbox_fetch>
 800c438:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c43a:	4806      	ldr	r0, [pc, #24]	; (800c454 <tcpip_timeouts_mbox_fetch+0x68>)
 800c43c:	f00c f95e 	bl	80186fc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c446:	d102      	bne.n	800c44e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c448:	f009 f878 	bl	801553c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c44c:	e7d3      	b.n	800c3f6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c44e:	3710      	adds	r7, #16
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	2400553c 	.word	0x2400553c

0800c458 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c460:	4810      	ldr	r0, [pc, #64]	; (800c4a4 <tcpip_thread+0x4c>)
 800c462:	f00c f94b 	bl	80186fc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c466:	4b10      	ldr	r3, [pc, #64]	; (800c4a8 <tcpip_thread+0x50>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d005      	beq.n	800c47a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c46e:	4b0e      	ldr	r3, [pc, #56]	; (800c4a8 <tcpip_thread+0x50>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4a0e      	ldr	r2, [pc, #56]	; (800c4ac <tcpip_thread+0x54>)
 800c474:	6812      	ldr	r2, [r2, #0]
 800c476:	4610      	mov	r0, r2
 800c478:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c47a:	f107 030c 	add.w	r3, r7, #12
 800c47e:	4619      	mov	r1, r3
 800c480:	480b      	ldr	r0, [pc, #44]	; (800c4b0 <tcpip_thread+0x58>)
 800c482:	f7ff ffb3 	bl	800c3ec <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d106      	bne.n	800c49a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c48c:	4b09      	ldr	r3, [pc, #36]	; (800c4b4 <tcpip_thread+0x5c>)
 800c48e:	2291      	movs	r2, #145	; 0x91
 800c490:	4909      	ldr	r1, [pc, #36]	; (800c4b8 <tcpip_thread+0x60>)
 800c492:	480a      	ldr	r0, [pc, #40]	; (800c4bc <tcpip_thread+0x64>)
 800c494:	f00c fb64 	bl	8018b60 <iprintf>
      continue;
 800c498:	e003      	b.n	800c4a2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	4618      	mov	r0, r3
 800c49e:	f000 f80f 	bl	800c4c0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c4a2:	e7ea      	b.n	800c47a <tcpip_thread+0x22>
 800c4a4:	2400553c 	.word	0x2400553c
 800c4a8:	24005530 	.word	0x24005530
 800c4ac:	24005534 	.word	0x24005534
 800c4b0:	24005538 	.word	0x24005538
 800c4b4:	08019b0c 	.word	0x08019b0c
 800c4b8:	08019b3c 	.word	0x08019b3c
 800c4bc:	08019b5c 	.word	0x08019b5c

0800c4c0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	2b02      	cmp	r3, #2
 800c4ce:	d026      	beq.n	800c51e <tcpip_thread_handle_msg+0x5e>
 800c4d0:	2b02      	cmp	r3, #2
 800c4d2:	dc2b      	bgt.n	800c52c <tcpip_thread_handle_msg+0x6c>
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d002      	beq.n	800c4de <tcpip_thread_handle_msg+0x1e>
 800c4d8:	2b01      	cmp	r3, #1
 800c4da:	d015      	beq.n	800c508 <tcpip_thread_handle_msg+0x48>
 800c4dc:	e026      	b.n	800c52c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	68db      	ldr	r3, [r3, #12]
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	6850      	ldr	r0, [r2, #4]
 800c4e6:	687a      	ldr	r2, [r7, #4]
 800c4e8:	6892      	ldr	r2, [r2, #8]
 800c4ea:	4611      	mov	r1, r2
 800c4ec:	4798      	blx	r3
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d004      	beq.n	800c4fe <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f002 fc13 	bl	800ed24 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c4fe:	6879      	ldr	r1, [r7, #4]
 800c500:	2009      	movs	r0, #9
 800c502:	f001 fd6b 	bl	800dfdc <memp_free>
      break;
 800c506:	e018      	b.n	800c53a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	6892      	ldr	r2, [r2, #8]
 800c510:	4610      	mov	r0, r2
 800c512:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c514:	6879      	ldr	r1, [r7, #4]
 800c516:	2008      	movs	r0, #8
 800c518:	f001 fd60 	bl	800dfdc <memp_free>
      break;
 800c51c:	e00d      	b.n	800c53a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	6892      	ldr	r2, [r2, #8]
 800c526:	4610      	mov	r0, r2
 800c528:	4798      	blx	r3
      break;
 800c52a:	e006      	b.n	800c53a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c52c:	4b05      	ldr	r3, [pc, #20]	; (800c544 <tcpip_thread_handle_msg+0x84>)
 800c52e:	22cf      	movs	r2, #207	; 0xcf
 800c530:	4905      	ldr	r1, [pc, #20]	; (800c548 <tcpip_thread_handle_msg+0x88>)
 800c532:	4806      	ldr	r0, [pc, #24]	; (800c54c <tcpip_thread_handle_msg+0x8c>)
 800c534:	f00c fb14 	bl	8018b60 <iprintf>
      break;
 800c538:	bf00      	nop
  }
}
 800c53a:	bf00      	nop
 800c53c:	3708      	adds	r7, #8
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	08019b0c 	.word	0x08019b0c
 800c548:	08019b3c 	.word	0x08019b3c
 800c54c:	08019b5c 	.word	0x08019b5c

0800c550 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b086      	sub	sp, #24
 800c554:	af00      	add	r7, sp, #0
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	60b9      	str	r1, [r7, #8]
 800c55a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c55c:	481a      	ldr	r0, [pc, #104]	; (800c5c8 <tcpip_inpkt+0x78>)
 800c55e:	f00c f89a 	bl	8018696 <sys_mbox_valid>
 800c562:	4603      	mov	r3, r0
 800c564:	2b00      	cmp	r3, #0
 800c566:	d105      	bne.n	800c574 <tcpip_inpkt+0x24>
 800c568:	4b18      	ldr	r3, [pc, #96]	; (800c5cc <tcpip_inpkt+0x7c>)
 800c56a:	22fc      	movs	r2, #252	; 0xfc
 800c56c:	4918      	ldr	r1, [pc, #96]	; (800c5d0 <tcpip_inpkt+0x80>)
 800c56e:	4819      	ldr	r0, [pc, #100]	; (800c5d4 <tcpip_inpkt+0x84>)
 800c570:	f00c faf6 	bl	8018b60 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c574:	2009      	movs	r0, #9
 800c576:	f001 fcbb 	bl	800def0 <memp_malloc>
 800c57a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d102      	bne.n	800c588 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c582:	f04f 33ff 	mov.w	r3, #4294967295
 800c586:	e01a      	b.n	800c5be <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	2200      	movs	r2, #0
 800c58c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	68fa      	ldr	r2, [r7, #12]
 800c592:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	68ba      	ldr	r2, [r7, #8]
 800c598:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c5a0:	6979      	ldr	r1, [r7, #20]
 800c5a2:	4809      	ldr	r0, [pc, #36]	; (800c5c8 <tcpip_inpkt+0x78>)
 800c5a4:	f00c f82c 	bl	8018600 <sys_mbox_trypost>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d006      	beq.n	800c5bc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c5ae:	6979      	ldr	r1, [r7, #20]
 800c5b0:	2009      	movs	r0, #9
 800c5b2:	f001 fd13 	bl	800dfdc <memp_free>
    return ERR_MEM;
 800c5b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ba:	e000      	b.n	800c5be <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c5bc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3718      	adds	r7, #24
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	24005538 	.word	0x24005538
 800c5cc:	08019b0c 	.word	0x08019b0c
 800c5d0:	08019b84 	.word	0x08019b84
 800c5d4:	08019b5c 	.word	0x08019b5c

0800c5d8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c5e8:	f003 0318 	and.w	r3, r3, #24
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d006      	beq.n	800c5fe <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c5f0:	4a08      	ldr	r2, [pc, #32]	; (800c614 <tcpip_input+0x3c>)
 800c5f2:	6839      	ldr	r1, [r7, #0]
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f7ff ffab 	bl	800c550 <tcpip_inpkt>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	e005      	b.n	800c60a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c5fe:	4a06      	ldr	r2, [pc, #24]	; (800c618 <tcpip_input+0x40>)
 800c600:	6839      	ldr	r1, [r7, #0]
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f7ff ffa4 	bl	800c550 <tcpip_inpkt>
 800c608:	4603      	mov	r3, r0
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3708      	adds	r7, #8
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	08018421 	.word	0x08018421
 800c618:	08017329 	.word	0x08017329

0800c61c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c626:	4819      	ldr	r0, [pc, #100]	; (800c68c <tcpip_try_callback+0x70>)
 800c628:	f00c f835 	bl	8018696 <sys_mbox_valid>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d106      	bne.n	800c640 <tcpip_try_callback+0x24>
 800c632:	4b17      	ldr	r3, [pc, #92]	; (800c690 <tcpip_try_callback+0x74>)
 800c634:	f240 125d 	movw	r2, #349	; 0x15d
 800c638:	4916      	ldr	r1, [pc, #88]	; (800c694 <tcpip_try_callback+0x78>)
 800c63a:	4817      	ldr	r0, [pc, #92]	; (800c698 <tcpip_try_callback+0x7c>)
 800c63c:	f00c fa90 	bl	8018b60 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c640:	2008      	movs	r0, #8
 800c642:	f001 fc55 	bl	800def0 <memp_malloc>
 800c646:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d102      	bne.n	800c654 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c64e:	f04f 33ff 	mov.w	r3, #4294967295
 800c652:	e017      	b.n	800c684 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2201      	movs	r2, #1
 800c658:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	683a      	ldr	r2, [r7, #0]
 800c664:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c666:	68f9      	ldr	r1, [r7, #12]
 800c668:	4808      	ldr	r0, [pc, #32]	; (800c68c <tcpip_try_callback+0x70>)
 800c66a:	f00b ffc9 	bl	8018600 <sys_mbox_trypost>
 800c66e:	4603      	mov	r3, r0
 800c670:	2b00      	cmp	r3, #0
 800c672:	d006      	beq.n	800c682 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c674:	68f9      	ldr	r1, [r7, #12]
 800c676:	2008      	movs	r0, #8
 800c678:	f001 fcb0 	bl	800dfdc <memp_free>
    return ERR_MEM;
 800c67c:	f04f 33ff 	mov.w	r3, #4294967295
 800c680:	e000      	b.n	800c684 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c682:	2300      	movs	r3, #0
}
 800c684:	4618      	mov	r0, r3
 800c686:	3710      	adds	r7, #16
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	24005538 	.word	0x24005538
 800c690:	08019b0c 	.word	0x08019b0c
 800c694:	08019b84 	.word	0x08019b84
 800c698:	08019b5c 	.word	0x08019b5c

0800c69c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af02      	add	r7, sp, #8
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c6a6:	f000 ff7d 	bl	800d5a4 <lwip_init>

  tcpip_init_done = initfunc;
 800c6aa:	4a17      	ldr	r2, [pc, #92]	; (800c708 <tcpip_init+0x6c>)
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c6b0:	4a16      	ldr	r2, [pc, #88]	; (800c70c <tcpip_init+0x70>)
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c6b6:	2106      	movs	r1, #6
 800c6b8:	4815      	ldr	r0, [pc, #84]	; (800c710 <tcpip_init+0x74>)
 800c6ba:	f00b ff87 	bl	80185cc <sys_mbox_new>
 800c6be:	4603      	mov	r3, r0
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d006      	beq.n	800c6d2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c6c4:	4b13      	ldr	r3, [pc, #76]	; (800c714 <tcpip_init+0x78>)
 800c6c6:	f240 2261 	movw	r2, #609	; 0x261
 800c6ca:	4913      	ldr	r1, [pc, #76]	; (800c718 <tcpip_init+0x7c>)
 800c6cc:	4813      	ldr	r0, [pc, #76]	; (800c71c <tcpip_init+0x80>)
 800c6ce:	f00c fa47 	bl	8018b60 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c6d2:	4813      	ldr	r0, [pc, #76]	; (800c720 <tcpip_init+0x84>)
 800c6d4:	f00b fffc 	bl	80186d0 <sys_mutex_new>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d006      	beq.n	800c6ec <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c6de:	4b0d      	ldr	r3, [pc, #52]	; (800c714 <tcpip_init+0x78>)
 800c6e0:	f240 2265 	movw	r2, #613	; 0x265
 800c6e4:	490f      	ldr	r1, [pc, #60]	; (800c724 <tcpip_init+0x88>)
 800c6e6:	480d      	ldr	r0, [pc, #52]	; (800c71c <tcpip_init+0x80>)
 800c6e8:	f00c fa3a 	bl	8018b60 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c6ec:	2318      	movs	r3, #24
 800c6ee:	9300      	str	r3, [sp, #0]
 800c6f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	490c      	ldr	r1, [pc, #48]	; (800c728 <tcpip_init+0x8c>)
 800c6f8:	480c      	ldr	r0, [pc, #48]	; (800c72c <tcpip_init+0x90>)
 800c6fa:	f00c f81b 	bl	8018734 <sys_thread_new>
}
 800c6fe:	bf00      	nop
 800c700:	3708      	adds	r7, #8
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	24005530 	.word	0x24005530
 800c70c:	24005534 	.word	0x24005534
 800c710:	24005538 	.word	0x24005538
 800c714:	08019b0c 	.word	0x08019b0c
 800c718:	08019b94 	.word	0x08019b94
 800c71c:	08019b5c 	.word	0x08019b5c
 800c720:	2400553c 	.word	0x2400553c
 800c724:	08019bb8 	.word	0x08019bb8
 800c728:	0800c459 	.word	0x0800c459
 800c72c:	08019bdc 	.word	0x08019bdc

0800c730 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b084      	sub	sp, #16
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d002      	beq.n	800c746 <fs_open+0x16>
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d102      	bne.n	800c74c <fs_open+0x1c>
    return ERR_ARG;
 800c746:	f06f 030f 	mvn.w	r3, #15
 800c74a:	e028      	b.n	800c79e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800c74c:	4b16      	ldr	r3, [pc, #88]	; (800c7a8 <fs_open+0x78>)
 800c74e:	60fb      	str	r3, [r7, #12]
 800c750:	e020      	b.n	800c794 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	4619      	mov	r1, r3
 800c758:	6838      	ldr	r0, [r7, #0]
 800c75a:	f7f3 fdc1 	bl	80002e0 <strcmp>
 800c75e:	4603      	mov	r3, r0
 800c760:	2b00      	cmp	r3, #0
 800c762:	d114      	bne.n	800c78e <fs_open+0x5e>
      file->data = (const char *)f->data;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	689a      	ldr	r2, [r3, #8]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	68da      	ldr	r2, [r3, #12]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	68da      	ldr	r2, [r3, #12]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	7c1a      	ldrb	r2, [r3, #16]
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800c78a:	2300      	movs	r3, #0
 800c78c:	e007      	b.n	800c79e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	60fb      	str	r3, [r7, #12]
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d1db      	bne.n	800c752 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800c79a:	f06f 0305 	mvn.w	r3, #5
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3710      	adds	r7, #16
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	0801ea74 	.word	0x0801ea74

0800c7ac <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b083      	sub	sp, #12
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800c7b4:	bf00      	nop
 800c7b6:	370c      	adds	r7, #12
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7be:	4770      	bx	lr

0800c7c0 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800c7c0:	b480      	push	{r7}
 800c7c2:	b083      	sub	sp, #12
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	685a      	ldr	r2, [r3, #4]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	689b      	ldr	r3, [r3, #8]
 800c7d0:	1ad3      	subs	r3, r2, r3
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	370c      	adds	r7, #12
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7dc:	4770      	bx	lr

0800c7de <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800c7de:	b580      	push	{r7, lr}
 800c7e0:	b082      	sub	sp, #8
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800c7e6:	222c      	movs	r2, #44	; 0x2c
 800c7e8:	2100      	movs	r1, #0
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f00c f91b 	bl	8018a26 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800c7f0:	bf00      	nop
 800c7f2:	3708      	adds	r7, #8
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}

0800c7f8 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b082      	sub	sp, #8
 800c7fc:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800c7fe:	202c      	movs	r0, #44	; 0x2c
 800c800:	f001 f9d2 	bl	800dba8 <mem_malloc>
 800c804:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d002      	beq.n	800c812 <http_state_alloc+0x1a>
    http_state_init(ret);
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f7ff ffe6 	bl	800c7de <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800c812:	687b      	ldr	r3, [r7, #4]
}
 800c814:	4618      	mov	r0, r3
 800c816:	3708      	adds	r7, #8
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}

0800c81c <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b082      	sub	sp, #8
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	695b      	ldr	r3, [r3, #20]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d007      	beq.n	800c83c <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	695b      	ldr	r3, [r3, #20]
 800c830:	4618      	mov	r0, r3
 800c832:	f7ff ffbb 	bl	800c7ac <fs_close>
    hs->handle = NULL;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2200      	movs	r2, #0
 800c83a:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6a1b      	ldr	r3, [r3, #32]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d007      	beq.n	800c854 <http_state_eof+0x38>
    pbuf_free(hs->req);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6a1b      	ldr	r3, [r3, #32]
 800c848:	4618      	mov	r0, r3
 800c84a:	f002 fa6b 	bl	800ed24 <pbuf_free>
    hs->req = NULL;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2200      	movs	r2, #0
 800c852:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800c854:	bf00      	nop
 800c856:	3708      	adds	r7, #8
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b082      	sub	sp, #8
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d005      	beq.n	800c876 <http_state_free+0x1a>
    http_state_eof(hs);
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f7ff ffd6 	bl	800c81c <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f000 ffff 	bl	800d874 <mem_free>
  }
}
 800c876:	bf00      	nop
 800c878:	3708      	adds	r7, #8
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
	...

0800c880 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b086      	sub	sp, #24
 800c884:	af00      	add	r7, sp, #0
 800c886:	60f8      	str	r0, [r7, #12]
 800c888:	60b9      	str	r1, [r7, #8]
 800c88a:	607a      	str	r2, [r7, #4]
 800c88c:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d106      	bne.n	800c8a2 <http_write+0x22>
 800c894:	4b2c      	ldr	r3, [pc, #176]	; (800c948 <http_write+0xc8>)
 800c896:	f240 2219 	movw	r2, #537	; 0x219
 800c89a:	492c      	ldr	r1, [pc, #176]	; (800c94c <http_write+0xcc>)
 800c89c:	482c      	ldr	r0, [pc, #176]	; (800c950 <http_write+0xd0>)
 800c89e:	f00c f95f 	bl	8018b60 <iprintf>
  len = *length;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	881b      	ldrh	r3, [r3, #0]
 800c8a6:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800c8a8:	8afb      	ldrh	r3, [r7, #22]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d101      	bne.n	800c8b2 <http_write+0x32>
    return ERR_OK;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	e045      	b.n	800c93e <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c8b8:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800c8ba:	8aba      	ldrh	r2, [r7, #20]
 800c8bc:	8afb      	ldrh	r3, [r7, #22]
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d201      	bcs.n	800c8c6 <http_write+0x46>
    len = max_len;
 800c8c2:	8abb      	ldrh	r3, [r7, #20]
 800c8c4:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c8ca:	005b      	lsls	r3, r3, #1
 800c8cc:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800c8ce:	8afa      	ldrh	r2, [r7, #22]
 800c8d0:	8abb      	ldrh	r3, [r7, #20]
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d901      	bls.n	800c8da <http_write+0x5a>
    len = max_len;
 800c8d6:	8abb      	ldrh	r3, [r7, #20]
 800c8d8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800c8da:	78fb      	ldrb	r3, [r7, #3]
 800c8dc:	8afa      	ldrh	r2, [r7, #22]
 800c8de:	68b9      	ldr	r1, [r7, #8]
 800c8e0:	68f8      	ldr	r0, [r7, #12]
 800c8e2:	f006 ffc3 	bl	801386c <tcp_write>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800c8ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8f2:	d10f      	bne.n	800c914 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d004      	beq.n	800c908 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800c904:	2b08      	cmp	r3, #8
 800c906:	d902      	bls.n	800c90e <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800c908:	2301      	movs	r3, #1
 800c90a:	82fb      	strh	r3, [r7, #22]
 800c90c:	e002      	b.n	800c914 <http_write+0x94>
      } else {
        len /= 2;
 800c90e:	8afb      	ldrh	r3, [r7, #22]
 800c910:	085b      	lsrs	r3, r3, #1
 800c912:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800c914:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c91c:	d102      	bne.n	800c924 <http_write+0xa4>
 800c91e:	8afb      	ldrh	r3, [r7, #22]
 800c920:	2b01      	cmp	r3, #1
 800c922:	d8da      	bhi.n	800c8da <http_write+0x5a>

  if (err == ERR_OK) {
 800c924:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d103      	bne.n	800c934 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	8afa      	ldrh	r2, [r7, #22]
 800c930:	801a      	strh	r2, [r3, #0]
 800c932:	e002      	b.n	800c93a <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2200      	movs	r2, #0
 800c938:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800c93a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3718      	adds	r7, #24
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop
 800c948:	08019c2c 	.word	0x08019c2c
 800c94c:	08019c64 	.word	0x08019c64
 800c950:	08019c74 	.word	0x08019c74

0800c954 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b086      	sub	sp, #24
 800c958:	af00      	add	r7, sp, #0
 800c95a:	60f8      	str	r0, [r7, #12]
 800c95c:	60b9      	str	r1, [r7, #8]
 800c95e:	4613      	mov	r3, r2
 800c960:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800c962:	2100      	movs	r1, #0
 800c964:	68f8      	ldr	r0, [r7, #12]
 800c966:	f004 f83f 	bl	80109e8 <tcp_arg>
  altcp_recv(pcb, NULL);
 800c96a:	2100      	movs	r1, #0
 800c96c:	68f8      	ldr	r0, [r7, #12]
 800c96e:	f004 f84d 	bl	8010a0c <tcp_recv>
  altcp_err(pcb, NULL);
 800c972:	2100      	movs	r1, #0
 800c974:	68f8      	ldr	r0, [r7, #12]
 800c976:	f004 f88d 	bl	8010a94 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800c97a:	2200      	movs	r2, #0
 800c97c:	2100      	movs	r1, #0
 800c97e:	68f8      	ldr	r0, [r7, #12]
 800c980:	f004 f8c2 	bl	8010b08 <tcp_poll>
  altcp_sent(pcb, NULL);
 800c984:	2100      	movs	r1, #0
 800c986:	68f8      	ldr	r0, [r7, #12]
 800c988:	f004 f862 	bl	8010a50 <tcp_sent>
  if (hs != NULL) {
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d002      	beq.n	800c998 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800c992:	68b8      	ldr	r0, [r7, #8]
 800c994:	f7ff ff62 	bl	800c85c <http_state_free>
  }

  if (abort_conn) {
 800c998:	79fb      	ldrb	r3, [r7, #7]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d004      	beq.n	800c9a8 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800c99e:	68f8      	ldr	r0, [r7, #12]
 800c9a0:	f002 ff64 	bl	800f86c <tcp_abort>
    return ERR_OK;
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	e00f      	b.n	800c9c8 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800c9a8:	68f8      	ldr	r0, [r7, #12]
 800c9aa:	f002 fe75 	bl	800f698 <tcp_close>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800c9b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d004      	beq.n	800c9c4 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800c9ba:	2204      	movs	r2, #4
 800c9bc:	4904      	ldr	r1, [pc, #16]	; (800c9d0 <http_close_or_abort_conn+0x7c>)
 800c9be:	68f8      	ldr	r0, [r7, #12]
 800c9c0:	f004 f8a2 	bl	8010b08 <tcp_poll>
  }
  return err;
 800c9c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3718      	adds	r7, #24
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	0800d097 	.word	0x0800d097

0800c9d4 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800c9de:	2200      	movs	r2, #0
 800c9e0:	6839      	ldr	r1, [r7, #0]
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f7ff ffb6 	bl	800c954 <http_close_or_abort_conn>
 800c9e8:	4603      	mov	r3, r0
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3708      	adds	r7, #8
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}

0800c9f2 <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800c9f2:	b580      	push	{r7, lr}
 800c9f4:	b082      	sub	sp, #8
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
 800c9fa:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800c9fc:	6839      	ldr	r1, [r7, #0]
 800c9fe:	6878      	ldr	r0, [r7, #4]
 800ca00:	f7ff ffe8 	bl	800c9d4 <http_close_conn>
  }
}
 800ca04:	bf00      	nop
 800ca06:	3708      	adds	r7, #8
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}

0800ca0c <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	695b      	ldr	r3, [r3, #20]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d105      	bne.n	800ca2a <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800ca1e:	6839      	ldr	r1, [r7, #0]
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f7ff ffe6 	bl	800c9f2 <http_eof>
    return 0;
 800ca26:	2300      	movs	r3, #0
 800ca28:	e016      	b.n	800ca58 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	695b      	ldr	r3, [r3, #20]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7ff fec6 	bl	800c7c0 <fs_bytes_left>
 800ca34:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	dc05      	bgt.n	800ca48 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ca3c:	6839      	ldr	r1, [r7, #0]
 800ca3e:	6878      	ldr	r0, [r7, #4]
 800ca40:	f7ff ffd7 	bl	800c9f2 <http_eof>
    return 0;
 800ca44:	2300      	movs	r3, #0
 800ca46:	e007      	b.n	800ca58 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800ca48:	4b05      	ldr	r3, [pc, #20]	; (800ca60 <http_check_eof+0x54>)
 800ca4a:	f240 429d 	movw	r2, #1181	; 0x49d
 800ca4e:	4905      	ldr	r1, [pc, #20]	; (800ca64 <http_check_eof+0x58>)
 800ca50:	4805      	ldr	r0, [pc, #20]	; (800ca68 <http_check_eof+0x5c>)
 800ca52:	f00c f885 	bl	8018b60 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800ca56:	2301      	movs	r3, #1
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3710      	adds	r7, #16
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	08019c2c 	.word	0x08019c2c
 800ca64:	08019c9c 	.word	0x08019c9c
 800ca68:	08019c74 	.word	0x08019c74

0800ca6c <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800ca76:	2300      	movs	r3, #0
 800ca78:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca7e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d803      	bhi.n	800ca8e <http_send_data_nonssi+0x22>
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	e001      	b.n	800ca92 <http_send_data_nonssi+0x26>
 800ca8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ca92:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	6999      	ldr	r1, [r3, #24]
 800ca98:	f107 020c 	add.w	r2, r7, #12
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f7ff feee 	bl	800c880 <http_write>
 800caa4:	4603      	mov	r3, r0
 800caa6:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800caa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d10d      	bne.n	800cacc <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800cab0:	2301      	movs	r3, #1
 800cab2:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	699b      	ldr	r3, [r3, #24]
 800cab8:	89ba      	ldrh	r2, [r7, #12]
 800caba:	441a      	add	r2, r3
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cac4:	89ba      	ldrh	r2, [r7, #12]
 800cac6:	1a9a      	subs	r2, r3, r2
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800cacc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3710      	adds	r7, #16
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}

0800cad6 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800cad6:	b580      	push	{r7, lr}
 800cad8:	b084      	sub	sp, #16
 800cada:	af00      	add	r7, sp, #0
 800cadc:	6078      	str	r0, [r7, #4]
 800cade:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800cae0:	2300      	movs	r3, #0
 800cae2:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d101      	bne.n	800caee <http_send+0x18>
    return 0;
 800caea:	2300      	movs	r3, #0
 800caec:	e025      	b.n	800cb3a <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d108      	bne.n	800cb08 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800caf6:	6839      	ldr	r1, [r7, #0]
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f7ff ff87 	bl	800ca0c <http_check_eof>
 800cafe:	4603      	mov	r3, r0
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d101      	bne.n	800cb08 <http_send+0x32>
      return 0;
 800cb04:	2300      	movs	r3, #0
 800cb06:	e018      	b.n	800cb3a <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800cb08:	6839      	ldr	r1, [r7, #0]
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f7ff ffae 	bl	800ca6c <http_send_data_nonssi>
 800cb10:	4603      	mov	r3, r0
 800cb12:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d10d      	bne.n	800cb38 <http_send+0x62>
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	695b      	ldr	r3, [r3, #20]
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7ff fe4d 	bl	800c7c0 <fs_bytes_left>
 800cb26:	4603      	mov	r3, r0
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	dc05      	bgt.n	800cb38 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800cb2c:	6839      	ldr	r1, [r7, #0]
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f7ff ff5f 	bl	800c9f2 <http_eof>
    return 0;
 800cb34:	2300      	movs	r3, #0
 800cb36:	e000      	b.n	800cb3a <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800cb38:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3710      	adds	r7, #16
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
	...

0800cb44 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b084      	sub	sp, #16
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	4a1c      	ldr	r2, [pc, #112]	; (800cbc4 <http_get_404_file+0x80>)
 800cb52:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	4610      	mov	r0, r2
 800cb5e:	f7ff fde7 	bl	800c730 <fs_open>
 800cb62:	4603      	mov	r3, r0
 800cb64:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800cb66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d024      	beq.n	800cbb8 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	4a15      	ldr	r2, [pc, #84]	; (800cbc8 <http_get_404_file+0x84>)
 800cb72:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	4610      	mov	r0, r2
 800cb7e:	f7ff fdd7 	bl	800c730 <fs_open>
 800cb82:	4603      	mov	r3, r0
 800cb84:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800cb86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d014      	beq.n	800cbb8 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	4a0e      	ldr	r2, [pc, #56]	; (800cbcc <http_get_404_file+0x88>)
 800cb92:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800cb94:	687a      	ldr	r2, [r7, #4]
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	4610      	mov	r0, r2
 800cb9e:	f7ff fdc7 	bl	800c730 <fs_open>
 800cba2:	4603      	mov	r3, r0
 800cba4:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800cba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d004      	beq.n	800cbb8 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	601a      	str	r2, [r3, #0]
        return NULL;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	e000      	b.n	800cbba <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800cbb8:	687b      	ldr	r3, [r7, #4]
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	3710      	adds	r7, #16
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}
 800cbc2:	bf00      	nop
 800cbc4:	08019cd4 	.word	0x08019cd4
 800cbc8:	08019ce0 	.word	0x08019ce0
 800cbcc:	08019cec 	.word	0x08019cec

0800cbd0 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b08e      	sub	sp, #56	; 0x38
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	60f8      	str	r0, [r7, #12]
 800cbd8:	60b9      	str	r1, [r7, #8]
 800cbda:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800cbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d106      	bne.n	800cbf4 <http_parse_request+0x24>
 800cbe6:	4b65      	ldr	r3, [pc, #404]	; (800cd7c <http_parse_request+0x1ac>)
 800cbe8:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800cbec:	4964      	ldr	r1, [pc, #400]	; (800cd80 <http_parse_request+0x1b0>)
 800cbee:	4865      	ldr	r0, [pc, #404]	; (800cd84 <http_parse_request+0x1b4>)
 800cbf0:	f00b ffb6 	bl	8018b60 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d106      	bne.n	800cc08 <http_parse_request+0x38>
 800cbfa:	4b60      	ldr	r3, [pc, #384]	; (800cd7c <http_parse_request+0x1ac>)
 800cbfc:	f240 72af 	movw	r2, #1967	; 0x7af
 800cc00:	4961      	ldr	r1, [pc, #388]	; (800cd88 <http_parse_request+0x1b8>)
 800cc02:	4860      	ldr	r0, [pc, #384]	; (800cd84 <http_parse_request+0x1b4>)
 800cc04:	f00b ffac 	bl	8018b60 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	695b      	ldr	r3, [r3, #20]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d103      	bne.n	800cc18 <http_parse_request+0x48>
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	699b      	ldr	r3, [r3, #24]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d002      	beq.n	800cc1e <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800cc18:	f06f 0307 	mvn.w	r3, #7
 800cc1c:	e0a9      	b.n	800cd72 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	6a1b      	ldr	r3, [r3, #32]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d103      	bne.n	800cc2e <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc2a:	621a      	str	r2, [r3, #32]
 800cc2c:	e005      	b.n	800cc3a <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	6a1b      	ldr	r3, [r3, #32]
 800cc32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc34:	4618      	mov	r0, r3
 800cc36:	f002 f943 	bl	800eec0 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800cc3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cc3c:	f002 f918 	bl	800ee70 <pbuf_ref>

  if (hs->req->next != NULL) {
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	6a1b      	ldr	r3, [r3, #32]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d012      	beq.n	800cc70 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	6a1b      	ldr	r3, [r3, #32]
 800cc4e:	891b      	ldrh	r3, [r3, #8]
 800cc50:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800cc54:	4293      	cmp	r3, r2
 800cc56:	bf28      	it	cs
 800cc58:	4613      	movcs	r3, r2
 800cc5a:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	6a18      	ldr	r0, [r3, #32]
 800cc60:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800cc62:	2300      	movs	r3, #0
 800cc64:	4949      	ldr	r1, [pc, #292]	; (800cd8c <http_parse_request+0x1bc>)
 800cc66:	f002 fa63 	bl	800f130 <pbuf_copy_partial>
    data = httpd_req_buf;
 800cc6a:	4b48      	ldr	r3, [pc, #288]	; (800cd8c <http_parse_request+0x1bc>)
 800cc6c:	637b      	str	r3, [r7, #52]	; 0x34
 800cc6e:	e005      	b.n	800cc7c <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800cc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800cc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc78:	895b      	ldrh	r3, [r3, #10]
 800cc7a:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800cc7c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800cc7e:	2b06      	cmp	r3, #6
 800cc80:	d962      	bls.n	800cd48 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800cc82:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800cc84:	461a      	mov	r2, r3
 800cc86:	4942      	ldr	r1, [pc, #264]	; (800cd90 <http_parse_request+0x1c0>)
 800cc88:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cc8a:	f000 fb99 	bl	800d3c0 <lwip_strnstr>
 800cc8e:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800cc90:	6a3b      	ldr	r3, [r7, #32]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d058      	beq.n	800cd48 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800cc96:	2300      	movs	r3, #0
 800cc98:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800cc9a:	2204      	movs	r2, #4
 800cc9c:	493d      	ldr	r1, [pc, #244]	; (800cd94 <http_parse_request+0x1c4>)
 800cc9e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cca0:	f00c f87e 	bl	8018da0 <strncmp>
 800cca4:	4603      	mov	r3, r0
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d116      	bne.n	800ccd8 <http_parse_request+0x108>
        sp1 = data + 3;
 800ccaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccac:	3303      	adds	r3, #3
 800ccae:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800ccb0:	69fb      	ldr	r3, [r7, #28]
 800ccb2:	1c5a      	adds	r2, r3, #1
 800ccb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccb6:	1ad3      	subs	r3, r2, r3
 800ccb8:	b29b      	uxth	r3, r3
 800ccba:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ccbc:	1ad3      	subs	r3, r2, r3
 800ccbe:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800ccc0:	69fb      	ldr	r3, [r7, #28]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	8b7a      	ldrh	r2, [r7, #26]
 800ccc6:	4934      	ldr	r1, [pc, #208]	; (800cd98 <http_parse_request+0x1c8>)
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f000 fb79 	bl	800d3c0 <lwip_strnstr>
 800ccce:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800ccd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d111      	bne.n	800ccfa <http_parse_request+0x12a>
 800ccd6:	e006      	b.n	800cce6 <http_parse_request+0x116>
        data[4] = 0;
 800ccd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccda:	3304      	adds	r3, #4
 800ccdc:	2200      	movs	r2, #0
 800ccde:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800cce0:	f06f 030f 	mvn.w	r3, #15
 800cce4:	e045      	b.n	800cd72 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	3301      	adds	r3, #1
 800ccea:	8b7a      	ldrh	r2, [r7, #26]
 800ccec:	4928      	ldr	r1, [pc, #160]	; (800cd90 <http_parse_request+0x1c0>)
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f000 fb66 	bl	800d3c0 <lwip_strnstr>
 800ccf4:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800ccfa:	69fb      	ldr	r3, [r7, #28]
 800ccfc:	3301      	adds	r3, #1
 800ccfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd00:	1ad3      	subs	r3, r2, r3
 800cd02:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800cd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d01e      	beq.n	800cd48 <http_parse_request+0x178>
 800cd0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd0c:	69fb      	ldr	r3, [r7, #28]
 800cd0e:	429a      	cmp	r2, r3
 800cd10:	d91a      	bls.n	800cd48 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800cd12:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800cd14:	461a      	mov	r2, r3
 800cd16:	4921      	ldr	r1, [pc, #132]	; (800cd9c <http_parse_request+0x1cc>)
 800cd18:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800cd1a:	f000 fb51 	bl	800d3c0 <lwip_strnstr>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d011      	beq.n	800cd48 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800cd24:	69fb      	ldr	r3, [r7, #28]
 800cd26:	3301      	adds	r3, #1
 800cd28:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800cd2a:	69fb      	ldr	r3, [r7, #28]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800cd30:	8b3b      	ldrh	r3, [r7, #24]
 800cd32:	697a      	ldr	r2, [r7, #20]
 800cd34:	4413      	add	r3, r2
 800cd36:	2200      	movs	r2, #0
 800cd38:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800cd3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd3c:	6979      	ldr	r1, [r7, #20]
 800cd3e:	68b8      	ldr	r0, [r7, #8]
 800cd40:	f000 f82e 	bl	800cda0 <http_find_file>
 800cd44:	4603      	mov	r3, r0
 800cd46:	e014      	b.n	800cd72 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	6a1b      	ldr	r3, [r3, #32]
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f002 f877 	bl	800ee40 <pbuf_clen>
 800cd52:	4603      	mov	r3, r0
 800cd54:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	6a1b      	ldr	r3, [r3, #32]
 800cd5a:	891b      	ldrh	r3, [r3, #8]
 800cd5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd60:	d205      	bcs.n	800cd6e <http_parse_request+0x19e>
 800cd62:	8a7b      	ldrh	r3, [r7, #18]
 800cd64:	2b05      	cmp	r3, #5
 800cd66:	d802      	bhi.n	800cd6e <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800cd68:	f06f 0304 	mvn.w	r3, #4
 800cd6c:	e001      	b.n	800cd72 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800cd6e:	f06f 030f 	mvn.w	r3, #15
  }
}
 800cd72:	4618      	mov	r0, r3
 800cd74:	3738      	adds	r7, #56	; 0x38
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
 800cd7a:	bf00      	nop
 800cd7c:	08019c2c 	.word	0x08019c2c
 800cd80:	08019cf8 	.word	0x08019cf8
 800cd84:	08019c74 	.word	0x08019c74
 800cd88:	08019d04 	.word	0x08019d04
 800cd8c:	24005540 	.word	0x24005540
 800cd90:	08019d10 	.word	0x08019d10
 800cd94:	08019d14 	.word	0x08019d14
 800cd98:	08019d1c 	.word	0x08019d1c
 800cd9c:	08019d20 	.word	0x08019d20

0800cda0 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b092      	sub	sp, #72	; 0x48
 800cda4:	af02      	add	r7, sp, #8
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800cdac:	2300      	movs	r3, #0
 800cdae:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	f7f3 fa99 	bl	80002f4 <strlen>
 800cdc2:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800cdc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d06b      	beq.n	800cea2 <http_find_file+0x102>
 800cdca:	68ba      	ldr	r2, [r7, #8]
 800cdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdce:	3b01      	subs	r3, #1
 800cdd0:	4413      	add	r3, r2
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	2b2f      	cmp	r3, #47	; 0x2f
 800cdd6:	d164      	bne.n	800cea2 <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800cdd8:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800cdda:	4a53      	ldr	r2, [pc, #332]	; (800cf28 <http_find_file+0x188>)
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d102      	bne.n	800cde6 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800cde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	d15d      	bne.n	800cea2 <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800cde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde8:	3b01      	subs	r3, #1
 800cdea:	2b3f      	cmp	r3, #63	; 0x3f
 800cdec:	bf28      	it	cs
 800cdee:	233f      	movcs	r3, #63	; 0x3f
 800cdf0:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800cdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d00a      	beq.n	800ce0e <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdfc:	4619      	mov	r1, r3
 800cdfe:	484a      	ldr	r0, [pc, #296]	; (800cf28 <http_find_file+0x188>)
 800ce00:	f00b fe03 	bl	8018a0a <memcpy>
      http_uri_buf[copy_len] = 0;
 800ce04:	4a48      	ldr	r2, [pc, #288]	; (800cf28 <http_find_file+0x188>)
 800ce06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce08:	4413      	add	r3, r2
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800ce0e:	2300      	movs	r3, #0
 800ce10:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce12:	e043      	b.n	800ce9c <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800ce14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d028      	beq.n	800ce6c <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800ce1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1c:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800ce20:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800ce22:	6a3b      	ldr	r3, [r7, #32]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d01e      	beq.n	800ce66 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800ce28:	4a40      	ldr	r2, [pc, #256]	; (800cf2c <http_find_file+0x18c>)
 800ce2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7f3 fa5f 	bl	80002f4 <strlen>
 800ce36:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800ce38:	69fa      	ldr	r2, [r7, #28]
 800ce3a:	6a3b      	ldr	r3, [r7, #32]
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	bf28      	it	cs
 800ce40:	4613      	movcs	r3, r2
 800ce42:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800ce44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce46:	4a38      	ldr	r2, [pc, #224]	; (800cf28 <http_find_file+0x188>)
 800ce48:	1898      	adds	r0, r3, r2
 800ce4a:	4a38      	ldr	r2, [pc, #224]	; (800cf2c <http_find_file+0x18c>)
 800ce4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce4e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ce52:	69ba      	ldr	r2, [r7, #24]
 800ce54:	4619      	mov	r1, r3
 800ce56:	f00b fdd8 	bl	8018a0a <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800ce5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce5c:	69bb      	ldr	r3, [r7, #24]
 800ce5e:	4413      	add	r3, r2
 800ce60:	4a31      	ldr	r2, [pc, #196]	; (800cf28 <http_find_file+0x188>)
 800ce62:	2100      	movs	r1, #0
 800ce64:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800ce66:	4b30      	ldr	r3, [pc, #192]	; (800cf28 <http_find_file+0x188>)
 800ce68:	633b      	str	r3, [r7, #48]	; 0x30
 800ce6a:	e004      	b.n	800ce76 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800ce6c:	4a2f      	ldr	r2, [pc, #188]	; (800cf2c <http_find_file+0x18c>)
 800ce6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ce74:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7ff fc58 	bl	800c730 <fs_open>
 800ce80:	4603      	mov	r3, r0
 800ce82:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800ce84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d104      	bne.n	800ce96 <http_find_file+0xf6>
        uri = file_name;
 800ce8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce8e:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800ce94:	e005      	b.n	800cea2 <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800ce96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce98:	3301      	adds	r3, #1
 800ce9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce9e:	2b04      	cmp	r3, #4
 800cea0:	d9b8      	bls.n	800ce14 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800cea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d124      	bne.n	800cef2 <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	213f      	movs	r1, #63	; 0x3f
 800ceac:	4618      	mov	r0, r3
 800ceae:	f00b ff6a 	bl	8018d86 <strchr>
 800ceb2:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800ceb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d005      	beq.n	800cec6 <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800ceba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cebc:	2200      	movs	r2, #0
 800cebe:	701a      	strb	r2, [r3, #0]
      params++;
 800cec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cec2:	3301      	adds	r3, #1
 800cec4:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	68ba      	ldr	r2, [r7, #8]
 800ceca:	4611      	mov	r1, r2
 800cecc:	4618      	mov	r0, r3
 800cece:	f7ff fc2f 	bl	800c730 <fs_open>
 800ced2:	4603      	mov	r3, r0
 800ced4:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800ced6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d102      	bne.n	800cee4 <http_find_file+0x144>
      file = &hs->file_handle;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	63bb      	str	r3, [r7, #56]	; 0x38
 800cee2:	e006      	b.n	800cef2 <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800cee4:	f107 0308 	add.w	r3, r7, #8
 800cee8:	4619      	mov	r1, r3
 800ceea:	68f8      	ldr	r0, [r7, #12]
 800ceec:	f7ff fe2a 	bl	800cb44 <http_get_404_file>
 800cef0:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800cef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d106      	bne.n	800cf06 <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800cef8:	f107 0308 	add.w	r3, r7, #8
 800cefc:	4619      	mov	r1, r3
 800cefe:	68f8      	ldr	r0, [r7, #12]
 800cf00:	f7ff fe20 	bl	800cb44 <http_get_404_file>
 800cf04:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800cf06:	68ba      	ldr	r2, [r7, #8]
 800cf08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf0a:	9301      	str	r3, [sp, #4]
 800cf0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf10:	9300      	str	r3, [sp, #0]
 800cf12:	4613      	mov	r3, r2
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf18:	68f8      	ldr	r0, [r7, #12]
 800cf1a:	f000 f809 	bl	800cf30 <http_init_file>
 800cf1e:	4603      	mov	r3, r0
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3740      	adds	r7, #64	; 0x40
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}
 800cf28:	24005940 	.word	0x24005940
 800cf2c:	0801ea88 	.word	0x0801ea88

0800cf30 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b086      	sub	sp, #24
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	607a      	str	r2, [r7, #4]
 800cf3c:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d05c      	beq.n	800cffe <http_init_file+0xce>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d106      	bne.n	800cf5a <http_init_file+0x2a>
 800cf4c:	4b35      	ldr	r3, [pc, #212]	; (800d024 <http_init_file+0xf4>)
 800cf4e:	f640 120b 	movw	r2, #2315	; 0x90b
 800cf52:	4935      	ldr	r1, [pc, #212]	; (800d028 <http_init_file+0xf8>)
 800cf54:	4835      	ldr	r0, [pc, #212]	; (800d02c <http_init_file+0xfc>)
 800cf56:	f00b fe03 	bl	8018b60 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	68ba      	ldr	r2, [r7, #8]
 800cf5e:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800cf60:	68bb      	ldr	r3, [r7, #8]
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800cf68:	68bb      	ldr	r3, [r7, #8]
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	da06      	bge.n	800cf7e <http_init_file+0x4e>
 800cf70:	4b2c      	ldr	r3, [pc, #176]	; (800d024 <http_init_file+0xf4>)
 800cf72:	f640 1234 	movw	r2, #2356	; 0x934
 800cf76:	492e      	ldr	r1, [pc, #184]	; (800d030 <http_init_file+0x100>)
 800cf78:	482c      	ldr	r0, [pc, #176]	; (800d02c <http_init_file+0xfc>)
 800cf7a:	f00b fdf1 	bl	8018b60 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	685b      	ldr	r3, [r3, #4]
 800cf82:	461a      	mov	r2, r3
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	695b      	ldr	r3, [r3, #20]
 800cf94:	7c1b      	ldrb	r3, [r3, #16]
 800cf96:	f003 0301 	and.w	r3, r3, #1
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d106      	bne.n	800cfac <http_init_file+0x7c>
 800cf9e:	4b21      	ldr	r3, [pc, #132]	; (800d024 <http_init_file+0xf4>)
 800cfa0:	f640 1243 	movw	r2, #2371	; 0x943
 800cfa4:	4923      	ldr	r1, [pc, #140]	; (800d034 <http_init_file+0x104>)
 800cfa6:	4821      	ldr	r0, [pc, #132]	; (800d02c <http_init_file+0xfc>)
 800cfa8:	f00b fdda 	bl	8018b60 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d032      	beq.n	800d018 <http_init_file+0xe8>
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	695b      	ldr	r3, [r3, #20]
 800cfb6:	7c1b      	ldrb	r3, [r3, #16]
 800cfb8:	f003 0301 	and.w	r3, r3, #1
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d02b      	beq.n	800d018 <http_init_file+0xe8>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	6998      	ldr	r0, [r3, #24]
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfc8:	461a      	mov	r2, r3
 800cfca:	491b      	ldr	r1, [pc, #108]	; (800d038 <http_init_file+0x108>)
 800cfcc:	f000 f9f8 	bl	800d3c0 <lwip_strnstr>
 800cfd0:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d01f      	beq.n	800d018 <http_init_file+0xe8>
        int diff = file_start + 4 - hs->file;
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	1d1a      	adds	r2, r3, #4
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	699b      	ldr	r3, [r3, #24]
 800cfe0:	1ad3      	subs	r3, r2, r3
 800cfe2:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	699a      	ldr	r2, [r3, #24]
 800cfe8:	693b      	ldr	r3, [r7, #16]
 800cfea:	441a      	add	r2, r3
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	1ad2      	subs	r2, r2, r3
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	625a      	str	r2, [r3, #36]	; 0x24
 800cffc:	e00c      	b.n	800d018 <http_init_file+0xe8>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2200      	movs	r2, #0
 800d002:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2200      	movs	r2, #0
 800d008:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2200      	movs	r2, #0
 800d00e:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2200      	movs	r2, #0
 800d014:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800d018:	2300      	movs	r3, #0
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3718      	adds	r7, #24
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	08019c2c 	.word	0x08019c2c
 800d028:	08019d28 	.word	0x08019d28
 800d02c:	08019c74 	.word	0x08019c74
 800d030:	08019d3c 	.word	0x08019d3c
 800d034:	08019d5c 	.word	0x08019d5c
 800d038:	08019d20 	.word	0x08019d20

0800d03c <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b084      	sub	sp, #16
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	460b      	mov	r3, r1
 800d046:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d002      	beq.n	800d058 <http_err+0x1c>
    http_state_free(hs);
 800d052:	68f8      	ldr	r0, [r7, #12]
 800d054:	f7ff fc02 	bl	800c85c <http_state_free>
  }
}
 800d058:	bf00      	nop
 800d05a:	3710      	adds	r7, #16
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b086      	sub	sp, #24
 800d064:	af00      	add	r7, sp, #0
 800d066:	60f8      	str	r0, [r7, #12]
 800d068:	60b9      	str	r1, [r7, #8]
 800d06a:	4613      	mov	r3, r2
 800d06c:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d101      	bne.n	800d07c <http_sent+0x1c>
    return ERR_OK;
 800d078:	2300      	movs	r3, #0
 800d07a:	e008      	b.n	800d08e <http_sent+0x2e>
  }

  hs->retries = 0;
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	2200      	movs	r2, #0
 800d080:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800d084:	6979      	ldr	r1, [r7, #20]
 800d086:	68b8      	ldr	r0, [r7, #8]
 800d088:	f7ff fd25 	bl	800cad6 <http_send>

  return ERR_OK;
 800d08c:	2300      	movs	r3, #0
}
 800d08e:	4618      	mov	r0, r3
 800d090:	3718      	adds	r7, #24
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}

0800d096 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800d096:	b580      	push	{r7, lr}
 800d098:	b084      	sub	sp, #16
 800d09a:	af00      	add	r7, sp, #0
 800d09c:	6078      	str	r0, [r7, #4]
 800d09e:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d107      	bne.n	800d0ba <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800d0aa:	2100      	movs	r1, #0
 800d0ac:	6838      	ldr	r0, [r7, #0]
 800d0ae:	f7ff fc91 	bl	800c9d4 <http_close_conn>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	e021      	b.n	800d0fe <http_poll+0x68>
  } else {
    hs->retries++;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	b2da      	uxtb	r2, r3
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0d0:	2b04      	cmp	r3, #4
 800d0d2:	d105      	bne.n	800d0e0 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800d0d4:	68f9      	ldr	r1, [r7, #12]
 800d0d6:	6838      	ldr	r0, [r7, #0]
 800d0d8:	f7ff fc7c 	bl	800c9d4 <http_close_conn>
      return ERR_OK;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	e00e      	b.n	800d0fe <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	695b      	ldr	r3, [r3, #20]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d009      	beq.n	800d0fc <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800d0e8:	68f9      	ldr	r1, [r7, #12]
 800d0ea:	6838      	ldr	r0, [r7, #0]
 800d0ec:	f7ff fcf3 	bl	800cad6 <http_send>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d002      	beq.n	800d0fc <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800d0f6:	6838      	ldr	r0, [r7, #0]
 800d0f8:	f007 f9a2 	bl	8014440 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800d0fc:	2300      	movs	r3, #0
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3710      	adds	r7, #16
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
	...

0800d108 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b086      	sub	sp, #24
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	60f8      	str	r0, [r7, #12]
 800d110:	60b9      	str	r1, [r7, #8]
 800d112:	607a      	str	r2, [r7, #4]
 800d114:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800d11a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d105      	bne.n	800d12e <http_recv+0x26>
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d002      	beq.n	800d12e <http_recv+0x26>
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d111      	bne.n	800d152 <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d008      	beq.n	800d146 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	891b      	ldrh	r3, [r3, #8]
 800d138:	4619      	mov	r1, r3
 800d13a:	68b8      	ldr	r0, [r7, #8]
 800d13c:	f002 fd70 	bl	800fc20 <tcp_recved>
      pbuf_free(p);
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f001 fdef 	bl	800ed24 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800d146:	6979      	ldr	r1, [r7, #20]
 800d148:	68b8      	ldr	r0, [r7, #8]
 800d14a:	f7ff fc43 	bl	800c9d4 <http_close_conn>
    return ERR_OK;
 800d14e:	2300      	movs	r3, #0
 800d150:	e055      	b.n	800d1fe <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	891b      	ldrh	r3, [r3, #8]
 800d156:	4619      	mov	r1, r3
 800d158:	68b8      	ldr	r0, [r7, #8]
 800d15a:	f002 fd61 	bl	800fc20 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	695b      	ldr	r3, [r3, #20]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d147      	bne.n	800d1f6 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800d166:	68ba      	ldr	r2, [r7, #8]
 800d168:	6979      	ldr	r1, [r7, #20]
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f7ff fd30 	bl	800cbd0 <http_parse_request>
 800d170:	4603      	mov	r3, r0
 800d172:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800d174:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d015      	beq.n	800d1a8 <http_recv+0xa0>
 800d17c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d180:	f113 0f05 	cmn.w	r3, #5
 800d184:	d010      	beq.n	800d1a8 <http_recv+0xa0>
 800d186:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d18a:	f113 0f10 	cmn.w	r3, #16
 800d18e:	d00b      	beq.n	800d1a8 <http_recv+0xa0>
 800d190:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d194:	f113 0f08 	cmn.w	r3, #8
 800d198:	d006      	beq.n	800d1a8 <http_recv+0xa0>
 800d19a:	4b1b      	ldr	r3, [pc, #108]	; (800d208 <http_recv+0x100>)
 800d19c:	f640 2204 	movw	r2, #2564	; 0xa04
 800d1a0:	491a      	ldr	r1, [pc, #104]	; (800d20c <http_recv+0x104>)
 800d1a2:	481b      	ldr	r0, [pc, #108]	; (800d210 <http_recv+0x108>)
 800d1a4:	f00b fcdc 	bl	8018b60 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800d1a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d1ac:	f113 0f05 	cmn.w	r3, #5
 800d1b0:	d00b      	beq.n	800d1ca <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	6a1b      	ldr	r3, [r3, #32]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d007      	beq.n	800d1ca <http_recv+0xc2>
          pbuf_free(hs->req);
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	6a1b      	ldr	r3, [r3, #32]
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f001 fdb0 	bl	800ed24 <pbuf_free>
          hs->req = NULL;
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f001 fdaa 	bl	800ed24 <pbuf_free>
      if (parsed == ERR_OK) {
 800d1d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d104      	bne.n	800d1e2 <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800d1d8:	6979      	ldr	r1, [r7, #20]
 800d1da:	68b8      	ldr	r0, [r7, #8]
 800d1dc:	f7ff fc7b 	bl	800cad6 <http_send>
 800d1e0:	e00c      	b.n	800d1fc <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800d1e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d1e6:	f113 0f10 	cmn.w	r3, #16
 800d1ea:	d107      	bne.n	800d1fc <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800d1ec:	6979      	ldr	r1, [r7, #20]
 800d1ee:	68b8      	ldr	r0, [r7, #8]
 800d1f0:	f7ff fbf0 	bl	800c9d4 <http_close_conn>
 800d1f4:	e002      	b.n	800d1fc <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f001 fd94 	bl	800ed24 <pbuf_free>
    }
  }
  return ERR_OK;
 800d1fc:	2300      	movs	r3, #0
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	3718      	adds	r7, #24
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop
 800d208:	08019c2c 	.word	0x08019c2c
 800d20c:	08019d88 	.word	0x08019d88
 800d210:	08019c74 	.word	0x08019c74

0800d214 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b086      	sub	sp, #24
 800d218:	af00      	add	r7, sp, #0
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	4613      	mov	r3, r2
 800d220:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800d222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d102      	bne.n	800d230 <http_accept+0x1c>
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d102      	bne.n	800d236 <http_accept+0x22>
    return ERR_VAL;
 800d230:	f06f 0305 	mvn.w	r3, #5
 800d234:	e025      	b.n	800d282 <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800d236:	2101      	movs	r1, #1
 800d238:	68b8      	ldr	r0, [r7, #8]
 800d23a:	f003 f9d5 	bl	80105e8 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800d23e:	f7ff fadb 	bl	800c7f8 <http_state_alloc>
 800d242:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d102      	bne.n	800d250 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800d24a:	f04f 33ff 	mov.w	r3, #4294967295
 800d24e:	e018      	b.n	800d282 <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	68ba      	ldr	r2, [r7, #8]
 800d254:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800d256:	6979      	ldr	r1, [r7, #20]
 800d258:	68b8      	ldr	r0, [r7, #8]
 800d25a:	f003 fbc5 	bl	80109e8 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800d25e:	490b      	ldr	r1, [pc, #44]	; (800d28c <http_accept+0x78>)
 800d260:	68b8      	ldr	r0, [r7, #8]
 800d262:	f003 fbd3 	bl	8010a0c <tcp_recv>
  altcp_err(pcb, http_err);
 800d266:	490a      	ldr	r1, [pc, #40]	; (800d290 <http_accept+0x7c>)
 800d268:	68b8      	ldr	r0, [r7, #8]
 800d26a:	f003 fc13 	bl	8010a94 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800d26e:	2204      	movs	r2, #4
 800d270:	4908      	ldr	r1, [pc, #32]	; (800d294 <http_accept+0x80>)
 800d272:	68b8      	ldr	r0, [r7, #8]
 800d274:	f003 fc48 	bl	8010b08 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800d278:	4907      	ldr	r1, [pc, #28]	; (800d298 <http_accept+0x84>)
 800d27a:	68b8      	ldr	r0, [r7, #8]
 800d27c:	f003 fbe8 	bl	8010a50 <tcp_sent>

  return ERR_OK;
 800d280:	2300      	movs	r3, #0
}
 800d282:	4618      	mov	r0, r3
 800d284:	3718      	adds	r7, #24
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	0800d109 	.word	0x0800d109
 800d290:	0800d03d 	.word	0x0800d03d
 800d294:	0800d097 	.word	0x0800d097
 800d298:	0800d061 	.word	0x0800d061

0800d29c <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b084      	sub	sp, #16
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	460b      	mov	r3, r1
 800d2a6:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d029      	beq.n	800d302 <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800d2ae:	2101      	movs	r1, #1
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f003 f999 	bl	80105e8 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800d2b6:	887b      	ldrh	r3, [r7, #2]
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	4914      	ldr	r1, [pc, #80]	; (800d30c <httpd_init_pcb+0x70>)
 800d2bc:	6878      	ldr	r0, [r7, #4]
 800d2be:	f002 fae1 	bl	800f884 <tcp_bind>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800d2c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d006      	beq.n	800d2dc <httpd_init_pcb+0x40>
 800d2ce:	4b10      	ldr	r3, [pc, #64]	; (800d310 <httpd_init_pcb+0x74>)
 800d2d0:	f640 2257 	movw	r2, #2647	; 0xa57
 800d2d4:	490f      	ldr	r1, [pc, #60]	; (800d314 <httpd_init_pcb+0x78>)
 800d2d6:	4810      	ldr	r0, [pc, #64]	; (800d318 <httpd_init_pcb+0x7c>)
 800d2d8:	f00b fc42 	bl	8018b60 <iprintf>
    pcb = altcp_listen(pcb);
 800d2dc:	21ff      	movs	r1, #255	; 0xff
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f002 fb88 	bl	800f9f4 <tcp_listen_with_backlog>
 800d2e4:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d106      	bne.n	800d2fa <httpd_init_pcb+0x5e>
 800d2ec:	4b08      	ldr	r3, [pc, #32]	; (800d310 <httpd_init_pcb+0x74>)
 800d2ee:	f640 2259 	movw	r2, #2649	; 0xa59
 800d2f2:	490a      	ldr	r1, [pc, #40]	; (800d31c <httpd_init_pcb+0x80>)
 800d2f4:	4808      	ldr	r0, [pc, #32]	; (800d318 <httpd_init_pcb+0x7c>)
 800d2f6:	f00b fc33 	bl	8018b60 <iprintf>
    altcp_accept(pcb, http_accept);
 800d2fa:	4909      	ldr	r1, [pc, #36]	; (800d320 <httpd_init_pcb+0x84>)
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f003 fbeb 	bl	8010ad8 <tcp_accept>
  }
}
 800d302:	bf00      	nop
 800d304:	3710      	adds	r7, #16
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
 800d30a:	bf00      	nop
 800d30c:	0801ebc0 	.word	0x0801ebc0
 800d310:	08019c2c 	.word	0x08019c2c
 800d314:	08019db4 	.word	0x08019db4
 800d318:	08019c74 	.word	0x08019c74
 800d31c:	08019dd0 	.word	0x08019dd0
 800d320:	0800d215 	.word	0x0800d215

0800d324 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800d32a:	202e      	movs	r0, #46	; 0x2e
 800d32c:	f003 fb4e 	bl	80109cc <tcp_new_ip_type>
 800d330:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d106      	bne.n	800d346 <httpd_init+0x22>
 800d338:	4b07      	ldr	r3, [pc, #28]	; (800d358 <httpd_init+0x34>)
 800d33a:	f640 2272 	movw	r2, #2674	; 0xa72
 800d33e:	4907      	ldr	r1, [pc, #28]	; (800d35c <httpd_init+0x38>)
 800d340:	4807      	ldr	r0, [pc, #28]	; (800d360 <httpd_init+0x3c>)
 800d342:	f00b fc0d 	bl	8018b60 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800d346:	2150      	movs	r1, #80	; 0x50
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f7ff ffa7 	bl	800d29c <httpd_init_pcb>
}
 800d34e:	bf00      	nop
 800d350:	3708      	adds	r7, #8
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}
 800d356:	bf00      	nop
 800d358:	08019c2c 	.word	0x08019c2c
 800d35c:	08019df0 	.word	0x08019df0
 800d360:	08019c74 	.word	0x08019c74

0800d364 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d364:	b480      	push	{r7}
 800d366:	b083      	sub	sp, #12
 800d368:	af00      	add	r7, sp, #0
 800d36a:	4603      	mov	r3, r0
 800d36c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d36e:	88fb      	ldrh	r3, [r7, #6]
 800d370:	021b      	lsls	r3, r3, #8
 800d372:	b21a      	sxth	r2, r3
 800d374:	88fb      	ldrh	r3, [r7, #6]
 800d376:	0a1b      	lsrs	r3, r3, #8
 800d378:	b29b      	uxth	r3, r3
 800d37a:	b21b      	sxth	r3, r3
 800d37c:	4313      	orrs	r3, r2
 800d37e:	b21b      	sxth	r3, r3
 800d380:	b29b      	uxth	r3, r3
}
 800d382:	4618      	mov	r0, r3
 800d384:	370c      	adds	r7, #12
 800d386:	46bd      	mov	sp, r7
 800d388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38c:	4770      	bx	lr

0800d38e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d38e:	b480      	push	{r7}
 800d390:	b083      	sub	sp, #12
 800d392:	af00      	add	r7, sp, #0
 800d394:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	061a      	lsls	r2, r3, #24
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	021b      	lsls	r3, r3, #8
 800d39e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d3a2:	431a      	orrs	r2, r3
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	0a1b      	lsrs	r3, r3, #8
 800d3a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d3ac:	431a      	orrs	r2, r3
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	0e1b      	lsrs	r3, r3, #24
 800d3b2:	4313      	orrs	r3, r2
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	370c      	adds	r7, #12
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b086      	sub	sp, #24
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	60f8      	str	r0, [r7, #12]
 800d3c8:	60b9      	str	r1, [r7, #8]
 800d3ca:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800d3cc:	68b8      	ldr	r0, [r7, #8]
 800d3ce:	f7f2 ff91 	bl	80002f4 <strlen>
 800d3d2:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800d3d4:	693b      	ldr	r3, [r7, #16]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d101      	bne.n	800d3de <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	e022      	b.n	800d424 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	617b      	str	r3, [r7, #20]
 800d3e2:	e012      	b.n	800d40a <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	781a      	ldrb	r2, [r3, #0]
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d109      	bne.n	800d404 <lwip_strnstr+0x44>
 800d3f0:	693a      	ldr	r2, [r7, #16]
 800d3f2:	68b9      	ldr	r1, [r7, #8]
 800d3f4:	6978      	ldr	r0, [r7, #20]
 800d3f6:	f00b fcd3 	bl	8018da0 <strncmp>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d101      	bne.n	800d404 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	e00f      	b.n	800d424 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	3301      	adds	r3, #1
 800d408:	617b      	str	r3, [r7, #20]
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	781b      	ldrb	r3, [r3, #0]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d007      	beq.n	800d422 <lwip_strnstr+0x62>
 800d412:	697a      	ldr	r2, [r7, #20]
 800d414:	693b      	ldr	r3, [r7, #16]
 800d416:	441a      	add	r2, r3
 800d418:	68f9      	ldr	r1, [r7, #12]
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	440b      	add	r3, r1
 800d41e:	429a      	cmp	r2, r3
 800d420:	d9e0      	bls.n	800d3e4 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800d422:	2300      	movs	r3, #0
}
 800d424:	4618      	mov	r0, r3
 800d426:	3718      	adds	r7, #24
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800d42c:	b480      	push	{r7}
 800d42e:	b089      	sub	sp, #36	; 0x24
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800d43a:	2300      	movs	r3, #0
 800d43c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800d43e:	2300      	movs	r3, #0
 800d440:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800d442:	69fb      	ldr	r3, [r7, #28]
 800d444:	f003 0301 	and.w	r3, r3, #1
 800d448:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d00d      	beq.n	800d46c <lwip_standard_chksum+0x40>
 800d450:	683b      	ldr	r3, [r7, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	dd0a      	ble.n	800d46c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800d456:	69fa      	ldr	r2, [r7, #28]
 800d458:	1c53      	adds	r3, r2, #1
 800d45a:	61fb      	str	r3, [r7, #28]
 800d45c:	f107 030e 	add.w	r3, r7, #14
 800d460:	3301      	adds	r3, #1
 800d462:	7812      	ldrb	r2, [r2, #0]
 800d464:	701a      	strb	r2, [r3, #0]
    len--;
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	3b01      	subs	r3, #1
 800d46a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800d46c:	69fb      	ldr	r3, [r7, #28]
 800d46e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800d470:	e00a      	b.n	800d488 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800d472:	69bb      	ldr	r3, [r7, #24]
 800d474:	1c9a      	adds	r2, r3, #2
 800d476:	61ba      	str	r2, [r7, #24]
 800d478:	881b      	ldrh	r3, [r3, #0]
 800d47a:	461a      	mov	r2, r3
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	4413      	add	r3, r2
 800d480:	617b      	str	r3, [r7, #20]
    len -= 2;
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	3b02      	subs	r3, #2
 800d486:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	dcf1      	bgt.n	800d472 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	2b00      	cmp	r3, #0
 800d492:	dd04      	ble.n	800d49e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800d494:	f107 030e 	add.w	r3, r7, #14
 800d498:	69ba      	ldr	r2, [r7, #24]
 800d49a:	7812      	ldrb	r2, [r2, #0]
 800d49c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800d49e:	89fb      	ldrh	r3, [r7, #14]
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	4413      	add	r3, r2
 800d4a6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800d4a8:	697b      	ldr	r3, [r7, #20]
 800d4aa:	0c1a      	lsrs	r2, r3, #16
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	4413      	add	r3, r2
 800d4b2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	0c1a      	lsrs	r2, r3, #16
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	b29b      	uxth	r3, r3
 800d4bc:	4413      	add	r3, r2
 800d4be:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d007      	beq.n	800d4d6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800d4c6:	697b      	ldr	r3, [r7, #20]
 800d4c8:	021b      	lsls	r3, r3, #8
 800d4ca:	b29a      	uxth	r2, r3
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	0a1b      	lsrs	r3, r3, #8
 800d4d0:	b2db      	uxtb	r3, r3
 800d4d2:	4313      	orrs	r3, r2
 800d4d4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	b29b      	uxth	r3, r3
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3724      	adds	r7, #36	; 0x24
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e4:	4770      	bx	lr

0800d4e6 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800d4e6:	b580      	push	{r7, lr}
 800d4e8:	b082      	sub	sp, #8
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	6078      	str	r0, [r7, #4]
 800d4ee:	460b      	mov	r3, r1
 800d4f0:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800d4f2:	887b      	ldrh	r3, [r7, #2]
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f7ff ff98 	bl	800d42c <lwip_standard_chksum>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	43db      	mvns	r3, r3
 800d500:	b29b      	uxth	r3, r3
}
 800d502:	4618      	mov	r0, r3
 800d504:	3708      	adds	r7, #8
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b086      	sub	sp, #24
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800d512:	2300      	movs	r3, #0
 800d514:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800d516:	2300      	movs	r3, #0
 800d518:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	613b      	str	r3, [r7, #16]
 800d51e:	e02b      	b.n	800d578 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800d520:	693b      	ldr	r3, [r7, #16]
 800d522:	685a      	ldr	r2, [r3, #4]
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	895b      	ldrh	r3, [r3, #10]
 800d528:	4619      	mov	r1, r3
 800d52a:	4610      	mov	r0, r2
 800d52c:	f7ff ff7e 	bl	800d42c <lwip_standard_chksum>
 800d530:	4603      	mov	r3, r0
 800d532:	461a      	mov	r2, r3
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	4413      	add	r3, r2
 800d538:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	0c1a      	lsrs	r2, r3, #16
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	b29b      	uxth	r3, r3
 800d542:	4413      	add	r3, r2
 800d544:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800d546:	693b      	ldr	r3, [r7, #16]
 800d548:	895b      	ldrh	r3, [r3, #10]
 800d54a:	f003 0301 	and.w	r3, r3, #1
 800d54e:	b29b      	uxth	r3, r3
 800d550:	2b00      	cmp	r3, #0
 800d552:	d00e      	beq.n	800d572 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	2b00      	cmp	r3, #0
 800d558:	bf0c      	ite	eq
 800d55a:	2301      	moveq	r3, #1
 800d55c:	2300      	movne	r3, #0
 800d55e:	b2db      	uxtb	r3, r3
 800d560:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	021b      	lsls	r3, r3, #8
 800d566:	b29a      	uxth	r2, r3
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	0a1b      	lsrs	r3, r3, #8
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	4313      	orrs	r3, r2
 800d570:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	613b      	str	r3, [r7, #16]
 800d578:	693b      	ldr	r3, [r7, #16]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d1d0      	bne.n	800d520 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d007      	beq.n	800d594 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	021b      	lsls	r3, r3, #8
 800d588:	b29a      	uxth	r2, r3
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	0a1b      	lsrs	r3, r3, #8
 800d58e:	b2db      	uxtb	r3, r3
 800d590:	4313      	orrs	r3, r2
 800d592:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	b29b      	uxth	r3, r3
 800d598:	43db      	mvns	r3, r3
 800d59a:	b29b      	uxth	r3, r3
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3718      	adds	r7, #24
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b082      	sub	sp, #8
 800d5a8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d5ae:	f00b f883 	bl	80186b8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d5b2:	f000 f8d5 	bl	800d760 <mem_init>
  memp_init();
 800d5b6:	f000 fc2d 	bl	800de14 <memp_init>
  pbuf_init();
  netif_init();
 800d5ba:	f000 fd39 	bl	800e030 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d5be:	f008 f82f 	bl	8015620 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d5c2:	f001 fe59 	bl	800f278 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d5c6:	f007 ff71 	bl	80154ac <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d5ca:	bf00      	nop
 800d5cc:	3708      	adds	r7, #8
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}
	...

0800d5d4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b083      	sub	sp, #12
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	4603      	mov	r3, r0
 800d5dc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d5de:	4b05      	ldr	r3, [pc, #20]	; (800d5f4 <ptr_to_mem+0x20>)
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	88fb      	ldrh	r3, [r7, #6]
 800d5e4:	4413      	add	r3, r2
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	370c      	adds	r7, #12
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr
 800d5f2:	bf00      	nop
 800d5f4:	24005998 	.word	0x24005998

0800d5f8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b083      	sub	sp, #12
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d600:	4b05      	ldr	r3, [pc, #20]	; (800d618 <mem_to_ptr+0x20>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	687a      	ldr	r2, [r7, #4]
 800d606:	1ad3      	subs	r3, r2, r3
 800d608:	b29b      	uxth	r3, r3
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	370c      	adds	r7, #12
 800d60e:	46bd      	mov	sp, r7
 800d610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d614:	4770      	bx	lr
 800d616:	bf00      	nop
 800d618:	24005998 	.word	0x24005998

0800d61c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d61c:	b590      	push	{r4, r7, lr}
 800d61e:	b085      	sub	sp, #20
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d624:	4b45      	ldr	r3, [pc, #276]	; (800d73c <plug_holes+0x120>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	687a      	ldr	r2, [r7, #4]
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d206      	bcs.n	800d63c <plug_holes+0x20>
 800d62e:	4b44      	ldr	r3, [pc, #272]	; (800d740 <plug_holes+0x124>)
 800d630:	f240 12df 	movw	r2, #479	; 0x1df
 800d634:	4943      	ldr	r1, [pc, #268]	; (800d744 <plug_holes+0x128>)
 800d636:	4844      	ldr	r0, [pc, #272]	; (800d748 <plug_holes+0x12c>)
 800d638:	f00b fa92 	bl	8018b60 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d63c:	4b43      	ldr	r3, [pc, #268]	; (800d74c <plug_holes+0x130>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	429a      	cmp	r2, r3
 800d644:	d306      	bcc.n	800d654 <plug_holes+0x38>
 800d646:	4b3e      	ldr	r3, [pc, #248]	; (800d740 <plug_holes+0x124>)
 800d648:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d64c:	4940      	ldr	r1, [pc, #256]	; (800d750 <plug_holes+0x134>)
 800d64e:	483e      	ldr	r0, [pc, #248]	; (800d748 <plug_holes+0x12c>)
 800d650:	f00b fa86 	bl	8018b60 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	791b      	ldrb	r3, [r3, #4]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d006      	beq.n	800d66a <plug_holes+0x4e>
 800d65c:	4b38      	ldr	r3, [pc, #224]	; (800d740 <plug_holes+0x124>)
 800d65e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d662:	493c      	ldr	r1, [pc, #240]	; (800d754 <plug_holes+0x138>)
 800d664:	4838      	ldr	r0, [pc, #224]	; (800d748 <plug_holes+0x12c>)
 800d666:	f00b fa7b 	bl	8018b60 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	881b      	ldrh	r3, [r3, #0]
 800d66e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d672:	d906      	bls.n	800d682 <plug_holes+0x66>
 800d674:	4b32      	ldr	r3, [pc, #200]	; (800d740 <plug_holes+0x124>)
 800d676:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d67a:	4937      	ldr	r1, [pc, #220]	; (800d758 <plug_holes+0x13c>)
 800d67c:	4832      	ldr	r0, [pc, #200]	; (800d748 <plug_holes+0x12c>)
 800d67e:	f00b fa6f 	bl	8018b60 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	881b      	ldrh	r3, [r3, #0]
 800d686:	4618      	mov	r0, r3
 800d688:	f7ff ffa4 	bl	800d5d4 <ptr_to_mem>
 800d68c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d68e:	687a      	ldr	r2, [r7, #4]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	429a      	cmp	r2, r3
 800d694:	d024      	beq.n	800d6e0 <plug_holes+0xc4>
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	791b      	ldrb	r3, [r3, #4]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d120      	bne.n	800d6e0 <plug_holes+0xc4>
 800d69e:	4b2b      	ldr	r3, [pc, #172]	; (800d74c <plug_holes+0x130>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	68fa      	ldr	r2, [r7, #12]
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d01b      	beq.n	800d6e0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d6a8:	4b2c      	ldr	r3, [pc, #176]	; (800d75c <plug_holes+0x140>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	68fa      	ldr	r2, [r7, #12]
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d102      	bne.n	800d6b8 <plug_holes+0x9c>
      lfree = mem;
 800d6b2:	4a2a      	ldr	r2, [pc, #168]	; (800d75c <plug_holes+0x140>)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	881a      	ldrh	r2, [r3, #0]
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	881b      	ldrh	r3, [r3, #0]
 800d6c4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d6c8:	d00a      	beq.n	800d6e0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	881b      	ldrh	r3, [r3, #0]
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f7ff ff80 	bl	800d5d4 <ptr_to_mem>
 800d6d4:	4604      	mov	r4, r0
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f7ff ff8e 	bl	800d5f8 <mem_to_ptr>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	885b      	ldrh	r3, [r3, #2]
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f7ff ff75 	bl	800d5d4 <ptr_to_mem>
 800d6ea:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d6ec:	68ba      	ldr	r2, [r7, #8]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d01f      	beq.n	800d734 <plug_holes+0x118>
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	791b      	ldrb	r3, [r3, #4]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d11b      	bne.n	800d734 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d6fc:	4b17      	ldr	r3, [pc, #92]	; (800d75c <plug_holes+0x140>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	687a      	ldr	r2, [r7, #4]
 800d702:	429a      	cmp	r2, r3
 800d704:	d102      	bne.n	800d70c <plug_holes+0xf0>
      lfree = pmem;
 800d706:	4a15      	ldr	r2, [pc, #84]	; (800d75c <plug_holes+0x140>)
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	881a      	ldrh	r2, [r3, #0]
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	881b      	ldrh	r3, [r3, #0]
 800d718:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d71c:	d00a      	beq.n	800d734 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	881b      	ldrh	r3, [r3, #0]
 800d722:	4618      	mov	r0, r3
 800d724:	f7ff ff56 	bl	800d5d4 <ptr_to_mem>
 800d728:	4604      	mov	r4, r0
 800d72a:	68b8      	ldr	r0, [r7, #8]
 800d72c:	f7ff ff64 	bl	800d5f8 <mem_to_ptr>
 800d730:	4603      	mov	r3, r0
 800d732:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d734:	bf00      	nop
 800d736:	3714      	adds	r7, #20
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd90      	pop	{r4, r7, pc}
 800d73c:	24005998 	.word	0x24005998
 800d740:	08019e0c 	.word	0x08019e0c
 800d744:	08019e3c 	.word	0x08019e3c
 800d748:	08019e54 	.word	0x08019e54
 800d74c:	2400599c 	.word	0x2400599c
 800d750:	08019e7c 	.word	0x08019e7c
 800d754:	08019e98 	.word	0x08019e98
 800d758:	08019eb4 	.word	0x08019eb4
 800d75c:	240059a4 	.word	0x240059a4

0800d760 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d766:	4b1d      	ldr	r3, [pc, #116]	; (800d7dc <mem_init+0x7c>)
 800d768:	4a1d      	ldr	r2, [pc, #116]	; (800d7e0 <mem_init+0x80>)
 800d76a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d76c:	4b1b      	ldr	r3, [pc, #108]	; (800d7dc <mem_init+0x7c>)
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d778:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2200      	movs	r2, #0
 800d77e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2200      	movs	r2, #0
 800d784:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d786:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800d78a:	f7ff ff23 	bl	800d5d4 <ptr_to_mem>
 800d78e:	4603      	mov	r3, r0
 800d790:	4a14      	ldr	r2, [pc, #80]	; (800d7e4 <mem_init+0x84>)
 800d792:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d794:	4b13      	ldr	r3, [pc, #76]	; (800d7e4 <mem_init+0x84>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	2201      	movs	r2, #1
 800d79a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d79c:	4b11      	ldr	r3, [pc, #68]	; (800d7e4 <mem_init+0x84>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d7a4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d7a6:	4b0f      	ldr	r3, [pc, #60]	; (800d7e4 <mem_init+0x84>)
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d7ae:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d7b0:	4b0a      	ldr	r3, [pc, #40]	; (800d7dc <mem_init+0x7c>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	4a0c      	ldr	r2, [pc, #48]	; (800d7e8 <mem_init+0x88>)
 800d7b6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d7b8:	480c      	ldr	r0, [pc, #48]	; (800d7ec <mem_init+0x8c>)
 800d7ba:	f00a ff89 	bl	80186d0 <sys_mutex_new>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d006      	beq.n	800d7d2 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d7c4:	4b0a      	ldr	r3, [pc, #40]	; (800d7f0 <mem_init+0x90>)
 800d7c6:	f240 221f 	movw	r2, #543	; 0x21f
 800d7ca:	490a      	ldr	r1, [pc, #40]	; (800d7f4 <mem_init+0x94>)
 800d7cc:	480a      	ldr	r0, [pc, #40]	; (800d7f8 <mem_init+0x98>)
 800d7ce:	f00b f9c7 	bl	8018b60 <iprintf>
  }
}
 800d7d2:	bf00      	nop
 800d7d4:	3708      	adds	r7, #8
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop
 800d7dc:	24005998 	.word	0x24005998
 800d7e0:	30044b00 	.word	0x30044b00
 800d7e4:	2400599c 	.word	0x2400599c
 800d7e8:	240059a4 	.word	0x240059a4
 800d7ec:	240059a0 	.word	0x240059a0
 800d7f0:	08019e0c 	.word	0x08019e0c
 800d7f4:	08019ee0 	.word	0x08019ee0
 800d7f8:	08019e54 	.word	0x08019e54

0800d7fc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b086      	sub	sp, #24
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f7ff fef7 	bl	800d5f8 <mem_to_ptr>
 800d80a:	4603      	mov	r3, r0
 800d80c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	881b      	ldrh	r3, [r3, #0]
 800d812:	4618      	mov	r0, r3
 800d814:	f7ff fede 	bl	800d5d4 <ptr_to_mem>
 800d818:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	885b      	ldrh	r3, [r3, #2]
 800d81e:	4618      	mov	r0, r3
 800d820:	f7ff fed8 	bl	800d5d4 <ptr_to_mem>
 800d824:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	881b      	ldrh	r3, [r3, #0]
 800d82a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d82e:	d818      	bhi.n	800d862 <mem_link_valid+0x66>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	885b      	ldrh	r3, [r3, #2]
 800d834:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d838:	d813      	bhi.n	800d862 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d83e:	8afa      	ldrh	r2, [r7, #22]
 800d840:	429a      	cmp	r2, r3
 800d842:	d004      	beq.n	800d84e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	881b      	ldrh	r3, [r3, #0]
 800d848:	8afa      	ldrh	r2, [r7, #22]
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d109      	bne.n	800d862 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d84e:	4b08      	ldr	r3, [pc, #32]	; (800d870 <mem_link_valid+0x74>)
 800d850:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d852:	693a      	ldr	r2, [r7, #16]
 800d854:	429a      	cmp	r2, r3
 800d856:	d006      	beq.n	800d866 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	885b      	ldrh	r3, [r3, #2]
 800d85c:	8afa      	ldrh	r2, [r7, #22]
 800d85e:	429a      	cmp	r2, r3
 800d860:	d001      	beq.n	800d866 <mem_link_valid+0x6a>
    return 0;
 800d862:	2300      	movs	r3, #0
 800d864:	e000      	b.n	800d868 <mem_link_valid+0x6c>
  }
  return 1;
 800d866:	2301      	movs	r3, #1
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3718      	adds	r7, #24
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}
 800d870:	2400599c 	.word	0x2400599c

0800d874 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b088      	sub	sp, #32
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d070      	beq.n	800d964 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f003 0303 	and.w	r3, r3, #3
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d00d      	beq.n	800d8a8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d88c:	4b37      	ldr	r3, [pc, #220]	; (800d96c <mem_free+0xf8>)
 800d88e:	f240 2273 	movw	r2, #627	; 0x273
 800d892:	4937      	ldr	r1, [pc, #220]	; (800d970 <mem_free+0xfc>)
 800d894:	4837      	ldr	r0, [pc, #220]	; (800d974 <mem_free+0x100>)
 800d896:	f00b f963 	bl	8018b60 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d89a:	f00a ff6b 	bl	8018774 <sys_arch_protect>
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	68f8      	ldr	r0, [r7, #12]
 800d8a2:	f00a ff75 	bl	8018790 <sys_arch_unprotect>
    return;
 800d8a6:	e05e      	b.n	800d966 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	3b08      	subs	r3, #8
 800d8ac:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d8ae:	4b32      	ldr	r3, [pc, #200]	; (800d978 <mem_free+0x104>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	69fa      	ldr	r2, [r7, #28]
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d306      	bcc.n	800d8c6 <mem_free+0x52>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f103 020c 	add.w	r2, r3, #12
 800d8be:	4b2f      	ldr	r3, [pc, #188]	; (800d97c <mem_free+0x108>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d90d      	bls.n	800d8e2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d8c6:	4b29      	ldr	r3, [pc, #164]	; (800d96c <mem_free+0xf8>)
 800d8c8:	f240 227f 	movw	r2, #639	; 0x27f
 800d8cc:	492c      	ldr	r1, [pc, #176]	; (800d980 <mem_free+0x10c>)
 800d8ce:	4829      	ldr	r0, [pc, #164]	; (800d974 <mem_free+0x100>)
 800d8d0:	f00b f946 	bl	8018b60 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d8d4:	f00a ff4e 	bl	8018774 <sys_arch_protect>
 800d8d8:	6138      	str	r0, [r7, #16]
 800d8da:	6938      	ldr	r0, [r7, #16]
 800d8dc:	f00a ff58 	bl	8018790 <sys_arch_unprotect>
    return;
 800d8e0:	e041      	b.n	800d966 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d8e2:	4828      	ldr	r0, [pc, #160]	; (800d984 <mem_free+0x110>)
 800d8e4:	f00a ff0a 	bl	80186fc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d8e8:	69fb      	ldr	r3, [r7, #28]
 800d8ea:	791b      	ldrb	r3, [r3, #4]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d110      	bne.n	800d912 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d8f0:	4b1e      	ldr	r3, [pc, #120]	; (800d96c <mem_free+0xf8>)
 800d8f2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d8f6:	4924      	ldr	r1, [pc, #144]	; (800d988 <mem_free+0x114>)
 800d8f8:	481e      	ldr	r0, [pc, #120]	; (800d974 <mem_free+0x100>)
 800d8fa:	f00b f931 	bl	8018b60 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d8fe:	4821      	ldr	r0, [pc, #132]	; (800d984 <mem_free+0x110>)
 800d900:	f00a ff0b 	bl	801871a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d904:	f00a ff36 	bl	8018774 <sys_arch_protect>
 800d908:	6178      	str	r0, [r7, #20]
 800d90a:	6978      	ldr	r0, [r7, #20]
 800d90c:	f00a ff40 	bl	8018790 <sys_arch_unprotect>
    return;
 800d910:	e029      	b.n	800d966 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d912:	69f8      	ldr	r0, [r7, #28]
 800d914:	f7ff ff72 	bl	800d7fc <mem_link_valid>
 800d918:	4603      	mov	r3, r0
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d110      	bne.n	800d940 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d91e:	4b13      	ldr	r3, [pc, #76]	; (800d96c <mem_free+0xf8>)
 800d920:	f240 2295 	movw	r2, #661	; 0x295
 800d924:	4919      	ldr	r1, [pc, #100]	; (800d98c <mem_free+0x118>)
 800d926:	4813      	ldr	r0, [pc, #76]	; (800d974 <mem_free+0x100>)
 800d928:	f00b f91a 	bl	8018b60 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d92c:	4815      	ldr	r0, [pc, #84]	; (800d984 <mem_free+0x110>)
 800d92e:	f00a fef4 	bl	801871a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d932:	f00a ff1f 	bl	8018774 <sys_arch_protect>
 800d936:	61b8      	str	r0, [r7, #24]
 800d938:	69b8      	ldr	r0, [r7, #24]
 800d93a:	f00a ff29 	bl	8018790 <sys_arch_unprotect>
    return;
 800d93e:	e012      	b.n	800d966 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d940:	69fb      	ldr	r3, [r7, #28]
 800d942:	2200      	movs	r2, #0
 800d944:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d946:	4b12      	ldr	r3, [pc, #72]	; (800d990 <mem_free+0x11c>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	69fa      	ldr	r2, [r7, #28]
 800d94c:	429a      	cmp	r2, r3
 800d94e:	d202      	bcs.n	800d956 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d950:	4a0f      	ldr	r2, [pc, #60]	; (800d990 <mem_free+0x11c>)
 800d952:	69fb      	ldr	r3, [r7, #28]
 800d954:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d956:	69f8      	ldr	r0, [r7, #28]
 800d958:	f7ff fe60 	bl	800d61c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d95c:	4809      	ldr	r0, [pc, #36]	; (800d984 <mem_free+0x110>)
 800d95e:	f00a fedc 	bl	801871a <sys_mutex_unlock>
 800d962:	e000      	b.n	800d966 <mem_free+0xf2>
    return;
 800d964:	bf00      	nop
}
 800d966:	3720      	adds	r7, #32
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}
 800d96c:	08019e0c 	.word	0x08019e0c
 800d970:	08019efc 	.word	0x08019efc
 800d974:	08019e54 	.word	0x08019e54
 800d978:	24005998 	.word	0x24005998
 800d97c:	2400599c 	.word	0x2400599c
 800d980:	08019f20 	.word	0x08019f20
 800d984:	240059a0 	.word	0x240059a0
 800d988:	08019f3c 	.word	0x08019f3c
 800d98c:	08019f64 	.word	0x08019f64
 800d990:	240059a4 	.word	0x240059a4

0800d994 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b088      	sub	sp, #32
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	460b      	mov	r3, r1
 800d99e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d9a0:	887b      	ldrh	r3, [r7, #2]
 800d9a2:	3303      	adds	r3, #3
 800d9a4:	b29b      	uxth	r3, r3
 800d9a6:	f023 0303 	bic.w	r3, r3, #3
 800d9aa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d9ac:	8bfb      	ldrh	r3, [r7, #30]
 800d9ae:	2b0b      	cmp	r3, #11
 800d9b0:	d801      	bhi.n	800d9b6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d9b2:	230c      	movs	r3, #12
 800d9b4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d9b6:	8bfb      	ldrh	r3, [r7, #30]
 800d9b8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d9bc:	d803      	bhi.n	800d9c6 <mem_trim+0x32>
 800d9be:	8bfa      	ldrh	r2, [r7, #30]
 800d9c0:	887b      	ldrh	r3, [r7, #2]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d201      	bcs.n	800d9ca <mem_trim+0x36>
    return NULL;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	e0d8      	b.n	800db7c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d9ca:	4b6e      	ldr	r3, [pc, #440]	; (800db84 <mem_trim+0x1f0>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	687a      	ldr	r2, [r7, #4]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d304      	bcc.n	800d9de <mem_trim+0x4a>
 800d9d4:	4b6c      	ldr	r3, [pc, #432]	; (800db88 <mem_trim+0x1f4>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	687a      	ldr	r2, [r7, #4]
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d306      	bcc.n	800d9ec <mem_trim+0x58>
 800d9de:	4b6b      	ldr	r3, [pc, #428]	; (800db8c <mem_trim+0x1f8>)
 800d9e0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d9e4:	496a      	ldr	r1, [pc, #424]	; (800db90 <mem_trim+0x1fc>)
 800d9e6:	486b      	ldr	r0, [pc, #428]	; (800db94 <mem_trim+0x200>)
 800d9e8:	f00b f8ba 	bl	8018b60 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d9ec:	4b65      	ldr	r3, [pc, #404]	; (800db84 <mem_trim+0x1f0>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	687a      	ldr	r2, [r7, #4]
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d304      	bcc.n	800da00 <mem_trim+0x6c>
 800d9f6:	4b64      	ldr	r3, [pc, #400]	; (800db88 <mem_trim+0x1f4>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	687a      	ldr	r2, [r7, #4]
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d307      	bcc.n	800da10 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800da00:	f00a feb8 	bl	8018774 <sys_arch_protect>
 800da04:	60b8      	str	r0, [r7, #8]
 800da06:	68b8      	ldr	r0, [r7, #8]
 800da08:	f00a fec2 	bl	8018790 <sys_arch_unprotect>
    return rmem;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	e0b5      	b.n	800db7c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	3b08      	subs	r3, #8
 800da14:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800da16:	69b8      	ldr	r0, [r7, #24]
 800da18:	f7ff fdee 	bl	800d5f8 <mem_to_ptr>
 800da1c:	4603      	mov	r3, r0
 800da1e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800da20:	69bb      	ldr	r3, [r7, #24]
 800da22:	881a      	ldrh	r2, [r3, #0]
 800da24:	8afb      	ldrh	r3, [r7, #22]
 800da26:	1ad3      	subs	r3, r2, r3
 800da28:	b29b      	uxth	r3, r3
 800da2a:	3b08      	subs	r3, #8
 800da2c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800da2e:	8bfa      	ldrh	r2, [r7, #30]
 800da30:	8abb      	ldrh	r3, [r7, #20]
 800da32:	429a      	cmp	r2, r3
 800da34:	d906      	bls.n	800da44 <mem_trim+0xb0>
 800da36:	4b55      	ldr	r3, [pc, #340]	; (800db8c <mem_trim+0x1f8>)
 800da38:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800da3c:	4956      	ldr	r1, [pc, #344]	; (800db98 <mem_trim+0x204>)
 800da3e:	4855      	ldr	r0, [pc, #340]	; (800db94 <mem_trim+0x200>)
 800da40:	f00b f88e 	bl	8018b60 <iprintf>
  if (newsize > size) {
 800da44:	8bfa      	ldrh	r2, [r7, #30]
 800da46:	8abb      	ldrh	r3, [r7, #20]
 800da48:	429a      	cmp	r2, r3
 800da4a:	d901      	bls.n	800da50 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800da4c:	2300      	movs	r3, #0
 800da4e:	e095      	b.n	800db7c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800da50:	8bfa      	ldrh	r2, [r7, #30]
 800da52:	8abb      	ldrh	r3, [r7, #20]
 800da54:	429a      	cmp	r2, r3
 800da56:	d101      	bne.n	800da5c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	e08f      	b.n	800db7c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800da5c:	484f      	ldr	r0, [pc, #316]	; (800db9c <mem_trim+0x208>)
 800da5e:	f00a fe4d 	bl	80186fc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800da62:	69bb      	ldr	r3, [r7, #24]
 800da64:	881b      	ldrh	r3, [r3, #0]
 800da66:	4618      	mov	r0, r3
 800da68:	f7ff fdb4 	bl	800d5d4 <ptr_to_mem>
 800da6c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	791b      	ldrb	r3, [r3, #4]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d13f      	bne.n	800daf6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800da76:	69bb      	ldr	r3, [r7, #24]
 800da78:	881b      	ldrh	r3, [r3, #0]
 800da7a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800da7e:	d106      	bne.n	800da8e <mem_trim+0xfa>
 800da80:	4b42      	ldr	r3, [pc, #264]	; (800db8c <mem_trim+0x1f8>)
 800da82:	f240 22f5 	movw	r2, #757	; 0x2f5
 800da86:	4946      	ldr	r1, [pc, #280]	; (800dba0 <mem_trim+0x20c>)
 800da88:	4842      	ldr	r0, [pc, #264]	; (800db94 <mem_trim+0x200>)
 800da8a:	f00b f869 	bl	8018b60 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	881b      	ldrh	r3, [r3, #0]
 800da92:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800da94:	8afa      	ldrh	r2, [r7, #22]
 800da96:	8bfb      	ldrh	r3, [r7, #30]
 800da98:	4413      	add	r3, r2
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	3308      	adds	r3, #8
 800da9e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800daa0:	4b40      	ldr	r3, [pc, #256]	; (800dba4 <mem_trim+0x210>)
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	693a      	ldr	r2, [r7, #16]
 800daa6:	429a      	cmp	r2, r3
 800daa8:	d106      	bne.n	800dab8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800daaa:	89fb      	ldrh	r3, [r7, #14]
 800daac:	4618      	mov	r0, r3
 800daae:	f7ff fd91 	bl	800d5d4 <ptr_to_mem>
 800dab2:	4603      	mov	r3, r0
 800dab4:	4a3b      	ldr	r2, [pc, #236]	; (800dba4 <mem_trim+0x210>)
 800dab6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800dab8:	89fb      	ldrh	r3, [r7, #14]
 800daba:	4618      	mov	r0, r3
 800dabc:	f7ff fd8a 	bl	800d5d4 <ptr_to_mem>
 800dac0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	2200      	movs	r2, #0
 800dac6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	89ba      	ldrh	r2, [r7, #12]
 800dacc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	8afa      	ldrh	r2, [r7, #22]
 800dad2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800dad4:	69bb      	ldr	r3, [r7, #24]
 800dad6:	89fa      	ldrh	r2, [r7, #14]
 800dad8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	881b      	ldrh	r3, [r3, #0]
 800dade:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800dae2:	d047      	beq.n	800db74 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	881b      	ldrh	r3, [r3, #0]
 800dae8:	4618      	mov	r0, r3
 800daea:	f7ff fd73 	bl	800d5d4 <ptr_to_mem>
 800daee:	4602      	mov	r2, r0
 800daf0:	89fb      	ldrh	r3, [r7, #14]
 800daf2:	8053      	strh	r3, [r2, #2]
 800daf4:	e03e      	b.n	800db74 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800daf6:	8bfb      	ldrh	r3, [r7, #30]
 800daf8:	f103 0214 	add.w	r2, r3, #20
 800dafc:	8abb      	ldrh	r3, [r7, #20]
 800dafe:	429a      	cmp	r2, r3
 800db00:	d838      	bhi.n	800db74 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800db02:	8afa      	ldrh	r2, [r7, #22]
 800db04:	8bfb      	ldrh	r3, [r7, #30]
 800db06:	4413      	add	r3, r2
 800db08:	b29b      	uxth	r3, r3
 800db0a:	3308      	adds	r3, #8
 800db0c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800db0e:	69bb      	ldr	r3, [r7, #24]
 800db10:	881b      	ldrh	r3, [r3, #0]
 800db12:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800db16:	d106      	bne.n	800db26 <mem_trim+0x192>
 800db18:	4b1c      	ldr	r3, [pc, #112]	; (800db8c <mem_trim+0x1f8>)
 800db1a:	f240 3216 	movw	r2, #790	; 0x316
 800db1e:	4920      	ldr	r1, [pc, #128]	; (800dba0 <mem_trim+0x20c>)
 800db20:	481c      	ldr	r0, [pc, #112]	; (800db94 <mem_trim+0x200>)
 800db22:	f00b f81d 	bl	8018b60 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800db26:	89fb      	ldrh	r3, [r7, #14]
 800db28:	4618      	mov	r0, r3
 800db2a:	f7ff fd53 	bl	800d5d4 <ptr_to_mem>
 800db2e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800db30:	4b1c      	ldr	r3, [pc, #112]	; (800dba4 <mem_trim+0x210>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	693a      	ldr	r2, [r7, #16]
 800db36:	429a      	cmp	r2, r3
 800db38:	d202      	bcs.n	800db40 <mem_trim+0x1ac>
      lfree = mem2;
 800db3a:	4a1a      	ldr	r2, [pc, #104]	; (800dba4 <mem_trim+0x210>)
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	2200      	movs	r2, #0
 800db44:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800db46:	69bb      	ldr	r3, [r7, #24]
 800db48:	881a      	ldrh	r2, [r3, #0]
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	8afa      	ldrh	r2, [r7, #22]
 800db52:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800db54:	69bb      	ldr	r3, [r7, #24]
 800db56:	89fa      	ldrh	r2, [r7, #14]
 800db58:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	881b      	ldrh	r3, [r3, #0]
 800db5e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800db62:	d007      	beq.n	800db74 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	881b      	ldrh	r3, [r3, #0]
 800db68:	4618      	mov	r0, r3
 800db6a:	f7ff fd33 	bl	800d5d4 <ptr_to_mem>
 800db6e:	4602      	mov	r2, r0
 800db70:	89fb      	ldrh	r3, [r7, #14]
 800db72:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800db74:	4809      	ldr	r0, [pc, #36]	; (800db9c <mem_trim+0x208>)
 800db76:	f00a fdd0 	bl	801871a <sys_mutex_unlock>
  return rmem;
 800db7a:	687b      	ldr	r3, [r7, #4]
}
 800db7c:	4618      	mov	r0, r3
 800db7e:	3720      	adds	r7, #32
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}
 800db84:	24005998 	.word	0x24005998
 800db88:	2400599c 	.word	0x2400599c
 800db8c:	08019e0c 	.word	0x08019e0c
 800db90:	08019f98 	.word	0x08019f98
 800db94:	08019e54 	.word	0x08019e54
 800db98:	08019fb0 	.word	0x08019fb0
 800db9c:	240059a0 	.word	0x240059a0
 800dba0:	08019fd0 	.word	0x08019fd0
 800dba4:	240059a4 	.word	0x240059a4

0800dba8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b088      	sub	sp, #32
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	4603      	mov	r3, r0
 800dbb0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800dbb2:	88fb      	ldrh	r3, [r7, #6]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d101      	bne.n	800dbbc <mem_malloc+0x14>
    return NULL;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	e0e2      	b.n	800dd82 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800dbbc:	88fb      	ldrh	r3, [r7, #6]
 800dbbe:	3303      	adds	r3, #3
 800dbc0:	b29b      	uxth	r3, r3
 800dbc2:	f023 0303 	bic.w	r3, r3, #3
 800dbc6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800dbc8:	8bbb      	ldrh	r3, [r7, #28]
 800dbca:	2b0b      	cmp	r3, #11
 800dbcc:	d801      	bhi.n	800dbd2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800dbce:	230c      	movs	r3, #12
 800dbd0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800dbd2:	8bbb      	ldrh	r3, [r7, #28]
 800dbd4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800dbd8:	d803      	bhi.n	800dbe2 <mem_malloc+0x3a>
 800dbda:	8bba      	ldrh	r2, [r7, #28]
 800dbdc:	88fb      	ldrh	r3, [r7, #6]
 800dbde:	429a      	cmp	r2, r3
 800dbe0:	d201      	bcs.n	800dbe6 <mem_malloc+0x3e>
    return NULL;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	e0cd      	b.n	800dd82 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800dbe6:	4869      	ldr	r0, [pc, #420]	; (800dd8c <mem_malloc+0x1e4>)
 800dbe8:	f00a fd88 	bl	80186fc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800dbec:	4b68      	ldr	r3, [pc, #416]	; (800dd90 <mem_malloc+0x1e8>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7ff fd01 	bl	800d5f8 <mem_to_ptr>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	83fb      	strh	r3, [r7, #30]
 800dbfa:	e0b7      	b.n	800dd6c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800dbfc:	8bfb      	ldrh	r3, [r7, #30]
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7ff fce8 	bl	800d5d4 <ptr_to_mem>
 800dc04:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	791b      	ldrb	r3, [r3, #4]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	f040 80a7 	bne.w	800dd5e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	881b      	ldrh	r3, [r3, #0]
 800dc14:	461a      	mov	r2, r3
 800dc16:	8bfb      	ldrh	r3, [r7, #30]
 800dc18:	1ad3      	subs	r3, r2, r3
 800dc1a:	f1a3 0208 	sub.w	r2, r3, #8
 800dc1e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800dc20:	429a      	cmp	r2, r3
 800dc22:	f0c0 809c 	bcc.w	800dd5e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	881b      	ldrh	r3, [r3, #0]
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	8bfb      	ldrh	r3, [r7, #30]
 800dc2e:	1ad3      	subs	r3, r2, r3
 800dc30:	f1a3 0208 	sub.w	r2, r3, #8
 800dc34:	8bbb      	ldrh	r3, [r7, #28]
 800dc36:	3314      	adds	r3, #20
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d333      	bcc.n	800dca4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800dc3c:	8bfa      	ldrh	r2, [r7, #30]
 800dc3e:	8bbb      	ldrh	r3, [r7, #28]
 800dc40:	4413      	add	r3, r2
 800dc42:	b29b      	uxth	r3, r3
 800dc44:	3308      	adds	r3, #8
 800dc46:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800dc48:	8a7b      	ldrh	r3, [r7, #18]
 800dc4a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800dc4e:	d106      	bne.n	800dc5e <mem_malloc+0xb6>
 800dc50:	4b50      	ldr	r3, [pc, #320]	; (800dd94 <mem_malloc+0x1ec>)
 800dc52:	f240 3287 	movw	r2, #903	; 0x387
 800dc56:	4950      	ldr	r1, [pc, #320]	; (800dd98 <mem_malloc+0x1f0>)
 800dc58:	4850      	ldr	r0, [pc, #320]	; (800dd9c <mem_malloc+0x1f4>)
 800dc5a:	f00a ff81 	bl	8018b60 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800dc5e:	8a7b      	ldrh	r3, [r7, #18]
 800dc60:	4618      	mov	r0, r3
 800dc62:	f7ff fcb7 	bl	800d5d4 <ptr_to_mem>
 800dc66:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	881a      	ldrh	r2, [r3, #0]
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	8bfa      	ldrh	r2, [r7, #30]
 800dc7a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	8a7a      	ldrh	r2, [r7, #18]
 800dc80:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	2201      	movs	r2, #1
 800dc86:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	881b      	ldrh	r3, [r3, #0]
 800dc8c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800dc90:	d00b      	beq.n	800dcaa <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	881b      	ldrh	r3, [r3, #0]
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7ff fc9c 	bl	800d5d4 <ptr_to_mem>
 800dc9c:	4602      	mov	r2, r0
 800dc9e:	8a7b      	ldrh	r3, [r7, #18]
 800dca0:	8053      	strh	r3, [r2, #2]
 800dca2:	e002      	b.n	800dcaa <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	2201      	movs	r2, #1
 800dca8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800dcaa:	4b39      	ldr	r3, [pc, #228]	; (800dd90 <mem_malloc+0x1e8>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	697a      	ldr	r2, [r7, #20]
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d127      	bne.n	800dd04 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800dcb4:	4b36      	ldr	r3, [pc, #216]	; (800dd90 <mem_malloc+0x1e8>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800dcba:	e005      	b.n	800dcc8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800dcbc:	69bb      	ldr	r3, [r7, #24]
 800dcbe:	881b      	ldrh	r3, [r3, #0]
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7ff fc87 	bl	800d5d4 <ptr_to_mem>
 800dcc6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800dcc8:	69bb      	ldr	r3, [r7, #24]
 800dcca:	791b      	ldrb	r3, [r3, #4]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d004      	beq.n	800dcda <mem_malloc+0x132>
 800dcd0:	4b33      	ldr	r3, [pc, #204]	; (800dda0 <mem_malloc+0x1f8>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	69ba      	ldr	r2, [r7, #24]
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d1f0      	bne.n	800dcbc <mem_malloc+0x114>
          }
          lfree = cur;
 800dcda:	4a2d      	ldr	r2, [pc, #180]	; (800dd90 <mem_malloc+0x1e8>)
 800dcdc:	69bb      	ldr	r3, [r7, #24]
 800dcde:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800dce0:	4b2b      	ldr	r3, [pc, #172]	; (800dd90 <mem_malloc+0x1e8>)
 800dce2:	681a      	ldr	r2, [r3, #0]
 800dce4:	4b2e      	ldr	r3, [pc, #184]	; (800dda0 <mem_malloc+0x1f8>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	429a      	cmp	r2, r3
 800dcea:	d00b      	beq.n	800dd04 <mem_malloc+0x15c>
 800dcec:	4b28      	ldr	r3, [pc, #160]	; (800dd90 <mem_malloc+0x1e8>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	791b      	ldrb	r3, [r3, #4]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d006      	beq.n	800dd04 <mem_malloc+0x15c>
 800dcf6:	4b27      	ldr	r3, [pc, #156]	; (800dd94 <mem_malloc+0x1ec>)
 800dcf8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800dcfc:	4929      	ldr	r1, [pc, #164]	; (800dda4 <mem_malloc+0x1fc>)
 800dcfe:	4827      	ldr	r0, [pc, #156]	; (800dd9c <mem_malloc+0x1f4>)
 800dd00:	f00a ff2e 	bl	8018b60 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800dd04:	4821      	ldr	r0, [pc, #132]	; (800dd8c <mem_malloc+0x1e4>)
 800dd06:	f00a fd08 	bl	801871a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800dd0a:	8bba      	ldrh	r2, [r7, #28]
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	4413      	add	r3, r2
 800dd10:	3308      	adds	r3, #8
 800dd12:	4a23      	ldr	r2, [pc, #140]	; (800dda0 <mem_malloc+0x1f8>)
 800dd14:	6812      	ldr	r2, [r2, #0]
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d906      	bls.n	800dd28 <mem_malloc+0x180>
 800dd1a:	4b1e      	ldr	r3, [pc, #120]	; (800dd94 <mem_malloc+0x1ec>)
 800dd1c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800dd20:	4921      	ldr	r1, [pc, #132]	; (800dda8 <mem_malloc+0x200>)
 800dd22:	481e      	ldr	r0, [pc, #120]	; (800dd9c <mem_malloc+0x1f4>)
 800dd24:	f00a ff1c 	bl	8018b60 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	f003 0303 	and.w	r3, r3, #3
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d006      	beq.n	800dd40 <mem_malloc+0x198>
 800dd32:	4b18      	ldr	r3, [pc, #96]	; (800dd94 <mem_malloc+0x1ec>)
 800dd34:	f240 32bb 	movw	r2, #955	; 0x3bb
 800dd38:	491c      	ldr	r1, [pc, #112]	; (800ddac <mem_malloc+0x204>)
 800dd3a:	4818      	ldr	r0, [pc, #96]	; (800dd9c <mem_malloc+0x1f4>)
 800dd3c:	f00a ff10 	bl	8018b60 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	f003 0303 	and.w	r3, r3, #3
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d006      	beq.n	800dd58 <mem_malloc+0x1b0>
 800dd4a:	4b12      	ldr	r3, [pc, #72]	; (800dd94 <mem_malloc+0x1ec>)
 800dd4c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800dd50:	4917      	ldr	r1, [pc, #92]	; (800ddb0 <mem_malloc+0x208>)
 800dd52:	4812      	ldr	r0, [pc, #72]	; (800dd9c <mem_malloc+0x1f4>)
 800dd54:	f00a ff04 	bl	8018b60 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	3308      	adds	r3, #8
 800dd5c:	e011      	b.n	800dd82 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800dd5e:	8bfb      	ldrh	r3, [r7, #30]
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7ff fc37 	bl	800d5d4 <ptr_to_mem>
 800dd66:	4603      	mov	r3, r0
 800dd68:	881b      	ldrh	r3, [r3, #0]
 800dd6a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800dd6c:	8bfa      	ldrh	r2, [r7, #30]
 800dd6e:	8bbb      	ldrh	r3, [r7, #28]
 800dd70:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800dd74:	429a      	cmp	r2, r3
 800dd76:	f4ff af41 	bcc.w	800dbfc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800dd7a:	4804      	ldr	r0, [pc, #16]	; (800dd8c <mem_malloc+0x1e4>)
 800dd7c:	f00a fccd 	bl	801871a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800dd80:	2300      	movs	r3, #0
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3720      	adds	r7, #32
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}
 800dd8a:	bf00      	nop
 800dd8c:	240059a0 	.word	0x240059a0
 800dd90:	240059a4 	.word	0x240059a4
 800dd94:	08019e0c 	.word	0x08019e0c
 800dd98:	08019fd0 	.word	0x08019fd0
 800dd9c:	08019e54 	.word	0x08019e54
 800dda0:	2400599c 	.word	0x2400599c
 800dda4:	08019fe4 	.word	0x08019fe4
 800dda8:	0801a000 	.word	0x0801a000
 800ddac:	0801a030 	.word	0x0801a030
 800ddb0:	0801a060 	.word	0x0801a060

0800ddb4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b085      	sub	sp, #20
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	689b      	ldr	r3, [r3, #8]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	685b      	ldr	r3, [r3, #4]
 800ddc8:	3303      	adds	r3, #3
 800ddca:	f023 0303 	bic.w	r3, r3, #3
 800ddce:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	60fb      	str	r3, [r7, #12]
 800ddd4:	e011      	b.n	800ddfa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	689b      	ldr	r3, [r3, #8]
 800ddda:	681a      	ldr	r2, [r3, #0]
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	689b      	ldr	r3, [r3, #8]
 800dde4:	68ba      	ldr	r2, [r7, #8]
 800dde6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	881b      	ldrh	r3, [r3, #0]
 800ddec:	461a      	mov	r2, r3
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	4413      	add	r3, r2
 800ddf2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	60fb      	str	r3, [r7, #12]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	885b      	ldrh	r3, [r3, #2]
 800ddfe:	461a      	mov	r2, r3
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	4293      	cmp	r3, r2
 800de04:	dbe7      	blt.n	800ddd6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800de06:	bf00      	nop
 800de08:	bf00      	nop
 800de0a:	3714      	adds	r7, #20
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr

0800de14 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b082      	sub	sp, #8
 800de18:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800de1a:	2300      	movs	r3, #0
 800de1c:	80fb      	strh	r3, [r7, #6]
 800de1e:	e009      	b.n	800de34 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800de20:	88fb      	ldrh	r3, [r7, #6]
 800de22:	4a08      	ldr	r2, [pc, #32]	; (800de44 <memp_init+0x30>)
 800de24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de28:	4618      	mov	r0, r3
 800de2a:	f7ff ffc3 	bl	800ddb4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800de2e:	88fb      	ldrh	r3, [r7, #6]
 800de30:	3301      	adds	r3, #1
 800de32:	80fb      	strh	r3, [r7, #6]
 800de34:	88fb      	ldrh	r3, [r7, #6]
 800de36:	2b0c      	cmp	r3, #12
 800de38:	d9f2      	bls.n	800de20 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800de3a:	bf00      	nop
 800de3c:	bf00      	nop
 800de3e:	3708      	adds	r7, #8
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}
 800de44:	0801eb4c 	.word	0x0801eb4c

0800de48 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b084      	sub	sp, #16
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800de50:	f00a fc90 	bl	8018774 <sys_arch_protect>
 800de54:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	689b      	ldr	r3, [r3, #8]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d015      	beq.n	800de90 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	689b      	ldr	r3, [r3, #8]
 800de68:	68ba      	ldr	r2, [r7, #8]
 800de6a:	6812      	ldr	r2, [r2, #0]
 800de6c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	f003 0303 	and.w	r3, r3, #3
 800de74:	2b00      	cmp	r3, #0
 800de76:	d006      	beq.n	800de86 <do_memp_malloc_pool+0x3e>
 800de78:	4b09      	ldr	r3, [pc, #36]	; (800dea0 <do_memp_malloc_pool+0x58>)
 800de7a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800de7e:	4909      	ldr	r1, [pc, #36]	; (800dea4 <do_memp_malloc_pool+0x5c>)
 800de80:	4809      	ldr	r0, [pc, #36]	; (800dea8 <do_memp_malloc_pool+0x60>)
 800de82:	f00a fe6d 	bl	8018b60 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800de86:	68f8      	ldr	r0, [r7, #12]
 800de88:	f00a fc82 	bl	8018790 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	e003      	b.n	800de98 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800de90:	68f8      	ldr	r0, [r7, #12]
 800de92:	f00a fc7d 	bl	8018790 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800de96:	2300      	movs	r3, #0
}
 800de98:	4618      	mov	r0, r3
 800de9a:	3710      	adds	r7, #16
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}
 800dea0:	0801a084 	.word	0x0801a084
 800dea4:	0801a0b4 	.word	0x0801a0b4
 800dea8:	0801a0d8 	.word	0x0801a0d8

0800deac <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b082      	sub	sp, #8
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d106      	bne.n	800dec8 <memp_malloc_pool+0x1c>
 800deba:	4b0a      	ldr	r3, [pc, #40]	; (800dee4 <memp_malloc_pool+0x38>)
 800debc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800dec0:	4909      	ldr	r1, [pc, #36]	; (800dee8 <memp_malloc_pool+0x3c>)
 800dec2:	480a      	ldr	r0, [pc, #40]	; (800deec <memp_malloc_pool+0x40>)
 800dec4:	f00a fe4c 	bl	8018b60 <iprintf>
  if (desc == NULL) {
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d101      	bne.n	800ded2 <memp_malloc_pool+0x26>
    return NULL;
 800dece:	2300      	movs	r3, #0
 800ded0:	e003      	b.n	800deda <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f7ff ffb8 	bl	800de48 <do_memp_malloc_pool>
 800ded8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3708      	adds	r7, #8
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	0801a084 	.word	0x0801a084
 800dee8:	0801a100 	.word	0x0801a100
 800deec:	0801a0d8 	.word	0x0801a0d8

0800def0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b084      	sub	sp, #16
 800def4:	af00      	add	r7, sp, #0
 800def6:	4603      	mov	r3, r0
 800def8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800defa:	79fb      	ldrb	r3, [r7, #7]
 800defc:	2b0c      	cmp	r3, #12
 800defe:	d908      	bls.n	800df12 <memp_malloc+0x22>
 800df00:	4b0a      	ldr	r3, [pc, #40]	; (800df2c <memp_malloc+0x3c>)
 800df02:	f240 1257 	movw	r2, #343	; 0x157
 800df06:	490a      	ldr	r1, [pc, #40]	; (800df30 <memp_malloc+0x40>)
 800df08:	480a      	ldr	r0, [pc, #40]	; (800df34 <memp_malloc+0x44>)
 800df0a:	f00a fe29 	bl	8018b60 <iprintf>
 800df0e:	2300      	movs	r3, #0
 800df10:	e008      	b.n	800df24 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800df12:	79fb      	ldrb	r3, [r7, #7]
 800df14:	4a08      	ldr	r2, [pc, #32]	; (800df38 <memp_malloc+0x48>)
 800df16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7ff ff94 	bl	800de48 <do_memp_malloc_pool>
 800df20:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800df22:	68fb      	ldr	r3, [r7, #12]
}
 800df24:	4618      	mov	r0, r3
 800df26:	3710      	adds	r7, #16
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}
 800df2c:	0801a084 	.word	0x0801a084
 800df30:	0801a114 	.word	0x0801a114
 800df34:	0801a0d8 	.word	0x0801a0d8
 800df38:	0801eb4c 	.word	0x0801eb4c

0800df3c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b084      	sub	sp, #16
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	f003 0303 	and.w	r3, r3, #3
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d006      	beq.n	800df5e <do_memp_free_pool+0x22>
 800df50:	4b0d      	ldr	r3, [pc, #52]	; (800df88 <do_memp_free_pool+0x4c>)
 800df52:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800df56:	490d      	ldr	r1, [pc, #52]	; (800df8c <do_memp_free_pool+0x50>)
 800df58:	480d      	ldr	r0, [pc, #52]	; (800df90 <do_memp_free_pool+0x54>)
 800df5a:	f00a fe01 	bl	8018b60 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800df62:	f00a fc07 	bl	8018774 <sys_arch_protect>
 800df66:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	689b      	ldr	r3, [r3, #8]
 800df6c:	681a      	ldr	r2, [r3, #0]
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	689b      	ldr	r3, [r3, #8]
 800df76:	68fa      	ldr	r2, [r7, #12]
 800df78:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800df7a:	68b8      	ldr	r0, [r7, #8]
 800df7c:	f00a fc08 	bl	8018790 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800df80:	bf00      	nop
 800df82:	3710      	adds	r7, #16
 800df84:	46bd      	mov	sp, r7
 800df86:	bd80      	pop	{r7, pc}
 800df88:	0801a084 	.word	0x0801a084
 800df8c:	0801a134 	.word	0x0801a134
 800df90:	0801a0d8 	.word	0x0801a0d8

0800df94 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b082      	sub	sp, #8
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d106      	bne.n	800dfb2 <memp_free_pool+0x1e>
 800dfa4:	4b0a      	ldr	r3, [pc, #40]	; (800dfd0 <memp_free_pool+0x3c>)
 800dfa6:	f240 1295 	movw	r2, #405	; 0x195
 800dfaa:	490a      	ldr	r1, [pc, #40]	; (800dfd4 <memp_free_pool+0x40>)
 800dfac:	480a      	ldr	r0, [pc, #40]	; (800dfd8 <memp_free_pool+0x44>)
 800dfae:	f00a fdd7 	bl	8018b60 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d007      	beq.n	800dfc8 <memp_free_pool+0x34>
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d004      	beq.n	800dfc8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800dfbe:	6839      	ldr	r1, [r7, #0]
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f7ff ffbb 	bl	800df3c <do_memp_free_pool>
 800dfc6:	e000      	b.n	800dfca <memp_free_pool+0x36>
    return;
 800dfc8:	bf00      	nop
}
 800dfca:	3708      	adds	r7, #8
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}
 800dfd0:	0801a084 	.word	0x0801a084
 800dfd4:	0801a100 	.word	0x0801a100
 800dfd8:	0801a0d8 	.word	0x0801a0d8

0800dfdc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b082      	sub	sp, #8
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	6039      	str	r1, [r7, #0]
 800dfe6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800dfe8:	79fb      	ldrb	r3, [r7, #7]
 800dfea:	2b0c      	cmp	r3, #12
 800dfec:	d907      	bls.n	800dffe <memp_free+0x22>
 800dfee:	4b0c      	ldr	r3, [pc, #48]	; (800e020 <memp_free+0x44>)
 800dff0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800dff4:	490b      	ldr	r1, [pc, #44]	; (800e024 <memp_free+0x48>)
 800dff6:	480c      	ldr	r0, [pc, #48]	; (800e028 <memp_free+0x4c>)
 800dff8:	f00a fdb2 	bl	8018b60 <iprintf>
 800dffc:	e00c      	b.n	800e018 <memp_free+0x3c>

  if (mem == NULL) {
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d008      	beq.n	800e016 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e004:	79fb      	ldrb	r3, [r7, #7]
 800e006:	4a09      	ldr	r2, [pc, #36]	; (800e02c <memp_free+0x50>)
 800e008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e00c:	6839      	ldr	r1, [r7, #0]
 800e00e:	4618      	mov	r0, r3
 800e010:	f7ff ff94 	bl	800df3c <do_memp_free_pool>
 800e014:	e000      	b.n	800e018 <memp_free+0x3c>
    return;
 800e016:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e018:	3708      	adds	r7, #8
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}
 800e01e:	bf00      	nop
 800e020:	0801a084 	.word	0x0801a084
 800e024:	0801a154 	.word	0x0801a154
 800e028:	0801a0d8 	.word	0x0801a0d8
 800e02c:	0801eb4c 	.word	0x0801eb4c

0800e030 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e030:	b480      	push	{r7}
 800e032:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e034:	bf00      	nop
 800e036:	46bd      	mov	sp, r7
 800e038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03c:	4770      	bx	lr
	...

0800e040 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b086      	sub	sp, #24
 800e044:	af00      	add	r7, sp, #0
 800e046:	60f8      	str	r0, [r7, #12]
 800e048:	60b9      	str	r1, [r7, #8]
 800e04a:	607a      	str	r2, [r7, #4]
 800e04c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d108      	bne.n	800e066 <netif_add+0x26>
 800e054:	4b57      	ldr	r3, [pc, #348]	; (800e1b4 <netif_add+0x174>)
 800e056:	f240 1227 	movw	r2, #295	; 0x127
 800e05a:	4957      	ldr	r1, [pc, #348]	; (800e1b8 <netif_add+0x178>)
 800e05c:	4857      	ldr	r0, [pc, #348]	; (800e1bc <netif_add+0x17c>)
 800e05e:	f00a fd7f 	bl	8018b60 <iprintf>
 800e062:	2300      	movs	r3, #0
 800e064:	e0a2      	b.n	800e1ac <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d108      	bne.n	800e07e <netif_add+0x3e>
 800e06c:	4b51      	ldr	r3, [pc, #324]	; (800e1b4 <netif_add+0x174>)
 800e06e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800e072:	4953      	ldr	r1, [pc, #332]	; (800e1c0 <netif_add+0x180>)
 800e074:	4851      	ldr	r0, [pc, #324]	; (800e1bc <netif_add+0x17c>)
 800e076:	f00a fd73 	bl	8018b60 <iprintf>
 800e07a:	2300      	movs	r3, #0
 800e07c:	e096      	b.n	800e1ac <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d101      	bne.n	800e088 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e084:	4b4f      	ldr	r3, [pc, #316]	; (800e1c4 <netif_add+0x184>)
 800e086:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d101      	bne.n	800e092 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e08e:	4b4d      	ldr	r3, [pc, #308]	; (800e1c4 <netif_add+0x184>)
 800e090:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d101      	bne.n	800e09c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e098:	4b4a      	ldr	r3, [pc, #296]	; (800e1c4 <netif_add+0x184>)
 800e09a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	4a45      	ldr	r2, [pc, #276]	; (800e1c8 <netif_add+0x188>)
 800e0b2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	2200      	movs	r2, #0
 800e0be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	6a3a      	ldr	r2, [r7, #32]
 800e0cc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e0ce:	4b3f      	ldr	r3, [pc, #252]	; (800e1cc <netif_add+0x18c>)
 800e0d0:	781a      	ldrb	r2, [r3, #0]
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0dc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	687a      	ldr	r2, [r7, #4]
 800e0e2:	68b9      	ldr	r1, [r7, #8]
 800e0e4:	68f8      	ldr	r0, [r7, #12]
 800e0e6:	f000 f913 	bl	800e310 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ec:	68f8      	ldr	r0, [r7, #12]
 800e0ee:	4798      	blx	r3
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d001      	beq.n	800e0fa <netif_add+0xba>
    return NULL;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	e058      	b.n	800e1ac <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e100:	2bff      	cmp	r3, #255	; 0xff
 800e102:	d103      	bne.n	800e10c <netif_add+0xcc>
        netif->num = 0;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	2200      	movs	r2, #0
 800e108:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800e10c:	2300      	movs	r3, #0
 800e10e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e110:	4b2f      	ldr	r3, [pc, #188]	; (800e1d0 <netif_add+0x190>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	617b      	str	r3, [r7, #20]
 800e116:	e02b      	b.n	800e170 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e118:	697a      	ldr	r2, [r7, #20]
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d106      	bne.n	800e12e <netif_add+0xee>
 800e120:	4b24      	ldr	r3, [pc, #144]	; (800e1b4 <netif_add+0x174>)
 800e122:	f240 128b 	movw	r2, #395	; 0x18b
 800e126:	492b      	ldr	r1, [pc, #172]	; (800e1d4 <netif_add+0x194>)
 800e128:	4824      	ldr	r0, [pc, #144]	; (800e1bc <netif_add+0x17c>)
 800e12a:	f00a fd19 	bl	8018b60 <iprintf>
        num_netifs++;
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	3301      	adds	r3, #1
 800e132:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	2bff      	cmp	r3, #255	; 0xff
 800e138:	dd06      	ble.n	800e148 <netif_add+0x108>
 800e13a:	4b1e      	ldr	r3, [pc, #120]	; (800e1b4 <netif_add+0x174>)
 800e13c:	f240 128d 	movw	r2, #397	; 0x18d
 800e140:	4925      	ldr	r1, [pc, #148]	; (800e1d8 <netif_add+0x198>)
 800e142:	481e      	ldr	r0, [pc, #120]	; (800e1bc <netif_add+0x17c>)
 800e144:	f00a fd0c 	bl	8018b60 <iprintf>
        if (netif2->num == netif->num) {
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e154:	429a      	cmp	r2, r3
 800e156:	d108      	bne.n	800e16a <netif_add+0x12a>
          netif->num++;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e15e:	3301      	adds	r3, #1
 800e160:	b2da      	uxtb	r2, r3
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800e168:	e005      	b.n	800e176 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	617b      	str	r3, [r7, #20]
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d1d0      	bne.n	800e118 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d1be      	bne.n	800e0fa <netif_add+0xba>
  }
  if (netif->num == 254) {
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e182:	2bfe      	cmp	r3, #254	; 0xfe
 800e184:	d103      	bne.n	800e18e <netif_add+0x14e>
    netif_num = 0;
 800e186:	4b11      	ldr	r3, [pc, #68]	; (800e1cc <netif_add+0x18c>)
 800e188:	2200      	movs	r2, #0
 800e18a:	701a      	strb	r2, [r3, #0]
 800e18c:	e006      	b.n	800e19c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e194:	3301      	adds	r3, #1
 800e196:	b2da      	uxtb	r2, r3
 800e198:	4b0c      	ldr	r3, [pc, #48]	; (800e1cc <netif_add+0x18c>)
 800e19a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e19c:	4b0c      	ldr	r3, [pc, #48]	; (800e1d0 <netif_add+0x190>)
 800e19e:	681a      	ldr	r2, [r3, #0]
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e1a4:	4a0a      	ldr	r2, [pc, #40]	; (800e1d0 <netif_add+0x190>)
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3718      	adds	r7, #24
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}
 800e1b4:	0801a170 	.word	0x0801a170
 800e1b8:	0801a204 	.word	0x0801a204
 800e1bc:	0801a1c0 	.word	0x0801a1c0
 800e1c0:	0801a220 	.word	0x0801a220
 800e1c4:	0801ebc0 	.word	0x0801ebc0
 800e1c8:	0800e5eb 	.word	0x0800e5eb
 800e1cc:	24008a7c 	.word	0x24008a7c
 800e1d0:	24008a74 	.word	0x24008a74
 800e1d4:	0801a244 	.word	0x0801a244
 800e1d8:	0801a258 	.word	0x0801a258

0800e1dc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b082      	sub	sp, #8
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e1e6:	6839      	ldr	r1, [r7, #0]
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f002 fe33 	bl	8010e54 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e1ee:	6839      	ldr	r1, [r7, #0]
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f007 fecf 	bl	8015f94 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e1f6:	bf00      	nop
 800e1f8:	3708      	adds	r7, #8
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
	...

0800e200 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b086      	sub	sp, #24
 800e204:	af00      	add	r7, sp, #0
 800e206:	60f8      	str	r0, [r7, #12]
 800e208:	60b9      	str	r1, [r7, #8]
 800e20a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d106      	bne.n	800e220 <netif_do_set_ipaddr+0x20>
 800e212:	4b1d      	ldr	r3, [pc, #116]	; (800e288 <netif_do_set_ipaddr+0x88>)
 800e214:	f240 12cb 	movw	r2, #459	; 0x1cb
 800e218:	491c      	ldr	r1, [pc, #112]	; (800e28c <netif_do_set_ipaddr+0x8c>)
 800e21a:	481d      	ldr	r0, [pc, #116]	; (800e290 <netif_do_set_ipaddr+0x90>)
 800e21c:	f00a fca0 	bl	8018b60 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d106      	bne.n	800e234 <netif_do_set_ipaddr+0x34>
 800e226:	4b18      	ldr	r3, [pc, #96]	; (800e288 <netif_do_set_ipaddr+0x88>)
 800e228:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800e22c:	4917      	ldr	r1, [pc, #92]	; (800e28c <netif_do_set_ipaddr+0x8c>)
 800e22e:	4818      	ldr	r0, [pc, #96]	; (800e290 <netif_do_set_ipaddr+0x90>)
 800e230:	f00a fc96 	bl	8018b60 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	681a      	ldr	r2, [r3, #0]
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	3304      	adds	r3, #4
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	429a      	cmp	r2, r3
 800e240:	d01c      	beq.n	800e27c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	3304      	adds	r3, #4
 800e24c:	681a      	ldr	r2, [r3, #0]
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e252:	f107 0314 	add.w	r3, r7, #20
 800e256:	4619      	mov	r1, r3
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f7ff ffbf 	bl	800e1dc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d002      	beq.n	800e26a <netif_do_set_ipaddr+0x6a>
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	e000      	b.n	800e26c <netif_do_set_ipaddr+0x6c>
 800e26a:	2300      	movs	r3, #0
 800e26c:	68fa      	ldr	r2, [r7, #12]
 800e26e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e270:	2101      	movs	r1, #1
 800e272:	68f8      	ldr	r0, [r7, #12]
 800e274:	f000 f8d2 	bl	800e41c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e278:	2301      	movs	r3, #1
 800e27a:	e000      	b.n	800e27e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800e27c:	2300      	movs	r3, #0
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3718      	adds	r7, #24
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}
 800e286:	bf00      	nop
 800e288:	0801a170 	.word	0x0801a170
 800e28c:	0801a288 	.word	0x0801a288
 800e290:	0801a1c0 	.word	0x0801a1c0

0800e294 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e294:	b480      	push	{r7}
 800e296:	b085      	sub	sp, #20
 800e298:	af00      	add	r7, sp, #0
 800e29a:	60f8      	str	r0, [r7, #12]
 800e29c:	60b9      	str	r1, [r7, #8]
 800e29e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	681a      	ldr	r2, [r3, #0]
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	3308      	adds	r3, #8
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d00a      	beq.n	800e2c4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d002      	beq.n	800e2ba <netif_do_set_netmask+0x26>
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	e000      	b.n	800e2bc <netif_do_set_netmask+0x28>
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	68fa      	ldr	r2, [r7, #12]
 800e2be:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	e000      	b.n	800e2c6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e2c4:	2300      	movs	r3, #0
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3714      	adds	r7, #20
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d0:	4770      	bx	lr

0800e2d2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e2d2:	b480      	push	{r7}
 800e2d4:	b085      	sub	sp, #20
 800e2d6:	af00      	add	r7, sp, #0
 800e2d8:	60f8      	str	r0, [r7, #12]
 800e2da:	60b9      	str	r1, [r7, #8]
 800e2dc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	681a      	ldr	r2, [r3, #0]
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	330c      	adds	r3, #12
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d00a      	beq.n	800e302 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d002      	beq.n	800e2f8 <netif_do_set_gw+0x26>
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	e000      	b.n	800e2fa <netif_do_set_gw+0x28>
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	68fa      	ldr	r2, [r7, #12]
 800e2fc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e2fe:	2301      	movs	r3, #1
 800e300:	e000      	b.n	800e304 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e302:	2300      	movs	r3, #0
}
 800e304:	4618      	mov	r0, r3
 800e306:	3714      	adds	r7, #20
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr

0800e310 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b088      	sub	sp, #32
 800e314:	af00      	add	r7, sp, #0
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	607a      	str	r2, [r7, #4]
 800e31c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e31e:	2300      	movs	r3, #0
 800e320:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e322:	2300      	movs	r3, #0
 800e324:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d101      	bne.n	800e330 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e32c:	4b1c      	ldr	r3, [pc, #112]	; (800e3a0 <netif_set_addr+0x90>)
 800e32e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d101      	bne.n	800e33a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e336:	4b1a      	ldr	r3, [pc, #104]	; (800e3a0 <netif_set_addr+0x90>)
 800e338:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d101      	bne.n	800e344 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e340:	4b17      	ldr	r3, [pc, #92]	; (800e3a0 <netif_set_addr+0x90>)
 800e342:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d003      	beq.n	800e352 <netif_set_addr+0x42>
 800e34a:	68bb      	ldr	r3, [r7, #8]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d101      	bne.n	800e356 <netif_set_addr+0x46>
 800e352:	2301      	movs	r3, #1
 800e354:	e000      	b.n	800e358 <netif_set_addr+0x48>
 800e356:	2300      	movs	r3, #0
 800e358:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d006      	beq.n	800e36e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e360:	f107 0310 	add.w	r3, r7, #16
 800e364:	461a      	mov	r2, r3
 800e366:	68b9      	ldr	r1, [r7, #8]
 800e368:	68f8      	ldr	r0, [r7, #12]
 800e36a:	f7ff ff49 	bl	800e200 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e36e:	69fa      	ldr	r2, [r7, #28]
 800e370:	6879      	ldr	r1, [r7, #4]
 800e372:	68f8      	ldr	r0, [r7, #12]
 800e374:	f7ff ff8e 	bl	800e294 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e378:	69ba      	ldr	r2, [r7, #24]
 800e37a:	6839      	ldr	r1, [r7, #0]
 800e37c:	68f8      	ldr	r0, [r7, #12]
 800e37e:	f7ff ffa8 	bl	800e2d2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d106      	bne.n	800e396 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e388:	f107 0310 	add.w	r3, r7, #16
 800e38c:	461a      	mov	r2, r3
 800e38e:	68b9      	ldr	r1, [r7, #8]
 800e390:	68f8      	ldr	r0, [r7, #12]
 800e392:	f7ff ff35 	bl	800e200 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e396:	bf00      	nop
 800e398:	3720      	adds	r7, #32
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
 800e39e:	bf00      	nop
 800e3a0:	0801ebc0 	.word	0x0801ebc0

0800e3a4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	b083      	sub	sp, #12
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e3ac:	4a04      	ldr	r2, [pc, #16]	; (800e3c0 <netif_set_default+0x1c>)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e3b2:	bf00      	nop
 800e3b4:	370c      	adds	r7, #12
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3bc:	4770      	bx	lr
 800e3be:	bf00      	nop
 800e3c0:	24008a78 	.word	0x24008a78

0800e3c4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d107      	bne.n	800e3e2 <netif_set_up+0x1e>
 800e3d2:	4b0f      	ldr	r3, [pc, #60]	; (800e410 <netif_set_up+0x4c>)
 800e3d4:	f44f 7254 	mov.w	r2, #848	; 0x350
 800e3d8:	490e      	ldr	r1, [pc, #56]	; (800e414 <netif_set_up+0x50>)
 800e3da:	480f      	ldr	r0, [pc, #60]	; (800e418 <netif_set_up+0x54>)
 800e3dc:	f00a fbc0 	bl	8018b60 <iprintf>
 800e3e0:	e013      	b.n	800e40a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e3e8:	f003 0301 	and.w	r3, r3, #1
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d10c      	bne.n	800e40a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e3f6:	f043 0301 	orr.w	r3, r3, #1
 800e3fa:	b2da      	uxtb	r2, r3
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e402:	2103      	movs	r1, #3
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f000 f809 	bl	800e41c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e40a:	3708      	adds	r7, #8
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	0801a170 	.word	0x0801a170
 800e414:	0801a2f8 	.word	0x0801a2f8
 800e418:	0801a1c0 	.word	0x0801a1c0

0800e41c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b082      	sub	sp, #8
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	460b      	mov	r3, r1
 800e426:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d106      	bne.n	800e43c <netif_issue_reports+0x20>
 800e42e:	4b18      	ldr	r3, [pc, #96]	; (800e490 <netif_issue_reports+0x74>)
 800e430:	f240 326d 	movw	r2, #877	; 0x36d
 800e434:	4917      	ldr	r1, [pc, #92]	; (800e494 <netif_issue_reports+0x78>)
 800e436:	4818      	ldr	r0, [pc, #96]	; (800e498 <netif_issue_reports+0x7c>)
 800e438:	f00a fb92 	bl	8018b60 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e442:	f003 0304 	and.w	r3, r3, #4
 800e446:	2b00      	cmp	r3, #0
 800e448:	d01e      	beq.n	800e488 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e450:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e454:	2b00      	cmp	r3, #0
 800e456:	d017      	beq.n	800e488 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e458:	78fb      	ldrb	r3, [r7, #3]
 800e45a:	f003 0301 	and.w	r3, r3, #1
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d013      	beq.n	800e48a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	3304      	adds	r3, #4
 800e466:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d00e      	beq.n	800e48a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e472:	f003 0308 	and.w	r3, r3, #8
 800e476:	2b00      	cmp	r3, #0
 800e478:	d007      	beq.n	800e48a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	3304      	adds	r3, #4
 800e47e:	4619      	mov	r1, r3
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f008 fcf1 	bl	8016e68 <etharp_request>
 800e486:	e000      	b.n	800e48a <netif_issue_reports+0x6e>
    return;
 800e488:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e48a:	3708      	adds	r7, #8
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}
 800e490:	0801a170 	.word	0x0801a170
 800e494:	0801a314 	.word	0x0801a314
 800e498:	0801a1c0 	.word	0x0801a1c0

0800e49c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b082      	sub	sp, #8
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d107      	bne.n	800e4ba <netif_set_down+0x1e>
 800e4aa:	4b12      	ldr	r3, [pc, #72]	; (800e4f4 <netif_set_down+0x58>)
 800e4ac:	f240 329b 	movw	r2, #923	; 0x39b
 800e4b0:	4911      	ldr	r1, [pc, #68]	; (800e4f8 <netif_set_down+0x5c>)
 800e4b2:	4812      	ldr	r0, [pc, #72]	; (800e4fc <netif_set_down+0x60>)
 800e4b4:	f00a fb54 	bl	8018b60 <iprintf>
 800e4b8:	e019      	b.n	800e4ee <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e4c0:	f003 0301 	and.w	r3, r3, #1
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d012      	beq.n	800e4ee <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e4ce:	f023 0301 	bic.w	r3, r3, #1
 800e4d2:	b2da      	uxtb	r2, r3
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e4e0:	f003 0308 	and.w	r3, r3, #8
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d002      	beq.n	800e4ee <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e4e8:	6878      	ldr	r0, [r7, #4]
 800e4ea:	f008 f87b 	bl	80165e4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e4ee:	3708      	adds	r7, #8
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}
 800e4f4:	0801a170 	.word	0x0801a170
 800e4f8:	0801a338 	.word	0x0801a338
 800e4fc:	0801a1c0 	.word	0x0801a1c0

0800e500 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d107      	bne.n	800e51e <netif_set_link_up+0x1e>
 800e50e:	4b13      	ldr	r3, [pc, #76]	; (800e55c <netif_set_link_up+0x5c>)
 800e510:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800e514:	4912      	ldr	r1, [pc, #72]	; (800e560 <netif_set_link_up+0x60>)
 800e516:	4813      	ldr	r0, [pc, #76]	; (800e564 <netif_set_link_up+0x64>)
 800e518:	f00a fb22 	bl	8018b60 <iprintf>
 800e51c:	e01b      	b.n	800e556 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e524:	f003 0304 	and.w	r3, r3, #4
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d114      	bne.n	800e556 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e532:	f043 0304 	orr.w	r3, r3, #4
 800e536:	b2da      	uxtb	r2, r3
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e53e:	2103      	movs	r1, #3
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f7ff ff6b 	bl	800e41c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	69db      	ldr	r3, [r3, #28]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d003      	beq.n	800e556 <netif_set_link_up+0x56>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	69db      	ldr	r3, [r3, #28]
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e556:	3708      	adds	r7, #8
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd80      	pop	{r7, pc}
 800e55c:	0801a170 	.word	0x0801a170
 800e560:	0801a358 	.word	0x0801a358
 800e564:	0801a1c0 	.word	0x0801a1c0

0800e568 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b082      	sub	sp, #8
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d107      	bne.n	800e586 <netif_set_link_down+0x1e>
 800e576:	4b11      	ldr	r3, [pc, #68]	; (800e5bc <netif_set_link_down+0x54>)
 800e578:	f240 4206 	movw	r2, #1030	; 0x406
 800e57c:	4910      	ldr	r1, [pc, #64]	; (800e5c0 <netif_set_link_down+0x58>)
 800e57e:	4811      	ldr	r0, [pc, #68]	; (800e5c4 <netif_set_link_down+0x5c>)
 800e580:	f00a faee 	bl	8018b60 <iprintf>
 800e584:	e017      	b.n	800e5b6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e58c:	f003 0304 	and.w	r3, r3, #4
 800e590:	2b00      	cmp	r3, #0
 800e592:	d010      	beq.n	800e5b6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e59a:	f023 0304 	bic.w	r3, r3, #4
 800e59e:	b2da      	uxtb	r2, r3
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	69db      	ldr	r3, [r3, #28]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d003      	beq.n	800e5b6 <netif_set_link_down+0x4e>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	69db      	ldr	r3, [r3, #28]
 800e5b2:	6878      	ldr	r0, [r7, #4]
 800e5b4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e5b6:	3708      	adds	r7, #8
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}
 800e5bc:	0801a170 	.word	0x0801a170
 800e5c0:	0801a37c 	.word	0x0801a37c
 800e5c4:	0801a1c0 	.word	0x0801a1c0

0800e5c8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e5c8:	b480      	push	{r7}
 800e5ca:	b083      	sub	sp, #12
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d002      	beq.n	800e5de <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	683a      	ldr	r2, [r7, #0]
 800e5dc:	61da      	str	r2, [r3, #28]
  }
}
 800e5de:	bf00      	nop
 800e5e0:	370c      	adds	r7, #12
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e8:	4770      	bx	lr

0800e5ea <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e5ea:	b480      	push	{r7}
 800e5ec:	b085      	sub	sp, #20
 800e5ee:	af00      	add	r7, sp, #0
 800e5f0:	60f8      	str	r0, [r7, #12]
 800e5f2:	60b9      	str	r1, [r7, #8]
 800e5f4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e5f6:	f06f 030b 	mvn.w	r3, #11
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3714      	adds	r7, #20
 800e5fe:	46bd      	mov	sp, r7
 800e600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e604:	4770      	bx	lr
	...

0800e608 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e608:	b480      	push	{r7}
 800e60a:	b085      	sub	sp, #20
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	4603      	mov	r3, r0
 800e610:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e612:	79fb      	ldrb	r3, [r7, #7]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d013      	beq.n	800e640 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e618:	4b0d      	ldr	r3, [pc, #52]	; (800e650 <netif_get_by_index+0x48>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	60fb      	str	r3, [r7, #12]
 800e61e:	e00c      	b.n	800e63a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e626:	3301      	adds	r3, #1
 800e628:	b2db      	uxtb	r3, r3
 800e62a:	79fa      	ldrb	r2, [r7, #7]
 800e62c:	429a      	cmp	r2, r3
 800e62e:	d101      	bne.n	800e634 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	e006      	b.n	800e642 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	60fb      	str	r3, [r7, #12]
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d1ef      	bne.n	800e620 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e640:	2300      	movs	r3, #0
}
 800e642:	4618      	mov	r0, r3
 800e644:	3714      	adds	r7, #20
 800e646:	46bd      	mov	sp, r7
 800e648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64c:	4770      	bx	lr
 800e64e:	bf00      	nop
 800e650:	24008a74 	.word	0x24008a74

0800e654 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b082      	sub	sp, #8
 800e658:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e65a:	f00a f88b 	bl	8018774 <sys_arch_protect>
 800e65e:	6038      	str	r0, [r7, #0]
 800e660:	4b0d      	ldr	r3, [pc, #52]	; (800e698 <pbuf_free_ooseq+0x44>)
 800e662:	2200      	movs	r2, #0
 800e664:	701a      	strb	r2, [r3, #0]
 800e666:	6838      	ldr	r0, [r7, #0]
 800e668:	f00a f892 	bl	8018790 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e66c:	4b0b      	ldr	r3, [pc, #44]	; (800e69c <pbuf_free_ooseq+0x48>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	607b      	str	r3, [r7, #4]
 800e672:	e00a      	b.n	800e68a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d003      	beq.n	800e684 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f002 fc27 	bl	8010ed0 <tcp_free_ooseq>
      return;
 800e682:	e005      	b.n	800e690 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	68db      	ldr	r3, [r3, #12]
 800e688:	607b      	str	r3, [r7, #4]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d1f1      	bne.n	800e674 <pbuf_free_ooseq+0x20>
    }
  }
}
 800e690:	3708      	adds	r7, #8
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}
 800e696:	bf00      	nop
 800e698:	24008a7d 	.word	0x24008a7d
 800e69c:	24008a8c 	.word	0x24008a8c

0800e6a0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b082      	sub	sp, #8
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e6a8:	f7ff ffd4 	bl	800e654 <pbuf_free_ooseq>
}
 800e6ac:	bf00      	nop
 800e6ae:	3708      	adds	r7, #8
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b082      	sub	sp, #8
 800e6b8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e6ba:	f00a f85b 	bl	8018774 <sys_arch_protect>
 800e6be:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e6c0:	4b0f      	ldr	r3, [pc, #60]	; (800e700 <pbuf_pool_is_empty+0x4c>)
 800e6c2:	781b      	ldrb	r3, [r3, #0]
 800e6c4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e6c6:	4b0e      	ldr	r3, [pc, #56]	; (800e700 <pbuf_pool_is_empty+0x4c>)
 800e6c8:	2201      	movs	r2, #1
 800e6ca:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f00a f85f 	bl	8018790 <sys_arch_unprotect>

  if (!queued) {
 800e6d2:	78fb      	ldrb	r3, [r7, #3]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d10f      	bne.n	800e6f8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e6d8:	2100      	movs	r1, #0
 800e6da:	480a      	ldr	r0, [pc, #40]	; (800e704 <pbuf_pool_is_empty+0x50>)
 800e6dc:	f7fd ff9e 	bl	800c61c <tcpip_try_callback>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d008      	beq.n	800e6f8 <pbuf_pool_is_empty+0x44>
 800e6e6:	f00a f845 	bl	8018774 <sys_arch_protect>
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	4b04      	ldr	r3, [pc, #16]	; (800e700 <pbuf_pool_is_empty+0x4c>)
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	701a      	strb	r2, [r3, #0]
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f00a f84c 	bl	8018790 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e6f8:	bf00      	nop
 800e6fa:	3708      	adds	r7, #8
 800e6fc:	46bd      	mov	sp, r7
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	24008a7d 	.word	0x24008a7d
 800e704:	0800e6a1 	.word	0x0800e6a1

0800e708 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e708:	b480      	push	{r7}
 800e70a:	b085      	sub	sp, #20
 800e70c:	af00      	add	r7, sp, #0
 800e70e:	60f8      	str	r0, [r7, #12]
 800e710:	60b9      	str	r1, [r7, #8]
 800e712:	4611      	mov	r1, r2
 800e714:	461a      	mov	r2, r3
 800e716:	460b      	mov	r3, r1
 800e718:	80fb      	strh	r3, [r7, #6]
 800e71a:	4613      	mov	r3, r2
 800e71c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2200      	movs	r2, #0
 800e722:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	68ba      	ldr	r2, [r7, #8]
 800e728:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	88fa      	ldrh	r2, [r7, #6]
 800e72e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	88ba      	ldrh	r2, [r7, #4]
 800e734:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e736:	8b3b      	ldrh	r3, [r7, #24]
 800e738:	b2da      	uxtb	r2, r3
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	7f3a      	ldrb	r2, [r7, #28]
 800e742:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	2201      	movs	r2, #1
 800e748:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2200      	movs	r2, #0
 800e74e:	73da      	strb	r2, [r3, #15]
}
 800e750:	bf00      	nop
 800e752:	3714      	adds	r7, #20
 800e754:	46bd      	mov	sp, r7
 800e756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75a:	4770      	bx	lr

0800e75c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b08c      	sub	sp, #48	; 0x30
 800e760:	af02      	add	r7, sp, #8
 800e762:	4603      	mov	r3, r0
 800e764:	71fb      	strb	r3, [r7, #7]
 800e766:	460b      	mov	r3, r1
 800e768:	80bb      	strh	r3, [r7, #4]
 800e76a:	4613      	mov	r3, r2
 800e76c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e76e:	79fb      	ldrb	r3, [r7, #7]
 800e770:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e772:	887b      	ldrh	r3, [r7, #2]
 800e774:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e778:	d07f      	beq.n	800e87a <pbuf_alloc+0x11e>
 800e77a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e77e:	f300 80c8 	bgt.w	800e912 <pbuf_alloc+0x1b6>
 800e782:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e786:	d010      	beq.n	800e7aa <pbuf_alloc+0x4e>
 800e788:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e78c:	f300 80c1 	bgt.w	800e912 <pbuf_alloc+0x1b6>
 800e790:	2b01      	cmp	r3, #1
 800e792:	d002      	beq.n	800e79a <pbuf_alloc+0x3e>
 800e794:	2b41      	cmp	r3, #65	; 0x41
 800e796:	f040 80bc 	bne.w	800e912 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e79a:	887a      	ldrh	r2, [r7, #2]
 800e79c:	88bb      	ldrh	r3, [r7, #4]
 800e79e:	4619      	mov	r1, r3
 800e7a0:	2000      	movs	r0, #0
 800e7a2:	f000 f8d1 	bl	800e948 <pbuf_alloc_reference>
 800e7a6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e7a8:	e0bd      	b.n	800e926 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e7b2:	88bb      	ldrh	r3, [r7, #4]
 800e7b4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e7b6:	200c      	movs	r0, #12
 800e7b8:	f7ff fb9a 	bl	800def0 <memp_malloc>
 800e7bc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d109      	bne.n	800e7d8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e7c4:	f7ff ff76 	bl	800e6b4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d002      	beq.n	800e7d4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800e7ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7d0:	f000 faa8 	bl	800ed24 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	e0a7      	b.n	800e928 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e7d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e7da:	3303      	adds	r3, #3
 800e7dc:	b29b      	uxth	r3, r3
 800e7de:	f023 0303 	bic.w	r3, r3, #3
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e7e8:	b29b      	uxth	r3, r3
 800e7ea:	8b7a      	ldrh	r2, [r7, #26]
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	bf28      	it	cs
 800e7f0:	4613      	movcs	r3, r2
 800e7f2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e7f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e7f6:	3310      	adds	r3, #16
 800e7f8:	693a      	ldr	r2, [r7, #16]
 800e7fa:	4413      	add	r3, r2
 800e7fc:	3303      	adds	r3, #3
 800e7fe:	f023 0303 	bic.w	r3, r3, #3
 800e802:	4618      	mov	r0, r3
 800e804:	89f9      	ldrh	r1, [r7, #14]
 800e806:	8b7a      	ldrh	r2, [r7, #26]
 800e808:	2300      	movs	r3, #0
 800e80a:	9301      	str	r3, [sp, #4]
 800e80c:	887b      	ldrh	r3, [r7, #2]
 800e80e:	9300      	str	r3, [sp, #0]
 800e810:	460b      	mov	r3, r1
 800e812:	4601      	mov	r1, r0
 800e814:	6938      	ldr	r0, [r7, #16]
 800e816:	f7ff ff77 	bl	800e708 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	f003 0303 	and.w	r3, r3, #3
 800e822:	2b00      	cmp	r3, #0
 800e824:	d006      	beq.n	800e834 <pbuf_alloc+0xd8>
 800e826:	4b42      	ldr	r3, [pc, #264]	; (800e930 <pbuf_alloc+0x1d4>)
 800e828:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e82c:	4941      	ldr	r1, [pc, #260]	; (800e934 <pbuf_alloc+0x1d8>)
 800e82e:	4842      	ldr	r0, [pc, #264]	; (800e938 <pbuf_alloc+0x1dc>)
 800e830:	f00a f996 	bl	8018b60 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e834:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e836:	3303      	adds	r3, #3
 800e838:	f023 0303 	bic.w	r3, r3, #3
 800e83c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e840:	d106      	bne.n	800e850 <pbuf_alloc+0xf4>
 800e842:	4b3b      	ldr	r3, [pc, #236]	; (800e930 <pbuf_alloc+0x1d4>)
 800e844:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e848:	493c      	ldr	r1, [pc, #240]	; (800e93c <pbuf_alloc+0x1e0>)
 800e84a:	483b      	ldr	r0, [pc, #236]	; (800e938 <pbuf_alloc+0x1dc>)
 800e84c:	f00a f988 	bl	8018b60 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e852:	2b00      	cmp	r3, #0
 800e854:	d102      	bne.n	800e85c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e856:	693b      	ldr	r3, [r7, #16]
 800e858:	627b      	str	r3, [r7, #36]	; 0x24
 800e85a:	e002      	b.n	800e862 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e85c:	69fb      	ldr	r3, [r7, #28]
 800e85e:	693a      	ldr	r2, [r7, #16]
 800e860:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e866:	8b7a      	ldrh	r2, [r7, #26]
 800e868:	89fb      	ldrh	r3, [r7, #14]
 800e86a:	1ad3      	subs	r3, r2, r3
 800e86c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e86e:	2300      	movs	r3, #0
 800e870:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e872:	8b7b      	ldrh	r3, [r7, #26]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d19e      	bne.n	800e7b6 <pbuf_alloc+0x5a>
      break;
 800e878:	e055      	b.n	800e926 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e87a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e87c:	3303      	adds	r3, #3
 800e87e:	b29b      	uxth	r3, r3
 800e880:	f023 0303 	bic.w	r3, r3, #3
 800e884:	b29a      	uxth	r2, r3
 800e886:	88bb      	ldrh	r3, [r7, #4]
 800e888:	3303      	adds	r3, #3
 800e88a:	b29b      	uxth	r3, r3
 800e88c:	f023 0303 	bic.w	r3, r3, #3
 800e890:	b29b      	uxth	r3, r3
 800e892:	4413      	add	r3, r2
 800e894:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e896:	8b3b      	ldrh	r3, [r7, #24]
 800e898:	3310      	adds	r3, #16
 800e89a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e89c:	8b3a      	ldrh	r2, [r7, #24]
 800e89e:	88bb      	ldrh	r3, [r7, #4]
 800e8a0:	3303      	adds	r3, #3
 800e8a2:	f023 0303 	bic.w	r3, r3, #3
 800e8a6:	429a      	cmp	r2, r3
 800e8a8:	d306      	bcc.n	800e8b8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e8aa:	8afa      	ldrh	r2, [r7, #22]
 800e8ac:	88bb      	ldrh	r3, [r7, #4]
 800e8ae:	3303      	adds	r3, #3
 800e8b0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d201      	bcs.n	800e8bc <pbuf_alloc+0x160>
        return NULL;
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	e035      	b.n	800e928 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e8bc:	8afb      	ldrh	r3, [r7, #22]
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f7ff f972 	bl	800dba8 <mem_malloc>
 800e8c4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d101      	bne.n	800e8d0 <pbuf_alloc+0x174>
        return NULL;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	e02b      	b.n	800e928 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e8d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e8d2:	3310      	adds	r3, #16
 800e8d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8d6:	4413      	add	r3, r2
 800e8d8:	3303      	adds	r3, #3
 800e8da:	f023 0303 	bic.w	r3, r3, #3
 800e8de:	4618      	mov	r0, r3
 800e8e0:	88b9      	ldrh	r1, [r7, #4]
 800e8e2:	88ba      	ldrh	r2, [r7, #4]
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	9301      	str	r3, [sp, #4]
 800e8e8:	887b      	ldrh	r3, [r7, #2]
 800e8ea:	9300      	str	r3, [sp, #0]
 800e8ec:	460b      	mov	r3, r1
 800e8ee:	4601      	mov	r1, r0
 800e8f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e8f2:	f7ff ff09 	bl	800e708 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f8:	685b      	ldr	r3, [r3, #4]
 800e8fa:	f003 0303 	and.w	r3, r3, #3
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d010      	beq.n	800e924 <pbuf_alloc+0x1c8>
 800e902:	4b0b      	ldr	r3, [pc, #44]	; (800e930 <pbuf_alloc+0x1d4>)
 800e904:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e908:	490d      	ldr	r1, [pc, #52]	; (800e940 <pbuf_alloc+0x1e4>)
 800e90a:	480b      	ldr	r0, [pc, #44]	; (800e938 <pbuf_alloc+0x1dc>)
 800e90c:	f00a f928 	bl	8018b60 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e910:	e008      	b.n	800e924 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e912:	4b07      	ldr	r3, [pc, #28]	; (800e930 <pbuf_alloc+0x1d4>)
 800e914:	f240 1227 	movw	r2, #295	; 0x127
 800e918:	490a      	ldr	r1, [pc, #40]	; (800e944 <pbuf_alloc+0x1e8>)
 800e91a:	4807      	ldr	r0, [pc, #28]	; (800e938 <pbuf_alloc+0x1dc>)
 800e91c:	f00a f920 	bl	8018b60 <iprintf>
      return NULL;
 800e920:	2300      	movs	r3, #0
 800e922:	e001      	b.n	800e928 <pbuf_alloc+0x1cc>
      break;
 800e924:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e928:	4618      	mov	r0, r3
 800e92a:	3728      	adds	r7, #40	; 0x28
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}
 800e930:	0801a3a0 	.word	0x0801a3a0
 800e934:	0801a3d0 	.word	0x0801a3d0
 800e938:	0801a400 	.word	0x0801a400
 800e93c:	0801a428 	.word	0x0801a428
 800e940:	0801a45c 	.word	0x0801a45c
 800e944:	0801a488 	.word	0x0801a488

0800e948 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b086      	sub	sp, #24
 800e94c:	af02      	add	r7, sp, #8
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	460b      	mov	r3, r1
 800e952:	807b      	strh	r3, [r7, #2]
 800e954:	4613      	mov	r3, r2
 800e956:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e958:	883b      	ldrh	r3, [r7, #0]
 800e95a:	2b41      	cmp	r3, #65	; 0x41
 800e95c:	d009      	beq.n	800e972 <pbuf_alloc_reference+0x2a>
 800e95e:	883b      	ldrh	r3, [r7, #0]
 800e960:	2b01      	cmp	r3, #1
 800e962:	d006      	beq.n	800e972 <pbuf_alloc_reference+0x2a>
 800e964:	4b0f      	ldr	r3, [pc, #60]	; (800e9a4 <pbuf_alloc_reference+0x5c>)
 800e966:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e96a:	490f      	ldr	r1, [pc, #60]	; (800e9a8 <pbuf_alloc_reference+0x60>)
 800e96c:	480f      	ldr	r0, [pc, #60]	; (800e9ac <pbuf_alloc_reference+0x64>)
 800e96e:	f00a f8f7 	bl	8018b60 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e972:	200b      	movs	r0, #11
 800e974:	f7ff fabc 	bl	800def0 <memp_malloc>
 800e978:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d101      	bne.n	800e984 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e980:	2300      	movs	r3, #0
 800e982:	e00b      	b.n	800e99c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e984:	8879      	ldrh	r1, [r7, #2]
 800e986:	887a      	ldrh	r2, [r7, #2]
 800e988:	2300      	movs	r3, #0
 800e98a:	9301      	str	r3, [sp, #4]
 800e98c:	883b      	ldrh	r3, [r7, #0]
 800e98e:	9300      	str	r3, [sp, #0]
 800e990:	460b      	mov	r3, r1
 800e992:	6879      	ldr	r1, [r7, #4]
 800e994:	68f8      	ldr	r0, [r7, #12]
 800e996:	f7ff feb7 	bl	800e708 <pbuf_init_alloced_pbuf>
  return p;
 800e99a:	68fb      	ldr	r3, [r7, #12]
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3710      	adds	r7, #16
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	0801a3a0 	.word	0x0801a3a0
 800e9a8:	0801a4a4 	.word	0x0801a4a4
 800e9ac:	0801a400 	.word	0x0801a400

0800e9b0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b088      	sub	sp, #32
 800e9b4:	af02      	add	r7, sp, #8
 800e9b6:	607b      	str	r3, [r7, #4]
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	73fb      	strb	r3, [r7, #15]
 800e9bc:	460b      	mov	r3, r1
 800e9be:	81bb      	strh	r3, [r7, #12]
 800e9c0:	4613      	mov	r3, r2
 800e9c2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e9c4:	7bfb      	ldrb	r3, [r7, #15]
 800e9c6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e9c8:	8a7b      	ldrh	r3, [r7, #18]
 800e9ca:	3303      	adds	r3, #3
 800e9cc:	f023 0203 	bic.w	r2, r3, #3
 800e9d0:	89bb      	ldrh	r3, [r7, #12]
 800e9d2:	441a      	add	r2, r3
 800e9d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d901      	bls.n	800e9de <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	e018      	b.n	800ea10 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e9de:	6a3b      	ldr	r3, [r7, #32]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d007      	beq.n	800e9f4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e9e4:	8a7b      	ldrh	r3, [r7, #18]
 800e9e6:	3303      	adds	r3, #3
 800e9e8:	f023 0303 	bic.w	r3, r3, #3
 800e9ec:	6a3a      	ldr	r2, [r7, #32]
 800e9ee:	4413      	add	r3, r2
 800e9f0:	617b      	str	r3, [r7, #20]
 800e9f2:	e001      	b.n	800e9f8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	89b9      	ldrh	r1, [r7, #12]
 800e9fc:	89ba      	ldrh	r2, [r7, #12]
 800e9fe:	2302      	movs	r3, #2
 800ea00:	9301      	str	r3, [sp, #4]
 800ea02:	897b      	ldrh	r3, [r7, #10]
 800ea04:	9300      	str	r3, [sp, #0]
 800ea06:	460b      	mov	r3, r1
 800ea08:	6979      	ldr	r1, [r7, #20]
 800ea0a:	f7ff fe7d 	bl	800e708 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ea0e:	687b      	ldr	r3, [r7, #4]
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3718      	adds	r7, #24
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}

0800ea18 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b084      	sub	sp, #16
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
 800ea20:	460b      	mov	r3, r1
 800ea22:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d106      	bne.n	800ea38 <pbuf_realloc+0x20>
 800ea2a:	4b3a      	ldr	r3, [pc, #232]	; (800eb14 <pbuf_realloc+0xfc>)
 800ea2c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ea30:	4939      	ldr	r1, [pc, #228]	; (800eb18 <pbuf_realloc+0x100>)
 800ea32:	483a      	ldr	r0, [pc, #232]	; (800eb1c <pbuf_realloc+0x104>)
 800ea34:	f00a f894 	bl	8018b60 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	891b      	ldrh	r3, [r3, #8]
 800ea3c:	887a      	ldrh	r2, [r7, #2]
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d263      	bcs.n	800eb0a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	891a      	ldrh	r2, [r3, #8]
 800ea46:	887b      	ldrh	r3, [r7, #2]
 800ea48:	1ad3      	subs	r3, r2, r3
 800ea4a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ea4c:	887b      	ldrh	r3, [r7, #2]
 800ea4e:	817b      	strh	r3, [r7, #10]
  q = p;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ea54:	e018      	b.n	800ea88 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	895b      	ldrh	r3, [r3, #10]
 800ea5a:	897a      	ldrh	r2, [r7, #10]
 800ea5c:	1ad3      	subs	r3, r2, r3
 800ea5e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	891a      	ldrh	r2, [r3, #8]
 800ea64:	893b      	ldrh	r3, [r7, #8]
 800ea66:	1ad3      	subs	r3, r2, r3
 800ea68:	b29a      	uxth	r2, r3
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d106      	bne.n	800ea88 <pbuf_realloc+0x70>
 800ea7a:	4b26      	ldr	r3, [pc, #152]	; (800eb14 <pbuf_realloc+0xfc>)
 800ea7c:	f240 12af 	movw	r2, #431	; 0x1af
 800ea80:	4927      	ldr	r1, [pc, #156]	; (800eb20 <pbuf_realloc+0x108>)
 800ea82:	4826      	ldr	r0, [pc, #152]	; (800eb1c <pbuf_realloc+0x104>)
 800ea84:	f00a f86c 	bl	8018b60 <iprintf>
  while (rem_len > q->len) {
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	895b      	ldrh	r3, [r3, #10]
 800ea8c:	897a      	ldrh	r2, [r7, #10]
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d8e1      	bhi.n	800ea56 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	7b1b      	ldrb	r3, [r3, #12]
 800ea96:	f003 030f 	and.w	r3, r3, #15
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d121      	bne.n	800eae2 <pbuf_realloc+0xca>
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	895b      	ldrh	r3, [r3, #10]
 800eaa2:	897a      	ldrh	r2, [r7, #10]
 800eaa4:	429a      	cmp	r2, r3
 800eaa6:	d01c      	beq.n	800eae2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	7b5b      	ldrb	r3, [r3, #13]
 800eaac:	f003 0302 	and.w	r3, r3, #2
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d116      	bne.n	800eae2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	685a      	ldr	r2, [r3, #4]
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	1ad3      	subs	r3, r2, r3
 800eabc:	b29a      	uxth	r2, r3
 800eabe:	897b      	ldrh	r3, [r7, #10]
 800eac0:	4413      	add	r3, r2
 800eac2:	b29b      	uxth	r3, r3
 800eac4:	4619      	mov	r1, r3
 800eac6:	68f8      	ldr	r0, [r7, #12]
 800eac8:	f7fe ff64 	bl	800d994 <mem_trim>
 800eacc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d106      	bne.n	800eae2 <pbuf_realloc+0xca>
 800ead4:	4b0f      	ldr	r3, [pc, #60]	; (800eb14 <pbuf_realloc+0xfc>)
 800ead6:	f240 12bd 	movw	r2, #445	; 0x1bd
 800eada:	4912      	ldr	r1, [pc, #72]	; (800eb24 <pbuf_realloc+0x10c>)
 800eadc:	480f      	ldr	r0, [pc, #60]	; (800eb1c <pbuf_realloc+0x104>)
 800eade:	f00a f83f 	bl	8018b60 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	897a      	ldrh	r2, [r7, #10]
 800eae6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	895a      	ldrh	r2, [r3, #10]
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d004      	beq.n	800eb02 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	4618      	mov	r0, r3
 800eafe:	f000 f911 	bl	800ed24 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	2200      	movs	r2, #0
 800eb06:	601a      	str	r2, [r3, #0]
 800eb08:	e000      	b.n	800eb0c <pbuf_realloc+0xf4>
    return;
 800eb0a:	bf00      	nop

}
 800eb0c:	3710      	adds	r7, #16
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop
 800eb14:	0801a3a0 	.word	0x0801a3a0
 800eb18:	0801a4b8 	.word	0x0801a4b8
 800eb1c:	0801a400 	.word	0x0801a400
 800eb20:	0801a4d0 	.word	0x0801a4d0
 800eb24:	0801a4e8 	.word	0x0801a4e8

0800eb28 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b086      	sub	sp, #24
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	60f8      	str	r0, [r7, #12]
 800eb30:	60b9      	str	r1, [r7, #8]
 800eb32:	4613      	mov	r3, r2
 800eb34:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d106      	bne.n	800eb4a <pbuf_add_header_impl+0x22>
 800eb3c:	4b2b      	ldr	r3, [pc, #172]	; (800ebec <pbuf_add_header_impl+0xc4>)
 800eb3e:	f240 12df 	movw	r2, #479	; 0x1df
 800eb42:	492b      	ldr	r1, [pc, #172]	; (800ebf0 <pbuf_add_header_impl+0xc8>)
 800eb44:	482b      	ldr	r0, [pc, #172]	; (800ebf4 <pbuf_add_header_impl+0xcc>)
 800eb46:	f00a f80b 	bl	8018b60 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d003      	beq.n	800eb58 <pbuf_add_header_impl+0x30>
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb56:	d301      	bcc.n	800eb5c <pbuf_add_header_impl+0x34>
    return 1;
 800eb58:	2301      	movs	r3, #1
 800eb5a:	e043      	b.n	800ebe4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d101      	bne.n	800eb66 <pbuf_add_header_impl+0x3e>
    return 0;
 800eb62:	2300      	movs	r3, #0
 800eb64:	e03e      	b.n	800ebe4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	891a      	ldrh	r2, [r3, #8]
 800eb6e:	8a7b      	ldrh	r3, [r7, #18]
 800eb70:	4413      	add	r3, r2
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	8a7a      	ldrh	r2, [r7, #18]
 800eb76:	429a      	cmp	r2, r3
 800eb78:	d901      	bls.n	800eb7e <pbuf_add_header_impl+0x56>
    return 1;
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	e032      	b.n	800ebe4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	7b1b      	ldrb	r3, [r3, #12]
 800eb82:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800eb84:	8a3b      	ldrh	r3, [r7, #16]
 800eb86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d00c      	beq.n	800eba8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	685a      	ldr	r2, [r3, #4]
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	425b      	negs	r3, r3
 800eb96:	4413      	add	r3, r2
 800eb98:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	3310      	adds	r3, #16
 800eb9e:	697a      	ldr	r2, [r7, #20]
 800eba0:	429a      	cmp	r2, r3
 800eba2:	d20d      	bcs.n	800ebc0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800eba4:	2301      	movs	r3, #1
 800eba6:	e01d      	b.n	800ebe4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800eba8:	79fb      	ldrb	r3, [r7, #7]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d006      	beq.n	800ebbc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	685a      	ldr	r2, [r3, #4]
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	425b      	negs	r3, r3
 800ebb6:	4413      	add	r3, r2
 800ebb8:	617b      	str	r3, [r7, #20]
 800ebba:	e001      	b.n	800ebc0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	e011      	b.n	800ebe4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	697a      	ldr	r2, [r7, #20]
 800ebc4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	895a      	ldrh	r2, [r3, #10]
 800ebca:	8a7b      	ldrh	r3, [r7, #18]
 800ebcc:	4413      	add	r3, r2
 800ebce:	b29a      	uxth	r2, r3
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	891a      	ldrh	r2, [r3, #8]
 800ebd8:	8a7b      	ldrh	r3, [r7, #18]
 800ebda:	4413      	add	r3, r2
 800ebdc:	b29a      	uxth	r2, r3
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	811a      	strh	r2, [r3, #8]


  return 0;
 800ebe2:	2300      	movs	r3, #0
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3718      	adds	r7, #24
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}
 800ebec:	0801a3a0 	.word	0x0801a3a0
 800ebf0:	0801a504 	.word	0x0801a504
 800ebf4:	0801a400 	.word	0x0801a400

0800ebf8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b082      	sub	sp, #8
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ec02:	2200      	movs	r2, #0
 800ec04:	6839      	ldr	r1, [r7, #0]
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f7ff ff8e 	bl	800eb28 <pbuf_add_header_impl>
 800ec0c:	4603      	mov	r3, r0
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3708      	adds	r7, #8
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
	...

0800ec18 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d106      	bne.n	800ec36 <pbuf_remove_header+0x1e>
 800ec28:	4b20      	ldr	r3, [pc, #128]	; (800ecac <pbuf_remove_header+0x94>)
 800ec2a:	f240 224b 	movw	r2, #587	; 0x24b
 800ec2e:	4920      	ldr	r1, [pc, #128]	; (800ecb0 <pbuf_remove_header+0x98>)
 800ec30:	4820      	ldr	r0, [pc, #128]	; (800ecb4 <pbuf_remove_header+0x9c>)
 800ec32:	f009 ff95 	bl	8018b60 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d003      	beq.n	800ec44 <pbuf_remove_header+0x2c>
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec42:	d301      	bcc.n	800ec48 <pbuf_remove_header+0x30>
    return 1;
 800ec44:	2301      	movs	r3, #1
 800ec46:	e02c      	b.n	800eca2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d101      	bne.n	800ec52 <pbuf_remove_header+0x3a>
    return 0;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	e027      	b.n	800eca2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	895b      	ldrh	r3, [r3, #10]
 800ec5a:	89fa      	ldrh	r2, [r7, #14]
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d908      	bls.n	800ec72 <pbuf_remove_header+0x5a>
 800ec60:	4b12      	ldr	r3, [pc, #72]	; (800ecac <pbuf_remove_header+0x94>)
 800ec62:	f240 2255 	movw	r2, #597	; 0x255
 800ec66:	4914      	ldr	r1, [pc, #80]	; (800ecb8 <pbuf_remove_header+0xa0>)
 800ec68:	4812      	ldr	r0, [pc, #72]	; (800ecb4 <pbuf_remove_header+0x9c>)
 800ec6a:	f009 ff79 	bl	8018b60 <iprintf>
 800ec6e:	2301      	movs	r3, #1
 800ec70:	e017      	b.n	800eca2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	685a      	ldr	r2, [r3, #4]
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	441a      	add	r2, r3
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	895a      	ldrh	r2, [r3, #10]
 800ec88:	89fb      	ldrh	r3, [r7, #14]
 800ec8a:	1ad3      	subs	r3, r2, r3
 800ec8c:	b29a      	uxth	r2, r3
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	891a      	ldrh	r2, [r3, #8]
 800ec96:	89fb      	ldrh	r3, [r7, #14]
 800ec98:	1ad3      	subs	r3, r2, r3
 800ec9a:	b29a      	uxth	r2, r3
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800eca0:	2300      	movs	r3, #0
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	3710      	adds	r7, #16
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}
 800ecaa:	bf00      	nop
 800ecac:	0801a3a0 	.word	0x0801a3a0
 800ecb0:	0801a504 	.word	0x0801a504
 800ecb4:	0801a400 	.word	0x0801a400
 800ecb8:	0801a510 	.word	0x0801a510

0800ecbc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b082      	sub	sp, #8
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	460b      	mov	r3, r1
 800ecc6:	807b      	strh	r3, [r7, #2]
 800ecc8:	4613      	mov	r3, r2
 800ecca:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800eccc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	da08      	bge.n	800ece6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ecd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ecd8:	425b      	negs	r3, r3
 800ecda:	4619      	mov	r1, r3
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f7ff ff9b 	bl	800ec18 <pbuf_remove_header>
 800ece2:	4603      	mov	r3, r0
 800ece4:	e007      	b.n	800ecf6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ece6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ecea:	787a      	ldrb	r2, [r7, #1]
 800ecec:	4619      	mov	r1, r3
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f7ff ff1a 	bl	800eb28 <pbuf_add_header_impl>
 800ecf4:	4603      	mov	r3, r0
  }
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3708      	adds	r7, #8
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}

0800ecfe <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ecfe:	b580      	push	{r7, lr}
 800ed00:	b082      	sub	sp, #8
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	6078      	str	r0, [r7, #4]
 800ed06:	460b      	mov	r3, r1
 800ed08:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ed0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ed0e:	2201      	movs	r2, #1
 800ed10:	4619      	mov	r1, r3
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f7ff ffd2 	bl	800ecbc <pbuf_header_impl>
 800ed18:	4603      	mov	r3, r0
}
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	3708      	adds	r7, #8
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}
	...

0800ed24 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b088      	sub	sp, #32
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d10b      	bne.n	800ed4a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d106      	bne.n	800ed46 <pbuf_free+0x22>
 800ed38:	4b3b      	ldr	r3, [pc, #236]	; (800ee28 <pbuf_free+0x104>)
 800ed3a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ed3e:	493b      	ldr	r1, [pc, #236]	; (800ee2c <pbuf_free+0x108>)
 800ed40:	483b      	ldr	r0, [pc, #236]	; (800ee30 <pbuf_free+0x10c>)
 800ed42:	f009 ff0d 	bl	8018b60 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ed46:	2300      	movs	r3, #0
 800ed48:	e069      	b.n	800ee1e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ed4e:	e062      	b.n	800ee16 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ed50:	f009 fd10 	bl	8018774 <sys_arch_protect>
 800ed54:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	7b9b      	ldrb	r3, [r3, #14]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d106      	bne.n	800ed6c <pbuf_free+0x48>
 800ed5e:	4b32      	ldr	r3, [pc, #200]	; (800ee28 <pbuf_free+0x104>)
 800ed60:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ed64:	4933      	ldr	r1, [pc, #204]	; (800ee34 <pbuf_free+0x110>)
 800ed66:	4832      	ldr	r0, [pc, #200]	; (800ee30 <pbuf_free+0x10c>)
 800ed68:	f009 fefa 	bl	8018b60 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	7b9b      	ldrb	r3, [r3, #14]
 800ed70:	3b01      	subs	r3, #1
 800ed72:	b2da      	uxtb	r2, r3
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	739a      	strb	r2, [r3, #14]
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	7b9b      	ldrb	r3, [r3, #14]
 800ed7c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800ed7e:	69b8      	ldr	r0, [r7, #24]
 800ed80:	f009 fd06 	bl	8018790 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ed84:	7dfb      	ldrb	r3, [r7, #23]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d143      	bne.n	800ee12 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	7b1b      	ldrb	r3, [r3, #12]
 800ed94:	f003 030f 	and.w	r3, r3, #15
 800ed98:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	7b5b      	ldrb	r3, [r3, #13]
 800ed9e:	f003 0302 	and.w	r3, r3, #2
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d011      	beq.n	800edca <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800edaa:	68bb      	ldr	r3, [r7, #8]
 800edac:	691b      	ldr	r3, [r3, #16]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d106      	bne.n	800edc0 <pbuf_free+0x9c>
 800edb2:	4b1d      	ldr	r3, [pc, #116]	; (800ee28 <pbuf_free+0x104>)
 800edb4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800edb8:	491f      	ldr	r1, [pc, #124]	; (800ee38 <pbuf_free+0x114>)
 800edba:	481d      	ldr	r0, [pc, #116]	; (800ee30 <pbuf_free+0x10c>)
 800edbc:	f009 fed0 	bl	8018b60 <iprintf>
        pc->custom_free_function(p);
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	691b      	ldr	r3, [r3, #16]
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	4798      	blx	r3
 800edc8:	e01d      	b.n	800ee06 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800edca:	7bfb      	ldrb	r3, [r7, #15]
 800edcc:	2b02      	cmp	r3, #2
 800edce:	d104      	bne.n	800edda <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800edd0:	6879      	ldr	r1, [r7, #4]
 800edd2:	200c      	movs	r0, #12
 800edd4:	f7ff f902 	bl	800dfdc <memp_free>
 800edd8:	e015      	b.n	800ee06 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800edda:	7bfb      	ldrb	r3, [r7, #15]
 800eddc:	2b01      	cmp	r3, #1
 800edde:	d104      	bne.n	800edea <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ede0:	6879      	ldr	r1, [r7, #4]
 800ede2:	200b      	movs	r0, #11
 800ede4:	f7ff f8fa 	bl	800dfdc <memp_free>
 800ede8:	e00d      	b.n	800ee06 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800edea:	7bfb      	ldrb	r3, [r7, #15]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d103      	bne.n	800edf8 <pbuf_free+0xd4>
          mem_free(p);
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	f7fe fd3f 	bl	800d874 <mem_free>
 800edf6:	e006      	b.n	800ee06 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800edf8:	4b0b      	ldr	r3, [pc, #44]	; (800ee28 <pbuf_free+0x104>)
 800edfa:	f240 320f 	movw	r2, #783	; 0x30f
 800edfe:	490f      	ldr	r1, [pc, #60]	; (800ee3c <pbuf_free+0x118>)
 800ee00:	480b      	ldr	r0, [pc, #44]	; (800ee30 <pbuf_free+0x10c>)
 800ee02:	f009 fead 	bl	8018b60 <iprintf>
        }
      }
      count++;
 800ee06:	7ffb      	ldrb	r3, [r7, #31]
 800ee08:	3301      	adds	r3, #1
 800ee0a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	607b      	str	r3, [r7, #4]
 800ee10:	e001      	b.n	800ee16 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ee12:	2300      	movs	r3, #0
 800ee14:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d199      	bne.n	800ed50 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ee1c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	3720      	adds	r7, #32
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd80      	pop	{r7, pc}
 800ee26:	bf00      	nop
 800ee28:	0801a3a0 	.word	0x0801a3a0
 800ee2c:	0801a504 	.word	0x0801a504
 800ee30:	0801a400 	.word	0x0801a400
 800ee34:	0801a530 	.word	0x0801a530
 800ee38:	0801a548 	.word	0x0801a548
 800ee3c:	0801a56c 	.word	0x0801a56c

0800ee40 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ee40:	b480      	push	{r7}
 800ee42:	b085      	sub	sp, #20
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ee4c:	e005      	b.n	800ee5a <pbuf_clen+0x1a>
    ++len;
 800ee4e:	89fb      	ldrh	r3, [r7, #14]
 800ee50:	3301      	adds	r3, #1
 800ee52:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d1f6      	bne.n	800ee4e <pbuf_clen+0xe>
  }
  return len;
 800ee60:	89fb      	ldrh	r3, [r7, #14]
}
 800ee62:	4618      	mov	r0, r3
 800ee64:	3714      	adds	r7, #20
 800ee66:	46bd      	mov	sp, r7
 800ee68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee6c:	4770      	bx	lr
	...

0800ee70 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b084      	sub	sp, #16
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d016      	beq.n	800eeac <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800ee7e:	f009 fc79 	bl	8018774 <sys_arch_protect>
 800ee82:	60f8      	str	r0, [r7, #12]
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	7b9b      	ldrb	r3, [r3, #14]
 800ee88:	3301      	adds	r3, #1
 800ee8a:	b2da      	uxtb	r2, r3
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	739a      	strb	r2, [r3, #14]
 800ee90:	68f8      	ldr	r0, [r7, #12]
 800ee92:	f009 fc7d 	bl	8018790 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	7b9b      	ldrb	r3, [r3, #14]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d106      	bne.n	800eeac <pbuf_ref+0x3c>
 800ee9e:	4b05      	ldr	r3, [pc, #20]	; (800eeb4 <pbuf_ref+0x44>)
 800eea0:	f240 3242 	movw	r2, #834	; 0x342
 800eea4:	4904      	ldr	r1, [pc, #16]	; (800eeb8 <pbuf_ref+0x48>)
 800eea6:	4805      	ldr	r0, [pc, #20]	; (800eebc <pbuf_ref+0x4c>)
 800eea8:	f009 fe5a 	bl	8018b60 <iprintf>
  }
}
 800eeac:	bf00      	nop
 800eeae:	3710      	adds	r7, #16
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}
 800eeb4:	0801a3a0 	.word	0x0801a3a0
 800eeb8:	0801a580 	.word	0x0801a580
 800eebc:	0801a400 	.word	0x0801a400

0800eec0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b084      	sub	sp, #16
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
 800eec8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d002      	beq.n	800eed6 <pbuf_cat+0x16>
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d107      	bne.n	800eee6 <pbuf_cat+0x26>
 800eed6:	4b20      	ldr	r3, [pc, #128]	; (800ef58 <pbuf_cat+0x98>)
 800eed8:	f240 3259 	movw	r2, #857	; 0x359
 800eedc:	491f      	ldr	r1, [pc, #124]	; (800ef5c <pbuf_cat+0x9c>)
 800eede:	4820      	ldr	r0, [pc, #128]	; (800ef60 <pbuf_cat+0xa0>)
 800eee0:	f009 fe3e 	bl	8018b60 <iprintf>
 800eee4:	e034      	b.n	800ef50 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	60fb      	str	r3, [r7, #12]
 800eeea:	e00a      	b.n	800ef02 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	891a      	ldrh	r2, [r3, #8]
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	891b      	ldrh	r3, [r3, #8]
 800eef4:	4413      	add	r3, r2
 800eef6:	b29a      	uxth	r2, r3
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	60fb      	str	r3, [r7, #12]
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d1f0      	bne.n	800eeec <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	891a      	ldrh	r2, [r3, #8]
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	895b      	ldrh	r3, [r3, #10]
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d006      	beq.n	800ef24 <pbuf_cat+0x64>
 800ef16:	4b10      	ldr	r3, [pc, #64]	; (800ef58 <pbuf_cat+0x98>)
 800ef18:	f240 3262 	movw	r2, #866	; 0x362
 800ef1c:	4911      	ldr	r1, [pc, #68]	; (800ef64 <pbuf_cat+0xa4>)
 800ef1e:	4810      	ldr	r0, [pc, #64]	; (800ef60 <pbuf_cat+0xa0>)
 800ef20:	f009 fe1e 	bl	8018b60 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d006      	beq.n	800ef3a <pbuf_cat+0x7a>
 800ef2c:	4b0a      	ldr	r3, [pc, #40]	; (800ef58 <pbuf_cat+0x98>)
 800ef2e:	f240 3263 	movw	r2, #867	; 0x363
 800ef32:	490d      	ldr	r1, [pc, #52]	; (800ef68 <pbuf_cat+0xa8>)
 800ef34:	480a      	ldr	r0, [pc, #40]	; (800ef60 <pbuf_cat+0xa0>)
 800ef36:	f009 fe13 	bl	8018b60 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	891a      	ldrh	r2, [r3, #8]
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	891b      	ldrh	r3, [r3, #8]
 800ef42:	4413      	add	r3, r2
 800ef44:	b29a      	uxth	r2, r3
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	683a      	ldr	r2, [r7, #0]
 800ef4e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ef50:	3710      	adds	r7, #16
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	bf00      	nop
 800ef58:	0801a3a0 	.word	0x0801a3a0
 800ef5c:	0801a594 	.word	0x0801a594
 800ef60:	0801a400 	.word	0x0801a400
 800ef64:	0801a5cc 	.word	0x0801a5cc
 800ef68:	0801a5fc 	.word	0x0801a5fc

0800ef6c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b082      	sub	sp, #8
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
 800ef74:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800ef76:	6839      	ldr	r1, [r7, #0]
 800ef78:	6878      	ldr	r0, [r7, #4]
 800ef7a:	f7ff ffa1 	bl	800eec0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800ef7e:	6838      	ldr	r0, [r7, #0]
 800ef80:	f7ff ff76 	bl	800ee70 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800ef84:	bf00      	nop
 800ef86:	3708      	adds	r7, #8
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}

0800ef8c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b086      	sub	sp, #24
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ef96:	2300      	movs	r3, #0
 800ef98:	617b      	str	r3, [r7, #20]
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d008      	beq.n	800efb6 <pbuf_copy+0x2a>
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d005      	beq.n	800efb6 <pbuf_copy+0x2a>
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	891a      	ldrh	r2, [r3, #8]
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	891b      	ldrh	r3, [r3, #8]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d209      	bcs.n	800efca <pbuf_copy+0x3e>
 800efb6:	4b57      	ldr	r3, [pc, #348]	; (800f114 <pbuf_copy+0x188>)
 800efb8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800efbc:	4956      	ldr	r1, [pc, #344]	; (800f118 <pbuf_copy+0x18c>)
 800efbe:	4857      	ldr	r0, [pc, #348]	; (800f11c <pbuf_copy+0x190>)
 800efc0:	f009 fdce 	bl	8018b60 <iprintf>
 800efc4:	f06f 030f 	mvn.w	r3, #15
 800efc8:	e09f      	b.n	800f10a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	895b      	ldrh	r3, [r3, #10]
 800efce:	461a      	mov	r2, r3
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	1ad2      	subs	r2, r2, r3
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	895b      	ldrh	r3, [r3, #10]
 800efd8:	4619      	mov	r1, r3
 800efda:	693b      	ldr	r3, [r7, #16]
 800efdc:	1acb      	subs	r3, r1, r3
 800efde:	429a      	cmp	r2, r3
 800efe0:	d306      	bcc.n	800eff0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	895b      	ldrh	r3, [r3, #10]
 800efe6:	461a      	mov	r2, r3
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	1ad3      	subs	r3, r2, r3
 800efec:	60fb      	str	r3, [r7, #12]
 800efee:	e005      	b.n	800effc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	895b      	ldrh	r3, [r3, #10]
 800eff4:	461a      	mov	r2, r3
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	1ad3      	subs	r3, r2, r3
 800effa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	685a      	ldr	r2, [r3, #4]
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	18d0      	adds	r0, r2, r3
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	685a      	ldr	r2, [r3, #4]
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	4413      	add	r3, r2
 800f00c:	68fa      	ldr	r2, [r7, #12]
 800f00e:	4619      	mov	r1, r3
 800f010:	f009 fcfb 	bl	8018a0a <memcpy>
    offset_to += len;
 800f014:	697a      	ldr	r2, [r7, #20]
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	4413      	add	r3, r2
 800f01a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f01c:	693a      	ldr	r2, [r7, #16]
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	4413      	add	r3, r2
 800f022:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	895b      	ldrh	r3, [r3, #10]
 800f028:	461a      	mov	r2, r3
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	4293      	cmp	r3, r2
 800f02e:	d906      	bls.n	800f03e <pbuf_copy+0xb2>
 800f030:	4b38      	ldr	r3, [pc, #224]	; (800f114 <pbuf_copy+0x188>)
 800f032:	f240 32d9 	movw	r2, #985	; 0x3d9
 800f036:	493a      	ldr	r1, [pc, #232]	; (800f120 <pbuf_copy+0x194>)
 800f038:	4838      	ldr	r0, [pc, #224]	; (800f11c <pbuf_copy+0x190>)
 800f03a:	f009 fd91 	bl	8018b60 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	895b      	ldrh	r3, [r3, #10]
 800f042:	461a      	mov	r2, r3
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	4293      	cmp	r3, r2
 800f048:	d906      	bls.n	800f058 <pbuf_copy+0xcc>
 800f04a:	4b32      	ldr	r3, [pc, #200]	; (800f114 <pbuf_copy+0x188>)
 800f04c:	f240 32da 	movw	r2, #986	; 0x3da
 800f050:	4934      	ldr	r1, [pc, #208]	; (800f124 <pbuf_copy+0x198>)
 800f052:	4832      	ldr	r0, [pc, #200]	; (800f11c <pbuf_copy+0x190>)
 800f054:	f009 fd84 	bl	8018b60 <iprintf>
    if (offset_from >= p_from->len) {
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	895b      	ldrh	r3, [r3, #10]
 800f05c:	461a      	mov	r2, r3
 800f05e:	693b      	ldr	r3, [r7, #16]
 800f060:	4293      	cmp	r3, r2
 800f062:	d304      	bcc.n	800f06e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f064:	2300      	movs	r3, #0
 800f066:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	895b      	ldrh	r3, [r3, #10]
 800f072:	461a      	mov	r2, r3
 800f074:	697b      	ldr	r3, [r7, #20]
 800f076:	4293      	cmp	r3, r2
 800f078:	d114      	bne.n	800f0a4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f07a:	2300      	movs	r3, #0
 800f07c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d10c      	bne.n	800f0a4 <pbuf_copy+0x118>
 800f08a:	683b      	ldr	r3, [r7, #0]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d009      	beq.n	800f0a4 <pbuf_copy+0x118>
 800f090:	4b20      	ldr	r3, [pc, #128]	; (800f114 <pbuf_copy+0x188>)
 800f092:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800f096:	4924      	ldr	r1, [pc, #144]	; (800f128 <pbuf_copy+0x19c>)
 800f098:	4820      	ldr	r0, [pc, #128]	; (800f11c <pbuf_copy+0x190>)
 800f09a:	f009 fd61 	bl	8018b60 <iprintf>
 800f09e:	f06f 030f 	mvn.w	r3, #15
 800f0a2:	e032      	b.n	800f10a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d013      	beq.n	800f0d2 <pbuf_copy+0x146>
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	895a      	ldrh	r2, [r3, #10]
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	891b      	ldrh	r3, [r3, #8]
 800f0b2:	429a      	cmp	r2, r3
 800f0b4:	d10d      	bne.n	800f0d2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d009      	beq.n	800f0d2 <pbuf_copy+0x146>
 800f0be:	4b15      	ldr	r3, [pc, #84]	; (800f114 <pbuf_copy+0x188>)
 800f0c0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800f0c4:	4919      	ldr	r1, [pc, #100]	; (800f12c <pbuf_copy+0x1a0>)
 800f0c6:	4815      	ldr	r0, [pc, #84]	; (800f11c <pbuf_copy+0x190>)
 800f0c8:	f009 fd4a 	bl	8018b60 <iprintf>
 800f0cc:	f06f 0305 	mvn.w	r3, #5
 800f0d0:	e01b      	b.n	800f10a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d013      	beq.n	800f100 <pbuf_copy+0x174>
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	895a      	ldrh	r2, [r3, #10]
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	891b      	ldrh	r3, [r3, #8]
 800f0e0:	429a      	cmp	r2, r3
 800f0e2:	d10d      	bne.n	800f100 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d009      	beq.n	800f100 <pbuf_copy+0x174>
 800f0ec:	4b09      	ldr	r3, [pc, #36]	; (800f114 <pbuf_copy+0x188>)
 800f0ee:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f0f2:	490e      	ldr	r1, [pc, #56]	; (800f12c <pbuf_copy+0x1a0>)
 800f0f4:	4809      	ldr	r0, [pc, #36]	; (800f11c <pbuf_copy+0x190>)
 800f0f6:	f009 fd33 	bl	8018b60 <iprintf>
 800f0fa:	f06f 0305 	mvn.w	r3, #5
 800f0fe:	e004      	b.n	800f10a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	2b00      	cmp	r3, #0
 800f104:	f47f af61 	bne.w	800efca <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f108:	2300      	movs	r3, #0
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3718      	adds	r7, #24
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
 800f112:	bf00      	nop
 800f114:	0801a3a0 	.word	0x0801a3a0
 800f118:	0801a648 	.word	0x0801a648
 800f11c:	0801a400 	.word	0x0801a400
 800f120:	0801a678 	.word	0x0801a678
 800f124:	0801a690 	.word	0x0801a690
 800f128:	0801a6ac 	.word	0x0801a6ac
 800f12c:	0801a6bc 	.word	0x0801a6bc

0800f130 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b088      	sub	sp, #32
 800f134:	af00      	add	r7, sp, #0
 800f136:	60f8      	str	r0, [r7, #12]
 800f138:	60b9      	str	r1, [r7, #8]
 800f13a:	4611      	mov	r1, r2
 800f13c:	461a      	mov	r2, r3
 800f13e:	460b      	mov	r3, r1
 800f140:	80fb      	strh	r3, [r7, #6]
 800f142:	4613      	mov	r3, r2
 800f144:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f146:	2300      	movs	r3, #0
 800f148:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f14a:	2300      	movs	r3, #0
 800f14c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d108      	bne.n	800f166 <pbuf_copy_partial+0x36>
 800f154:	4b2b      	ldr	r3, [pc, #172]	; (800f204 <pbuf_copy_partial+0xd4>)
 800f156:	f240 420a 	movw	r2, #1034	; 0x40a
 800f15a:	492b      	ldr	r1, [pc, #172]	; (800f208 <pbuf_copy_partial+0xd8>)
 800f15c:	482b      	ldr	r0, [pc, #172]	; (800f20c <pbuf_copy_partial+0xdc>)
 800f15e:	f009 fcff 	bl	8018b60 <iprintf>
 800f162:	2300      	movs	r3, #0
 800f164:	e04a      	b.n	800f1fc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d108      	bne.n	800f17e <pbuf_copy_partial+0x4e>
 800f16c:	4b25      	ldr	r3, [pc, #148]	; (800f204 <pbuf_copy_partial+0xd4>)
 800f16e:	f240 420b 	movw	r2, #1035	; 0x40b
 800f172:	4927      	ldr	r1, [pc, #156]	; (800f210 <pbuf_copy_partial+0xe0>)
 800f174:	4825      	ldr	r0, [pc, #148]	; (800f20c <pbuf_copy_partial+0xdc>)
 800f176:	f009 fcf3 	bl	8018b60 <iprintf>
 800f17a:	2300      	movs	r3, #0
 800f17c:	e03e      	b.n	800f1fc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	61fb      	str	r3, [r7, #28]
 800f182:	e034      	b.n	800f1ee <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f184:	88bb      	ldrh	r3, [r7, #4]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d00a      	beq.n	800f1a0 <pbuf_copy_partial+0x70>
 800f18a:	69fb      	ldr	r3, [r7, #28]
 800f18c:	895b      	ldrh	r3, [r3, #10]
 800f18e:	88ba      	ldrh	r2, [r7, #4]
 800f190:	429a      	cmp	r2, r3
 800f192:	d305      	bcc.n	800f1a0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f194:	69fb      	ldr	r3, [r7, #28]
 800f196:	895b      	ldrh	r3, [r3, #10]
 800f198:	88ba      	ldrh	r2, [r7, #4]
 800f19a:	1ad3      	subs	r3, r2, r3
 800f19c:	80bb      	strh	r3, [r7, #4]
 800f19e:	e023      	b.n	800f1e8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f1a0:	69fb      	ldr	r3, [r7, #28]
 800f1a2:	895a      	ldrh	r2, [r3, #10]
 800f1a4:	88bb      	ldrh	r3, [r7, #4]
 800f1a6:	1ad3      	subs	r3, r2, r3
 800f1a8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f1aa:	8b3a      	ldrh	r2, [r7, #24]
 800f1ac:	88fb      	ldrh	r3, [r7, #6]
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d901      	bls.n	800f1b6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f1b2:	88fb      	ldrh	r3, [r7, #6]
 800f1b4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f1b6:	8b7b      	ldrh	r3, [r7, #26]
 800f1b8:	68ba      	ldr	r2, [r7, #8]
 800f1ba:	18d0      	adds	r0, r2, r3
 800f1bc:	69fb      	ldr	r3, [r7, #28]
 800f1be:	685a      	ldr	r2, [r3, #4]
 800f1c0:	88bb      	ldrh	r3, [r7, #4]
 800f1c2:	4413      	add	r3, r2
 800f1c4:	8b3a      	ldrh	r2, [r7, #24]
 800f1c6:	4619      	mov	r1, r3
 800f1c8:	f009 fc1f 	bl	8018a0a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f1cc:	8afa      	ldrh	r2, [r7, #22]
 800f1ce:	8b3b      	ldrh	r3, [r7, #24]
 800f1d0:	4413      	add	r3, r2
 800f1d2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f1d4:	8b7a      	ldrh	r2, [r7, #26]
 800f1d6:	8b3b      	ldrh	r3, [r7, #24]
 800f1d8:	4413      	add	r3, r2
 800f1da:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f1dc:	88fa      	ldrh	r2, [r7, #6]
 800f1de:	8b3b      	ldrh	r3, [r7, #24]
 800f1e0:	1ad3      	subs	r3, r2, r3
 800f1e2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f1e8:	69fb      	ldr	r3, [r7, #28]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	61fb      	str	r3, [r7, #28]
 800f1ee:	88fb      	ldrh	r3, [r7, #6]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d002      	beq.n	800f1fa <pbuf_copy_partial+0xca>
 800f1f4:	69fb      	ldr	r3, [r7, #28]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d1c4      	bne.n	800f184 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f1fa:	8afb      	ldrh	r3, [r7, #22]
}
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	3720      	adds	r7, #32
 800f200:	46bd      	mov	sp, r7
 800f202:	bd80      	pop	{r7, pc}
 800f204:	0801a3a0 	.word	0x0801a3a0
 800f208:	0801a6e8 	.word	0x0801a6e8
 800f20c:	0801a400 	.word	0x0801a400
 800f210:	0801a708 	.word	0x0801a708

0800f214 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b084      	sub	sp, #16
 800f218:	af00      	add	r7, sp, #0
 800f21a:	4603      	mov	r3, r0
 800f21c:	603a      	str	r2, [r7, #0]
 800f21e:	71fb      	strb	r3, [r7, #7]
 800f220:	460b      	mov	r3, r1
 800f222:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	8919      	ldrh	r1, [r3, #8]
 800f228:	88ba      	ldrh	r2, [r7, #4]
 800f22a:	79fb      	ldrb	r3, [r7, #7]
 800f22c:	4618      	mov	r0, r3
 800f22e:	f7ff fa95 	bl	800e75c <pbuf_alloc>
 800f232:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d101      	bne.n	800f23e <pbuf_clone+0x2a>
    return NULL;
 800f23a:	2300      	movs	r3, #0
 800f23c:	e011      	b.n	800f262 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f23e:	6839      	ldr	r1, [r7, #0]
 800f240:	68f8      	ldr	r0, [r7, #12]
 800f242:	f7ff fea3 	bl	800ef8c <pbuf_copy>
 800f246:	4603      	mov	r3, r0
 800f248:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f24a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d006      	beq.n	800f260 <pbuf_clone+0x4c>
 800f252:	4b06      	ldr	r3, [pc, #24]	; (800f26c <pbuf_clone+0x58>)
 800f254:	f240 5224 	movw	r2, #1316	; 0x524
 800f258:	4905      	ldr	r1, [pc, #20]	; (800f270 <pbuf_clone+0x5c>)
 800f25a:	4806      	ldr	r0, [pc, #24]	; (800f274 <pbuf_clone+0x60>)
 800f25c:	f009 fc80 	bl	8018b60 <iprintf>
  return q;
 800f260:	68fb      	ldr	r3, [r7, #12]
}
 800f262:	4618      	mov	r0, r3
 800f264:	3710      	adds	r7, #16
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}
 800f26a:	bf00      	nop
 800f26c:	0801a3a0 	.word	0x0801a3a0
 800f270:	0801a814 	.word	0x0801a814
 800f274:	0801a400 	.word	0x0801a400

0800f278 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f278:	b580      	push	{r7, lr}
 800f27a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f27c:	f009 fc88 	bl	8018b90 <rand>
 800f280:	4603      	mov	r3, r0
 800f282:	b29b      	uxth	r3, r3
 800f284:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f288:	b29b      	uxth	r3, r3
 800f28a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f28e:	b29a      	uxth	r2, r3
 800f290:	4b01      	ldr	r3, [pc, #4]	; (800f298 <tcp_init+0x20>)
 800f292:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f294:	bf00      	nop
 800f296:	bd80      	pop	{r7, pc}
 800f298:	2400002c 	.word	0x2400002c

0800f29c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b082      	sub	sp, #8
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	7d1b      	ldrb	r3, [r3, #20]
 800f2a8:	2b01      	cmp	r3, #1
 800f2aa:	d105      	bne.n	800f2b8 <tcp_free+0x1c>
 800f2ac:	4b06      	ldr	r3, [pc, #24]	; (800f2c8 <tcp_free+0x2c>)
 800f2ae:	22d4      	movs	r2, #212	; 0xd4
 800f2b0:	4906      	ldr	r1, [pc, #24]	; (800f2cc <tcp_free+0x30>)
 800f2b2:	4807      	ldr	r0, [pc, #28]	; (800f2d0 <tcp_free+0x34>)
 800f2b4:	f009 fc54 	bl	8018b60 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f2b8:	6879      	ldr	r1, [r7, #4]
 800f2ba:	2001      	movs	r0, #1
 800f2bc:	f7fe fe8e 	bl	800dfdc <memp_free>
}
 800f2c0:	bf00      	nop
 800f2c2:	3708      	adds	r7, #8
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}
 800f2c8:	0801a8a0 	.word	0x0801a8a0
 800f2cc:	0801a8d0 	.word	0x0801a8d0
 800f2d0:	0801a8e4 	.word	0x0801a8e4

0800f2d4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b082      	sub	sp, #8
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	7d1b      	ldrb	r3, [r3, #20]
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	d105      	bne.n	800f2f0 <tcp_free_listen+0x1c>
 800f2e4:	4b06      	ldr	r3, [pc, #24]	; (800f300 <tcp_free_listen+0x2c>)
 800f2e6:	22df      	movs	r2, #223	; 0xdf
 800f2e8:	4906      	ldr	r1, [pc, #24]	; (800f304 <tcp_free_listen+0x30>)
 800f2ea:	4807      	ldr	r0, [pc, #28]	; (800f308 <tcp_free_listen+0x34>)
 800f2ec:	f009 fc38 	bl	8018b60 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f2f0:	6879      	ldr	r1, [r7, #4]
 800f2f2:	2002      	movs	r0, #2
 800f2f4:	f7fe fe72 	bl	800dfdc <memp_free>
}
 800f2f8:	bf00      	nop
 800f2fa:	3708      	adds	r7, #8
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}
 800f300:	0801a8a0 	.word	0x0801a8a0
 800f304:	0801a90c 	.word	0x0801a90c
 800f308:	0801a8e4 	.word	0x0801a8e4

0800f30c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f310:	f001 f85c 	bl	80103cc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f314:	4b07      	ldr	r3, [pc, #28]	; (800f334 <tcp_tmr+0x28>)
 800f316:	781b      	ldrb	r3, [r3, #0]
 800f318:	3301      	adds	r3, #1
 800f31a:	b2da      	uxtb	r2, r3
 800f31c:	4b05      	ldr	r3, [pc, #20]	; (800f334 <tcp_tmr+0x28>)
 800f31e:	701a      	strb	r2, [r3, #0]
 800f320:	4b04      	ldr	r3, [pc, #16]	; (800f334 <tcp_tmr+0x28>)
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	f003 0301 	and.w	r3, r3, #1
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d001      	beq.n	800f330 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f32c:	f000 fd0e 	bl	800fd4c <tcp_slowtmr>
  }
}
 800f330:	bf00      	nop
 800f332:	bd80      	pop	{r7, pc}
 800f334:	24008a95 	.word	0x24008a95

0800f338 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b084      	sub	sp, #16
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
 800f340:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d105      	bne.n	800f354 <tcp_remove_listener+0x1c>
 800f348:	4b0d      	ldr	r3, [pc, #52]	; (800f380 <tcp_remove_listener+0x48>)
 800f34a:	22ff      	movs	r2, #255	; 0xff
 800f34c:	490d      	ldr	r1, [pc, #52]	; (800f384 <tcp_remove_listener+0x4c>)
 800f34e:	480e      	ldr	r0, [pc, #56]	; (800f388 <tcp_remove_listener+0x50>)
 800f350:	f009 fc06 	bl	8018b60 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	60fb      	str	r3, [r7, #12]
 800f358:	e00a      	b.n	800f370 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f35e:	683a      	ldr	r2, [r7, #0]
 800f360:	429a      	cmp	r2, r3
 800f362:	d102      	bne.n	800f36a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	2200      	movs	r2, #0
 800f368:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	68db      	ldr	r3, [r3, #12]
 800f36e:	60fb      	str	r3, [r7, #12]
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d1f1      	bne.n	800f35a <tcp_remove_listener+0x22>
    }
  }
}
 800f376:	bf00      	nop
 800f378:	bf00      	nop
 800f37a:	3710      	adds	r7, #16
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}
 800f380:	0801a8a0 	.word	0x0801a8a0
 800f384:	0801a928 	.word	0x0801a928
 800f388:	0801a8e4 	.word	0x0801a8e4

0800f38c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b084      	sub	sp, #16
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d106      	bne.n	800f3a8 <tcp_listen_closed+0x1c>
 800f39a:	4b14      	ldr	r3, [pc, #80]	; (800f3ec <tcp_listen_closed+0x60>)
 800f39c:	f240 1211 	movw	r2, #273	; 0x111
 800f3a0:	4913      	ldr	r1, [pc, #76]	; (800f3f0 <tcp_listen_closed+0x64>)
 800f3a2:	4814      	ldr	r0, [pc, #80]	; (800f3f4 <tcp_listen_closed+0x68>)
 800f3a4:	f009 fbdc 	bl	8018b60 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	7d1b      	ldrb	r3, [r3, #20]
 800f3ac:	2b01      	cmp	r3, #1
 800f3ae:	d006      	beq.n	800f3be <tcp_listen_closed+0x32>
 800f3b0:	4b0e      	ldr	r3, [pc, #56]	; (800f3ec <tcp_listen_closed+0x60>)
 800f3b2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f3b6:	4910      	ldr	r1, [pc, #64]	; (800f3f8 <tcp_listen_closed+0x6c>)
 800f3b8:	480e      	ldr	r0, [pc, #56]	; (800f3f4 <tcp_listen_closed+0x68>)
 800f3ba:	f009 fbd1 	bl	8018b60 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f3be:	2301      	movs	r3, #1
 800f3c0:	60fb      	str	r3, [r7, #12]
 800f3c2:	e00b      	b.n	800f3dc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f3c4:	4a0d      	ldr	r2, [pc, #52]	; (800f3fc <tcp_listen_closed+0x70>)
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	6879      	ldr	r1, [r7, #4]
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7ff ffb1 	bl	800f338 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	3301      	adds	r3, #1
 800f3da:	60fb      	str	r3, [r7, #12]
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	2b03      	cmp	r3, #3
 800f3e0:	d9f0      	bls.n	800f3c4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f3e2:	bf00      	nop
 800f3e4:	bf00      	nop
 800f3e6:	3710      	adds	r7, #16
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}
 800f3ec:	0801a8a0 	.word	0x0801a8a0
 800f3f0:	0801a950 	.word	0x0801a950
 800f3f4:	0801a8e4 	.word	0x0801a8e4
 800f3f8:	0801a95c 	.word	0x0801a95c
 800f3fc:	0801eb98 	.word	0x0801eb98

0800f400 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f400:	b5b0      	push	{r4, r5, r7, lr}
 800f402:	b088      	sub	sp, #32
 800f404:	af04      	add	r7, sp, #16
 800f406:	6078      	str	r0, [r7, #4]
 800f408:	460b      	mov	r3, r1
 800f40a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d106      	bne.n	800f420 <tcp_close_shutdown+0x20>
 800f412:	4b63      	ldr	r3, [pc, #396]	; (800f5a0 <tcp_close_shutdown+0x1a0>)
 800f414:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f418:	4962      	ldr	r1, [pc, #392]	; (800f5a4 <tcp_close_shutdown+0x1a4>)
 800f41a:	4863      	ldr	r0, [pc, #396]	; (800f5a8 <tcp_close_shutdown+0x1a8>)
 800f41c:	f009 fba0 	bl	8018b60 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f420:	78fb      	ldrb	r3, [r7, #3]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d066      	beq.n	800f4f4 <tcp_close_shutdown+0xf4>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	7d1b      	ldrb	r3, [r3, #20]
 800f42a:	2b04      	cmp	r3, #4
 800f42c:	d003      	beq.n	800f436 <tcp_close_shutdown+0x36>
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	7d1b      	ldrb	r3, [r3, #20]
 800f432:	2b07      	cmp	r3, #7
 800f434:	d15e      	bne.n	800f4f4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d104      	bne.n	800f448 <tcp_close_shutdown+0x48>
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f442:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f446:	d055      	beq.n	800f4f4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	8b5b      	ldrh	r3, [r3, #26]
 800f44c:	f003 0310 	and.w	r3, r3, #16
 800f450:	2b00      	cmp	r3, #0
 800f452:	d106      	bne.n	800f462 <tcp_close_shutdown+0x62>
 800f454:	4b52      	ldr	r3, [pc, #328]	; (800f5a0 <tcp_close_shutdown+0x1a0>)
 800f456:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800f45a:	4954      	ldr	r1, [pc, #336]	; (800f5ac <tcp_close_shutdown+0x1ac>)
 800f45c:	4852      	ldr	r0, [pc, #328]	; (800f5a8 <tcp_close_shutdown+0x1a8>)
 800f45e:	f009 fb7f 	bl	8018b60 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f46a:	687d      	ldr	r5, [r7, #4]
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	3304      	adds	r3, #4
 800f470:	687a      	ldr	r2, [r7, #4]
 800f472:	8ad2      	ldrh	r2, [r2, #22]
 800f474:	6879      	ldr	r1, [r7, #4]
 800f476:	8b09      	ldrh	r1, [r1, #24]
 800f478:	9102      	str	r1, [sp, #8]
 800f47a:	9201      	str	r2, [sp, #4]
 800f47c:	9300      	str	r3, [sp, #0]
 800f47e:	462b      	mov	r3, r5
 800f480:	4622      	mov	r2, r4
 800f482:	4601      	mov	r1, r0
 800f484:	6878      	ldr	r0, [r7, #4]
 800f486:	f005 fd8f 	bl	8014fa8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f48a:	6878      	ldr	r0, [r7, #4]
 800f48c:	f001 fb6c 	bl	8010b68 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f490:	4b47      	ldr	r3, [pc, #284]	; (800f5b0 <tcp_close_shutdown+0x1b0>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	687a      	ldr	r2, [r7, #4]
 800f496:	429a      	cmp	r2, r3
 800f498:	d105      	bne.n	800f4a6 <tcp_close_shutdown+0xa6>
 800f49a:	4b45      	ldr	r3, [pc, #276]	; (800f5b0 <tcp_close_shutdown+0x1b0>)
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	68db      	ldr	r3, [r3, #12]
 800f4a0:	4a43      	ldr	r2, [pc, #268]	; (800f5b0 <tcp_close_shutdown+0x1b0>)
 800f4a2:	6013      	str	r3, [r2, #0]
 800f4a4:	e013      	b.n	800f4ce <tcp_close_shutdown+0xce>
 800f4a6:	4b42      	ldr	r3, [pc, #264]	; (800f5b0 <tcp_close_shutdown+0x1b0>)
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	60fb      	str	r3, [r7, #12]
 800f4ac:	e00c      	b.n	800f4c8 <tcp_close_shutdown+0xc8>
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	68db      	ldr	r3, [r3, #12]
 800f4b2:	687a      	ldr	r2, [r7, #4]
 800f4b4:	429a      	cmp	r2, r3
 800f4b6:	d104      	bne.n	800f4c2 <tcp_close_shutdown+0xc2>
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	68da      	ldr	r2, [r3, #12]
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	60da      	str	r2, [r3, #12]
 800f4c0:	e005      	b.n	800f4ce <tcp_close_shutdown+0xce>
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	68db      	ldr	r3, [r3, #12]
 800f4c6:	60fb      	str	r3, [r7, #12]
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d1ef      	bne.n	800f4ae <tcp_close_shutdown+0xae>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	60da      	str	r2, [r3, #12]
 800f4d4:	4b37      	ldr	r3, [pc, #220]	; (800f5b4 <tcp_close_shutdown+0x1b4>)
 800f4d6:	2201      	movs	r2, #1
 800f4d8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f4da:	4b37      	ldr	r3, [pc, #220]	; (800f5b8 <tcp_close_shutdown+0x1b8>)
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	687a      	ldr	r2, [r7, #4]
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	d102      	bne.n	800f4ea <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f4e4:	f004 f804 	bl	80134f0 <tcp_trigger_input_pcb_close>
 800f4e8:	e002      	b.n	800f4f0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f7ff fed6 	bl	800f29c <tcp_free>
      }
      return ERR_OK;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	e050      	b.n	800f596 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	7d1b      	ldrb	r3, [r3, #20]
 800f4f8:	2b02      	cmp	r3, #2
 800f4fa:	d03b      	beq.n	800f574 <tcp_close_shutdown+0x174>
 800f4fc:	2b02      	cmp	r3, #2
 800f4fe:	dc44      	bgt.n	800f58a <tcp_close_shutdown+0x18a>
 800f500:	2b00      	cmp	r3, #0
 800f502:	d002      	beq.n	800f50a <tcp_close_shutdown+0x10a>
 800f504:	2b01      	cmp	r3, #1
 800f506:	d02a      	beq.n	800f55e <tcp_close_shutdown+0x15e>
 800f508:	e03f      	b.n	800f58a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	8adb      	ldrh	r3, [r3, #22]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d021      	beq.n	800f556 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f512:	4b2a      	ldr	r3, [pc, #168]	; (800f5bc <tcp_close_shutdown+0x1bc>)
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	687a      	ldr	r2, [r7, #4]
 800f518:	429a      	cmp	r2, r3
 800f51a:	d105      	bne.n	800f528 <tcp_close_shutdown+0x128>
 800f51c:	4b27      	ldr	r3, [pc, #156]	; (800f5bc <tcp_close_shutdown+0x1bc>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	68db      	ldr	r3, [r3, #12]
 800f522:	4a26      	ldr	r2, [pc, #152]	; (800f5bc <tcp_close_shutdown+0x1bc>)
 800f524:	6013      	str	r3, [r2, #0]
 800f526:	e013      	b.n	800f550 <tcp_close_shutdown+0x150>
 800f528:	4b24      	ldr	r3, [pc, #144]	; (800f5bc <tcp_close_shutdown+0x1bc>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	60bb      	str	r3, [r7, #8]
 800f52e:	e00c      	b.n	800f54a <tcp_close_shutdown+0x14a>
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	68db      	ldr	r3, [r3, #12]
 800f534:	687a      	ldr	r2, [r7, #4]
 800f536:	429a      	cmp	r2, r3
 800f538:	d104      	bne.n	800f544 <tcp_close_shutdown+0x144>
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	68da      	ldr	r2, [r3, #12]
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	60da      	str	r2, [r3, #12]
 800f542:	e005      	b.n	800f550 <tcp_close_shutdown+0x150>
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	68db      	ldr	r3, [r3, #12]
 800f548:	60bb      	str	r3, [r7, #8]
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d1ef      	bne.n	800f530 <tcp_close_shutdown+0x130>
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2200      	movs	r2, #0
 800f554:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f556:	6878      	ldr	r0, [r7, #4]
 800f558:	f7ff fea0 	bl	800f29c <tcp_free>
      break;
 800f55c:	e01a      	b.n	800f594 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	f7ff ff14 	bl	800f38c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f564:	6879      	ldr	r1, [r7, #4]
 800f566:	4816      	ldr	r0, [pc, #88]	; (800f5c0 <tcp_close_shutdown+0x1c0>)
 800f568:	f001 fb4e 	bl	8010c08 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f7ff feb1 	bl	800f2d4 <tcp_free_listen>
      break;
 800f572:	e00f      	b.n	800f594 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f574:	6879      	ldr	r1, [r7, #4]
 800f576:	480e      	ldr	r0, [pc, #56]	; (800f5b0 <tcp_close_shutdown+0x1b0>)
 800f578:	f001 fb46 	bl	8010c08 <tcp_pcb_remove>
 800f57c:	4b0d      	ldr	r3, [pc, #52]	; (800f5b4 <tcp_close_shutdown+0x1b4>)
 800f57e:	2201      	movs	r2, #1
 800f580:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f7ff fe8a 	bl	800f29c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f588:	e004      	b.n	800f594 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f000 f81a 	bl	800f5c4 <tcp_close_shutdown_fin>
 800f590:	4603      	mov	r3, r0
 800f592:	e000      	b.n	800f596 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800f594:	2300      	movs	r3, #0
}
 800f596:	4618      	mov	r0, r3
 800f598:	3710      	adds	r7, #16
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bdb0      	pop	{r4, r5, r7, pc}
 800f59e:	bf00      	nop
 800f5a0:	0801a8a0 	.word	0x0801a8a0
 800f5a4:	0801a974 	.word	0x0801a974
 800f5a8:	0801a8e4 	.word	0x0801a8e4
 800f5ac:	0801a994 	.word	0x0801a994
 800f5b0:	24008a8c 	.word	0x24008a8c
 800f5b4:	24008a94 	.word	0x24008a94
 800f5b8:	24008acc 	.word	0x24008acc
 800f5bc:	24008a84 	.word	0x24008a84
 800f5c0:	24008a88 	.word	0x24008a88

0800f5c4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b084      	sub	sp, #16
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d106      	bne.n	800f5e0 <tcp_close_shutdown_fin+0x1c>
 800f5d2:	4b2e      	ldr	r3, [pc, #184]	; (800f68c <tcp_close_shutdown_fin+0xc8>)
 800f5d4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f5d8:	492d      	ldr	r1, [pc, #180]	; (800f690 <tcp_close_shutdown_fin+0xcc>)
 800f5da:	482e      	ldr	r0, [pc, #184]	; (800f694 <tcp_close_shutdown_fin+0xd0>)
 800f5dc:	f009 fac0 	bl	8018b60 <iprintf>

  switch (pcb->state) {
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	7d1b      	ldrb	r3, [r3, #20]
 800f5e4:	2b07      	cmp	r3, #7
 800f5e6:	d020      	beq.n	800f62a <tcp_close_shutdown_fin+0x66>
 800f5e8:	2b07      	cmp	r3, #7
 800f5ea:	dc2b      	bgt.n	800f644 <tcp_close_shutdown_fin+0x80>
 800f5ec:	2b03      	cmp	r3, #3
 800f5ee:	d002      	beq.n	800f5f6 <tcp_close_shutdown_fin+0x32>
 800f5f0:	2b04      	cmp	r3, #4
 800f5f2:	d00d      	beq.n	800f610 <tcp_close_shutdown_fin+0x4c>
 800f5f4:	e026      	b.n	800f644 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f004 fde4 	bl	80141c4 <tcp_send_fin>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d11f      	bne.n	800f648 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2205      	movs	r2, #5
 800f60c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f60e:	e01b      	b.n	800f648 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f004 fdd7 	bl	80141c4 <tcp_send_fin>
 800f616:	4603      	mov	r3, r0
 800f618:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f61a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d114      	bne.n	800f64c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	2205      	movs	r2, #5
 800f626:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f628:	e010      	b.n	800f64c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f62a:	6878      	ldr	r0, [r7, #4]
 800f62c:	f004 fdca 	bl	80141c4 <tcp_send_fin>
 800f630:	4603      	mov	r3, r0
 800f632:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d109      	bne.n	800f650 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2209      	movs	r2, #9
 800f640:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f642:	e005      	b.n	800f650 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f644:	2300      	movs	r3, #0
 800f646:	e01c      	b.n	800f682 <tcp_close_shutdown_fin+0xbe>
      break;
 800f648:	bf00      	nop
 800f64a:	e002      	b.n	800f652 <tcp_close_shutdown_fin+0x8e>
      break;
 800f64c:	bf00      	nop
 800f64e:	e000      	b.n	800f652 <tcp_close_shutdown_fin+0x8e>
      break;
 800f650:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d103      	bne.n	800f662 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f004 fef0 	bl	8014440 <tcp_output>
 800f660:	e00d      	b.n	800f67e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f66a:	d108      	bne.n	800f67e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	8b5b      	ldrh	r3, [r3, #26]
 800f670:	f043 0308 	orr.w	r3, r3, #8
 800f674:	b29a      	uxth	r2, r3
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f67a:	2300      	movs	r3, #0
 800f67c:	e001      	b.n	800f682 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f67e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f682:	4618      	mov	r0, r3
 800f684:	3710      	adds	r7, #16
 800f686:	46bd      	mov	sp, r7
 800f688:	bd80      	pop	{r7, pc}
 800f68a:	bf00      	nop
 800f68c:	0801a8a0 	.word	0x0801a8a0
 800f690:	0801a950 	.word	0x0801a950
 800f694:	0801a8e4 	.word	0x0801a8e4

0800f698 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b082      	sub	sp, #8
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d109      	bne.n	800f6ba <tcp_close+0x22>
 800f6a6:	4b0f      	ldr	r3, [pc, #60]	; (800f6e4 <tcp_close+0x4c>)
 800f6a8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f6ac:	490e      	ldr	r1, [pc, #56]	; (800f6e8 <tcp_close+0x50>)
 800f6ae:	480f      	ldr	r0, [pc, #60]	; (800f6ec <tcp_close+0x54>)
 800f6b0:	f009 fa56 	bl	8018b60 <iprintf>
 800f6b4:	f06f 030f 	mvn.w	r3, #15
 800f6b8:	e00f      	b.n	800f6da <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	7d1b      	ldrb	r3, [r3, #20]
 800f6be:	2b01      	cmp	r3, #1
 800f6c0:	d006      	beq.n	800f6d0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	8b5b      	ldrh	r3, [r3, #26]
 800f6c6:	f043 0310 	orr.w	r3, r3, #16
 800f6ca:	b29a      	uxth	r2, r3
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f6d0:	2101      	movs	r1, #1
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f7ff fe94 	bl	800f400 <tcp_close_shutdown>
 800f6d8:	4603      	mov	r3, r0
}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	3708      	adds	r7, #8
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	bd80      	pop	{r7, pc}
 800f6e2:	bf00      	nop
 800f6e4:	0801a8a0 	.word	0x0801a8a0
 800f6e8:	0801a9b0 	.word	0x0801a9b0
 800f6ec:	0801a8e4 	.word	0x0801a8e4

0800f6f0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f6f0:	b580      	push	{r7, lr}
 800f6f2:	b08e      	sub	sp, #56	; 0x38
 800f6f4:	af04      	add	r7, sp, #16
 800f6f6:	6078      	str	r0, [r7, #4]
 800f6f8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d107      	bne.n	800f710 <tcp_abandon+0x20>
 800f700:	4b52      	ldr	r3, [pc, #328]	; (800f84c <tcp_abandon+0x15c>)
 800f702:	f240 223d 	movw	r2, #573	; 0x23d
 800f706:	4952      	ldr	r1, [pc, #328]	; (800f850 <tcp_abandon+0x160>)
 800f708:	4852      	ldr	r0, [pc, #328]	; (800f854 <tcp_abandon+0x164>)
 800f70a:	f009 fa29 	bl	8018b60 <iprintf>
 800f70e:	e099      	b.n	800f844 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	7d1b      	ldrb	r3, [r3, #20]
 800f714:	2b01      	cmp	r3, #1
 800f716:	d106      	bne.n	800f726 <tcp_abandon+0x36>
 800f718:	4b4c      	ldr	r3, [pc, #304]	; (800f84c <tcp_abandon+0x15c>)
 800f71a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f71e:	494e      	ldr	r1, [pc, #312]	; (800f858 <tcp_abandon+0x168>)
 800f720:	484c      	ldr	r0, [pc, #304]	; (800f854 <tcp_abandon+0x164>)
 800f722:	f009 fa1d 	bl	8018b60 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	7d1b      	ldrb	r3, [r3, #20]
 800f72a:	2b0a      	cmp	r3, #10
 800f72c:	d107      	bne.n	800f73e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f72e:	6879      	ldr	r1, [r7, #4]
 800f730:	484a      	ldr	r0, [pc, #296]	; (800f85c <tcp_abandon+0x16c>)
 800f732:	f001 fa69 	bl	8010c08 <tcp_pcb_remove>
    tcp_free(pcb);
 800f736:	6878      	ldr	r0, [r7, #4]
 800f738:	f7ff fdb0 	bl	800f29c <tcp_free>
 800f73c:	e082      	b.n	800f844 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f73e:	2300      	movs	r3, #0
 800f740:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f742:	2300      	movs	r3, #0
 800f744:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f74a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f750:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f758:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	691b      	ldr	r3, [r3, #16]
 800f75e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	7d1b      	ldrb	r3, [r3, #20]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d126      	bne.n	800f7b6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	8adb      	ldrh	r3, [r3, #22]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d02e      	beq.n	800f7ce <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f770:	4b3b      	ldr	r3, [pc, #236]	; (800f860 <tcp_abandon+0x170>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	687a      	ldr	r2, [r7, #4]
 800f776:	429a      	cmp	r2, r3
 800f778:	d105      	bne.n	800f786 <tcp_abandon+0x96>
 800f77a:	4b39      	ldr	r3, [pc, #228]	; (800f860 <tcp_abandon+0x170>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	68db      	ldr	r3, [r3, #12]
 800f780:	4a37      	ldr	r2, [pc, #220]	; (800f860 <tcp_abandon+0x170>)
 800f782:	6013      	str	r3, [r2, #0]
 800f784:	e013      	b.n	800f7ae <tcp_abandon+0xbe>
 800f786:	4b36      	ldr	r3, [pc, #216]	; (800f860 <tcp_abandon+0x170>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	61fb      	str	r3, [r7, #28]
 800f78c:	e00c      	b.n	800f7a8 <tcp_abandon+0xb8>
 800f78e:	69fb      	ldr	r3, [r7, #28]
 800f790:	68db      	ldr	r3, [r3, #12]
 800f792:	687a      	ldr	r2, [r7, #4]
 800f794:	429a      	cmp	r2, r3
 800f796:	d104      	bne.n	800f7a2 <tcp_abandon+0xb2>
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	68da      	ldr	r2, [r3, #12]
 800f79c:	69fb      	ldr	r3, [r7, #28]
 800f79e:	60da      	str	r2, [r3, #12]
 800f7a0:	e005      	b.n	800f7ae <tcp_abandon+0xbe>
 800f7a2:	69fb      	ldr	r3, [r7, #28]
 800f7a4:	68db      	ldr	r3, [r3, #12]
 800f7a6:	61fb      	str	r3, [r7, #28]
 800f7a8:	69fb      	ldr	r3, [r7, #28]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d1ef      	bne.n	800f78e <tcp_abandon+0x9e>
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	60da      	str	r2, [r3, #12]
 800f7b4:	e00b      	b.n	800f7ce <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	8adb      	ldrh	r3, [r3, #22]
 800f7be:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f7c0:	6879      	ldr	r1, [r7, #4]
 800f7c2:	4828      	ldr	r0, [pc, #160]	; (800f864 <tcp_abandon+0x174>)
 800f7c4:	f001 fa20 	bl	8010c08 <tcp_pcb_remove>
 800f7c8:	4b27      	ldr	r3, [pc, #156]	; (800f868 <tcp_abandon+0x178>)
 800f7ca:	2201      	movs	r2, #1
 800f7cc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d004      	beq.n	800f7e0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f000 fed6 	bl	801058c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d004      	beq.n	800f7f2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f000 fecd 	bl	801058c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d004      	beq.n	800f804 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7fe:	4618      	mov	r0, r3
 800f800:	f000 fec4 	bl	801058c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f806:	2b00      	cmp	r3, #0
 800f808:	d00e      	beq.n	800f828 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f80a:	6879      	ldr	r1, [r7, #4]
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	3304      	adds	r3, #4
 800f810:	687a      	ldr	r2, [r7, #4]
 800f812:	8b12      	ldrh	r2, [r2, #24]
 800f814:	9202      	str	r2, [sp, #8]
 800f816:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f818:	9201      	str	r2, [sp, #4]
 800f81a:	9300      	str	r3, [sp, #0]
 800f81c:	460b      	mov	r3, r1
 800f81e:	697a      	ldr	r2, [r7, #20]
 800f820:	69b9      	ldr	r1, [r7, #24]
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f005 fbc0 	bl	8014fa8 <tcp_rst>
    }
    last_state = pcb->state;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	7d1b      	ldrb	r3, [r3, #20]
 800f82c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f7ff fd34 	bl	800f29c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d004      	beq.n	800f844 <tcp_abandon+0x154>
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	f06f 010c 	mvn.w	r1, #12
 800f840:	68f8      	ldr	r0, [r7, #12]
 800f842:	4798      	blx	r3
  }
}
 800f844:	3728      	adds	r7, #40	; 0x28
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}
 800f84a:	bf00      	nop
 800f84c:	0801a8a0 	.word	0x0801a8a0
 800f850:	0801a9e4 	.word	0x0801a9e4
 800f854:	0801a8e4 	.word	0x0801a8e4
 800f858:	0801aa00 	.word	0x0801aa00
 800f85c:	24008a90 	.word	0x24008a90
 800f860:	24008a84 	.word	0x24008a84
 800f864:	24008a8c 	.word	0x24008a8c
 800f868:	24008a94 	.word	0x24008a94

0800f86c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b082      	sub	sp, #8
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f874:	2101      	movs	r1, #1
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f7ff ff3a 	bl	800f6f0 <tcp_abandon>
}
 800f87c:	bf00      	nop
 800f87e:	3708      	adds	r7, #8
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}

0800f884 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b088      	sub	sp, #32
 800f888:	af00      	add	r7, sp, #0
 800f88a:	60f8      	str	r0, [r7, #12]
 800f88c:	60b9      	str	r1, [r7, #8]
 800f88e:	4613      	mov	r3, r2
 800f890:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f892:	2304      	movs	r3, #4
 800f894:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f896:	68bb      	ldr	r3, [r7, #8]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d101      	bne.n	800f8a0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f89c:	4b3e      	ldr	r3, [pc, #248]	; (800f998 <tcp_bind+0x114>)
 800f89e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d109      	bne.n	800f8ba <tcp_bind+0x36>
 800f8a6:	4b3d      	ldr	r3, [pc, #244]	; (800f99c <tcp_bind+0x118>)
 800f8a8:	f240 22a9 	movw	r2, #681	; 0x2a9
 800f8ac:	493c      	ldr	r1, [pc, #240]	; (800f9a0 <tcp_bind+0x11c>)
 800f8ae:	483d      	ldr	r0, [pc, #244]	; (800f9a4 <tcp_bind+0x120>)
 800f8b0:	f009 f956 	bl	8018b60 <iprintf>
 800f8b4:	f06f 030f 	mvn.w	r3, #15
 800f8b8:	e06a      	b.n	800f990 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	7d1b      	ldrb	r3, [r3, #20]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d009      	beq.n	800f8d6 <tcp_bind+0x52>
 800f8c2:	4b36      	ldr	r3, [pc, #216]	; (800f99c <tcp_bind+0x118>)
 800f8c4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f8c8:	4937      	ldr	r1, [pc, #220]	; (800f9a8 <tcp_bind+0x124>)
 800f8ca:	4836      	ldr	r0, [pc, #216]	; (800f9a4 <tcp_bind+0x120>)
 800f8cc:	f009 f948 	bl	8018b60 <iprintf>
 800f8d0:	f06f 0305 	mvn.w	r3, #5
 800f8d4:	e05c      	b.n	800f990 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f8d6:	88fb      	ldrh	r3, [r7, #6]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d109      	bne.n	800f8f0 <tcp_bind+0x6c>
    port = tcp_new_port();
 800f8dc:	f000 f9f0 	bl	800fcc0 <tcp_new_port>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f8e4:	88fb      	ldrh	r3, [r7, #6]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d135      	bne.n	800f956 <tcp_bind+0xd2>
      return ERR_BUF;
 800f8ea:	f06f 0301 	mvn.w	r3, #1
 800f8ee:	e04f      	b.n	800f990 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	61fb      	str	r3, [r7, #28]
 800f8f4:	e02b      	b.n	800f94e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f8f6:	4a2d      	ldr	r2, [pc, #180]	; (800f9ac <tcp_bind+0x128>)
 800f8f8:	69fb      	ldr	r3, [r7, #28]
 800f8fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	61bb      	str	r3, [r7, #24]
 800f902:	e01e      	b.n	800f942 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800f904:	69bb      	ldr	r3, [r7, #24]
 800f906:	8adb      	ldrh	r3, [r3, #22]
 800f908:	88fa      	ldrh	r2, [r7, #6]
 800f90a:	429a      	cmp	r2, r3
 800f90c:	d116      	bne.n	800f93c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f90e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f910:	2b00      	cmp	r3, #0
 800f912:	d010      	beq.n	800f936 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f914:	69bb      	ldr	r3, [r7, #24]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d00c      	beq.n	800f936 <tcp_bind+0xb2>
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d009      	beq.n	800f936 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d005      	beq.n	800f936 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f92a:	69bb      	ldr	r3, [r7, #24]
 800f92c:	681a      	ldr	r2, [r3, #0]
 800f92e:	68bb      	ldr	r3, [r7, #8]
 800f930:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f932:	429a      	cmp	r2, r3
 800f934:	d102      	bne.n	800f93c <tcp_bind+0xb8>
              return ERR_USE;
 800f936:	f06f 0307 	mvn.w	r3, #7
 800f93a:	e029      	b.n	800f990 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f93c:	69bb      	ldr	r3, [r7, #24]
 800f93e:	68db      	ldr	r3, [r3, #12]
 800f940:	61bb      	str	r3, [r7, #24]
 800f942:	69bb      	ldr	r3, [r7, #24]
 800f944:	2b00      	cmp	r3, #0
 800f946:	d1dd      	bne.n	800f904 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800f948:	69fb      	ldr	r3, [r7, #28]
 800f94a:	3301      	adds	r3, #1
 800f94c:	61fb      	str	r3, [r7, #28]
 800f94e:	69fa      	ldr	r2, [r7, #28]
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	429a      	cmp	r2, r3
 800f954:	dbcf      	blt.n	800f8f6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d00c      	beq.n	800f976 <tcp_bind+0xf2>
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d008      	beq.n	800f976 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d002      	beq.n	800f970 <tcp_bind+0xec>
 800f96a:	68bb      	ldr	r3, [r7, #8]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	e000      	b.n	800f972 <tcp_bind+0xee>
 800f970:	2300      	movs	r3, #0
 800f972:	68fa      	ldr	r2, [r7, #12]
 800f974:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	88fa      	ldrh	r2, [r7, #6]
 800f97a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f97c:	4b0c      	ldr	r3, [pc, #48]	; (800f9b0 <tcp_bind+0x12c>)
 800f97e:	681a      	ldr	r2, [r3, #0]
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	60da      	str	r2, [r3, #12]
 800f984:	4a0a      	ldr	r2, [pc, #40]	; (800f9b0 <tcp_bind+0x12c>)
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	6013      	str	r3, [r2, #0]
 800f98a:	f005 fccf 	bl	801532c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f98e:	2300      	movs	r3, #0
}
 800f990:	4618      	mov	r0, r3
 800f992:	3720      	adds	r7, #32
 800f994:	46bd      	mov	sp, r7
 800f996:	bd80      	pop	{r7, pc}
 800f998:	0801ebc0 	.word	0x0801ebc0
 800f99c:	0801a8a0 	.word	0x0801a8a0
 800f9a0:	0801aa34 	.word	0x0801aa34
 800f9a4:	0801a8e4 	.word	0x0801a8e4
 800f9a8:	0801aa4c 	.word	0x0801aa4c
 800f9ac:	0801eb98 	.word	0x0801eb98
 800f9b0:	24008a84 	.word	0x24008a84

0800f9b4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b084      	sub	sp, #16
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	60f8      	str	r0, [r7, #12]
 800f9bc:	60b9      	str	r1, [r7, #8]
 800f9be:	4613      	mov	r3, r2
 800f9c0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d106      	bne.n	800f9d6 <tcp_accept_null+0x22>
 800f9c8:	4b07      	ldr	r3, [pc, #28]	; (800f9e8 <tcp_accept_null+0x34>)
 800f9ca:	f240 320f 	movw	r2, #783	; 0x30f
 800f9ce:	4907      	ldr	r1, [pc, #28]	; (800f9ec <tcp_accept_null+0x38>)
 800f9d0:	4807      	ldr	r0, [pc, #28]	; (800f9f0 <tcp_accept_null+0x3c>)
 800f9d2:	f009 f8c5 	bl	8018b60 <iprintf>

  tcp_abort(pcb);
 800f9d6:	68b8      	ldr	r0, [r7, #8]
 800f9d8:	f7ff ff48 	bl	800f86c <tcp_abort>

  return ERR_ABRT;
 800f9dc:	f06f 030c 	mvn.w	r3, #12
}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3710      	adds	r7, #16
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}
 800f9e8:	0801a8a0 	.word	0x0801a8a0
 800f9ec:	0801aa74 	.word	0x0801aa74
 800f9f0:	0801a8e4 	.word	0x0801a8e4

0800f9f4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
 800f9fc:	460b      	mov	r3, r1
 800f9fe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800fa00:	78fb      	ldrb	r3, [r7, #3]
 800fa02:	2200      	movs	r2, #0
 800fa04:	4619      	mov	r1, r3
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	f000 f806 	bl	800fa18 <tcp_listen_with_backlog_and_err>
 800fa0c:	4603      	mov	r3, r0
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3708      	adds	r7, #8
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}
	...

0800fa18 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b088      	sub	sp, #32
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	60f8      	str	r0, [r7, #12]
 800fa20:	460b      	mov	r3, r1
 800fa22:	607a      	str	r2, [r7, #4]
 800fa24:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800fa26:	2300      	movs	r3, #0
 800fa28:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d109      	bne.n	800fa44 <tcp_listen_with_backlog_and_err+0x2c>
 800fa30:	4b47      	ldr	r3, [pc, #284]	; (800fb50 <tcp_listen_with_backlog_and_err+0x138>)
 800fa32:	f240 3259 	movw	r2, #857	; 0x359
 800fa36:	4947      	ldr	r1, [pc, #284]	; (800fb54 <tcp_listen_with_backlog_and_err+0x13c>)
 800fa38:	4847      	ldr	r0, [pc, #284]	; (800fb58 <tcp_listen_with_backlog_and_err+0x140>)
 800fa3a:	f009 f891 	bl	8018b60 <iprintf>
 800fa3e:	23f0      	movs	r3, #240	; 0xf0
 800fa40:	76fb      	strb	r3, [r7, #27]
 800fa42:	e079      	b.n	800fb38 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	7d1b      	ldrb	r3, [r3, #20]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d009      	beq.n	800fa60 <tcp_listen_with_backlog_and_err+0x48>
 800fa4c:	4b40      	ldr	r3, [pc, #256]	; (800fb50 <tcp_listen_with_backlog_and_err+0x138>)
 800fa4e:	f240 325a 	movw	r2, #858	; 0x35a
 800fa52:	4942      	ldr	r1, [pc, #264]	; (800fb5c <tcp_listen_with_backlog_and_err+0x144>)
 800fa54:	4840      	ldr	r0, [pc, #256]	; (800fb58 <tcp_listen_with_backlog_and_err+0x140>)
 800fa56:	f009 f883 	bl	8018b60 <iprintf>
 800fa5a:	23f1      	movs	r3, #241	; 0xf1
 800fa5c:	76fb      	strb	r3, [r7, #27]
 800fa5e:	e06b      	b.n	800fb38 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	7d1b      	ldrb	r3, [r3, #20]
 800fa64:	2b01      	cmp	r3, #1
 800fa66:	d104      	bne.n	800fa72 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800fa6c:	23f7      	movs	r3, #247	; 0xf7
 800fa6e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800fa70:	e062      	b.n	800fb38 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800fa72:	2002      	movs	r0, #2
 800fa74:	f7fe fa3c 	bl	800def0 <memp_malloc>
 800fa78:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800fa7a:	69fb      	ldr	r3, [r7, #28]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d102      	bne.n	800fa86 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800fa80:	23ff      	movs	r3, #255	; 0xff
 800fa82:	76fb      	strb	r3, [r7, #27]
    goto done;
 800fa84:	e058      	b.n	800fb38 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	691a      	ldr	r2, [r3, #16]
 800fa8a:	69fb      	ldr	r3, [r7, #28]
 800fa8c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	8ada      	ldrh	r2, [r3, #22]
 800fa92:	69fb      	ldr	r3, [r7, #28]
 800fa94:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800fa96:	69fb      	ldr	r3, [r7, #28]
 800fa98:	2201      	movs	r2, #1
 800fa9a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	7d5a      	ldrb	r2, [r3, #21]
 800faa0:	69fb      	ldr	r3, [r7, #28]
 800faa2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	7a5a      	ldrb	r2, [r3, #9]
 800faa8:	69fb      	ldr	r3, [r7, #28]
 800faaa:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800faac:	69fb      	ldr	r3, [r7, #28]
 800faae:	2200      	movs	r2, #0
 800fab0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	7ada      	ldrb	r2, [r3, #11]
 800fab6:	69fb      	ldr	r3, [r7, #28]
 800fab8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	7a9a      	ldrb	r2, [r3, #10]
 800fabe:	69fb      	ldr	r3, [r7, #28]
 800fac0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	681a      	ldr	r2, [r3, #0]
 800fac6:	69fb      	ldr	r3, [r7, #28]
 800fac8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	8adb      	ldrh	r3, [r3, #22]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d021      	beq.n	800fb16 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800fad2:	4b23      	ldr	r3, [pc, #140]	; (800fb60 <tcp_listen_with_backlog_and_err+0x148>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	68fa      	ldr	r2, [r7, #12]
 800fad8:	429a      	cmp	r2, r3
 800fada:	d105      	bne.n	800fae8 <tcp_listen_with_backlog_and_err+0xd0>
 800fadc:	4b20      	ldr	r3, [pc, #128]	; (800fb60 <tcp_listen_with_backlog_and_err+0x148>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	68db      	ldr	r3, [r3, #12]
 800fae2:	4a1f      	ldr	r2, [pc, #124]	; (800fb60 <tcp_listen_with_backlog_and_err+0x148>)
 800fae4:	6013      	str	r3, [r2, #0]
 800fae6:	e013      	b.n	800fb10 <tcp_listen_with_backlog_and_err+0xf8>
 800fae8:	4b1d      	ldr	r3, [pc, #116]	; (800fb60 <tcp_listen_with_backlog_and_err+0x148>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	617b      	str	r3, [r7, #20]
 800faee:	e00c      	b.n	800fb0a <tcp_listen_with_backlog_and_err+0xf2>
 800faf0:	697b      	ldr	r3, [r7, #20]
 800faf2:	68db      	ldr	r3, [r3, #12]
 800faf4:	68fa      	ldr	r2, [r7, #12]
 800faf6:	429a      	cmp	r2, r3
 800faf8:	d104      	bne.n	800fb04 <tcp_listen_with_backlog_and_err+0xec>
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	68da      	ldr	r2, [r3, #12]
 800fafe:	697b      	ldr	r3, [r7, #20]
 800fb00:	60da      	str	r2, [r3, #12]
 800fb02:	e005      	b.n	800fb10 <tcp_listen_with_backlog_and_err+0xf8>
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	68db      	ldr	r3, [r3, #12]
 800fb08:	617b      	str	r3, [r7, #20]
 800fb0a:	697b      	ldr	r3, [r7, #20]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d1ef      	bne.n	800faf0 <tcp_listen_with_backlog_and_err+0xd8>
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	2200      	movs	r2, #0
 800fb14:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800fb16:	68f8      	ldr	r0, [r7, #12]
 800fb18:	f7ff fbc0 	bl	800f29c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800fb1c:	69fb      	ldr	r3, [r7, #28]
 800fb1e:	4a11      	ldr	r2, [pc, #68]	; (800fb64 <tcp_listen_with_backlog_and_err+0x14c>)
 800fb20:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800fb22:	4b11      	ldr	r3, [pc, #68]	; (800fb68 <tcp_listen_with_backlog_and_err+0x150>)
 800fb24:	681a      	ldr	r2, [r3, #0]
 800fb26:	69fb      	ldr	r3, [r7, #28]
 800fb28:	60da      	str	r2, [r3, #12]
 800fb2a:	4a0f      	ldr	r2, [pc, #60]	; (800fb68 <tcp_listen_with_backlog_and_err+0x150>)
 800fb2c:	69fb      	ldr	r3, [r7, #28]
 800fb2e:	6013      	str	r3, [r2, #0]
 800fb30:	f005 fbfc 	bl	801532c <tcp_timer_needed>
  res = ERR_OK;
 800fb34:	2300      	movs	r3, #0
 800fb36:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d002      	beq.n	800fb44 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	7efa      	ldrb	r2, [r7, #27]
 800fb42:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800fb44:	69fb      	ldr	r3, [r7, #28]
}
 800fb46:	4618      	mov	r0, r3
 800fb48:	3720      	adds	r7, #32
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}
 800fb4e:	bf00      	nop
 800fb50:	0801a8a0 	.word	0x0801a8a0
 800fb54:	0801aa94 	.word	0x0801aa94
 800fb58:	0801a8e4 	.word	0x0801a8e4
 800fb5c:	0801aac4 	.word	0x0801aac4
 800fb60:	24008a84 	.word	0x24008a84
 800fb64:	0800f9b5 	.word	0x0800f9b5
 800fb68:	24008a88 	.word	0x24008a88

0800fb6c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b084      	sub	sp, #16
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d106      	bne.n	800fb88 <tcp_update_rcv_ann_wnd+0x1c>
 800fb7a:	4b25      	ldr	r3, [pc, #148]	; (800fc10 <tcp_update_rcv_ann_wnd+0xa4>)
 800fb7c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800fb80:	4924      	ldr	r1, [pc, #144]	; (800fc14 <tcp_update_rcv_ann_wnd+0xa8>)
 800fb82:	4825      	ldr	r0, [pc, #148]	; (800fc18 <tcp_update_rcv_ann_wnd+0xac>)
 800fb84:	f008 ffec 	bl	8018b60 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb8c:	687a      	ldr	r2, [r7, #4]
 800fb8e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800fb90:	4413      	add	r3, r2
 800fb92:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb98:	687a      	ldr	r2, [r7, #4]
 800fb9a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800fb9c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800fba0:	bf28      	it	cs
 800fba2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800fba6:	b292      	uxth	r2, r2
 800fba8:	4413      	add	r3, r2
 800fbaa:	68fa      	ldr	r2, [r7, #12]
 800fbac:	1ad3      	subs	r3, r2, r3
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	db08      	blt.n	800fbc4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbbe:	68fa      	ldr	r2, [r7, #12]
 800fbc0:	1ad3      	subs	r3, r2, r3
 800fbc2:	e020      	b.n	800fc06 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbcc:	1ad3      	subs	r3, r2, r3
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	dd03      	ble.n	800fbda <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fbd8:	e014      	b.n	800fc04 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbe2:	1ad3      	subs	r3, r2, r3
 800fbe4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fbec:	d306      	bcc.n	800fbfc <tcp_update_rcv_ann_wnd+0x90>
 800fbee:	4b08      	ldr	r3, [pc, #32]	; (800fc10 <tcp_update_rcv_ann_wnd+0xa4>)
 800fbf0:	f240 32b6 	movw	r2, #950	; 0x3b6
 800fbf4:	4909      	ldr	r1, [pc, #36]	; (800fc1c <tcp_update_rcv_ann_wnd+0xb0>)
 800fbf6:	4808      	ldr	r0, [pc, #32]	; (800fc18 <tcp_update_rcv_ann_wnd+0xac>)
 800fbf8:	f008 ffb2 	bl	8018b60 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	b29a      	uxth	r2, r3
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800fc04:	2300      	movs	r3, #0
  }
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	3710      	adds	r7, #16
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}
 800fc0e:	bf00      	nop
 800fc10:	0801a8a0 	.word	0x0801a8a0
 800fc14:	0801aafc 	.word	0x0801aafc
 800fc18:	0801a8e4 	.word	0x0801a8e4
 800fc1c:	0801ab20 	.word	0x0801ab20

0800fc20 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b084      	sub	sp, #16
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
 800fc28:	460b      	mov	r3, r1
 800fc2a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d107      	bne.n	800fc42 <tcp_recved+0x22>
 800fc32:	4b1f      	ldr	r3, [pc, #124]	; (800fcb0 <tcp_recved+0x90>)
 800fc34:	f240 32cf 	movw	r2, #975	; 0x3cf
 800fc38:	491e      	ldr	r1, [pc, #120]	; (800fcb4 <tcp_recved+0x94>)
 800fc3a:	481f      	ldr	r0, [pc, #124]	; (800fcb8 <tcp_recved+0x98>)
 800fc3c:	f008 ff90 	bl	8018b60 <iprintf>
 800fc40:	e032      	b.n	800fca8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	7d1b      	ldrb	r3, [r3, #20]
 800fc46:	2b01      	cmp	r3, #1
 800fc48:	d106      	bne.n	800fc58 <tcp_recved+0x38>
 800fc4a:	4b19      	ldr	r3, [pc, #100]	; (800fcb0 <tcp_recved+0x90>)
 800fc4c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800fc50:	491a      	ldr	r1, [pc, #104]	; (800fcbc <tcp_recved+0x9c>)
 800fc52:	4819      	ldr	r0, [pc, #100]	; (800fcb8 <tcp_recved+0x98>)
 800fc54:	f008 ff84 	bl	8018b60 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fc5c:	887b      	ldrh	r3, [r7, #2]
 800fc5e:	4413      	add	r3, r2
 800fc60:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800fc62:	89fb      	ldrh	r3, [r7, #14]
 800fc64:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fc68:	d804      	bhi.n	800fc74 <tcp_recved+0x54>
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fc6e:	89fa      	ldrh	r2, [r7, #14]
 800fc70:	429a      	cmp	r2, r3
 800fc72:	d204      	bcs.n	800fc7e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fc7a:	851a      	strh	r2, [r3, #40]	; 0x28
 800fc7c:	e002      	b.n	800fc84 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	89fa      	ldrh	r2, [r7, #14]
 800fc82:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800fc84:	6878      	ldr	r0, [r7, #4]
 800fc86:	f7ff ff71 	bl	800fb6c <tcp_update_rcv_ann_wnd>
 800fc8a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fc92:	d309      	bcc.n	800fca8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	8b5b      	ldrh	r3, [r3, #26]
 800fc98:	f043 0302 	orr.w	r3, r3, #2
 800fc9c:	b29a      	uxth	r2, r3
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f004 fbcc 	bl	8014440 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800fca8:	3710      	adds	r7, #16
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}
 800fcae:	bf00      	nop
 800fcb0:	0801a8a0 	.word	0x0801a8a0
 800fcb4:	0801ab3c 	.word	0x0801ab3c
 800fcb8:	0801a8e4 	.word	0x0801a8e4
 800fcbc:	0801ab54 	.word	0x0801ab54

0800fcc0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800fcc0:	b480      	push	{r7}
 800fcc2:	b083      	sub	sp, #12
 800fcc4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800fcca:	4b1e      	ldr	r3, [pc, #120]	; (800fd44 <tcp_new_port+0x84>)
 800fccc:	881b      	ldrh	r3, [r3, #0]
 800fcce:	3301      	adds	r3, #1
 800fcd0:	b29a      	uxth	r2, r3
 800fcd2:	4b1c      	ldr	r3, [pc, #112]	; (800fd44 <tcp_new_port+0x84>)
 800fcd4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800fcd6:	4b1b      	ldr	r3, [pc, #108]	; (800fd44 <tcp_new_port+0x84>)
 800fcd8:	881b      	ldrh	r3, [r3, #0]
 800fcda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcde:	4293      	cmp	r3, r2
 800fce0:	d103      	bne.n	800fcea <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800fce2:	4b18      	ldr	r3, [pc, #96]	; (800fd44 <tcp_new_port+0x84>)
 800fce4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800fce8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800fcea:	2300      	movs	r3, #0
 800fcec:	71fb      	strb	r3, [r7, #7]
 800fcee:	e01e      	b.n	800fd2e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800fcf0:	79fb      	ldrb	r3, [r7, #7]
 800fcf2:	4a15      	ldr	r2, [pc, #84]	; (800fd48 <tcp_new_port+0x88>)
 800fcf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	603b      	str	r3, [r7, #0]
 800fcfc:	e011      	b.n	800fd22 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	8ada      	ldrh	r2, [r3, #22]
 800fd02:	4b10      	ldr	r3, [pc, #64]	; (800fd44 <tcp_new_port+0x84>)
 800fd04:	881b      	ldrh	r3, [r3, #0]
 800fd06:	429a      	cmp	r2, r3
 800fd08:	d108      	bne.n	800fd1c <tcp_new_port+0x5c>
        n++;
 800fd0a:	88bb      	ldrh	r3, [r7, #4]
 800fd0c:	3301      	adds	r3, #1
 800fd0e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800fd10:	88bb      	ldrh	r3, [r7, #4]
 800fd12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fd16:	d3d8      	bcc.n	800fcca <tcp_new_port+0xa>
          return 0;
 800fd18:	2300      	movs	r3, #0
 800fd1a:	e00d      	b.n	800fd38 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	68db      	ldr	r3, [r3, #12]
 800fd20:	603b      	str	r3, [r7, #0]
 800fd22:	683b      	ldr	r3, [r7, #0]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d1ea      	bne.n	800fcfe <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800fd28:	79fb      	ldrb	r3, [r7, #7]
 800fd2a:	3301      	adds	r3, #1
 800fd2c:	71fb      	strb	r3, [r7, #7]
 800fd2e:	79fb      	ldrb	r3, [r7, #7]
 800fd30:	2b03      	cmp	r3, #3
 800fd32:	d9dd      	bls.n	800fcf0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800fd34:	4b03      	ldr	r3, [pc, #12]	; (800fd44 <tcp_new_port+0x84>)
 800fd36:	881b      	ldrh	r3, [r3, #0]
}
 800fd38:	4618      	mov	r0, r3
 800fd3a:	370c      	adds	r7, #12
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd42:	4770      	bx	lr
 800fd44:	2400002c 	.word	0x2400002c
 800fd48:	0801eb98 	.word	0x0801eb98

0800fd4c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800fd4c:	b5b0      	push	{r4, r5, r7, lr}
 800fd4e:	b090      	sub	sp, #64	; 0x40
 800fd50:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800fd52:	2300      	movs	r3, #0
 800fd54:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800fd58:	4b94      	ldr	r3, [pc, #592]	; (800ffac <tcp_slowtmr+0x260>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	3301      	adds	r3, #1
 800fd5e:	4a93      	ldr	r2, [pc, #588]	; (800ffac <tcp_slowtmr+0x260>)
 800fd60:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800fd62:	4b93      	ldr	r3, [pc, #588]	; (800ffb0 <tcp_slowtmr+0x264>)
 800fd64:	781b      	ldrb	r3, [r3, #0]
 800fd66:	3301      	adds	r3, #1
 800fd68:	b2da      	uxtb	r2, r3
 800fd6a:	4b91      	ldr	r3, [pc, #580]	; (800ffb0 <tcp_slowtmr+0x264>)
 800fd6c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800fd72:	4b90      	ldr	r3, [pc, #576]	; (800ffb4 <tcp_slowtmr+0x268>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800fd78:	e29d      	b.n	80102b6 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800fd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd7c:	7d1b      	ldrb	r3, [r3, #20]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d106      	bne.n	800fd90 <tcp_slowtmr+0x44>
 800fd82:	4b8d      	ldr	r3, [pc, #564]	; (800ffb8 <tcp_slowtmr+0x26c>)
 800fd84:	f240 42be 	movw	r2, #1214	; 0x4be
 800fd88:	498c      	ldr	r1, [pc, #560]	; (800ffbc <tcp_slowtmr+0x270>)
 800fd8a:	488d      	ldr	r0, [pc, #564]	; (800ffc0 <tcp_slowtmr+0x274>)
 800fd8c:	f008 fee8 	bl	8018b60 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800fd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd92:	7d1b      	ldrb	r3, [r3, #20]
 800fd94:	2b01      	cmp	r3, #1
 800fd96:	d106      	bne.n	800fda6 <tcp_slowtmr+0x5a>
 800fd98:	4b87      	ldr	r3, [pc, #540]	; (800ffb8 <tcp_slowtmr+0x26c>)
 800fd9a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800fd9e:	4989      	ldr	r1, [pc, #548]	; (800ffc4 <tcp_slowtmr+0x278>)
 800fda0:	4887      	ldr	r0, [pc, #540]	; (800ffc0 <tcp_slowtmr+0x274>)
 800fda2:	f008 fedd 	bl	8018b60 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800fda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fda8:	7d1b      	ldrb	r3, [r3, #20]
 800fdaa:	2b0a      	cmp	r3, #10
 800fdac:	d106      	bne.n	800fdbc <tcp_slowtmr+0x70>
 800fdae:	4b82      	ldr	r3, [pc, #520]	; (800ffb8 <tcp_slowtmr+0x26c>)
 800fdb0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800fdb4:	4984      	ldr	r1, [pc, #528]	; (800ffc8 <tcp_slowtmr+0x27c>)
 800fdb6:	4882      	ldr	r0, [pc, #520]	; (800ffc0 <tcp_slowtmr+0x274>)
 800fdb8:	f008 fed2 	bl	8018b60 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800fdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdbe:	7f9a      	ldrb	r2, [r3, #30]
 800fdc0:	4b7b      	ldr	r3, [pc, #492]	; (800ffb0 <tcp_slowtmr+0x264>)
 800fdc2:	781b      	ldrb	r3, [r3, #0]
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	d105      	bne.n	800fdd4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800fdc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdce:	68db      	ldr	r3, [r3, #12]
 800fdd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800fdd2:	e270      	b.n	80102b6 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800fdd4:	4b76      	ldr	r3, [pc, #472]	; (800ffb0 <tcp_slowtmr+0x264>)
 800fdd6:	781a      	ldrb	r2, [r3, #0]
 800fdd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdda:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800fddc:	2300      	movs	r3, #0
 800fdde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800fde2:	2300      	movs	r3, #0
 800fde4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800fde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdea:	7d1b      	ldrb	r3, [r3, #20]
 800fdec:	2b02      	cmp	r3, #2
 800fdee:	d10a      	bne.n	800fe06 <tcp_slowtmr+0xba>
 800fdf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fdf6:	2b05      	cmp	r3, #5
 800fdf8:	d905      	bls.n	800fe06 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800fdfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdfe:	3301      	adds	r3, #1
 800fe00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fe04:	e11e      	b.n	8010044 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800fe06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fe0c:	2b0b      	cmp	r3, #11
 800fe0e:	d905      	bls.n	800fe1c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800fe10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe14:	3301      	adds	r3, #1
 800fe16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fe1a:	e113      	b.n	8010044 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800fe1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe1e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d075      	beq.n	800ff12 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800fe26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d006      	beq.n	800fe3c <tcp_slowtmr+0xf0>
 800fe2e:	4b62      	ldr	r3, [pc, #392]	; (800ffb8 <tcp_slowtmr+0x26c>)
 800fe30:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800fe34:	4965      	ldr	r1, [pc, #404]	; (800ffcc <tcp_slowtmr+0x280>)
 800fe36:	4862      	ldr	r0, [pc, #392]	; (800ffc0 <tcp_slowtmr+0x274>)
 800fe38:	f008 fe92 	bl	8018b60 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800fe3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d106      	bne.n	800fe52 <tcp_slowtmr+0x106>
 800fe44:	4b5c      	ldr	r3, [pc, #368]	; (800ffb8 <tcp_slowtmr+0x26c>)
 800fe46:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800fe4a:	4961      	ldr	r1, [pc, #388]	; (800ffd0 <tcp_slowtmr+0x284>)
 800fe4c:	485c      	ldr	r0, [pc, #368]	; (800ffc0 <tcp_slowtmr+0x274>)
 800fe4e:	f008 fe87 	bl	8018b60 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800fe52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe54:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fe58:	2b0b      	cmp	r3, #11
 800fe5a:	d905      	bls.n	800fe68 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800fe5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe60:	3301      	adds	r3, #1
 800fe62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fe66:	e0ed      	b.n	8010044 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800fe68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe6a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fe6e:	3b01      	subs	r3, #1
 800fe70:	4a58      	ldr	r2, [pc, #352]	; (800ffd4 <tcp_slowtmr+0x288>)
 800fe72:	5cd3      	ldrb	r3, [r2, r3]
 800fe74:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800fe76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe78:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fe7c:	7c7a      	ldrb	r2, [r7, #17]
 800fe7e:	429a      	cmp	r2, r3
 800fe80:	d907      	bls.n	800fe92 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800fe82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe84:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fe88:	3301      	adds	r3, #1
 800fe8a:	b2da      	uxtb	r2, r3
 800fe8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe8e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800fe92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe94:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fe98:	7c7a      	ldrb	r2, [r7, #17]
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	f200 80d2 	bhi.w	8010044 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800fea0:	2301      	movs	r3, #1
 800fea2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800fea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fea6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d108      	bne.n	800fec0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800feae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800feb0:	f005 f96e 	bl	8015190 <tcp_zero_window_probe>
 800feb4:	4603      	mov	r3, r0
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d014      	beq.n	800fee4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800feba:	2300      	movs	r3, #0
 800febc:	623b      	str	r3, [r7, #32]
 800febe:	e011      	b.n	800fee4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800fec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fec6:	4619      	mov	r1, r3
 800fec8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800feca:	f004 f833 	bl	8013f34 <tcp_split_unsent_seg>
 800fece:	4603      	mov	r3, r0
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d107      	bne.n	800fee4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800fed4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fed6:	f004 fab3 	bl	8014440 <tcp_output>
 800feda:	4603      	mov	r3, r0
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d101      	bne.n	800fee4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800fee0:	2300      	movs	r3, #0
 800fee2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800fee4:	6a3b      	ldr	r3, [r7, #32]
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	f000 80ac 	beq.w	8010044 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800feec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feee:	2200      	movs	r2, #0
 800fef0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800fef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fef6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fefa:	2b06      	cmp	r3, #6
 800fefc:	f200 80a2 	bhi.w	8010044 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ff00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff02:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ff06:	3301      	adds	r3, #1
 800ff08:	b2da      	uxtb	r2, r3
 800ff0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff0c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800ff10:	e098      	b.n	8010044 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ff12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff14:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	db0f      	blt.n	800ff3c <tcp_slowtmr+0x1f0>
 800ff1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff1e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ff22:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ff26:	4293      	cmp	r3, r2
 800ff28:	d008      	beq.n	800ff3c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800ff2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff2c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ff30:	b29b      	uxth	r3, r3
 800ff32:	3301      	adds	r3, #1
 800ff34:	b29b      	uxth	r3, r3
 800ff36:	b21a      	sxth	r2, r3
 800ff38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff3a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800ff3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff3e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800ff42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff44:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ff48:	429a      	cmp	r2, r3
 800ff4a:	db7b      	blt.n	8010044 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ff4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ff4e:	f004 fd69 	bl	8014a24 <tcp_rexmit_rto_prepare>
 800ff52:	4603      	mov	r3, r0
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d007      	beq.n	800ff68 <tcp_slowtmr+0x21c>
 800ff58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d171      	bne.n	8010044 <tcp_slowtmr+0x2f8>
 800ff60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d06d      	beq.n	8010044 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ff68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff6a:	7d1b      	ldrb	r3, [r3, #20]
 800ff6c:	2b02      	cmp	r3, #2
 800ff6e:	d03a      	beq.n	800ffe6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ff70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ff76:	2b0c      	cmp	r3, #12
 800ff78:	bf28      	it	cs
 800ff7a:	230c      	movcs	r3, #12
 800ff7c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ff7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff80:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ff84:	10db      	asrs	r3, r3, #3
 800ff86:	b21b      	sxth	r3, r3
 800ff88:	461a      	mov	r2, r3
 800ff8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff8c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ff90:	4413      	add	r3, r2
 800ff92:	7efa      	ldrb	r2, [r7, #27]
 800ff94:	4910      	ldr	r1, [pc, #64]	; (800ffd8 <tcp_slowtmr+0x28c>)
 800ff96:	5c8a      	ldrb	r2, [r1, r2]
 800ff98:	4093      	lsls	r3, r2
 800ff9a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ffa2:	4293      	cmp	r3, r2
 800ffa4:	dc1a      	bgt.n	800ffdc <tcp_slowtmr+0x290>
 800ffa6:	697b      	ldr	r3, [r7, #20]
 800ffa8:	b21a      	sxth	r2, r3
 800ffaa:	e019      	b.n	800ffe0 <tcp_slowtmr+0x294>
 800ffac:	24008a80 	.word	0x24008a80
 800ffb0:	24008a96 	.word	0x24008a96
 800ffb4:	24008a8c 	.word	0x24008a8c
 800ffb8:	0801a8a0 	.word	0x0801a8a0
 800ffbc:	0801abe4 	.word	0x0801abe4
 800ffc0:	0801a8e4 	.word	0x0801a8e4
 800ffc4:	0801ac10 	.word	0x0801ac10
 800ffc8:	0801ac3c 	.word	0x0801ac3c
 800ffcc:	0801ac6c 	.word	0x0801ac6c
 800ffd0:	0801aca0 	.word	0x0801aca0
 800ffd4:	0801eb90 	.word	0x0801eb90
 800ffd8:	0801eb80 	.word	0x0801eb80
 800ffdc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ffe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffe2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ffe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffe8:	2200      	movs	r2, #0
 800ffea:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ffec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fff4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fff8:	4293      	cmp	r3, r2
 800fffa:	bf28      	it	cs
 800fffc:	4613      	movcs	r3, r2
 800fffe:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8010000:	8a7b      	ldrh	r3, [r7, #18]
 8010002:	085b      	lsrs	r3, r3, #1
 8010004:	b29a      	uxth	r2, r3
 8010006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010008:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801000c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801000e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010014:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010016:	005b      	lsls	r3, r3, #1
 8010018:	b29b      	uxth	r3, r3
 801001a:	429a      	cmp	r2, r3
 801001c:	d206      	bcs.n	801002c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801001e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010020:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010022:	005b      	lsls	r3, r3, #1
 8010024:	b29a      	uxth	r2, r3
 8010026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010028:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801002c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801002e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010032:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8010036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010038:	2200      	movs	r2, #0
 801003a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801003e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010040:	f004 fd60 	bl	8014b04 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8010044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010046:	7d1b      	ldrb	r3, [r3, #20]
 8010048:	2b06      	cmp	r3, #6
 801004a:	d111      	bne.n	8010070 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801004c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801004e:	8b5b      	ldrh	r3, [r3, #26]
 8010050:	f003 0310 	and.w	r3, r3, #16
 8010054:	2b00      	cmp	r3, #0
 8010056:	d00b      	beq.n	8010070 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010058:	4b9c      	ldr	r3, [pc, #624]	; (80102cc <tcp_slowtmr+0x580>)
 801005a:	681a      	ldr	r2, [r3, #0]
 801005c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801005e:	6a1b      	ldr	r3, [r3, #32]
 8010060:	1ad3      	subs	r3, r2, r3
 8010062:	2b28      	cmp	r3, #40	; 0x28
 8010064:	d904      	bls.n	8010070 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8010066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801006a:	3301      	adds	r3, #1
 801006c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010072:	7a5b      	ldrb	r3, [r3, #9]
 8010074:	f003 0308 	and.w	r3, r3, #8
 8010078:	2b00      	cmp	r3, #0
 801007a:	d04a      	beq.n	8010112 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 801007c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801007e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010080:	2b04      	cmp	r3, #4
 8010082:	d003      	beq.n	801008c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8010084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010086:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8010088:	2b07      	cmp	r3, #7
 801008a:	d142      	bne.n	8010112 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801008c:	4b8f      	ldr	r3, [pc, #572]	; (80102cc <tcp_slowtmr+0x580>)
 801008e:	681a      	ldr	r2, [r3, #0]
 8010090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010092:	6a1b      	ldr	r3, [r3, #32]
 8010094:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8010096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010098:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801009c:	4b8c      	ldr	r3, [pc, #560]	; (80102d0 <tcp_slowtmr+0x584>)
 801009e:	440b      	add	r3, r1
 80100a0:	498c      	ldr	r1, [pc, #560]	; (80102d4 <tcp_slowtmr+0x588>)
 80100a2:	fba1 1303 	umull	r1, r3, r1, r3
 80100a6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80100a8:	429a      	cmp	r2, r3
 80100aa:	d90a      	bls.n	80100c2 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80100ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100b0:	3301      	adds	r3, #1
 80100b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80100b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80100ba:	3301      	adds	r3, #1
 80100bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80100c0:	e027      	b.n	8010112 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80100c2:	4b82      	ldr	r3, [pc, #520]	; (80102cc <tcp_slowtmr+0x580>)
 80100c4:	681a      	ldr	r2, [r3, #0]
 80100c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100c8:	6a1b      	ldr	r3, [r3, #32]
 80100ca:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80100cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ce:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80100d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100d4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80100d8:	4618      	mov	r0, r3
 80100da:	4b7f      	ldr	r3, [pc, #508]	; (80102d8 <tcp_slowtmr+0x58c>)
 80100dc:	fb00 f303 	mul.w	r3, r0, r3
 80100e0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80100e2:	497c      	ldr	r1, [pc, #496]	; (80102d4 <tcp_slowtmr+0x588>)
 80100e4:	fba1 1303 	umull	r1, r3, r1, r3
 80100e8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80100ea:	429a      	cmp	r2, r3
 80100ec:	d911      	bls.n	8010112 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80100ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80100f0:	f005 f80e 	bl	8015110 <tcp_keepalive>
 80100f4:	4603      	mov	r3, r0
 80100f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80100fa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d107      	bne.n	8010112 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8010102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010104:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8010108:	3301      	adds	r3, #1
 801010a:	b2da      	uxtb	r2, r3
 801010c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801010e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8010112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010116:	2b00      	cmp	r3, #0
 8010118:	d011      	beq.n	801013e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801011a:	4b6c      	ldr	r3, [pc, #432]	; (80102cc <tcp_slowtmr+0x580>)
 801011c:	681a      	ldr	r2, [r3, #0]
 801011e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010120:	6a1b      	ldr	r3, [r3, #32]
 8010122:	1ad2      	subs	r2, r2, r3
 8010124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010126:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801012a:	4619      	mov	r1, r3
 801012c:	460b      	mov	r3, r1
 801012e:	005b      	lsls	r3, r3, #1
 8010130:	440b      	add	r3, r1
 8010132:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010134:	429a      	cmp	r2, r3
 8010136:	d302      	bcc.n	801013e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8010138:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801013a:	f000 fec9 	bl	8010ed0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801013e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010140:	7d1b      	ldrb	r3, [r3, #20]
 8010142:	2b03      	cmp	r3, #3
 8010144:	d10b      	bne.n	801015e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010146:	4b61      	ldr	r3, [pc, #388]	; (80102cc <tcp_slowtmr+0x580>)
 8010148:	681a      	ldr	r2, [r3, #0]
 801014a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801014c:	6a1b      	ldr	r3, [r3, #32]
 801014e:	1ad3      	subs	r3, r2, r3
 8010150:	2b28      	cmp	r3, #40	; 0x28
 8010152:	d904      	bls.n	801015e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8010154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010158:	3301      	adds	r3, #1
 801015a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801015e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010160:	7d1b      	ldrb	r3, [r3, #20]
 8010162:	2b09      	cmp	r3, #9
 8010164:	d10b      	bne.n	801017e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010166:	4b59      	ldr	r3, [pc, #356]	; (80102cc <tcp_slowtmr+0x580>)
 8010168:	681a      	ldr	r2, [r3, #0]
 801016a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801016c:	6a1b      	ldr	r3, [r3, #32]
 801016e:	1ad3      	subs	r3, r2, r3
 8010170:	2bf0      	cmp	r3, #240	; 0xf0
 8010172:	d904      	bls.n	801017e <tcp_slowtmr+0x432>
        ++pcb_remove;
 8010174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010178:	3301      	adds	r3, #1
 801017a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801017e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010182:	2b00      	cmp	r3, #0
 8010184:	d060      	beq.n	8010248 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8010186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801018c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801018e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010190:	f000 fcea 	bl	8010b68 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8010194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010196:	2b00      	cmp	r3, #0
 8010198:	d010      	beq.n	80101bc <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801019a:	4b50      	ldr	r3, [pc, #320]	; (80102dc <tcp_slowtmr+0x590>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101a0:	429a      	cmp	r2, r3
 80101a2:	d106      	bne.n	80101b2 <tcp_slowtmr+0x466>
 80101a4:	4b4e      	ldr	r3, [pc, #312]	; (80102e0 <tcp_slowtmr+0x594>)
 80101a6:	f240 526d 	movw	r2, #1389	; 0x56d
 80101aa:	494e      	ldr	r1, [pc, #312]	; (80102e4 <tcp_slowtmr+0x598>)
 80101ac:	484e      	ldr	r0, [pc, #312]	; (80102e8 <tcp_slowtmr+0x59c>)
 80101ae:	f008 fcd7 	bl	8018b60 <iprintf>
        prev->next = pcb->next;
 80101b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101b4:	68da      	ldr	r2, [r3, #12]
 80101b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101b8:	60da      	str	r2, [r3, #12]
 80101ba:	e00f      	b.n	80101dc <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80101bc:	4b47      	ldr	r3, [pc, #284]	; (80102dc <tcp_slowtmr+0x590>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d006      	beq.n	80101d4 <tcp_slowtmr+0x488>
 80101c6:	4b46      	ldr	r3, [pc, #280]	; (80102e0 <tcp_slowtmr+0x594>)
 80101c8:	f240 5271 	movw	r2, #1393	; 0x571
 80101cc:	4947      	ldr	r1, [pc, #284]	; (80102ec <tcp_slowtmr+0x5a0>)
 80101ce:	4846      	ldr	r0, [pc, #280]	; (80102e8 <tcp_slowtmr+0x59c>)
 80101d0:	f008 fcc6 	bl	8018b60 <iprintf>
        tcp_active_pcbs = pcb->next;
 80101d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101d6:	68db      	ldr	r3, [r3, #12]
 80101d8:	4a40      	ldr	r2, [pc, #256]	; (80102dc <tcp_slowtmr+0x590>)
 80101da:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80101dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d013      	beq.n	801020c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80101e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80101e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ea:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80101ec:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80101ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101f0:	3304      	adds	r3, #4
 80101f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80101f4:	8ad2      	ldrh	r2, [r2, #22]
 80101f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80101f8:	8b09      	ldrh	r1, [r1, #24]
 80101fa:	9102      	str	r1, [sp, #8]
 80101fc:	9201      	str	r2, [sp, #4]
 80101fe:	9300      	str	r3, [sp, #0]
 8010200:	462b      	mov	r3, r5
 8010202:	4622      	mov	r2, r4
 8010204:	4601      	mov	r1, r0
 8010206:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010208:	f004 fece 	bl	8014fa8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801020c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801020e:	691b      	ldr	r3, [r3, #16]
 8010210:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8010212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010214:	7d1b      	ldrb	r3, [r3, #20]
 8010216:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801021a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801021c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801021e:	68db      	ldr	r3, [r3, #12]
 8010220:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010222:	6838      	ldr	r0, [r7, #0]
 8010224:	f7ff f83a 	bl	800f29c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8010228:	4b31      	ldr	r3, [pc, #196]	; (80102f0 <tcp_slowtmr+0x5a4>)
 801022a:	2200      	movs	r2, #0
 801022c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d004      	beq.n	801023e <tcp_slowtmr+0x4f2>
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	f06f 010c 	mvn.w	r1, #12
 801023a:	68b8      	ldr	r0, [r7, #8]
 801023c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801023e:	4b2c      	ldr	r3, [pc, #176]	; (80102f0 <tcp_slowtmr+0x5a4>)
 8010240:	781b      	ldrb	r3, [r3, #0]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d037      	beq.n	80102b6 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8010246:	e592      	b.n	800fd6e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8010248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801024a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801024c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801024e:	68db      	ldr	r3, [r3, #12]
 8010250:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8010252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010254:	7f1b      	ldrb	r3, [r3, #28]
 8010256:	3301      	adds	r3, #1
 8010258:	b2da      	uxtb	r2, r3
 801025a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801025c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801025e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010260:	7f1a      	ldrb	r2, [r3, #28]
 8010262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010264:	7f5b      	ldrb	r3, [r3, #29]
 8010266:	429a      	cmp	r2, r3
 8010268:	d325      	bcc.n	80102b6 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801026a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801026c:	2200      	movs	r2, #0
 801026e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8010270:	4b1f      	ldr	r3, [pc, #124]	; (80102f0 <tcp_slowtmr+0x5a4>)
 8010272:	2200      	movs	r2, #0
 8010274:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8010276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801027c:	2b00      	cmp	r3, #0
 801027e:	d00b      	beq.n	8010298 <tcp_slowtmr+0x54c>
 8010280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010288:	6912      	ldr	r2, [r2, #16]
 801028a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801028c:	4610      	mov	r0, r2
 801028e:	4798      	blx	r3
 8010290:	4603      	mov	r3, r0
 8010292:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8010296:	e002      	b.n	801029e <tcp_slowtmr+0x552>
 8010298:	2300      	movs	r3, #0
 801029a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801029e:	4b14      	ldr	r3, [pc, #80]	; (80102f0 <tcp_slowtmr+0x5a4>)
 80102a0:	781b      	ldrb	r3, [r3, #0]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d000      	beq.n	80102a8 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80102a6:	e562      	b.n	800fd6e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80102a8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d102      	bne.n	80102b6 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80102b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102b2:	f004 f8c5 	bl	8014440 <tcp_output>
  while (pcb != NULL) {
 80102b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	f47f ad5e 	bne.w	800fd7a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80102be:	2300      	movs	r3, #0
 80102c0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80102c2:	4b0c      	ldr	r3, [pc, #48]	; (80102f4 <tcp_slowtmr+0x5a8>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80102c8:	e069      	b.n	801039e <tcp_slowtmr+0x652>
 80102ca:	bf00      	nop
 80102cc:	24008a80 	.word	0x24008a80
 80102d0:	000a4cb8 	.word	0x000a4cb8
 80102d4:	10624dd3 	.word	0x10624dd3
 80102d8:	000124f8 	.word	0x000124f8
 80102dc:	24008a8c 	.word	0x24008a8c
 80102e0:	0801a8a0 	.word	0x0801a8a0
 80102e4:	0801acd8 	.word	0x0801acd8
 80102e8:	0801a8e4 	.word	0x0801a8e4
 80102ec:	0801ad04 	.word	0x0801ad04
 80102f0:	24008a94 	.word	0x24008a94
 80102f4:	24008a90 	.word	0x24008a90
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80102f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102fa:	7d1b      	ldrb	r3, [r3, #20]
 80102fc:	2b0a      	cmp	r3, #10
 80102fe:	d006      	beq.n	801030e <tcp_slowtmr+0x5c2>
 8010300:	4b2b      	ldr	r3, [pc, #172]	; (80103b0 <tcp_slowtmr+0x664>)
 8010302:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8010306:	492b      	ldr	r1, [pc, #172]	; (80103b4 <tcp_slowtmr+0x668>)
 8010308:	482b      	ldr	r0, [pc, #172]	; (80103b8 <tcp_slowtmr+0x66c>)
 801030a:	f008 fc29 	bl	8018b60 <iprintf>
    pcb_remove = 0;
 801030e:	2300      	movs	r3, #0
 8010310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010314:	4b29      	ldr	r3, [pc, #164]	; (80103bc <tcp_slowtmr+0x670>)
 8010316:	681a      	ldr	r2, [r3, #0]
 8010318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031a:	6a1b      	ldr	r3, [r3, #32]
 801031c:	1ad3      	subs	r3, r2, r3
 801031e:	2bf0      	cmp	r3, #240	; 0xf0
 8010320:	d904      	bls.n	801032c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8010322:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010326:	3301      	adds	r3, #1
 8010328:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801032c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010330:	2b00      	cmp	r3, #0
 8010332:	d02f      	beq.n	8010394 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010334:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010336:	f000 fc17 	bl	8010b68 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801033a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801033c:	2b00      	cmp	r3, #0
 801033e:	d010      	beq.n	8010362 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010340:	4b1f      	ldr	r3, [pc, #124]	; (80103c0 <tcp_slowtmr+0x674>)
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010346:	429a      	cmp	r2, r3
 8010348:	d106      	bne.n	8010358 <tcp_slowtmr+0x60c>
 801034a:	4b19      	ldr	r3, [pc, #100]	; (80103b0 <tcp_slowtmr+0x664>)
 801034c:	f240 52af 	movw	r2, #1455	; 0x5af
 8010350:	491c      	ldr	r1, [pc, #112]	; (80103c4 <tcp_slowtmr+0x678>)
 8010352:	4819      	ldr	r0, [pc, #100]	; (80103b8 <tcp_slowtmr+0x66c>)
 8010354:	f008 fc04 	bl	8018b60 <iprintf>
        prev->next = pcb->next;
 8010358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801035a:	68da      	ldr	r2, [r3, #12]
 801035c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801035e:	60da      	str	r2, [r3, #12]
 8010360:	e00f      	b.n	8010382 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010362:	4b17      	ldr	r3, [pc, #92]	; (80103c0 <tcp_slowtmr+0x674>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010368:	429a      	cmp	r2, r3
 801036a:	d006      	beq.n	801037a <tcp_slowtmr+0x62e>
 801036c:	4b10      	ldr	r3, [pc, #64]	; (80103b0 <tcp_slowtmr+0x664>)
 801036e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8010372:	4915      	ldr	r1, [pc, #84]	; (80103c8 <tcp_slowtmr+0x67c>)
 8010374:	4810      	ldr	r0, [pc, #64]	; (80103b8 <tcp_slowtmr+0x66c>)
 8010376:	f008 fbf3 	bl	8018b60 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801037a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801037c:	68db      	ldr	r3, [r3, #12]
 801037e:	4a10      	ldr	r2, [pc, #64]	; (80103c0 <tcp_slowtmr+0x674>)
 8010380:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010384:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8010386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010388:	68db      	ldr	r3, [r3, #12]
 801038a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801038c:	69f8      	ldr	r0, [r7, #28]
 801038e:	f7fe ff85 	bl	800f29c <tcp_free>
 8010392:	e004      	b.n	801039e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8010394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010396:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801039a:	68db      	ldr	r3, [r3, #12]
 801039c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801039e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d1a9      	bne.n	80102f8 <tcp_slowtmr+0x5ac>
    }
  }
}
 80103a4:	bf00      	nop
 80103a6:	bf00      	nop
 80103a8:	3730      	adds	r7, #48	; 0x30
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bdb0      	pop	{r4, r5, r7, pc}
 80103ae:	bf00      	nop
 80103b0:	0801a8a0 	.word	0x0801a8a0
 80103b4:	0801ad30 	.word	0x0801ad30
 80103b8:	0801a8e4 	.word	0x0801a8e4
 80103bc:	24008a80 	.word	0x24008a80
 80103c0:	24008a90 	.word	0x24008a90
 80103c4:	0801ad60 	.word	0x0801ad60
 80103c8:	0801ad88 	.word	0x0801ad88

080103cc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b082      	sub	sp, #8
 80103d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80103d2:	4b2d      	ldr	r3, [pc, #180]	; (8010488 <tcp_fasttmr+0xbc>)
 80103d4:	781b      	ldrb	r3, [r3, #0]
 80103d6:	3301      	adds	r3, #1
 80103d8:	b2da      	uxtb	r2, r3
 80103da:	4b2b      	ldr	r3, [pc, #172]	; (8010488 <tcp_fasttmr+0xbc>)
 80103dc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80103de:	4b2b      	ldr	r3, [pc, #172]	; (801048c <tcp_fasttmr+0xc0>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80103e4:	e048      	b.n	8010478 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	7f9a      	ldrb	r2, [r3, #30]
 80103ea:	4b27      	ldr	r3, [pc, #156]	; (8010488 <tcp_fasttmr+0xbc>)
 80103ec:	781b      	ldrb	r3, [r3, #0]
 80103ee:	429a      	cmp	r2, r3
 80103f0:	d03f      	beq.n	8010472 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80103f2:	4b25      	ldr	r3, [pc, #148]	; (8010488 <tcp_fasttmr+0xbc>)
 80103f4:	781a      	ldrb	r2, [r3, #0]
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	8b5b      	ldrh	r3, [r3, #26]
 80103fe:	f003 0301 	and.w	r3, r3, #1
 8010402:	2b00      	cmp	r3, #0
 8010404:	d010      	beq.n	8010428 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	8b5b      	ldrh	r3, [r3, #26]
 801040a:	f043 0302 	orr.w	r3, r3, #2
 801040e:	b29a      	uxth	r2, r3
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010414:	6878      	ldr	r0, [r7, #4]
 8010416:	f004 f813 	bl	8014440 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	8b5b      	ldrh	r3, [r3, #26]
 801041e:	f023 0303 	bic.w	r3, r3, #3
 8010422:	b29a      	uxth	r2, r3
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	8b5b      	ldrh	r3, [r3, #26]
 801042c:	f003 0308 	and.w	r3, r3, #8
 8010430:	2b00      	cmp	r3, #0
 8010432:	d009      	beq.n	8010448 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	8b5b      	ldrh	r3, [r3, #26]
 8010438:	f023 0308 	bic.w	r3, r3, #8
 801043c:	b29a      	uxth	r2, r3
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010442:	6878      	ldr	r0, [r7, #4]
 8010444:	f7ff f8be 	bl	800f5c4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	68db      	ldr	r3, [r3, #12]
 801044c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010452:	2b00      	cmp	r3, #0
 8010454:	d00a      	beq.n	801046c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010456:	4b0e      	ldr	r3, [pc, #56]	; (8010490 <tcp_fasttmr+0xc4>)
 8010458:	2200      	movs	r2, #0
 801045a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801045c:	6878      	ldr	r0, [r7, #4]
 801045e:	f000 f819 	bl	8010494 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010462:	4b0b      	ldr	r3, [pc, #44]	; (8010490 <tcp_fasttmr+0xc4>)
 8010464:	781b      	ldrb	r3, [r3, #0]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d000      	beq.n	801046c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801046a:	e7b8      	b.n	80103de <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	607b      	str	r3, [r7, #4]
 8010470:	e002      	b.n	8010478 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	68db      	ldr	r3, [r3, #12]
 8010476:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d1b3      	bne.n	80103e6 <tcp_fasttmr+0x1a>
    }
  }
}
 801047e:	bf00      	nop
 8010480:	bf00      	nop
 8010482:	3708      	adds	r7, #8
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}
 8010488:	24008a96 	.word	0x24008a96
 801048c:	24008a8c 	.word	0x24008a8c
 8010490:	24008a94 	.word	0x24008a94

08010494 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010494:	b590      	push	{r4, r7, lr}
 8010496:	b085      	sub	sp, #20
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d109      	bne.n	80104b6 <tcp_process_refused_data+0x22>
 80104a2:	4b37      	ldr	r3, [pc, #220]	; (8010580 <tcp_process_refused_data+0xec>)
 80104a4:	f240 6209 	movw	r2, #1545	; 0x609
 80104a8:	4936      	ldr	r1, [pc, #216]	; (8010584 <tcp_process_refused_data+0xf0>)
 80104aa:	4837      	ldr	r0, [pc, #220]	; (8010588 <tcp_process_refused_data+0xf4>)
 80104ac:	f008 fb58 	bl	8018b60 <iprintf>
 80104b0:	f06f 030f 	mvn.w	r3, #15
 80104b4:	e060      	b.n	8010578 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80104ba:	7b5b      	ldrb	r3, [r3, #13]
 80104bc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80104c2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	2200      	movs	r2, #0
 80104c8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d00b      	beq.n	80104ec <tcp_process_refused_data+0x58>
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	6918      	ldr	r0, [r3, #16]
 80104de:	2300      	movs	r3, #0
 80104e0:	68ba      	ldr	r2, [r7, #8]
 80104e2:	6879      	ldr	r1, [r7, #4]
 80104e4:	47a0      	blx	r4
 80104e6:	4603      	mov	r3, r0
 80104e8:	73fb      	strb	r3, [r7, #15]
 80104ea:	e007      	b.n	80104fc <tcp_process_refused_data+0x68>
 80104ec:	2300      	movs	r3, #0
 80104ee:	68ba      	ldr	r2, [r7, #8]
 80104f0:	6879      	ldr	r1, [r7, #4]
 80104f2:	2000      	movs	r0, #0
 80104f4:	f000 f8c2 	bl	801067c <tcp_recv_null>
 80104f8:	4603      	mov	r3, r0
 80104fa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80104fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d12a      	bne.n	801055a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010504:	7bbb      	ldrb	r3, [r7, #14]
 8010506:	f003 0320 	and.w	r3, r3, #32
 801050a:	2b00      	cmp	r3, #0
 801050c:	d033      	beq.n	8010576 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010512:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010516:	d005      	beq.n	8010524 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801051c:	3301      	adds	r3, #1
 801051e:	b29a      	uxth	r2, r3
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801052a:	2b00      	cmp	r3, #0
 801052c:	d00b      	beq.n	8010546 <tcp_process_refused_data+0xb2>
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	6918      	ldr	r0, [r3, #16]
 8010538:	2300      	movs	r3, #0
 801053a:	2200      	movs	r2, #0
 801053c:	6879      	ldr	r1, [r7, #4]
 801053e:	47a0      	blx	r4
 8010540:	4603      	mov	r3, r0
 8010542:	73fb      	strb	r3, [r7, #15]
 8010544:	e001      	b.n	801054a <tcp_process_refused_data+0xb6>
 8010546:	2300      	movs	r3, #0
 8010548:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801054a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801054e:	f113 0f0d 	cmn.w	r3, #13
 8010552:	d110      	bne.n	8010576 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8010554:	f06f 030c 	mvn.w	r3, #12
 8010558:	e00e      	b.n	8010578 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801055a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801055e:	f113 0f0d 	cmn.w	r3, #13
 8010562:	d102      	bne.n	801056a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010564:	f06f 030c 	mvn.w	r3, #12
 8010568:	e006      	b.n	8010578 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	68ba      	ldr	r2, [r7, #8]
 801056e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8010570:	f06f 0304 	mvn.w	r3, #4
 8010574:	e000      	b.n	8010578 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8010576:	2300      	movs	r3, #0
}
 8010578:	4618      	mov	r0, r3
 801057a:	3714      	adds	r7, #20
 801057c:	46bd      	mov	sp, r7
 801057e:	bd90      	pop	{r4, r7, pc}
 8010580:	0801a8a0 	.word	0x0801a8a0
 8010584:	0801adb0 	.word	0x0801adb0
 8010588:	0801a8e4 	.word	0x0801a8e4

0801058c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b084      	sub	sp, #16
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010594:	e007      	b.n	80105a6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801059c:	6878      	ldr	r0, [r7, #4]
 801059e:	f000 f80a 	bl	80105b6 <tcp_seg_free>
    seg = next;
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d1f4      	bne.n	8010596 <tcp_segs_free+0xa>
  }
}
 80105ac:	bf00      	nop
 80105ae:	bf00      	nop
 80105b0:	3710      	adds	r7, #16
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}

080105b6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80105b6:	b580      	push	{r7, lr}
 80105b8:	b082      	sub	sp, #8
 80105ba:	af00      	add	r7, sp, #0
 80105bc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d00c      	beq.n	80105de <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	685b      	ldr	r3, [r3, #4]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d004      	beq.n	80105d6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	685b      	ldr	r3, [r3, #4]
 80105d0:	4618      	mov	r0, r3
 80105d2:	f7fe fba7 	bl	800ed24 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80105d6:	6879      	ldr	r1, [r7, #4]
 80105d8:	2003      	movs	r0, #3
 80105da:	f7fd fcff 	bl	800dfdc <memp_free>
  }
}
 80105de:	bf00      	nop
 80105e0:	3708      	adds	r7, #8
 80105e2:	46bd      	mov	sp, r7
 80105e4:	bd80      	pop	{r7, pc}
	...

080105e8 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b082      	sub	sp, #8
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	460b      	mov	r3, r1
 80105f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d107      	bne.n	801060a <tcp_setprio+0x22>
 80105fa:	4b07      	ldr	r3, [pc, #28]	; (8010618 <tcp_setprio+0x30>)
 80105fc:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8010600:	4906      	ldr	r1, [pc, #24]	; (801061c <tcp_setprio+0x34>)
 8010602:	4807      	ldr	r0, [pc, #28]	; (8010620 <tcp_setprio+0x38>)
 8010604:	f008 faac 	bl	8018b60 <iprintf>
 8010608:	e002      	b.n	8010610 <tcp_setprio+0x28>

  pcb->prio = prio;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	78fa      	ldrb	r2, [r7, #3]
 801060e:	755a      	strb	r2, [r3, #21]
}
 8010610:	3708      	adds	r7, #8
 8010612:	46bd      	mov	sp, r7
 8010614:	bd80      	pop	{r7, pc}
 8010616:	bf00      	nop
 8010618:	0801a8a0 	.word	0x0801a8a0
 801061c:	0801add8 	.word	0x0801add8
 8010620:	0801a8e4 	.word	0x0801a8e4

08010624 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b084      	sub	sp, #16
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d106      	bne.n	8010640 <tcp_seg_copy+0x1c>
 8010632:	4b0f      	ldr	r3, [pc, #60]	; (8010670 <tcp_seg_copy+0x4c>)
 8010634:	f240 6282 	movw	r2, #1666	; 0x682
 8010638:	490e      	ldr	r1, [pc, #56]	; (8010674 <tcp_seg_copy+0x50>)
 801063a:	480f      	ldr	r0, [pc, #60]	; (8010678 <tcp_seg_copy+0x54>)
 801063c:	f008 fa90 	bl	8018b60 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010640:	2003      	movs	r0, #3
 8010642:	f7fd fc55 	bl	800def0 <memp_malloc>
 8010646:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d101      	bne.n	8010652 <tcp_seg_copy+0x2e>
    return NULL;
 801064e:	2300      	movs	r3, #0
 8010650:	e00a      	b.n	8010668 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010652:	2210      	movs	r2, #16
 8010654:	6879      	ldr	r1, [r7, #4]
 8010656:	68f8      	ldr	r0, [r7, #12]
 8010658:	f008 f9d7 	bl	8018a0a <memcpy>
  pbuf_ref(cseg->p);
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	685b      	ldr	r3, [r3, #4]
 8010660:	4618      	mov	r0, r3
 8010662:	f7fe fc05 	bl	800ee70 <pbuf_ref>
  return cseg;
 8010666:	68fb      	ldr	r3, [r7, #12]
}
 8010668:	4618      	mov	r0, r3
 801066a:	3710      	adds	r7, #16
 801066c:	46bd      	mov	sp, r7
 801066e:	bd80      	pop	{r7, pc}
 8010670:	0801a8a0 	.word	0x0801a8a0
 8010674:	0801adf4 	.word	0x0801adf4
 8010678:	0801a8e4 	.word	0x0801a8e4

0801067c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b084      	sub	sp, #16
 8010680:	af00      	add	r7, sp, #0
 8010682:	60f8      	str	r0, [r7, #12]
 8010684:	60b9      	str	r1, [r7, #8]
 8010686:	607a      	str	r2, [r7, #4]
 8010688:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d109      	bne.n	80106a4 <tcp_recv_null+0x28>
 8010690:	4b12      	ldr	r3, [pc, #72]	; (80106dc <tcp_recv_null+0x60>)
 8010692:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010696:	4912      	ldr	r1, [pc, #72]	; (80106e0 <tcp_recv_null+0x64>)
 8010698:	4812      	ldr	r0, [pc, #72]	; (80106e4 <tcp_recv_null+0x68>)
 801069a:	f008 fa61 	bl	8018b60 <iprintf>
 801069e:	f06f 030f 	mvn.w	r3, #15
 80106a2:	e016      	b.n	80106d2 <tcp_recv_null+0x56>

  if (p != NULL) {
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d009      	beq.n	80106be <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	891b      	ldrh	r3, [r3, #8]
 80106ae:	4619      	mov	r1, r3
 80106b0:	68b8      	ldr	r0, [r7, #8]
 80106b2:	f7ff fab5 	bl	800fc20 <tcp_recved>
    pbuf_free(p);
 80106b6:	6878      	ldr	r0, [r7, #4]
 80106b8:	f7fe fb34 	bl	800ed24 <pbuf_free>
 80106bc:	e008      	b.n	80106d0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80106be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d104      	bne.n	80106d0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80106c6:	68b8      	ldr	r0, [r7, #8]
 80106c8:	f7fe ffe6 	bl	800f698 <tcp_close>
 80106cc:	4603      	mov	r3, r0
 80106ce:	e000      	b.n	80106d2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80106d0:	2300      	movs	r3, #0
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	3710      	adds	r7, #16
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}
 80106da:	bf00      	nop
 80106dc:	0801a8a0 	.word	0x0801a8a0
 80106e0:	0801ae10 	.word	0x0801ae10
 80106e4:	0801a8e4 	.word	0x0801a8e4

080106e8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b086      	sub	sp, #24
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	4603      	mov	r3, r0
 80106f0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80106f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	db01      	blt.n	80106fe <tcp_kill_prio+0x16>
 80106fa:	79fb      	ldrb	r3, [r7, #7]
 80106fc:	e000      	b.n	8010700 <tcp_kill_prio+0x18>
 80106fe:	237f      	movs	r3, #127	; 0x7f
 8010700:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010702:	7afb      	ldrb	r3, [r7, #11]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d034      	beq.n	8010772 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010708:	7afb      	ldrb	r3, [r7, #11]
 801070a:	3b01      	subs	r3, #1
 801070c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801070e:	2300      	movs	r3, #0
 8010710:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010712:	2300      	movs	r3, #0
 8010714:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010716:	4b19      	ldr	r3, [pc, #100]	; (801077c <tcp_kill_prio+0x94>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	617b      	str	r3, [r7, #20]
 801071c:	e01f      	b.n	801075e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801071e:	697b      	ldr	r3, [r7, #20]
 8010720:	7d5b      	ldrb	r3, [r3, #21]
 8010722:	7afa      	ldrb	r2, [r7, #11]
 8010724:	429a      	cmp	r2, r3
 8010726:	d80c      	bhi.n	8010742 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801072c:	7afa      	ldrb	r2, [r7, #11]
 801072e:	429a      	cmp	r2, r3
 8010730:	d112      	bne.n	8010758 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010732:	4b13      	ldr	r3, [pc, #76]	; (8010780 <tcp_kill_prio+0x98>)
 8010734:	681a      	ldr	r2, [r3, #0]
 8010736:	697b      	ldr	r3, [r7, #20]
 8010738:	6a1b      	ldr	r3, [r3, #32]
 801073a:	1ad3      	subs	r3, r2, r3
 801073c:	68fa      	ldr	r2, [r7, #12]
 801073e:	429a      	cmp	r2, r3
 8010740:	d80a      	bhi.n	8010758 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010742:	4b0f      	ldr	r3, [pc, #60]	; (8010780 <tcp_kill_prio+0x98>)
 8010744:	681a      	ldr	r2, [r3, #0]
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	6a1b      	ldr	r3, [r3, #32]
 801074a:	1ad3      	subs	r3, r2, r3
 801074c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801074e:	697b      	ldr	r3, [r7, #20]
 8010750:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	7d5b      	ldrb	r3, [r3, #21]
 8010756:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	68db      	ldr	r3, [r3, #12]
 801075c:	617b      	str	r3, [r7, #20]
 801075e:	697b      	ldr	r3, [r7, #20]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d1dc      	bne.n	801071e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010764:	693b      	ldr	r3, [r7, #16]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d004      	beq.n	8010774 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801076a:	6938      	ldr	r0, [r7, #16]
 801076c:	f7ff f87e 	bl	800f86c <tcp_abort>
 8010770:	e000      	b.n	8010774 <tcp_kill_prio+0x8c>
    return;
 8010772:	bf00      	nop
  }
}
 8010774:	3718      	adds	r7, #24
 8010776:	46bd      	mov	sp, r7
 8010778:	bd80      	pop	{r7, pc}
 801077a:	bf00      	nop
 801077c:	24008a8c 	.word	0x24008a8c
 8010780:	24008a80 	.word	0x24008a80

08010784 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b086      	sub	sp, #24
 8010788:	af00      	add	r7, sp, #0
 801078a:	4603      	mov	r3, r0
 801078c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801078e:	79fb      	ldrb	r3, [r7, #7]
 8010790:	2b08      	cmp	r3, #8
 8010792:	d009      	beq.n	80107a8 <tcp_kill_state+0x24>
 8010794:	79fb      	ldrb	r3, [r7, #7]
 8010796:	2b09      	cmp	r3, #9
 8010798:	d006      	beq.n	80107a8 <tcp_kill_state+0x24>
 801079a:	4b1a      	ldr	r3, [pc, #104]	; (8010804 <tcp_kill_state+0x80>)
 801079c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80107a0:	4919      	ldr	r1, [pc, #100]	; (8010808 <tcp_kill_state+0x84>)
 80107a2:	481a      	ldr	r0, [pc, #104]	; (801080c <tcp_kill_state+0x88>)
 80107a4:	f008 f9dc 	bl	8018b60 <iprintf>

  inactivity = 0;
 80107a8:	2300      	movs	r3, #0
 80107aa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80107ac:	2300      	movs	r3, #0
 80107ae:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80107b0:	4b17      	ldr	r3, [pc, #92]	; (8010810 <tcp_kill_state+0x8c>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	617b      	str	r3, [r7, #20]
 80107b6:	e017      	b.n	80107e8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80107b8:	697b      	ldr	r3, [r7, #20]
 80107ba:	7d1b      	ldrb	r3, [r3, #20]
 80107bc:	79fa      	ldrb	r2, [r7, #7]
 80107be:	429a      	cmp	r2, r3
 80107c0:	d10f      	bne.n	80107e2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80107c2:	4b14      	ldr	r3, [pc, #80]	; (8010814 <tcp_kill_state+0x90>)
 80107c4:	681a      	ldr	r2, [r3, #0]
 80107c6:	697b      	ldr	r3, [r7, #20]
 80107c8:	6a1b      	ldr	r3, [r3, #32]
 80107ca:	1ad3      	subs	r3, r2, r3
 80107cc:	68fa      	ldr	r2, [r7, #12]
 80107ce:	429a      	cmp	r2, r3
 80107d0:	d807      	bhi.n	80107e2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80107d2:	4b10      	ldr	r3, [pc, #64]	; (8010814 <tcp_kill_state+0x90>)
 80107d4:	681a      	ldr	r2, [r3, #0]
 80107d6:	697b      	ldr	r3, [r7, #20]
 80107d8:	6a1b      	ldr	r3, [r3, #32]
 80107da:	1ad3      	subs	r3, r2, r3
 80107dc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80107e2:	697b      	ldr	r3, [r7, #20]
 80107e4:	68db      	ldr	r3, [r3, #12]
 80107e6:	617b      	str	r3, [r7, #20]
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d1e4      	bne.n	80107b8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80107ee:	693b      	ldr	r3, [r7, #16]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d003      	beq.n	80107fc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80107f4:	2100      	movs	r1, #0
 80107f6:	6938      	ldr	r0, [r7, #16]
 80107f8:	f7fe ff7a 	bl	800f6f0 <tcp_abandon>
  }
}
 80107fc:	bf00      	nop
 80107fe:	3718      	adds	r7, #24
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}
 8010804:	0801a8a0 	.word	0x0801a8a0
 8010808:	0801ae2c 	.word	0x0801ae2c
 801080c:	0801a8e4 	.word	0x0801a8e4
 8010810:	24008a8c 	.word	0x24008a8c
 8010814:	24008a80 	.word	0x24008a80

08010818 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b084      	sub	sp, #16
 801081c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801081e:	2300      	movs	r3, #0
 8010820:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010822:	2300      	movs	r3, #0
 8010824:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010826:	4b12      	ldr	r3, [pc, #72]	; (8010870 <tcp_kill_timewait+0x58>)
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	60fb      	str	r3, [r7, #12]
 801082c:	e012      	b.n	8010854 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801082e:	4b11      	ldr	r3, [pc, #68]	; (8010874 <tcp_kill_timewait+0x5c>)
 8010830:	681a      	ldr	r2, [r3, #0]
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	6a1b      	ldr	r3, [r3, #32]
 8010836:	1ad3      	subs	r3, r2, r3
 8010838:	687a      	ldr	r2, [r7, #4]
 801083a:	429a      	cmp	r2, r3
 801083c:	d807      	bhi.n	801084e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801083e:	4b0d      	ldr	r3, [pc, #52]	; (8010874 <tcp_kill_timewait+0x5c>)
 8010840:	681a      	ldr	r2, [r3, #0]
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	6a1b      	ldr	r3, [r3, #32]
 8010846:	1ad3      	subs	r3, r2, r3
 8010848:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	68db      	ldr	r3, [r3, #12]
 8010852:	60fb      	str	r3, [r7, #12]
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d1e9      	bne.n	801082e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801085a:	68bb      	ldr	r3, [r7, #8]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d002      	beq.n	8010866 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010860:	68b8      	ldr	r0, [r7, #8]
 8010862:	f7ff f803 	bl	800f86c <tcp_abort>
  }
}
 8010866:	bf00      	nop
 8010868:	3710      	adds	r7, #16
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}
 801086e:	bf00      	nop
 8010870:	24008a90 	.word	0x24008a90
 8010874:	24008a80 	.word	0x24008a80

08010878 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b082      	sub	sp, #8
 801087c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801087e:	4b10      	ldr	r3, [pc, #64]	; (80108c0 <tcp_handle_closepend+0x48>)
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010884:	e014      	b.n	80108b0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	68db      	ldr	r3, [r3, #12]
 801088a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	8b5b      	ldrh	r3, [r3, #26]
 8010890:	f003 0308 	and.w	r3, r3, #8
 8010894:	2b00      	cmp	r3, #0
 8010896:	d009      	beq.n	80108ac <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	8b5b      	ldrh	r3, [r3, #26]
 801089c:	f023 0308 	bic.w	r3, r3, #8
 80108a0:	b29a      	uxth	r2, r3
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	f7fe fe8c 	bl	800f5c4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d1e7      	bne.n	8010886 <tcp_handle_closepend+0xe>
  }
}
 80108b6:	bf00      	nop
 80108b8:	bf00      	nop
 80108ba:	3708      	adds	r7, #8
 80108bc:	46bd      	mov	sp, r7
 80108be:	bd80      	pop	{r7, pc}
 80108c0:	24008a8c 	.word	0x24008a8c

080108c4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b084      	sub	sp, #16
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	4603      	mov	r3, r0
 80108cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80108ce:	2001      	movs	r0, #1
 80108d0:	f7fd fb0e 	bl	800def0 <memp_malloc>
 80108d4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d126      	bne.n	801092a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80108dc:	f7ff ffcc 	bl	8010878 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80108e0:	f7ff ff9a 	bl	8010818 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80108e4:	2001      	movs	r0, #1
 80108e6:	f7fd fb03 	bl	800def0 <memp_malloc>
 80108ea:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d11b      	bne.n	801092a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80108f2:	2009      	movs	r0, #9
 80108f4:	f7ff ff46 	bl	8010784 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80108f8:	2001      	movs	r0, #1
 80108fa:	f7fd faf9 	bl	800def0 <memp_malloc>
 80108fe:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d111      	bne.n	801092a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010906:	2008      	movs	r0, #8
 8010908:	f7ff ff3c 	bl	8010784 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801090c:	2001      	movs	r0, #1
 801090e:	f7fd faef 	bl	800def0 <memp_malloc>
 8010912:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d107      	bne.n	801092a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801091a:	79fb      	ldrb	r3, [r7, #7]
 801091c:	4618      	mov	r0, r3
 801091e:	f7ff fee3 	bl	80106e8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010922:	2001      	movs	r0, #1
 8010924:	f7fd fae4 	bl	800def0 <memp_malloc>
 8010928:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d03f      	beq.n	80109b0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010930:	229c      	movs	r2, #156	; 0x9c
 8010932:	2100      	movs	r1, #0
 8010934:	68f8      	ldr	r0, [r7, #12]
 8010936:	f008 f876 	bl	8018a26 <memset>
    pcb->prio = prio;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	79fa      	ldrb	r2, [r7, #7]
 801093e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010946:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010950:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	22ff      	movs	r2, #255	; 0xff
 801095e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010966:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	2206      	movs	r2, #6
 801096c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	2206      	movs	r2, #6
 8010974:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801097c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	2201      	movs	r2, #1
 8010982:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010986:	4b0d      	ldr	r3, [pc, #52]	; (80109bc <tcp_alloc+0xf8>)
 8010988:	681a      	ldr	r2, [r3, #0]
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801098e:	4b0c      	ldr	r3, [pc, #48]	; (80109c0 <tcp_alloc+0xfc>)
 8010990:	781a      	ldrb	r2, [r3, #0]
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801099c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	4a08      	ldr	r2, [pc, #32]	; (80109c4 <tcp_alloc+0x100>)
 80109a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	4a07      	ldr	r2, [pc, #28]	; (80109c8 <tcp_alloc+0x104>)
 80109ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80109b0:	68fb      	ldr	r3, [r7, #12]
}
 80109b2:	4618      	mov	r0, r3
 80109b4:	3710      	adds	r7, #16
 80109b6:	46bd      	mov	sp, r7
 80109b8:	bd80      	pop	{r7, pc}
 80109ba:	bf00      	nop
 80109bc:	24008a80 	.word	0x24008a80
 80109c0:	24008a96 	.word	0x24008a96
 80109c4:	0801067d 	.word	0x0801067d
 80109c8:	006ddd00 	.word	0x006ddd00

080109cc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b084      	sub	sp, #16
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	4603      	mov	r3, r0
 80109d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80109d6:	2040      	movs	r0, #64	; 0x40
 80109d8:	f7ff ff74 	bl	80108c4 <tcp_alloc>
 80109dc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80109de:	68fb      	ldr	r3, [r7, #12]
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	3710      	adds	r7, #16
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}

080109e8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80109e8:	b480      	push	{r7}
 80109ea:	b083      	sub	sp, #12
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
 80109f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d002      	beq.n	80109fe <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	683a      	ldr	r2, [r7, #0]
 80109fc:	611a      	str	r2, [r3, #16]
  }
}
 80109fe:	bf00      	nop
 8010a00:	370c      	adds	r7, #12
 8010a02:	46bd      	mov	sp, r7
 8010a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a08:	4770      	bx	lr
	...

08010a0c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b082      	sub	sp, #8
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
 8010a14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d00e      	beq.n	8010a3a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	7d1b      	ldrb	r3, [r3, #20]
 8010a20:	2b01      	cmp	r3, #1
 8010a22:	d106      	bne.n	8010a32 <tcp_recv+0x26>
 8010a24:	4b07      	ldr	r3, [pc, #28]	; (8010a44 <tcp_recv+0x38>)
 8010a26:	f240 72df 	movw	r2, #2015	; 0x7df
 8010a2a:	4907      	ldr	r1, [pc, #28]	; (8010a48 <tcp_recv+0x3c>)
 8010a2c:	4807      	ldr	r0, [pc, #28]	; (8010a4c <tcp_recv+0x40>)
 8010a2e:	f008 f897 	bl	8018b60 <iprintf>
    pcb->recv = recv;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	683a      	ldr	r2, [r7, #0]
 8010a36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8010a3a:	bf00      	nop
 8010a3c:	3708      	adds	r7, #8
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}
 8010a42:	bf00      	nop
 8010a44:	0801a8a0 	.word	0x0801a8a0
 8010a48:	0801ae3c 	.word	0x0801ae3c
 8010a4c:	0801a8e4 	.word	0x0801a8e4

08010a50 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b082      	sub	sp, #8
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	6078      	str	r0, [r7, #4]
 8010a58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d00e      	beq.n	8010a7e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	7d1b      	ldrb	r3, [r3, #20]
 8010a64:	2b01      	cmp	r3, #1
 8010a66:	d106      	bne.n	8010a76 <tcp_sent+0x26>
 8010a68:	4b07      	ldr	r3, [pc, #28]	; (8010a88 <tcp_sent+0x38>)
 8010a6a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8010a6e:	4907      	ldr	r1, [pc, #28]	; (8010a8c <tcp_sent+0x3c>)
 8010a70:	4807      	ldr	r0, [pc, #28]	; (8010a90 <tcp_sent+0x40>)
 8010a72:	f008 f875 	bl	8018b60 <iprintf>
    pcb->sent = sent;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	683a      	ldr	r2, [r7, #0]
 8010a7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8010a7e:	bf00      	nop
 8010a80:	3708      	adds	r7, #8
 8010a82:	46bd      	mov	sp, r7
 8010a84:	bd80      	pop	{r7, pc}
 8010a86:	bf00      	nop
 8010a88:	0801a8a0 	.word	0x0801a8a0
 8010a8c:	0801ae64 	.word	0x0801ae64
 8010a90:	0801a8e4 	.word	0x0801a8e4

08010a94 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b082      	sub	sp, #8
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
 8010a9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d00e      	beq.n	8010ac2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	7d1b      	ldrb	r3, [r3, #20]
 8010aa8:	2b01      	cmp	r3, #1
 8010aaa:	d106      	bne.n	8010aba <tcp_err+0x26>
 8010aac:	4b07      	ldr	r3, [pc, #28]	; (8010acc <tcp_err+0x38>)
 8010aae:	f640 020d 	movw	r2, #2061	; 0x80d
 8010ab2:	4907      	ldr	r1, [pc, #28]	; (8010ad0 <tcp_err+0x3c>)
 8010ab4:	4807      	ldr	r0, [pc, #28]	; (8010ad4 <tcp_err+0x40>)
 8010ab6:	f008 f853 	bl	8018b60 <iprintf>
    pcb->errf = err;
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	683a      	ldr	r2, [r7, #0]
 8010abe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8010ac2:	bf00      	nop
 8010ac4:	3708      	adds	r7, #8
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	bd80      	pop	{r7, pc}
 8010aca:	bf00      	nop
 8010acc:	0801a8a0 	.word	0x0801a8a0
 8010ad0:	0801ae8c 	.word	0x0801ae8c
 8010ad4:	0801a8e4 	.word	0x0801a8e4

08010ad8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8010ad8:	b480      	push	{r7}
 8010ada:	b085      	sub	sp, #20
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
 8010ae0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d008      	beq.n	8010afa <tcp_accept+0x22>
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	7d1b      	ldrb	r3, [r3, #20]
 8010aec:	2b01      	cmp	r3, #1
 8010aee:	d104      	bne.n	8010afa <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	683a      	ldr	r2, [r7, #0]
 8010af8:	619a      	str	r2, [r3, #24]
  }
}
 8010afa:	bf00      	nop
 8010afc:	3714      	adds	r7, #20
 8010afe:	46bd      	mov	sp, r7
 8010b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b04:	4770      	bx	lr
	...

08010b08 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b084      	sub	sp, #16
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	60f8      	str	r0, [r7, #12]
 8010b10:	60b9      	str	r1, [r7, #8]
 8010b12:	4613      	mov	r3, r2
 8010b14:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d107      	bne.n	8010b2c <tcp_poll+0x24>
 8010b1c:	4b0e      	ldr	r3, [pc, #56]	; (8010b58 <tcp_poll+0x50>)
 8010b1e:	f640 023d 	movw	r2, #2109	; 0x83d
 8010b22:	490e      	ldr	r1, [pc, #56]	; (8010b5c <tcp_poll+0x54>)
 8010b24:	480e      	ldr	r0, [pc, #56]	; (8010b60 <tcp_poll+0x58>)
 8010b26:	f008 f81b 	bl	8018b60 <iprintf>
 8010b2a:	e011      	b.n	8010b50 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	7d1b      	ldrb	r3, [r3, #20]
 8010b30:	2b01      	cmp	r3, #1
 8010b32:	d106      	bne.n	8010b42 <tcp_poll+0x3a>
 8010b34:	4b08      	ldr	r3, [pc, #32]	; (8010b58 <tcp_poll+0x50>)
 8010b36:	f640 023e 	movw	r2, #2110	; 0x83e
 8010b3a:	490a      	ldr	r1, [pc, #40]	; (8010b64 <tcp_poll+0x5c>)
 8010b3c:	4808      	ldr	r0, [pc, #32]	; (8010b60 <tcp_poll+0x58>)
 8010b3e:	f008 f80f 	bl	8018b60 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	68ba      	ldr	r2, [r7, #8]
 8010b46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	79fa      	ldrb	r2, [r7, #7]
 8010b4e:	775a      	strb	r2, [r3, #29]
}
 8010b50:	3710      	adds	r7, #16
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}
 8010b56:	bf00      	nop
 8010b58:	0801a8a0 	.word	0x0801a8a0
 8010b5c:	0801aeb4 	.word	0x0801aeb4
 8010b60:	0801a8e4 	.word	0x0801a8e4
 8010b64:	0801aecc 	.word	0x0801aecc

08010b68 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b082      	sub	sp, #8
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d107      	bne.n	8010b86 <tcp_pcb_purge+0x1e>
 8010b76:	4b21      	ldr	r3, [pc, #132]	; (8010bfc <tcp_pcb_purge+0x94>)
 8010b78:	f640 0251 	movw	r2, #2129	; 0x851
 8010b7c:	4920      	ldr	r1, [pc, #128]	; (8010c00 <tcp_pcb_purge+0x98>)
 8010b7e:	4821      	ldr	r0, [pc, #132]	; (8010c04 <tcp_pcb_purge+0x9c>)
 8010b80:	f007 ffee 	bl	8018b60 <iprintf>
 8010b84:	e037      	b.n	8010bf6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	7d1b      	ldrb	r3, [r3, #20]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d033      	beq.n	8010bf6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010b92:	2b0a      	cmp	r3, #10
 8010b94:	d02f      	beq.n	8010bf6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010b9a:	2b01      	cmp	r3, #1
 8010b9c:	d02b      	beq.n	8010bf6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d007      	beq.n	8010bb6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010baa:	4618      	mov	r0, r3
 8010bac:	f7fe f8ba 	bl	800ed24 <pbuf_free>
      pcb->refused_data = NULL;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d002      	beq.n	8010bc4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	f000 f986 	bl	8010ed0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010bca:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f7ff fcdb 	bl	801058c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f7ff fcd6 	bl	801058c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	2200      	movs	r2, #0
 8010be4:	66da      	str	r2, [r3, #108]	; 0x6c
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8010bf6:	3708      	adds	r7, #8
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}
 8010bfc:	0801a8a0 	.word	0x0801a8a0
 8010c00:	0801aeec 	.word	0x0801aeec
 8010c04:	0801a8e4 	.word	0x0801a8e4

08010c08 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b084      	sub	sp, #16
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
 8010c10:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010c12:	683b      	ldr	r3, [r7, #0]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d106      	bne.n	8010c26 <tcp_pcb_remove+0x1e>
 8010c18:	4b3e      	ldr	r3, [pc, #248]	; (8010d14 <tcp_pcb_remove+0x10c>)
 8010c1a:	f640 0283 	movw	r2, #2179	; 0x883
 8010c1e:	493e      	ldr	r1, [pc, #248]	; (8010d18 <tcp_pcb_remove+0x110>)
 8010c20:	483e      	ldr	r0, [pc, #248]	; (8010d1c <tcp_pcb_remove+0x114>)
 8010c22:	f007 ff9d 	bl	8018b60 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d106      	bne.n	8010c3a <tcp_pcb_remove+0x32>
 8010c2c:	4b39      	ldr	r3, [pc, #228]	; (8010d14 <tcp_pcb_remove+0x10c>)
 8010c2e:	f640 0284 	movw	r2, #2180	; 0x884
 8010c32:	493b      	ldr	r1, [pc, #236]	; (8010d20 <tcp_pcb_remove+0x118>)
 8010c34:	4839      	ldr	r0, [pc, #228]	; (8010d1c <tcp_pcb_remove+0x114>)
 8010c36:	f007 ff93 	bl	8018b60 <iprintf>

  TCP_RMV(pcblist, pcb);
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	683a      	ldr	r2, [r7, #0]
 8010c40:	429a      	cmp	r2, r3
 8010c42:	d105      	bne.n	8010c50 <tcp_pcb_remove+0x48>
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	68da      	ldr	r2, [r3, #12]
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	601a      	str	r2, [r3, #0]
 8010c4e:	e013      	b.n	8010c78 <tcp_pcb_remove+0x70>
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	60fb      	str	r3, [r7, #12]
 8010c56:	e00c      	b.n	8010c72 <tcp_pcb_remove+0x6a>
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	68db      	ldr	r3, [r3, #12]
 8010c5c:	683a      	ldr	r2, [r7, #0]
 8010c5e:	429a      	cmp	r2, r3
 8010c60:	d104      	bne.n	8010c6c <tcp_pcb_remove+0x64>
 8010c62:	683b      	ldr	r3, [r7, #0]
 8010c64:	68da      	ldr	r2, [r3, #12]
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	60da      	str	r2, [r3, #12]
 8010c6a:	e005      	b.n	8010c78 <tcp_pcb_remove+0x70>
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	68db      	ldr	r3, [r3, #12]
 8010c70:	60fb      	str	r3, [r7, #12]
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d1ef      	bne.n	8010c58 <tcp_pcb_remove+0x50>
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010c7e:	6838      	ldr	r0, [r7, #0]
 8010c80:	f7ff ff72 	bl	8010b68 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	7d1b      	ldrb	r3, [r3, #20]
 8010c88:	2b0a      	cmp	r3, #10
 8010c8a:	d013      	beq.n	8010cb4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010c90:	2b01      	cmp	r3, #1
 8010c92:	d00f      	beq.n	8010cb4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010c94:	683b      	ldr	r3, [r7, #0]
 8010c96:	8b5b      	ldrh	r3, [r3, #26]
 8010c98:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d009      	beq.n	8010cb4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010ca0:	683b      	ldr	r3, [r7, #0]
 8010ca2:	8b5b      	ldrh	r3, [r3, #26]
 8010ca4:	f043 0302 	orr.w	r3, r3, #2
 8010ca8:	b29a      	uxth	r2, r3
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010cae:	6838      	ldr	r0, [r7, #0]
 8010cb0:	f003 fbc6 	bl	8014440 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	7d1b      	ldrb	r3, [r3, #20]
 8010cb8:	2b01      	cmp	r3, #1
 8010cba:	d020      	beq.n	8010cfe <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d006      	beq.n	8010cd2 <tcp_pcb_remove+0xca>
 8010cc4:	4b13      	ldr	r3, [pc, #76]	; (8010d14 <tcp_pcb_remove+0x10c>)
 8010cc6:	f640 0293 	movw	r2, #2195	; 0x893
 8010cca:	4916      	ldr	r1, [pc, #88]	; (8010d24 <tcp_pcb_remove+0x11c>)
 8010ccc:	4813      	ldr	r0, [pc, #76]	; (8010d1c <tcp_pcb_remove+0x114>)
 8010cce:	f007 ff47 	bl	8018b60 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010cd2:	683b      	ldr	r3, [r7, #0]
 8010cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d006      	beq.n	8010ce8 <tcp_pcb_remove+0xe0>
 8010cda:	4b0e      	ldr	r3, [pc, #56]	; (8010d14 <tcp_pcb_remove+0x10c>)
 8010cdc:	f640 0294 	movw	r2, #2196	; 0x894
 8010ce0:	4911      	ldr	r1, [pc, #68]	; (8010d28 <tcp_pcb_remove+0x120>)
 8010ce2:	480e      	ldr	r0, [pc, #56]	; (8010d1c <tcp_pcb_remove+0x114>)
 8010ce4:	f007 ff3c 	bl	8018b60 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d006      	beq.n	8010cfe <tcp_pcb_remove+0xf6>
 8010cf0:	4b08      	ldr	r3, [pc, #32]	; (8010d14 <tcp_pcb_remove+0x10c>)
 8010cf2:	f640 0296 	movw	r2, #2198	; 0x896
 8010cf6:	490d      	ldr	r1, [pc, #52]	; (8010d2c <tcp_pcb_remove+0x124>)
 8010cf8:	4808      	ldr	r0, [pc, #32]	; (8010d1c <tcp_pcb_remove+0x114>)
 8010cfa:	f007 ff31 	bl	8018b60 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	2200      	movs	r2, #0
 8010d02:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010d04:	683b      	ldr	r3, [r7, #0]
 8010d06:	2200      	movs	r2, #0
 8010d08:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010d0a:	bf00      	nop
 8010d0c:	3710      	adds	r7, #16
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	bd80      	pop	{r7, pc}
 8010d12:	bf00      	nop
 8010d14:	0801a8a0 	.word	0x0801a8a0
 8010d18:	0801af08 	.word	0x0801af08
 8010d1c:	0801a8e4 	.word	0x0801a8e4
 8010d20:	0801af24 	.word	0x0801af24
 8010d24:	0801af44 	.word	0x0801af44
 8010d28:	0801af5c 	.word	0x0801af5c
 8010d2c:	0801af78 	.word	0x0801af78

08010d30 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b082      	sub	sp, #8
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d106      	bne.n	8010d4c <tcp_next_iss+0x1c>
 8010d3e:	4b0a      	ldr	r3, [pc, #40]	; (8010d68 <tcp_next_iss+0x38>)
 8010d40:	f640 02af 	movw	r2, #2223	; 0x8af
 8010d44:	4909      	ldr	r1, [pc, #36]	; (8010d6c <tcp_next_iss+0x3c>)
 8010d46:	480a      	ldr	r0, [pc, #40]	; (8010d70 <tcp_next_iss+0x40>)
 8010d48:	f007 ff0a 	bl	8018b60 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010d4c:	4b09      	ldr	r3, [pc, #36]	; (8010d74 <tcp_next_iss+0x44>)
 8010d4e:	681a      	ldr	r2, [r3, #0]
 8010d50:	4b09      	ldr	r3, [pc, #36]	; (8010d78 <tcp_next_iss+0x48>)
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	4413      	add	r3, r2
 8010d56:	4a07      	ldr	r2, [pc, #28]	; (8010d74 <tcp_next_iss+0x44>)
 8010d58:	6013      	str	r3, [r2, #0]
  return iss;
 8010d5a:	4b06      	ldr	r3, [pc, #24]	; (8010d74 <tcp_next_iss+0x44>)
 8010d5c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	3708      	adds	r7, #8
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}
 8010d66:	bf00      	nop
 8010d68:	0801a8a0 	.word	0x0801a8a0
 8010d6c:	0801af90 	.word	0x0801af90
 8010d70:	0801a8e4 	.word	0x0801a8e4
 8010d74:	24000030 	.word	0x24000030
 8010d78:	24008a80 	.word	0x24008a80

08010d7c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b086      	sub	sp, #24
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	4603      	mov	r3, r0
 8010d84:	60b9      	str	r1, [r7, #8]
 8010d86:	607a      	str	r2, [r7, #4]
 8010d88:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d106      	bne.n	8010d9e <tcp_eff_send_mss_netif+0x22>
 8010d90:	4b14      	ldr	r3, [pc, #80]	; (8010de4 <tcp_eff_send_mss_netif+0x68>)
 8010d92:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010d96:	4914      	ldr	r1, [pc, #80]	; (8010de8 <tcp_eff_send_mss_netif+0x6c>)
 8010d98:	4814      	ldr	r0, [pc, #80]	; (8010dec <tcp_eff_send_mss_netif+0x70>)
 8010d9a:	f007 fee1 	bl	8018b60 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d101      	bne.n	8010da8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010da4:	89fb      	ldrh	r3, [r7, #14]
 8010da6:	e019      	b.n	8010ddc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010dac:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010dae:	8afb      	ldrh	r3, [r7, #22]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d012      	beq.n	8010dda <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010db4:	2328      	movs	r3, #40	; 0x28
 8010db6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010db8:	8afa      	ldrh	r2, [r7, #22]
 8010dba:	8abb      	ldrh	r3, [r7, #20]
 8010dbc:	429a      	cmp	r2, r3
 8010dbe:	d904      	bls.n	8010dca <tcp_eff_send_mss_netif+0x4e>
 8010dc0:	8afa      	ldrh	r2, [r7, #22]
 8010dc2:	8abb      	ldrh	r3, [r7, #20]
 8010dc4:	1ad3      	subs	r3, r2, r3
 8010dc6:	b29b      	uxth	r3, r3
 8010dc8:	e000      	b.n	8010dcc <tcp_eff_send_mss_netif+0x50>
 8010dca:	2300      	movs	r3, #0
 8010dcc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010dce:	8a7a      	ldrh	r2, [r7, #18]
 8010dd0:	89fb      	ldrh	r3, [r7, #14]
 8010dd2:	4293      	cmp	r3, r2
 8010dd4:	bf28      	it	cs
 8010dd6:	4613      	movcs	r3, r2
 8010dd8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010dda:	89fb      	ldrh	r3, [r7, #14]
}
 8010ddc:	4618      	mov	r0, r3
 8010dde:	3718      	adds	r7, #24
 8010de0:	46bd      	mov	sp, r7
 8010de2:	bd80      	pop	{r7, pc}
 8010de4:	0801a8a0 	.word	0x0801a8a0
 8010de8:	0801afac 	.word	0x0801afac
 8010dec:	0801a8e4 	.word	0x0801a8e4

08010df0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b084      	sub	sp, #16
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
 8010df8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8010dfa:	683b      	ldr	r3, [r7, #0]
 8010dfc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d119      	bne.n	8010e38 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8010e04:	4b10      	ldr	r3, [pc, #64]	; (8010e48 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8010e06:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8010e0a:	4910      	ldr	r1, [pc, #64]	; (8010e4c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8010e0c:	4810      	ldr	r0, [pc, #64]	; (8010e50 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8010e0e:	f007 fea7 	bl	8018b60 <iprintf>

  while (pcb != NULL) {
 8010e12:	e011      	b.n	8010e38 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	681a      	ldr	r2, [r3, #0]
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	429a      	cmp	r2, r3
 8010e1e:	d108      	bne.n	8010e32 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	68db      	ldr	r3, [r3, #12]
 8010e24:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8010e26:	68f8      	ldr	r0, [r7, #12]
 8010e28:	f7fe fd20 	bl	800f86c <tcp_abort>
      pcb = next;
 8010e2c:	68bb      	ldr	r3, [r7, #8]
 8010e2e:	60fb      	str	r3, [r7, #12]
 8010e30:	e002      	b.n	8010e38 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	68db      	ldr	r3, [r3, #12]
 8010e36:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d1ea      	bne.n	8010e14 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8010e3e:	bf00      	nop
 8010e40:	bf00      	nop
 8010e42:	3710      	adds	r7, #16
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}
 8010e48:	0801a8a0 	.word	0x0801a8a0
 8010e4c:	0801afd4 	.word	0x0801afd4
 8010e50:	0801a8e4 	.word	0x0801a8e4

08010e54 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b084      	sub	sp, #16
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
 8010e5c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d02a      	beq.n	8010eba <tcp_netif_ip_addr_changed+0x66>
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d026      	beq.n	8010eba <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010e6c:	4b15      	ldr	r3, [pc, #84]	; (8010ec4 <tcp_netif_ip_addr_changed+0x70>)
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	4619      	mov	r1, r3
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	f7ff ffbc 	bl	8010df0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010e78:	4b13      	ldr	r3, [pc, #76]	; (8010ec8 <tcp_netif_ip_addr_changed+0x74>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	4619      	mov	r1, r3
 8010e7e:	6878      	ldr	r0, [r7, #4]
 8010e80:	f7ff ffb6 	bl	8010df0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010e84:	683b      	ldr	r3, [r7, #0]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d017      	beq.n	8010eba <tcp_netif_ip_addr_changed+0x66>
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d013      	beq.n	8010eba <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010e92:	4b0e      	ldr	r3, [pc, #56]	; (8010ecc <tcp_netif_ip_addr_changed+0x78>)
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	60fb      	str	r3, [r7, #12]
 8010e98:	e00c      	b.n	8010eb4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	681a      	ldr	r2, [r3, #0]
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	429a      	cmp	r2, r3
 8010ea4:	d103      	bne.n	8010eae <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010ea6:	683b      	ldr	r3, [r7, #0]
 8010ea8:	681a      	ldr	r2, [r3, #0]
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	68db      	ldr	r3, [r3, #12]
 8010eb2:	60fb      	str	r3, [r7, #12]
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d1ef      	bne.n	8010e9a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010eba:	bf00      	nop
 8010ebc:	3710      	adds	r7, #16
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd80      	pop	{r7, pc}
 8010ec2:	bf00      	nop
 8010ec4:	24008a8c 	.word	0x24008a8c
 8010ec8:	24008a84 	.word	0x24008a84
 8010ecc:	24008a88 	.word	0x24008a88

08010ed0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b082      	sub	sp, #8
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d007      	beq.n	8010ef0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f7ff fb51 	bl	801058c <tcp_segs_free>
    pcb->ooseq = NULL;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2200      	movs	r2, #0
 8010eee:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010ef0:	bf00      	nop
 8010ef2:	3708      	adds	r7, #8
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}

08010ef8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010ef8:	b590      	push	{r4, r7, lr}
 8010efa:	b08d      	sub	sp, #52	; 0x34
 8010efc:	af04      	add	r7, sp, #16
 8010efe:	6078      	str	r0, [r7, #4]
 8010f00:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d105      	bne.n	8010f14 <tcp_input+0x1c>
 8010f08:	4b9b      	ldr	r3, [pc, #620]	; (8011178 <tcp_input+0x280>)
 8010f0a:	2283      	movs	r2, #131	; 0x83
 8010f0c:	499b      	ldr	r1, [pc, #620]	; (801117c <tcp_input+0x284>)
 8010f0e:	489c      	ldr	r0, [pc, #624]	; (8011180 <tcp_input+0x288>)
 8010f10:	f007 fe26 	bl	8018b60 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	685b      	ldr	r3, [r3, #4]
 8010f18:	4a9a      	ldr	r2, [pc, #616]	; (8011184 <tcp_input+0x28c>)
 8010f1a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	895b      	ldrh	r3, [r3, #10]
 8010f20:	2b13      	cmp	r3, #19
 8010f22:	f240 83d1 	bls.w	80116c8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010f26:	4b98      	ldr	r3, [pc, #608]	; (8011188 <tcp_input+0x290>)
 8010f28:	695b      	ldr	r3, [r3, #20]
 8010f2a:	4a97      	ldr	r2, [pc, #604]	; (8011188 <tcp_input+0x290>)
 8010f2c:	6812      	ldr	r2, [r2, #0]
 8010f2e:	4611      	mov	r1, r2
 8010f30:	4618      	mov	r0, r3
 8010f32:	f006 fbf5 	bl	8017720 <ip4_addr_isbroadcast_u32>
 8010f36:	4603      	mov	r3, r0
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	f040 83c7 	bne.w	80116cc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010f3e:	4b92      	ldr	r3, [pc, #584]	; (8011188 <tcp_input+0x290>)
 8010f40:	695b      	ldr	r3, [r3, #20]
 8010f42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010f46:	2be0      	cmp	r3, #224	; 0xe0
 8010f48:	f000 83c0 	beq.w	80116cc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010f4c:	4b8d      	ldr	r3, [pc, #564]	; (8011184 <tcp_input+0x28c>)
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	899b      	ldrh	r3, [r3, #12]
 8010f52:	b29b      	uxth	r3, r3
 8010f54:	4618      	mov	r0, r3
 8010f56:	f7fc fa05 	bl	800d364 <lwip_htons>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	0b1b      	lsrs	r3, r3, #12
 8010f5e:	b29b      	uxth	r3, r3
 8010f60:	b2db      	uxtb	r3, r3
 8010f62:	009b      	lsls	r3, r3, #2
 8010f64:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010f66:	7cbb      	ldrb	r3, [r7, #18]
 8010f68:	2b13      	cmp	r3, #19
 8010f6a:	f240 83b1 	bls.w	80116d0 <tcp_input+0x7d8>
 8010f6e:	7cbb      	ldrb	r3, [r7, #18]
 8010f70:	b29a      	uxth	r2, r3
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	891b      	ldrh	r3, [r3, #8]
 8010f76:	429a      	cmp	r2, r3
 8010f78:	f200 83aa 	bhi.w	80116d0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010f7c:	7cbb      	ldrb	r3, [r7, #18]
 8010f7e:	b29b      	uxth	r3, r3
 8010f80:	3b14      	subs	r3, #20
 8010f82:	b29a      	uxth	r2, r3
 8010f84:	4b81      	ldr	r3, [pc, #516]	; (801118c <tcp_input+0x294>)
 8010f86:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010f88:	4b81      	ldr	r3, [pc, #516]	; (8011190 <tcp_input+0x298>)
 8010f8a:	2200      	movs	r2, #0
 8010f8c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	895a      	ldrh	r2, [r3, #10]
 8010f92:	7cbb      	ldrb	r3, [r7, #18]
 8010f94:	b29b      	uxth	r3, r3
 8010f96:	429a      	cmp	r2, r3
 8010f98:	d309      	bcc.n	8010fae <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010f9a:	4b7c      	ldr	r3, [pc, #496]	; (801118c <tcp_input+0x294>)
 8010f9c:	881a      	ldrh	r2, [r3, #0]
 8010f9e:	4b7d      	ldr	r3, [pc, #500]	; (8011194 <tcp_input+0x29c>)
 8010fa0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010fa2:	7cbb      	ldrb	r3, [r7, #18]
 8010fa4:	4619      	mov	r1, r3
 8010fa6:	6878      	ldr	r0, [r7, #4]
 8010fa8:	f7fd fe36 	bl	800ec18 <pbuf_remove_header>
 8010fac:	e04e      	b.n	801104c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d105      	bne.n	8010fc2 <tcp_input+0xca>
 8010fb6:	4b70      	ldr	r3, [pc, #448]	; (8011178 <tcp_input+0x280>)
 8010fb8:	22c2      	movs	r2, #194	; 0xc2
 8010fba:	4977      	ldr	r1, [pc, #476]	; (8011198 <tcp_input+0x2a0>)
 8010fbc:	4870      	ldr	r0, [pc, #448]	; (8011180 <tcp_input+0x288>)
 8010fbe:	f007 fdcf 	bl	8018b60 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010fc2:	2114      	movs	r1, #20
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f7fd fe27 	bl	800ec18 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	895a      	ldrh	r2, [r3, #10]
 8010fce:	4b71      	ldr	r3, [pc, #452]	; (8011194 <tcp_input+0x29c>)
 8010fd0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010fd2:	4b6e      	ldr	r3, [pc, #440]	; (801118c <tcp_input+0x294>)
 8010fd4:	881a      	ldrh	r2, [r3, #0]
 8010fd6:	4b6f      	ldr	r3, [pc, #444]	; (8011194 <tcp_input+0x29c>)
 8010fd8:	881b      	ldrh	r3, [r3, #0]
 8010fda:	1ad3      	subs	r3, r2, r3
 8010fdc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010fde:	4b6d      	ldr	r3, [pc, #436]	; (8011194 <tcp_input+0x29c>)
 8010fe0:	881b      	ldrh	r3, [r3, #0]
 8010fe2:	4619      	mov	r1, r3
 8010fe4:	6878      	ldr	r0, [r7, #4]
 8010fe6:	f7fd fe17 	bl	800ec18 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	895b      	ldrh	r3, [r3, #10]
 8010ff0:	8a3a      	ldrh	r2, [r7, #16]
 8010ff2:	429a      	cmp	r2, r3
 8010ff4:	f200 836e 	bhi.w	80116d4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	685b      	ldr	r3, [r3, #4]
 8010ffe:	4a64      	ldr	r2, [pc, #400]	; (8011190 <tcp_input+0x298>)
 8011000:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	8a3a      	ldrh	r2, [r7, #16]
 8011008:	4611      	mov	r1, r2
 801100a:	4618      	mov	r0, r3
 801100c:	f7fd fe04 	bl	800ec18 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	891a      	ldrh	r2, [r3, #8]
 8011014:	8a3b      	ldrh	r3, [r7, #16]
 8011016:	1ad3      	subs	r3, r2, r3
 8011018:	b29a      	uxth	r2, r3
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	895b      	ldrh	r3, [r3, #10]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d005      	beq.n	8011032 <tcp_input+0x13a>
 8011026:	4b54      	ldr	r3, [pc, #336]	; (8011178 <tcp_input+0x280>)
 8011028:	22df      	movs	r2, #223	; 0xdf
 801102a:	495c      	ldr	r1, [pc, #368]	; (801119c <tcp_input+0x2a4>)
 801102c:	4854      	ldr	r0, [pc, #336]	; (8011180 <tcp_input+0x288>)
 801102e:	f007 fd97 	bl	8018b60 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	891a      	ldrh	r2, [r3, #8]
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	891b      	ldrh	r3, [r3, #8]
 801103c:	429a      	cmp	r2, r3
 801103e:	d005      	beq.n	801104c <tcp_input+0x154>
 8011040:	4b4d      	ldr	r3, [pc, #308]	; (8011178 <tcp_input+0x280>)
 8011042:	22e0      	movs	r2, #224	; 0xe0
 8011044:	4956      	ldr	r1, [pc, #344]	; (80111a0 <tcp_input+0x2a8>)
 8011046:	484e      	ldr	r0, [pc, #312]	; (8011180 <tcp_input+0x288>)
 8011048:	f007 fd8a 	bl	8018b60 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801104c:	4b4d      	ldr	r3, [pc, #308]	; (8011184 <tcp_input+0x28c>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	881b      	ldrh	r3, [r3, #0]
 8011052:	b29b      	uxth	r3, r3
 8011054:	4a4b      	ldr	r2, [pc, #300]	; (8011184 <tcp_input+0x28c>)
 8011056:	6814      	ldr	r4, [r2, #0]
 8011058:	4618      	mov	r0, r3
 801105a:	f7fc f983 	bl	800d364 <lwip_htons>
 801105e:	4603      	mov	r3, r0
 8011060:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011062:	4b48      	ldr	r3, [pc, #288]	; (8011184 <tcp_input+0x28c>)
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	885b      	ldrh	r3, [r3, #2]
 8011068:	b29b      	uxth	r3, r3
 801106a:	4a46      	ldr	r2, [pc, #280]	; (8011184 <tcp_input+0x28c>)
 801106c:	6814      	ldr	r4, [r2, #0]
 801106e:	4618      	mov	r0, r3
 8011070:	f7fc f978 	bl	800d364 <lwip_htons>
 8011074:	4603      	mov	r3, r0
 8011076:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011078:	4b42      	ldr	r3, [pc, #264]	; (8011184 <tcp_input+0x28c>)
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	685b      	ldr	r3, [r3, #4]
 801107e:	4a41      	ldr	r2, [pc, #260]	; (8011184 <tcp_input+0x28c>)
 8011080:	6814      	ldr	r4, [r2, #0]
 8011082:	4618      	mov	r0, r3
 8011084:	f7fc f983 	bl	800d38e <lwip_htonl>
 8011088:	4603      	mov	r3, r0
 801108a:	6063      	str	r3, [r4, #4]
 801108c:	6863      	ldr	r3, [r4, #4]
 801108e:	4a45      	ldr	r2, [pc, #276]	; (80111a4 <tcp_input+0x2ac>)
 8011090:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011092:	4b3c      	ldr	r3, [pc, #240]	; (8011184 <tcp_input+0x28c>)
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	689b      	ldr	r3, [r3, #8]
 8011098:	4a3a      	ldr	r2, [pc, #232]	; (8011184 <tcp_input+0x28c>)
 801109a:	6814      	ldr	r4, [r2, #0]
 801109c:	4618      	mov	r0, r3
 801109e:	f7fc f976 	bl	800d38e <lwip_htonl>
 80110a2:	4603      	mov	r3, r0
 80110a4:	60a3      	str	r3, [r4, #8]
 80110a6:	68a3      	ldr	r3, [r4, #8]
 80110a8:	4a3f      	ldr	r2, [pc, #252]	; (80111a8 <tcp_input+0x2b0>)
 80110aa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80110ac:	4b35      	ldr	r3, [pc, #212]	; (8011184 <tcp_input+0x28c>)
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	89db      	ldrh	r3, [r3, #14]
 80110b2:	b29b      	uxth	r3, r3
 80110b4:	4a33      	ldr	r2, [pc, #204]	; (8011184 <tcp_input+0x28c>)
 80110b6:	6814      	ldr	r4, [r2, #0]
 80110b8:	4618      	mov	r0, r3
 80110ba:	f7fc f953 	bl	800d364 <lwip_htons>
 80110be:	4603      	mov	r3, r0
 80110c0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80110c2:	4b30      	ldr	r3, [pc, #192]	; (8011184 <tcp_input+0x28c>)
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	899b      	ldrh	r3, [r3, #12]
 80110c8:	b29b      	uxth	r3, r3
 80110ca:	4618      	mov	r0, r3
 80110cc:	f7fc f94a 	bl	800d364 <lwip_htons>
 80110d0:	4603      	mov	r3, r0
 80110d2:	b2db      	uxtb	r3, r3
 80110d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80110d8:	b2da      	uxtb	r2, r3
 80110da:	4b34      	ldr	r3, [pc, #208]	; (80111ac <tcp_input+0x2b4>)
 80110dc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	891a      	ldrh	r2, [r3, #8]
 80110e2:	4b33      	ldr	r3, [pc, #204]	; (80111b0 <tcp_input+0x2b8>)
 80110e4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80110e6:	4b31      	ldr	r3, [pc, #196]	; (80111ac <tcp_input+0x2b4>)
 80110e8:	781b      	ldrb	r3, [r3, #0]
 80110ea:	f003 0303 	and.w	r3, r3, #3
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d00c      	beq.n	801110c <tcp_input+0x214>
    tcplen++;
 80110f2:	4b2f      	ldr	r3, [pc, #188]	; (80111b0 <tcp_input+0x2b8>)
 80110f4:	881b      	ldrh	r3, [r3, #0]
 80110f6:	3301      	adds	r3, #1
 80110f8:	b29a      	uxth	r2, r3
 80110fa:	4b2d      	ldr	r3, [pc, #180]	; (80111b0 <tcp_input+0x2b8>)
 80110fc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	891a      	ldrh	r2, [r3, #8]
 8011102:	4b2b      	ldr	r3, [pc, #172]	; (80111b0 <tcp_input+0x2b8>)
 8011104:	881b      	ldrh	r3, [r3, #0]
 8011106:	429a      	cmp	r2, r3
 8011108:	f200 82e6 	bhi.w	80116d8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801110c:	2300      	movs	r3, #0
 801110e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011110:	4b28      	ldr	r3, [pc, #160]	; (80111b4 <tcp_input+0x2bc>)
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	61fb      	str	r3, [r7, #28]
 8011116:	e09d      	b.n	8011254 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011118:	69fb      	ldr	r3, [r7, #28]
 801111a:	7d1b      	ldrb	r3, [r3, #20]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d105      	bne.n	801112c <tcp_input+0x234>
 8011120:	4b15      	ldr	r3, [pc, #84]	; (8011178 <tcp_input+0x280>)
 8011122:	22fb      	movs	r2, #251	; 0xfb
 8011124:	4924      	ldr	r1, [pc, #144]	; (80111b8 <tcp_input+0x2c0>)
 8011126:	4816      	ldr	r0, [pc, #88]	; (8011180 <tcp_input+0x288>)
 8011128:	f007 fd1a 	bl	8018b60 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801112c:	69fb      	ldr	r3, [r7, #28]
 801112e:	7d1b      	ldrb	r3, [r3, #20]
 8011130:	2b0a      	cmp	r3, #10
 8011132:	d105      	bne.n	8011140 <tcp_input+0x248>
 8011134:	4b10      	ldr	r3, [pc, #64]	; (8011178 <tcp_input+0x280>)
 8011136:	22fc      	movs	r2, #252	; 0xfc
 8011138:	4920      	ldr	r1, [pc, #128]	; (80111bc <tcp_input+0x2c4>)
 801113a:	4811      	ldr	r0, [pc, #68]	; (8011180 <tcp_input+0x288>)
 801113c:	f007 fd10 	bl	8018b60 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011140:	69fb      	ldr	r3, [r7, #28]
 8011142:	7d1b      	ldrb	r3, [r3, #20]
 8011144:	2b01      	cmp	r3, #1
 8011146:	d105      	bne.n	8011154 <tcp_input+0x25c>
 8011148:	4b0b      	ldr	r3, [pc, #44]	; (8011178 <tcp_input+0x280>)
 801114a:	22fd      	movs	r2, #253	; 0xfd
 801114c:	491c      	ldr	r1, [pc, #112]	; (80111c0 <tcp_input+0x2c8>)
 801114e:	480c      	ldr	r0, [pc, #48]	; (8011180 <tcp_input+0x288>)
 8011150:	f007 fd06 	bl	8018b60 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011154:	69fb      	ldr	r3, [r7, #28]
 8011156:	7a1b      	ldrb	r3, [r3, #8]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d033      	beq.n	80111c4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801115c:	69fb      	ldr	r3, [r7, #28]
 801115e:	7a1a      	ldrb	r2, [r3, #8]
 8011160:	4b09      	ldr	r3, [pc, #36]	; (8011188 <tcp_input+0x290>)
 8011162:	685b      	ldr	r3, [r3, #4]
 8011164:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011168:	3301      	adds	r3, #1
 801116a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801116c:	429a      	cmp	r2, r3
 801116e:	d029      	beq.n	80111c4 <tcp_input+0x2cc>
      prev = pcb;
 8011170:	69fb      	ldr	r3, [r7, #28]
 8011172:	61bb      	str	r3, [r7, #24]
      continue;
 8011174:	e06b      	b.n	801124e <tcp_input+0x356>
 8011176:	bf00      	nop
 8011178:	0801b008 	.word	0x0801b008
 801117c:	0801b03c 	.word	0x0801b03c
 8011180:	0801b054 	.word	0x0801b054
 8011184:	24008aa8 	.word	0x24008aa8
 8011188:	24005980 	.word	0x24005980
 801118c:	24008aac 	.word	0x24008aac
 8011190:	24008ab0 	.word	0x24008ab0
 8011194:	24008aae 	.word	0x24008aae
 8011198:	0801b07c 	.word	0x0801b07c
 801119c:	0801b08c 	.word	0x0801b08c
 80111a0:	0801b098 	.word	0x0801b098
 80111a4:	24008ab8 	.word	0x24008ab8
 80111a8:	24008abc 	.word	0x24008abc
 80111ac:	24008ac4 	.word	0x24008ac4
 80111b0:	24008ac2 	.word	0x24008ac2
 80111b4:	24008a8c 	.word	0x24008a8c
 80111b8:	0801b0b8 	.word	0x0801b0b8
 80111bc:	0801b0e0 	.word	0x0801b0e0
 80111c0:	0801b10c 	.word	0x0801b10c
    }

    if (pcb->remote_port == tcphdr->src &&
 80111c4:	69fb      	ldr	r3, [r7, #28]
 80111c6:	8b1a      	ldrh	r2, [r3, #24]
 80111c8:	4b72      	ldr	r3, [pc, #456]	; (8011394 <tcp_input+0x49c>)
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	881b      	ldrh	r3, [r3, #0]
 80111ce:	b29b      	uxth	r3, r3
 80111d0:	429a      	cmp	r2, r3
 80111d2:	d13a      	bne.n	801124a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80111d4:	69fb      	ldr	r3, [r7, #28]
 80111d6:	8ada      	ldrh	r2, [r3, #22]
 80111d8:	4b6e      	ldr	r3, [pc, #440]	; (8011394 <tcp_input+0x49c>)
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	885b      	ldrh	r3, [r3, #2]
 80111de:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80111e0:	429a      	cmp	r2, r3
 80111e2:	d132      	bne.n	801124a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80111e4:	69fb      	ldr	r3, [r7, #28]
 80111e6:	685a      	ldr	r2, [r3, #4]
 80111e8:	4b6b      	ldr	r3, [pc, #428]	; (8011398 <tcp_input+0x4a0>)
 80111ea:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80111ec:	429a      	cmp	r2, r3
 80111ee:	d12c      	bne.n	801124a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80111f0:	69fb      	ldr	r3, [r7, #28]
 80111f2:	681a      	ldr	r2, [r3, #0]
 80111f4:	4b68      	ldr	r3, [pc, #416]	; (8011398 <tcp_input+0x4a0>)
 80111f6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80111f8:	429a      	cmp	r2, r3
 80111fa:	d126      	bne.n	801124a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80111fc:	69fb      	ldr	r3, [r7, #28]
 80111fe:	68db      	ldr	r3, [r3, #12]
 8011200:	69fa      	ldr	r2, [r7, #28]
 8011202:	429a      	cmp	r2, r3
 8011204:	d106      	bne.n	8011214 <tcp_input+0x31c>
 8011206:	4b65      	ldr	r3, [pc, #404]	; (801139c <tcp_input+0x4a4>)
 8011208:	f240 120d 	movw	r2, #269	; 0x10d
 801120c:	4964      	ldr	r1, [pc, #400]	; (80113a0 <tcp_input+0x4a8>)
 801120e:	4865      	ldr	r0, [pc, #404]	; (80113a4 <tcp_input+0x4ac>)
 8011210:	f007 fca6 	bl	8018b60 <iprintf>
      if (prev != NULL) {
 8011214:	69bb      	ldr	r3, [r7, #24]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d00a      	beq.n	8011230 <tcp_input+0x338>
        prev->next = pcb->next;
 801121a:	69fb      	ldr	r3, [r7, #28]
 801121c:	68da      	ldr	r2, [r3, #12]
 801121e:	69bb      	ldr	r3, [r7, #24]
 8011220:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011222:	4b61      	ldr	r3, [pc, #388]	; (80113a8 <tcp_input+0x4b0>)
 8011224:	681a      	ldr	r2, [r3, #0]
 8011226:	69fb      	ldr	r3, [r7, #28]
 8011228:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801122a:	4a5f      	ldr	r2, [pc, #380]	; (80113a8 <tcp_input+0x4b0>)
 801122c:	69fb      	ldr	r3, [r7, #28]
 801122e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011230:	69fb      	ldr	r3, [r7, #28]
 8011232:	68db      	ldr	r3, [r3, #12]
 8011234:	69fa      	ldr	r2, [r7, #28]
 8011236:	429a      	cmp	r2, r3
 8011238:	d111      	bne.n	801125e <tcp_input+0x366>
 801123a:	4b58      	ldr	r3, [pc, #352]	; (801139c <tcp_input+0x4a4>)
 801123c:	f240 1215 	movw	r2, #277	; 0x115
 8011240:	495a      	ldr	r1, [pc, #360]	; (80113ac <tcp_input+0x4b4>)
 8011242:	4858      	ldr	r0, [pc, #352]	; (80113a4 <tcp_input+0x4ac>)
 8011244:	f007 fc8c 	bl	8018b60 <iprintf>
      break;
 8011248:	e009      	b.n	801125e <tcp_input+0x366>
    }
    prev = pcb;
 801124a:	69fb      	ldr	r3, [r7, #28]
 801124c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801124e:	69fb      	ldr	r3, [r7, #28]
 8011250:	68db      	ldr	r3, [r3, #12]
 8011252:	61fb      	str	r3, [r7, #28]
 8011254:	69fb      	ldr	r3, [r7, #28]
 8011256:	2b00      	cmp	r3, #0
 8011258:	f47f af5e 	bne.w	8011118 <tcp_input+0x220>
 801125c:	e000      	b.n	8011260 <tcp_input+0x368>
      break;
 801125e:	bf00      	nop
  }

  if (pcb == NULL) {
 8011260:	69fb      	ldr	r3, [r7, #28]
 8011262:	2b00      	cmp	r3, #0
 8011264:	f040 80aa 	bne.w	80113bc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011268:	4b51      	ldr	r3, [pc, #324]	; (80113b0 <tcp_input+0x4b8>)
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	61fb      	str	r3, [r7, #28]
 801126e:	e03f      	b.n	80112f0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011270:	69fb      	ldr	r3, [r7, #28]
 8011272:	7d1b      	ldrb	r3, [r3, #20]
 8011274:	2b0a      	cmp	r3, #10
 8011276:	d006      	beq.n	8011286 <tcp_input+0x38e>
 8011278:	4b48      	ldr	r3, [pc, #288]	; (801139c <tcp_input+0x4a4>)
 801127a:	f240 121f 	movw	r2, #287	; 0x11f
 801127e:	494d      	ldr	r1, [pc, #308]	; (80113b4 <tcp_input+0x4bc>)
 8011280:	4848      	ldr	r0, [pc, #288]	; (80113a4 <tcp_input+0x4ac>)
 8011282:	f007 fc6d 	bl	8018b60 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011286:	69fb      	ldr	r3, [r7, #28]
 8011288:	7a1b      	ldrb	r3, [r3, #8]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d009      	beq.n	80112a2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801128e:	69fb      	ldr	r3, [r7, #28]
 8011290:	7a1a      	ldrb	r2, [r3, #8]
 8011292:	4b41      	ldr	r3, [pc, #260]	; (8011398 <tcp_input+0x4a0>)
 8011294:	685b      	ldr	r3, [r3, #4]
 8011296:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801129a:	3301      	adds	r3, #1
 801129c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801129e:	429a      	cmp	r2, r3
 80112a0:	d122      	bne.n	80112e8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80112a2:	69fb      	ldr	r3, [r7, #28]
 80112a4:	8b1a      	ldrh	r2, [r3, #24]
 80112a6:	4b3b      	ldr	r3, [pc, #236]	; (8011394 <tcp_input+0x49c>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	881b      	ldrh	r3, [r3, #0]
 80112ac:	b29b      	uxth	r3, r3
 80112ae:	429a      	cmp	r2, r3
 80112b0:	d11b      	bne.n	80112ea <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80112b2:	69fb      	ldr	r3, [r7, #28]
 80112b4:	8ada      	ldrh	r2, [r3, #22]
 80112b6:	4b37      	ldr	r3, [pc, #220]	; (8011394 <tcp_input+0x49c>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	885b      	ldrh	r3, [r3, #2]
 80112bc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80112be:	429a      	cmp	r2, r3
 80112c0:	d113      	bne.n	80112ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80112c2:	69fb      	ldr	r3, [r7, #28]
 80112c4:	685a      	ldr	r2, [r3, #4]
 80112c6:	4b34      	ldr	r3, [pc, #208]	; (8011398 <tcp_input+0x4a0>)
 80112c8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80112ca:	429a      	cmp	r2, r3
 80112cc:	d10d      	bne.n	80112ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80112ce:	69fb      	ldr	r3, [r7, #28]
 80112d0:	681a      	ldr	r2, [r3, #0]
 80112d2:	4b31      	ldr	r3, [pc, #196]	; (8011398 <tcp_input+0x4a0>)
 80112d4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80112d6:	429a      	cmp	r2, r3
 80112d8:	d107      	bne.n	80112ea <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80112da:	69f8      	ldr	r0, [r7, #28]
 80112dc:	f000 fb56 	bl	801198c <tcp_timewait_input>
        }
        pbuf_free(p);
 80112e0:	6878      	ldr	r0, [r7, #4]
 80112e2:	f7fd fd1f 	bl	800ed24 <pbuf_free>
        return;
 80112e6:	e1fd      	b.n	80116e4 <tcp_input+0x7ec>
        continue;
 80112e8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80112ea:	69fb      	ldr	r3, [r7, #28]
 80112ec:	68db      	ldr	r3, [r3, #12]
 80112ee:	61fb      	str	r3, [r7, #28]
 80112f0:	69fb      	ldr	r3, [r7, #28]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d1bc      	bne.n	8011270 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80112f6:	2300      	movs	r3, #0
 80112f8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80112fa:	4b2f      	ldr	r3, [pc, #188]	; (80113b8 <tcp_input+0x4c0>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	617b      	str	r3, [r7, #20]
 8011300:	e02a      	b.n	8011358 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011302:	697b      	ldr	r3, [r7, #20]
 8011304:	7a1b      	ldrb	r3, [r3, #8]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d00c      	beq.n	8011324 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801130a:	697b      	ldr	r3, [r7, #20]
 801130c:	7a1a      	ldrb	r2, [r3, #8]
 801130e:	4b22      	ldr	r3, [pc, #136]	; (8011398 <tcp_input+0x4a0>)
 8011310:	685b      	ldr	r3, [r3, #4]
 8011312:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011316:	3301      	adds	r3, #1
 8011318:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801131a:	429a      	cmp	r2, r3
 801131c:	d002      	beq.n	8011324 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801131e:	697b      	ldr	r3, [r7, #20]
 8011320:	61bb      	str	r3, [r7, #24]
        continue;
 8011322:	e016      	b.n	8011352 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8011324:	697b      	ldr	r3, [r7, #20]
 8011326:	8ada      	ldrh	r2, [r3, #22]
 8011328:	4b1a      	ldr	r3, [pc, #104]	; (8011394 <tcp_input+0x49c>)
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	885b      	ldrh	r3, [r3, #2]
 801132e:	b29b      	uxth	r3, r3
 8011330:	429a      	cmp	r2, r3
 8011332:	d10c      	bne.n	801134e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011334:	697b      	ldr	r3, [r7, #20]
 8011336:	681a      	ldr	r2, [r3, #0]
 8011338:	4b17      	ldr	r3, [pc, #92]	; (8011398 <tcp_input+0x4a0>)
 801133a:	695b      	ldr	r3, [r3, #20]
 801133c:	429a      	cmp	r2, r3
 801133e:	d00f      	beq.n	8011360 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011340:	697b      	ldr	r3, [r7, #20]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d00d      	beq.n	8011362 <tcp_input+0x46a>
 8011346:	697b      	ldr	r3, [r7, #20]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d009      	beq.n	8011362 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801134e:	697b      	ldr	r3, [r7, #20]
 8011350:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011352:	697b      	ldr	r3, [r7, #20]
 8011354:	68db      	ldr	r3, [r3, #12]
 8011356:	617b      	str	r3, [r7, #20]
 8011358:	697b      	ldr	r3, [r7, #20]
 801135a:	2b00      	cmp	r3, #0
 801135c:	d1d1      	bne.n	8011302 <tcp_input+0x40a>
 801135e:	e000      	b.n	8011362 <tcp_input+0x46a>
            break;
 8011360:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011362:	697b      	ldr	r3, [r7, #20]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d029      	beq.n	80113bc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011368:	69bb      	ldr	r3, [r7, #24]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d00a      	beq.n	8011384 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	68da      	ldr	r2, [r3, #12]
 8011372:	69bb      	ldr	r3, [r7, #24]
 8011374:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011376:	4b10      	ldr	r3, [pc, #64]	; (80113b8 <tcp_input+0x4c0>)
 8011378:	681a      	ldr	r2, [r3, #0]
 801137a:	697b      	ldr	r3, [r7, #20]
 801137c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801137e:	4a0e      	ldr	r2, [pc, #56]	; (80113b8 <tcp_input+0x4c0>)
 8011380:	697b      	ldr	r3, [r7, #20]
 8011382:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011384:	6978      	ldr	r0, [r7, #20]
 8011386:	f000 fa03 	bl	8011790 <tcp_listen_input>
      }
      pbuf_free(p);
 801138a:	6878      	ldr	r0, [r7, #4]
 801138c:	f7fd fcca 	bl	800ed24 <pbuf_free>
      return;
 8011390:	e1a8      	b.n	80116e4 <tcp_input+0x7ec>
 8011392:	bf00      	nop
 8011394:	24008aa8 	.word	0x24008aa8
 8011398:	24005980 	.word	0x24005980
 801139c:	0801b008 	.word	0x0801b008
 80113a0:	0801b134 	.word	0x0801b134
 80113a4:	0801b054 	.word	0x0801b054
 80113a8:	24008a8c 	.word	0x24008a8c
 80113ac:	0801b160 	.word	0x0801b160
 80113b0:	24008a90 	.word	0x24008a90
 80113b4:	0801b18c 	.word	0x0801b18c
 80113b8:	24008a88 	.word	0x24008a88
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80113bc:	69fb      	ldr	r3, [r7, #28]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	f000 8158 	beq.w	8011674 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80113c4:	4b95      	ldr	r3, [pc, #596]	; (801161c <tcp_input+0x724>)
 80113c6:	2200      	movs	r2, #0
 80113c8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	891a      	ldrh	r2, [r3, #8]
 80113ce:	4b93      	ldr	r3, [pc, #588]	; (801161c <tcp_input+0x724>)
 80113d0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80113d2:	4a92      	ldr	r2, [pc, #584]	; (801161c <tcp_input+0x724>)
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80113d8:	4b91      	ldr	r3, [pc, #580]	; (8011620 <tcp_input+0x728>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	4a8f      	ldr	r2, [pc, #572]	; (801161c <tcp_input+0x724>)
 80113de:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80113e0:	4b90      	ldr	r3, [pc, #576]	; (8011624 <tcp_input+0x72c>)
 80113e2:	2200      	movs	r2, #0
 80113e4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80113e6:	4b90      	ldr	r3, [pc, #576]	; (8011628 <tcp_input+0x730>)
 80113e8:	2200      	movs	r2, #0
 80113ea:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80113ec:	4b8f      	ldr	r3, [pc, #572]	; (801162c <tcp_input+0x734>)
 80113ee:	2200      	movs	r2, #0
 80113f0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80113f2:	4b8f      	ldr	r3, [pc, #572]	; (8011630 <tcp_input+0x738>)
 80113f4:	781b      	ldrb	r3, [r3, #0]
 80113f6:	f003 0308 	and.w	r3, r3, #8
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d006      	beq.n	801140c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	7b5b      	ldrb	r3, [r3, #13]
 8011402:	f043 0301 	orr.w	r3, r3, #1
 8011406:	b2da      	uxtb	r2, r3
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801140c:	69fb      	ldr	r3, [r7, #28]
 801140e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011410:	2b00      	cmp	r3, #0
 8011412:	d017      	beq.n	8011444 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011414:	69f8      	ldr	r0, [r7, #28]
 8011416:	f7ff f83d 	bl	8010494 <tcp_process_refused_data>
 801141a:	4603      	mov	r3, r0
 801141c:	f113 0f0d 	cmn.w	r3, #13
 8011420:	d007      	beq.n	8011432 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011422:	69fb      	ldr	r3, [r7, #28]
 8011424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011426:	2b00      	cmp	r3, #0
 8011428:	d00c      	beq.n	8011444 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801142a:	4b82      	ldr	r3, [pc, #520]	; (8011634 <tcp_input+0x73c>)
 801142c:	881b      	ldrh	r3, [r3, #0]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d008      	beq.n	8011444 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8011432:	69fb      	ldr	r3, [r7, #28]
 8011434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011436:	2b00      	cmp	r3, #0
 8011438:	f040 80e3 	bne.w	8011602 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801143c:	69f8      	ldr	r0, [r7, #28]
 801143e:	f003 fe05 	bl	801504c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8011442:	e0de      	b.n	8011602 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8011444:	4a7c      	ldr	r2, [pc, #496]	; (8011638 <tcp_input+0x740>)
 8011446:	69fb      	ldr	r3, [r7, #28]
 8011448:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801144a:	69f8      	ldr	r0, [r7, #28]
 801144c:	f000 fb18 	bl	8011a80 <tcp_process>
 8011450:	4603      	mov	r3, r0
 8011452:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011454:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011458:	f113 0f0d 	cmn.w	r3, #13
 801145c:	f000 80d3 	beq.w	8011606 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8011460:	4b71      	ldr	r3, [pc, #452]	; (8011628 <tcp_input+0x730>)
 8011462:	781b      	ldrb	r3, [r3, #0]
 8011464:	f003 0308 	and.w	r3, r3, #8
 8011468:	2b00      	cmp	r3, #0
 801146a:	d015      	beq.n	8011498 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801146c:	69fb      	ldr	r3, [r7, #28]
 801146e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011472:	2b00      	cmp	r3, #0
 8011474:	d008      	beq.n	8011488 <tcp_input+0x590>
 8011476:	69fb      	ldr	r3, [r7, #28]
 8011478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801147c:	69fa      	ldr	r2, [r7, #28]
 801147e:	6912      	ldr	r2, [r2, #16]
 8011480:	f06f 010d 	mvn.w	r1, #13
 8011484:	4610      	mov	r0, r2
 8011486:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011488:	69f9      	ldr	r1, [r7, #28]
 801148a:	486c      	ldr	r0, [pc, #432]	; (801163c <tcp_input+0x744>)
 801148c:	f7ff fbbc 	bl	8010c08 <tcp_pcb_remove>
        tcp_free(pcb);
 8011490:	69f8      	ldr	r0, [r7, #28]
 8011492:	f7fd ff03 	bl	800f29c <tcp_free>
 8011496:	e0da      	b.n	801164e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8011498:	2300      	movs	r3, #0
 801149a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801149c:	4b63      	ldr	r3, [pc, #396]	; (801162c <tcp_input+0x734>)
 801149e:	881b      	ldrh	r3, [r3, #0]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d01d      	beq.n	80114e0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80114a4:	4b61      	ldr	r3, [pc, #388]	; (801162c <tcp_input+0x734>)
 80114a6:	881b      	ldrh	r3, [r3, #0]
 80114a8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80114aa:	69fb      	ldr	r3, [r7, #28]
 80114ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d00a      	beq.n	80114ca <tcp_input+0x5d2>
 80114b4:	69fb      	ldr	r3, [r7, #28]
 80114b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80114ba:	69fa      	ldr	r2, [r7, #28]
 80114bc:	6910      	ldr	r0, [r2, #16]
 80114be:	89fa      	ldrh	r2, [r7, #14]
 80114c0:	69f9      	ldr	r1, [r7, #28]
 80114c2:	4798      	blx	r3
 80114c4:	4603      	mov	r3, r0
 80114c6:	74fb      	strb	r3, [r7, #19]
 80114c8:	e001      	b.n	80114ce <tcp_input+0x5d6>
 80114ca:	2300      	movs	r3, #0
 80114cc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80114ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80114d2:	f113 0f0d 	cmn.w	r3, #13
 80114d6:	f000 8098 	beq.w	801160a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80114da:	4b54      	ldr	r3, [pc, #336]	; (801162c <tcp_input+0x734>)
 80114dc:	2200      	movs	r2, #0
 80114de:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80114e0:	69f8      	ldr	r0, [r7, #28]
 80114e2:	f000 f915 	bl	8011710 <tcp_input_delayed_close>
 80114e6:	4603      	mov	r3, r0
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	f040 8090 	bne.w	801160e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80114ee:	4b4d      	ldr	r3, [pc, #308]	; (8011624 <tcp_input+0x72c>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d041      	beq.n	801157a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80114f6:	69fb      	ldr	r3, [r7, #28]
 80114f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d006      	beq.n	801150c <tcp_input+0x614>
 80114fe:	4b50      	ldr	r3, [pc, #320]	; (8011640 <tcp_input+0x748>)
 8011500:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011504:	494f      	ldr	r1, [pc, #316]	; (8011644 <tcp_input+0x74c>)
 8011506:	4850      	ldr	r0, [pc, #320]	; (8011648 <tcp_input+0x750>)
 8011508:	f007 fb2a 	bl	8018b60 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801150c:	69fb      	ldr	r3, [r7, #28]
 801150e:	8b5b      	ldrh	r3, [r3, #26]
 8011510:	f003 0310 	and.w	r3, r3, #16
 8011514:	2b00      	cmp	r3, #0
 8011516:	d008      	beq.n	801152a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011518:	4b42      	ldr	r3, [pc, #264]	; (8011624 <tcp_input+0x72c>)
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	4618      	mov	r0, r3
 801151e:	f7fd fc01 	bl	800ed24 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8011522:	69f8      	ldr	r0, [r7, #28]
 8011524:	f7fe f9a2 	bl	800f86c <tcp_abort>
            goto aborted;
 8011528:	e091      	b.n	801164e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801152a:	69fb      	ldr	r3, [r7, #28]
 801152c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011530:	2b00      	cmp	r3, #0
 8011532:	d00c      	beq.n	801154e <tcp_input+0x656>
 8011534:	69fb      	ldr	r3, [r7, #28]
 8011536:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801153a:	69fb      	ldr	r3, [r7, #28]
 801153c:	6918      	ldr	r0, [r3, #16]
 801153e:	4b39      	ldr	r3, [pc, #228]	; (8011624 <tcp_input+0x72c>)
 8011540:	681a      	ldr	r2, [r3, #0]
 8011542:	2300      	movs	r3, #0
 8011544:	69f9      	ldr	r1, [r7, #28]
 8011546:	47a0      	blx	r4
 8011548:	4603      	mov	r3, r0
 801154a:	74fb      	strb	r3, [r7, #19]
 801154c:	e008      	b.n	8011560 <tcp_input+0x668>
 801154e:	4b35      	ldr	r3, [pc, #212]	; (8011624 <tcp_input+0x72c>)
 8011550:	681a      	ldr	r2, [r3, #0]
 8011552:	2300      	movs	r3, #0
 8011554:	69f9      	ldr	r1, [r7, #28]
 8011556:	2000      	movs	r0, #0
 8011558:	f7ff f890 	bl	801067c <tcp_recv_null>
 801155c:	4603      	mov	r3, r0
 801155e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011560:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011564:	f113 0f0d 	cmn.w	r3, #13
 8011568:	d053      	beq.n	8011612 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801156a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d003      	beq.n	801157a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8011572:	4b2c      	ldr	r3, [pc, #176]	; (8011624 <tcp_input+0x72c>)
 8011574:	681a      	ldr	r2, [r3, #0]
 8011576:	69fb      	ldr	r3, [r7, #28]
 8011578:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801157a:	4b2b      	ldr	r3, [pc, #172]	; (8011628 <tcp_input+0x730>)
 801157c:	781b      	ldrb	r3, [r3, #0]
 801157e:	f003 0320 	and.w	r3, r3, #32
 8011582:	2b00      	cmp	r3, #0
 8011584:	d030      	beq.n	80115e8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8011586:	69fb      	ldr	r3, [r7, #28]
 8011588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801158a:	2b00      	cmp	r3, #0
 801158c:	d009      	beq.n	80115a2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801158e:	69fb      	ldr	r3, [r7, #28]
 8011590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011592:	7b5a      	ldrb	r2, [r3, #13]
 8011594:	69fb      	ldr	r3, [r7, #28]
 8011596:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011598:	f042 0220 	orr.w	r2, r2, #32
 801159c:	b2d2      	uxtb	r2, r2
 801159e:	735a      	strb	r2, [r3, #13]
 80115a0:	e022      	b.n	80115e8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80115a2:	69fb      	ldr	r3, [r7, #28]
 80115a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80115a6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80115aa:	d005      	beq.n	80115b8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80115ac:	69fb      	ldr	r3, [r7, #28]
 80115ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80115b0:	3301      	adds	r3, #1
 80115b2:	b29a      	uxth	r2, r3
 80115b4:	69fb      	ldr	r3, [r7, #28]
 80115b6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80115b8:	69fb      	ldr	r3, [r7, #28]
 80115ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d00b      	beq.n	80115da <tcp_input+0x6e2>
 80115c2:	69fb      	ldr	r3, [r7, #28]
 80115c4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80115c8:	69fb      	ldr	r3, [r7, #28]
 80115ca:	6918      	ldr	r0, [r3, #16]
 80115cc:	2300      	movs	r3, #0
 80115ce:	2200      	movs	r2, #0
 80115d0:	69f9      	ldr	r1, [r7, #28]
 80115d2:	47a0      	blx	r4
 80115d4:	4603      	mov	r3, r0
 80115d6:	74fb      	strb	r3, [r7, #19]
 80115d8:	e001      	b.n	80115de <tcp_input+0x6e6>
 80115da:	2300      	movs	r3, #0
 80115dc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80115de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80115e2:	f113 0f0d 	cmn.w	r3, #13
 80115e6:	d016      	beq.n	8011616 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80115e8:	4b13      	ldr	r3, [pc, #76]	; (8011638 <tcp_input+0x740>)
 80115ea:	2200      	movs	r2, #0
 80115ec:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80115ee:	69f8      	ldr	r0, [r7, #28]
 80115f0:	f000 f88e 	bl	8011710 <tcp_input_delayed_close>
 80115f4:	4603      	mov	r3, r0
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d128      	bne.n	801164c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80115fa:	69f8      	ldr	r0, [r7, #28]
 80115fc:	f002 ff20 	bl	8014440 <tcp_output>
 8011600:	e025      	b.n	801164e <tcp_input+0x756>
        goto aborted;
 8011602:	bf00      	nop
 8011604:	e023      	b.n	801164e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011606:	bf00      	nop
 8011608:	e021      	b.n	801164e <tcp_input+0x756>
              goto aborted;
 801160a:	bf00      	nop
 801160c:	e01f      	b.n	801164e <tcp_input+0x756>
          goto aborted;
 801160e:	bf00      	nop
 8011610:	e01d      	b.n	801164e <tcp_input+0x756>
            goto aborted;
 8011612:	bf00      	nop
 8011614:	e01b      	b.n	801164e <tcp_input+0x756>
              goto aborted;
 8011616:	bf00      	nop
 8011618:	e019      	b.n	801164e <tcp_input+0x756>
 801161a:	bf00      	nop
 801161c:	24008a98 	.word	0x24008a98
 8011620:	24008aa8 	.word	0x24008aa8
 8011624:	24008ac8 	.word	0x24008ac8
 8011628:	24008ac5 	.word	0x24008ac5
 801162c:	24008ac0 	.word	0x24008ac0
 8011630:	24008ac4 	.word	0x24008ac4
 8011634:	24008ac2 	.word	0x24008ac2
 8011638:	24008acc 	.word	0x24008acc
 801163c:	24008a8c 	.word	0x24008a8c
 8011640:	0801b008 	.word	0x0801b008
 8011644:	0801b1bc 	.word	0x0801b1bc
 8011648:	0801b054 	.word	0x0801b054
          goto aborted;
 801164c:	bf00      	nop
    tcp_input_pcb = NULL;
 801164e:	4b27      	ldr	r3, [pc, #156]	; (80116ec <tcp_input+0x7f4>)
 8011650:	2200      	movs	r2, #0
 8011652:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011654:	4b26      	ldr	r3, [pc, #152]	; (80116f0 <tcp_input+0x7f8>)
 8011656:	2200      	movs	r2, #0
 8011658:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801165a:	4b26      	ldr	r3, [pc, #152]	; (80116f4 <tcp_input+0x7fc>)
 801165c:	685b      	ldr	r3, [r3, #4]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d03f      	beq.n	80116e2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8011662:	4b24      	ldr	r3, [pc, #144]	; (80116f4 <tcp_input+0x7fc>)
 8011664:	685b      	ldr	r3, [r3, #4]
 8011666:	4618      	mov	r0, r3
 8011668:	f7fd fb5c 	bl	800ed24 <pbuf_free>
      inseg.p = NULL;
 801166c:	4b21      	ldr	r3, [pc, #132]	; (80116f4 <tcp_input+0x7fc>)
 801166e:	2200      	movs	r2, #0
 8011670:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011672:	e036      	b.n	80116e2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011674:	4b20      	ldr	r3, [pc, #128]	; (80116f8 <tcp_input+0x800>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	899b      	ldrh	r3, [r3, #12]
 801167a:	b29b      	uxth	r3, r3
 801167c:	4618      	mov	r0, r3
 801167e:	f7fb fe71 	bl	800d364 <lwip_htons>
 8011682:	4603      	mov	r3, r0
 8011684:	b2db      	uxtb	r3, r3
 8011686:	f003 0304 	and.w	r3, r3, #4
 801168a:	2b00      	cmp	r3, #0
 801168c:	d118      	bne.n	80116c0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801168e:	4b1b      	ldr	r3, [pc, #108]	; (80116fc <tcp_input+0x804>)
 8011690:	6819      	ldr	r1, [r3, #0]
 8011692:	4b1b      	ldr	r3, [pc, #108]	; (8011700 <tcp_input+0x808>)
 8011694:	881b      	ldrh	r3, [r3, #0]
 8011696:	461a      	mov	r2, r3
 8011698:	4b1a      	ldr	r3, [pc, #104]	; (8011704 <tcp_input+0x80c>)
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801169e:	4b16      	ldr	r3, [pc, #88]	; (80116f8 <tcp_input+0x800>)
 80116a0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80116a2:	885b      	ldrh	r3, [r3, #2]
 80116a4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80116a6:	4a14      	ldr	r2, [pc, #80]	; (80116f8 <tcp_input+0x800>)
 80116a8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80116aa:	8812      	ldrh	r2, [r2, #0]
 80116ac:	b292      	uxth	r2, r2
 80116ae:	9202      	str	r2, [sp, #8]
 80116b0:	9301      	str	r3, [sp, #4]
 80116b2:	4b15      	ldr	r3, [pc, #84]	; (8011708 <tcp_input+0x810>)
 80116b4:	9300      	str	r3, [sp, #0]
 80116b6:	4b15      	ldr	r3, [pc, #84]	; (801170c <tcp_input+0x814>)
 80116b8:	4602      	mov	r2, r0
 80116ba:	2000      	movs	r0, #0
 80116bc:	f003 fc74 	bl	8014fa8 <tcp_rst>
    pbuf_free(p);
 80116c0:	6878      	ldr	r0, [r7, #4]
 80116c2:	f7fd fb2f 	bl	800ed24 <pbuf_free>
  return;
 80116c6:	e00c      	b.n	80116e2 <tcp_input+0x7ea>
    goto dropped;
 80116c8:	bf00      	nop
 80116ca:	e006      	b.n	80116da <tcp_input+0x7e2>
    goto dropped;
 80116cc:	bf00      	nop
 80116ce:	e004      	b.n	80116da <tcp_input+0x7e2>
    goto dropped;
 80116d0:	bf00      	nop
 80116d2:	e002      	b.n	80116da <tcp_input+0x7e2>
      goto dropped;
 80116d4:	bf00      	nop
 80116d6:	e000      	b.n	80116da <tcp_input+0x7e2>
      goto dropped;
 80116d8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80116da:	6878      	ldr	r0, [r7, #4]
 80116dc:	f7fd fb22 	bl	800ed24 <pbuf_free>
 80116e0:	e000      	b.n	80116e4 <tcp_input+0x7ec>
  return;
 80116e2:	bf00      	nop
}
 80116e4:	3724      	adds	r7, #36	; 0x24
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd90      	pop	{r4, r7, pc}
 80116ea:	bf00      	nop
 80116ec:	24008acc 	.word	0x24008acc
 80116f0:	24008ac8 	.word	0x24008ac8
 80116f4:	24008a98 	.word	0x24008a98
 80116f8:	24008aa8 	.word	0x24008aa8
 80116fc:	24008abc 	.word	0x24008abc
 8011700:	24008ac2 	.word	0x24008ac2
 8011704:	24008ab8 	.word	0x24008ab8
 8011708:	24005990 	.word	0x24005990
 801170c:	24005994 	.word	0x24005994

08011710 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b082      	sub	sp, #8
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d106      	bne.n	801172c <tcp_input_delayed_close+0x1c>
 801171e:	4b17      	ldr	r3, [pc, #92]	; (801177c <tcp_input_delayed_close+0x6c>)
 8011720:	f240 225a 	movw	r2, #602	; 0x25a
 8011724:	4916      	ldr	r1, [pc, #88]	; (8011780 <tcp_input_delayed_close+0x70>)
 8011726:	4817      	ldr	r0, [pc, #92]	; (8011784 <tcp_input_delayed_close+0x74>)
 8011728:	f007 fa1a 	bl	8018b60 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801172c:	4b16      	ldr	r3, [pc, #88]	; (8011788 <tcp_input_delayed_close+0x78>)
 801172e:	781b      	ldrb	r3, [r3, #0]
 8011730:	f003 0310 	and.w	r3, r3, #16
 8011734:	2b00      	cmp	r3, #0
 8011736:	d01c      	beq.n	8011772 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	8b5b      	ldrh	r3, [r3, #26]
 801173c:	f003 0310 	and.w	r3, r3, #16
 8011740:	2b00      	cmp	r3, #0
 8011742:	d10d      	bne.n	8011760 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801174a:	2b00      	cmp	r3, #0
 801174c:	d008      	beq.n	8011760 <tcp_input_delayed_close+0x50>
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011754:	687a      	ldr	r2, [r7, #4]
 8011756:	6912      	ldr	r2, [r2, #16]
 8011758:	f06f 010e 	mvn.w	r1, #14
 801175c:	4610      	mov	r0, r2
 801175e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011760:	6879      	ldr	r1, [r7, #4]
 8011762:	480a      	ldr	r0, [pc, #40]	; (801178c <tcp_input_delayed_close+0x7c>)
 8011764:	f7ff fa50 	bl	8010c08 <tcp_pcb_remove>
    tcp_free(pcb);
 8011768:	6878      	ldr	r0, [r7, #4]
 801176a:	f7fd fd97 	bl	800f29c <tcp_free>
    return 1;
 801176e:	2301      	movs	r3, #1
 8011770:	e000      	b.n	8011774 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8011772:	2300      	movs	r3, #0
}
 8011774:	4618      	mov	r0, r3
 8011776:	3708      	adds	r7, #8
 8011778:	46bd      	mov	sp, r7
 801177a:	bd80      	pop	{r7, pc}
 801177c:	0801b008 	.word	0x0801b008
 8011780:	0801b1d8 	.word	0x0801b1d8
 8011784:	0801b054 	.word	0x0801b054
 8011788:	24008ac5 	.word	0x24008ac5
 801178c:	24008a8c 	.word	0x24008a8c

08011790 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011790:	b590      	push	{r4, r7, lr}
 8011792:	b08b      	sub	sp, #44	; 0x2c
 8011794:	af04      	add	r7, sp, #16
 8011796:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011798:	4b6f      	ldr	r3, [pc, #444]	; (8011958 <tcp_listen_input+0x1c8>)
 801179a:	781b      	ldrb	r3, [r3, #0]
 801179c:	f003 0304 	and.w	r3, r3, #4
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	f040 80d2 	bne.w	801194a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d106      	bne.n	80117ba <tcp_listen_input+0x2a>
 80117ac:	4b6b      	ldr	r3, [pc, #428]	; (801195c <tcp_listen_input+0x1cc>)
 80117ae:	f240 2281 	movw	r2, #641	; 0x281
 80117b2:	496b      	ldr	r1, [pc, #428]	; (8011960 <tcp_listen_input+0x1d0>)
 80117b4:	486b      	ldr	r0, [pc, #428]	; (8011964 <tcp_listen_input+0x1d4>)
 80117b6:	f007 f9d3 	bl	8018b60 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80117ba:	4b67      	ldr	r3, [pc, #412]	; (8011958 <tcp_listen_input+0x1c8>)
 80117bc:	781b      	ldrb	r3, [r3, #0]
 80117be:	f003 0310 	and.w	r3, r3, #16
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d019      	beq.n	80117fa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117c6:	4b68      	ldr	r3, [pc, #416]	; (8011968 <tcp_listen_input+0x1d8>)
 80117c8:	6819      	ldr	r1, [r3, #0]
 80117ca:	4b68      	ldr	r3, [pc, #416]	; (801196c <tcp_listen_input+0x1dc>)
 80117cc:	881b      	ldrh	r3, [r3, #0]
 80117ce:	461a      	mov	r2, r3
 80117d0:	4b67      	ldr	r3, [pc, #412]	; (8011970 <tcp_listen_input+0x1e0>)
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80117d6:	4b67      	ldr	r3, [pc, #412]	; (8011974 <tcp_listen_input+0x1e4>)
 80117d8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117da:	885b      	ldrh	r3, [r3, #2]
 80117dc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80117de:	4a65      	ldr	r2, [pc, #404]	; (8011974 <tcp_listen_input+0x1e4>)
 80117e0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80117e2:	8812      	ldrh	r2, [r2, #0]
 80117e4:	b292      	uxth	r2, r2
 80117e6:	9202      	str	r2, [sp, #8]
 80117e8:	9301      	str	r3, [sp, #4]
 80117ea:	4b63      	ldr	r3, [pc, #396]	; (8011978 <tcp_listen_input+0x1e8>)
 80117ec:	9300      	str	r3, [sp, #0]
 80117ee:	4b63      	ldr	r3, [pc, #396]	; (801197c <tcp_listen_input+0x1ec>)
 80117f0:	4602      	mov	r2, r0
 80117f2:	6878      	ldr	r0, [r7, #4]
 80117f4:	f003 fbd8 	bl	8014fa8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80117f8:	e0a9      	b.n	801194e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80117fa:	4b57      	ldr	r3, [pc, #348]	; (8011958 <tcp_listen_input+0x1c8>)
 80117fc:	781b      	ldrb	r3, [r3, #0]
 80117fe:	f003 0302 	and.w	r3, r3, #2
 8011802:	2b00      	cmp	r3, #0
 8011804:	f000 80a3 	beq.w	801194e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	7d5b      	ldrb	r3, [r3, #21]
 801180c:	4618      	mov	r0, r3
 801180e:	f7ff f859 	bl	80108c4 <tcp_alloc>
 8011812:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011814:	697b      	ldr	r3, [r7, #20]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d111      	bne.n	801183e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	699b      	ldr	r3, [r3, #24]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d00a      	beq.n	8011838 <tcp_listen_input+0xa8>
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	699b      	ldr	r3, [r3, #24]
 8011826:	687a      	ldr	r2, [r7, #4]
 8011828:	6910      	ldr	r0, [r2, #16]
 801182a:	f04f 32ff 	mov.w	r2, #4294967295
 801182e:	2100      	movs	r1, #0
 8011830:	4798      	blx	r3
 8011832:	4603      	mov	r3, r0
 8011834:	73bb      	strb	r3, [r7, #14]
      return;
 8011836:	e08b      	b.n	8011950 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011838:	23f0      	movs	r3, #240	; 0xf0
 801183a:	73bb      	strb	r3, [r7, #14]
      return;
 801183c:	e088      	b.n	8011950 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801183e:	4b50      	ldr	r3, [pc, #320]	; (8011980 <tcp_listen_input+0x1f0>)
 8011840:	695a      	ldr	r2, [r3, #20]
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011846:	4b4e      	ldr	r3, [pc, #312]	; (8011980 <tcp_listen_input+0x1f0>)
 8011848:	691a      	ldr	r2, [r3, #16]
 801184a:	697b      	ldr	r3, [r7, #20]
 801184c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	8ada      	ldrh	r2, [r3, #22]
 8011852:	697b      	ldr	r3, [r7, #20]
 8011854:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011856:	4b47      	ldr	r3, [pc, #284]	; (8011974 <tcp_listen_input+0x1e4>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	881b      	ldrh	r3, [r3, #0]
 801185c:	b29a      	uxth	r2, r3
 801185e:	697b      	ldr	r3, [r7, #20]
 8011860:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	2203      	movs	r2, #3
 8011866:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011868:	4b41      	ldr	r3, [pc, #260]	; (8011970 <tcp_listen_input+0x1e0>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	1c5a      	adds	r2, r3, #1
 801186e:	697b      	ldr	r3, [r7, #20]
 8011870:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011876:	697b      	ldr	r3, [r7, #20]
 8011878:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801187a:	6978      	ldr	r0, [r7, #20]
 801187c:	f7ff fa58 	bl	8010d30 <tcp_next_iss>
 8011880:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011882:	697b      	ldr	r3, [r7, #20]
 8011884:	693a      	ldr	r2, [r7, #16]
 8011886:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011888:	697b      	ldr	r3, [r7, #20]
 801188a:	693a      	ldr	r2, [r7, #16]
 801188c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801188e:	697b      	ldr	r3, [r7, #20]
 8011890:	693a      	ldr	r2, [r7, #16]
 8011892:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011894:	697b      	ldr	r3, [r7, #20]
 8011896:	693a      	ldr	r2, [r7, #16]
 8011898:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801189a:	4b35      	ldr	r3, [pc, #212]	; (8011970 <tcp_listen_input+0x1e0>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	1e5a      	subs	r2, r3, #1
 80118a0:	697b      	ldr	r3, [r7, #20]
 80118a2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	691a      	ldr	r2, [r3, #16]
 80118a8:	697b      	ldr	r3, [r7, #20]
 80118aa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80118ac:	697b      	ldr	r3, [r7, #20]
 80118ae:	687a      	ldr	r2, [r7, #4]
 80118b0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	7a5b      	ldrb	r3, [r3, #9]
 80118b6:	f003 030c 	and.w	r3, r3, #12
 80118ba:	b2da      	uxtb	r2, r3
 80118bc:	697b      	ldr	r3, [r7, #20]
 80118be:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	7a1a      	ldrb	r2, [r3, #8]
 80118c4:	697b      	ldr	r3, [r7, #20]
 80118c6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80118c8:	4b2e      	ldr	r3, [pc, #184]	; (8011984 <tcp_listen_input+0x1f4>)
 80118ca:	681a      	ldr	r2, [r3, #0]
 80118cc:	697b      	ldr	r3, [r7, #20]
 80118ce:	60da      	str	r2, [r3, #12]
 80118d0:	4a2c      	ldr	r2, [pc, #176]	; (8011984 <tcp_listen_input+0x1f4>)
 80118d2:	697b      	ldr	r3, [r7, #20]
 80118d4:	6013      	str	r3, [r2, #0]
 80118d6:	f003 fd29 	bl	801532c <tcp_timer_needed>
 80118da:	4b2b      	ldr	r3, [pc, #172]	; (8011988 <tcp_listen_input+0x1f8>)
 80118dc:	2201      	movs	r2, #1
 80118de:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80118e0:	6978      	ldr	r0, [r7, #20]
 80118e2:	f001 fd8f 	bl	8013404 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80118e6:	4b23      	ldr	r3, [pc, #140]	; (8011974 <tcp_listen_input+0x1e4>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	89db      	ldrh	r3, [r3, #14]
 80118ec:	b29a      	uxth	r2, r3
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80118f4:	697b      	ldr	r3, [r7, #20]
 80118f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80118fa:	697b      	ldr	r3, [r7, #20]
 80118fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011900:	697b      	ldr	r3, [r7, #20]
 8011902:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011904:	697b      	ldr	r3, [r7, #20]
 8011906:	3304      	adds	r3, #4
 8011908:	4618      	mov	r0, r3
 801190a:	f005 fc73 	bl	80171f4 <ip4_route>
 801190e:	4601      	mov	r1, r0
 8011910:	697b      	ldr	r3, [r7, #20]
 8011912:	3304      	adds	r3, #4
 8011914:	461a      	mov	r2, r3
 8011916:	4620      	mov	r0, r4
 8011918:	f7ff fa30 	bl	8010d7c <tcp_eff_send_mss_netif>
 801191c:	4603      	mov	r3, r0
 801191e:	461a      	mov	r2, r3
 8011920:	697b      	ldr	r3, [r7, #20]
 8011922:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011924:	2112      	movs	r1, #18
 8011926:	6978      	ldr	r0, [r7, #20]
 8011928:	f002 fc9c 	bl	8014264 <tcp_enqueue_flags>
 801192c:	4603      	mov	r3, r0
 801192e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d004      	beq.n	8011942 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011938:	2100      	movs	r1, #0
 801193a:	6978      	ldr	r0, [r7, #20]
 801193c:	f7fd fed8 	bl	800f6f0 <tcp_abandon>
      return;
 8011940:	e006      	b.n	8011950 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011942:	6978      	ldr	r0, [r7, #20]
 8011944:	f002 fd7c 	bl	8014440 <tcp_output>
  return;
 8011948:	e001      	b.n	801194e <tcp_listen_input+0x1be>
    return;
 801194a:	bf00      	nop
 801194c:	e000      	b.n	8011950 <tcp_listen_input+0x1c0>
  return;
 801194e:	bf00      	nop
}
 8011950:	371c      	adds	r7, #28
 8011952:	46bd      	mov	sp, r7
 8011954:	bd90      	pop	{r4, r7, pc}
 8011956:	bf00      	nop
 8011958:	24008ac4 	.word	0x24008ac4
 801195c:	0801b008 	.word	0x0801b008
 8011960:	0801b200 	.word	0x0801b200
 8011964:	0801b054 	.word	0x0801b054
 8011968:	24008abc 	.word	0x24008abc
 801196c:	24008ac2 	.word	0x24008ac2
 8011970:	24008ab8 	.word	0x24008ab8
 8011974:	24008aa8 	.word	0x24008aa8
 8011978:	24005990 	.word	0x24005990
 801197c:	24005994 	.word	0x24005994
 8011980:	24005980 	.word	0x24005980
 8011984:	24008a8c 	.word	0x24008a8c
 8011988:	24008a94 	.word	0x24008a94

0801198c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b086      	sub	sp, #24
 8011990:	af04      	add	r7, sp, #16
 8011992:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011994:	4b2f      	ldr	r3, [pc, #188]	; (8011a54 <tcp_timewait_input+0xc8>)
 8011996:	781b      	ldrb	r3, [r3, #0]
 8011998:	f003 0304 	and.w	r3, r3, #4
 801199c:	2b00      	cmp	r3, #0
 801199e:	d153      	bne.n	8011a48 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d106      	bne.n	80119b4 <tcp_timewait_input+0x28>
 80119a6:	4b2c      	ldr	r3, [pc, #176]	; (8011a58 <tcp_timewait_input+0xcc>)
 80119a8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80119ac:	492b      	ldr	r1, [pc, #172]	; (8011a5c <tcp_timewait_input+0xd0>)
 80119ae:	482c      	ldr	r0, [pc, #176]	; (8011a60 <tcp_timewait_input+0xd4>)
 80119b0:	f007 f8d6 	bl	8018b60 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80119b4:	4b27      	ldr	r3, [pc, #156]	; (8011a54 <tcp_timewait_input+0xc8>)
 80119b6:	781b      	ldrb	r3, [r3, #0]
 80119b8:	f003 0302 	and.w	r3, r3, #2
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d02a      	beq.n	8011a16 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80119c0:	4b28      	ldr	r3, [pc, #160]	; (8011a64 <tcp_timewait_input+0xd8>)
 80119c2:	681a      	ldr	r2, [r3, #0]
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119c8:	1ad3      	subs	r3, r2, r3
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	db2d      	blt.n	8011a2a <tcp_timewait_input+0x9e>
 80119ce:	4b25      	ldr	r3, [pc, #148]	; (8011a64 <tcp_timewait_input+0xd8>)
 80119d0:	681a      	ldr	r2, [r3, #0]
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119d6:	6879      	ldr	r1, [r7, #4]
 80119d8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80119da:	440b      	add	r3, r1
 80119dc:	1ad3      	subs	r3, r2, r3
 80119de:	2b00      	cmp	r3, #0
 80119e0:	dc23      	bgt.n	8011a2a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80119e2:	4b21      	ldr	r3, [pc, #132]	; (8011a68 <tcp_timewait_input+0xdc>)
 80119e4:	6819      	ldr	r1, [r3, #0]
 80119e6:	4b21      	ldr	r3, [pc, #132]	; (8011a6c <tcp_timewait_input+0xe0>)
 80119e8:	881b      	ldrh	r3, [r3, #0]
 80119ea:	461a      	mov	r2, r3
 80119ec:	4b1d      	ldr	r3, [pc, #116]	; (8011a64 <tcp_timewait_input+0xd8>)
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80119f2:	4b1f      	ldr	r3, [pc, #124]	; (8011a70 <tcp_timewait_input+0xe4>)
 80119f4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80119f6:	885b      	ldrh	r3, [r3, #2]
 80119f8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80119fa:	4a1d      	ldr	r2, [pc, #116]	; (8011a70 <tcp_timewait_input+0xe4>)
 80119fc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80119fe:	8812      	ldrh	r2, [r2, #0]
 8011a00:	b292      	uxth	r2, r2
 8011a02:	9202      	str	r2, [sp, #8]
 8011a04:	9301      	str	r3, [sp, #4]
 8011a06:	4b1b      	ldr	r3, [pc, #108]	; (8011a74 <tcp_timewait_input+0xe8>)
 8011a08:	9300      	str	r3, [sp, #0]
 8011a0a:	4b1b      	ldr	r3, [pc, #108]	; (8011a78 <tcp_timewait_input+0xec>)
 8011a0c:	4602      	mov	r2, r0
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	f003 faca 	bl	8014fa8 <tcp_rst>
      return;
 8011a14:	e01b      	b.n	8011a4e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011a16:	4b0f      	ldr	r3, [pc, #60]	; (8011a54 <tcp_timewait_input+0xc8>)
 8011a18:	781b      	ldrb	r3, [r3, #0]
 8011a1a:	f003 0301 	and.w	r3, r3, #1
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d003      	beq.n	8011a2a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011a22:	4b16      	ldr	r3, [pc, #88]	; (8011a7c <tcp_timewait_input+0xf0>)
 8011a24:	681a      	ldr	r2, [r3, #0]
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011a2a:	4b10      	ldr	r3, [pc, #64]	; (8011a6c <tcp_timewait_input+0xe0>)
 8011a2c:	881b      	ldrh	r3, [r3, #0]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d00c      	beq.n	8011a4c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	8b5b      	ldrh	r3, [r3, #26]
 8011a36:	f043 0302 	orr.w	r3, r3, #2
 8011a3a:	b29a      	uxth	r2, r3
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011a40:	6878      	ldr	r0, [r7, #4]
 8011a42:	f002 fcfd 	bl	8014440 <tcp_output>
  }
  return;
 8011a46:	e001      	b.n	8011a4c <tcp_timewait_input+0xc0>
    return;
 8011a48:	bf00      	nop
 8011a4a:	e000      	b.n	8011a4e <tcp_timewait_input+0xc2>
  return;
 8011a4c:	bf00      	nop
}
 8011a4e:	3708      	adds	r7, #8
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd80      	pop	{r7, pc}
 8011a54:	24008ac4 	.word	0x24008ac4
 8011a58:	0801b008 	.word	0x0801b008
 8011a5c:	0801b220 	.word	0x0801b220
 8011a60:	0801b054 	.word	0x0801b054
 8011a64:	24008ab8 	.word	0x24008ab8
 8011a68:	24008abc 	.word	0x24008abc
 8011a6c:	24008ac2 	.word	0x24008ac2
 8011a70:	24008aa8 	.word	0x24008aa8
 8011a74:	24005990 	.word	0x24005990
 8011a78:	24005994 	.word	0x24005994
 8011a7c:	24008a80 	.word	0x24008a80

08011a80 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011a80:	b590      	push	{r4, r7, lr}
 8011a82:	b08d      	sub	sp, #52	; 0x34
 8011a84:	af04      	add	r7, sp, #16
 8011a86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011a88:	2300      	movs	r3, #0
 8011a8a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d106      	bne.n	8011aa4 <tcp_process+0x24>
 8011a96:	4b9d      	ldr	r3, [pc, #628]	; (8011d0c <tcp_process+0x28c>)
 8011a98:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011a9c:	499c      	ldr	r1, [pc, #624]	; (8011d10 <tcp_process+0x290>)
 8011a9e:	489d      	ldr	r0, [pc, #628]	; (8011d14 <tcp_process+0x294>)
 8011aa0:	f007 f85e 	bl	8018b60 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011aa4:	4b9c      	ldr	r3, [pc, #624]	; (8011d18 <tcp_process+0x298>)
 8011aa6:	781b      	ldrb	r3, [r3, #0]
 8011aa8:	f003 0304 	and.w	r3, r3, #4
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d04e      	beq.n	8011b4e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	7d1b      	ldrb	r3, [r3, #20]
 8011ab4:	2b02      	cmp	r3, #2
 8011ab6:	d108      	bne.n	8011aca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011abc:	4b97      	ldr	r3, [pc, #604]	; (8011d1c <tcp_process+0x29c>)
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	429a      	cmp	r2, r3
 8011ac2:	d123      	bne.n	8011b0c <tcp_process+0x8c>
        acceptable = 1;
 8011ac4:	2301      	movs	r3, #1
 8011ac6:	76fb      	strb	r3, [r7, #27]
 8011ac8:	e020      	b.n	8011b0c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011ace:	4b94      	ldr	r3, [pc, #592]	; (8011d20 <tcp_process+0x2a0>)
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	429a      	cmp	r2, r3
 8011ad4:	d102      	bne.n	8011adc <tcp_process+0x5c>
        acceptable = 1;
 8011ad6:	2301      	movs	r3, #1
 8011ad8:	76fb      	strb	r3, [r7, #27]
 8011ada:	e017      	b.n	8011b0c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011adc:	4b90      	ldr	r3, [pc, #576]	; (8011d20 <tcp_process+0x2a0>)
 8011ade:	681a      	ldr	r2, [r3, #0]
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ae4:	1ad3      	subs	r3, r2, r3
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	db10      	blt.n	8011b0c <tcp_process+0x8c>
 8011aea:	4b8d      	ldr	r3, [pc, #564]	; (8011d20 <tcp_process+0x2a0>)
 8011aec:	681a      	ldr	r2, [r3, #0]
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011af2:	6879      	ldr	r1, [r7, #4]
 8011af4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011af6:	440b      	add	r3, r1
 8011af8:	1ad3      	subs	r3, r2, r3
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	dc06      	bgt.n	8011b0c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	8b5b      	ldrh	r3, [r3, #26]
 8011b02:	f043 0302 	orr.w	r3, r3, #2
 8011b06:	b29a      	uxth	r2, r3
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011b0c:	7efb      	ldrb	r3, [r7, #27]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d01b      	beq.n	8011b4a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	7d1b      	ldrb	r3, [r3, #20]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d106      	bne.n	8011b28 <tcp_process+0xa8>
 8011b1a:	4b7c      	ldr	r3, [pc, #496]	; (8011d0c <tcp_process+0x28c>)
 8011b1c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011b20:	4980      	ldr	r1, [pc, #512]	; (8011d24 <tcp_process+0x2a4>)
 8011b22:	487c      	ldr	r0, [pc, #496]	; (8011d14 <tcp_process+0x294>)
 8011b24:	f007 f81c 	bl	8018b60 <iprintf>
      recv_flags |= TF_RESET;
 8011b28:	4b7f      	ldr	r3, [pc, #508]	; (8011d28 <tcp_process+0x2a8>)
 8011b2a:	781b      	ldrb	r3, [r3, #0]
 8011b2c:	f043 0308 	orr.w	r3, r3, #8
 8011b30:	b2da      	uxtb	r2, r3
 8011b32:	4b7d      	ldr	r3, [pc, #500]	; (8011d28 <tcp_process+0x2a8>)
 8011b34:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	8b5b      	ldrh	r3, [r3, #26]
 8011b3a:	f023 0301 	bic.w	r3, r3, #1
 8011b3e:	b29a      	uxth	r2, r3
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011b44:	f06f 030d 	mvn.w	r3, #13
 8011b48:	e37a      	b.n	8012240 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	e378      	b.n	8012240 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011b4e:	4b72      	ldr	r3, [pc, #456]	; (8011d18 <tcp_process+0x298>)
 8011b50:	781b      	ldrb	r3, [r3, #0]
 8011b52:	f003 0302 	and.w	r3, r3, #2
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d010      	beq.n	8011b7c <tcp_process+0xfc>
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	7d1b      	ldrb	r3, [r3, #20]
 8011b5e:	2b02      	cmp	r3, #2
 8011b60:	d00c      	beq.n	8011b7c <tcp_process+0xfc>
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	7d1b      	ldrb	r3, [r3, #20]
 8011b66:	2b03      	cmp	r3, #3
 8011b68:	d008      	beq.n	8011b7c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	8b5b      	ldrh	r3, [r3, #26]
 8011b6e:	f043 0302 	orr.w	r3, r3, #2
 8011b72:	b29a      	uxth	r2, r3
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011b78:	2300      	movs	r3, #0
 8011b7a:	e361      	b.n	8012240 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	8b5b      	ldrh	r3, [r3, #26]
 8011b80:	f003 0310 	and.w	r3, r3, #16
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d103      	bne.n	8011b90 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011b88:	4b68      	ldr	r3, [pc, #416]	; (8011d2c <tcp_process+0x2ac>)
 8011b8a:	681a      	ldr	r2, [r3, #0]
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	2200      	movs	r2, #0
 8011b94:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8011ba0:	6878      	ldr	r0, [r7, #4]
 8011ba2:	f001 fc2f 	bl	8013404 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	7d1b      	ldrb	r3, [r3, #20]
 8011baa:	3b02      	subs	r3, #2
 8011bac:	2b07      	cmp	r3, #7
 8011bae:	f200 8337 	bhi.w	8012220 <tcp_process+0x7a0>
 8011bb2:	a201      	add	r2, pc, #4	; (adr r2, 8011bb8 <tcp_process+0x138>)
 8011bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bb8:	08011bd9 	.word	0x08011bd9
 8011bbc:	08011e09 	.word	0x08011e09
 8011bc0:	08011f81 	.word	0x08011f81
 8011bc4:	08011fab 	.word	0x08011fab
 8011bc8:	080120cf 	.word	0x080120cf
 8011bcc:	08011f81 	.word	0x08011f81
 8011bd0:	0801215b 	.word	0x0801215b
 8011bd4:	080121eb 	.word	0x080121eb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011bd8:	4b4f      	ldr	r3, [pc, #316]	; (8011d18 <tcp_process+0x298>)
 8011bda:	781b      	ldrb	r3, [r3, #0]
 8011bdc:	f003 0310 	and.w	r3, r3, #16
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	f000 80e4 	beq.w	8011dae <tcp_process+0x32e>
 8011be6:	4b4c      	ldr	r3, [pc, #304]	; (8011d18 <tcp_process+0x298>)
 8011be8:	781b      	ldrb	r3, [r3, #0]
 8011bea:	f003 0302 	and.w	r3, r3, #2
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	f000 80dd 	beq.w	8011dae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011bf8:	1c5a      	adds	r2, r3, #1
 8011bfa:	4b48      	ldr	r3, [pc, #288]	; (8011d1c <tcp_process+0x29c>)
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	f040 80d5 	bne.w	8011dae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011c04:	4b46      	ldr	r3, [pc, #280]	; (8011d20 <tcp_process+0x2a0>)
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	1c5a      	adds	r2, r3, #1
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011c16:	4b41      	ldr	r3, [pc, #260]	; (8011d1c <tcp_process+0x29c>)
 8011c18:	681a      	ldr	r2, [r3, #0]
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8011c1e:	4b44      	ldr	r3, [pc, #272]	; (8011d30 <tcp_process+0x2b0>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	89db      	ldrh	r3, [r3, #14]
 8011c24:	b29a      	uxth	r2, r3
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011c38:	4b39      	ldr	r3, [pc, #228]	; (8011d20 <tcp_process+0x2a0>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	1e5a      	subs	r2, r3, #1
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	2204      	movs	r2, #4
 8011c46:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	3304      	adds	r3, #4
 8011c50:	4618      	mov	r0, r3
 8011c52:	f005 facf 	bl	80171f4 <ip4_route>
 8011c56:	4601      	mov	r1, r0
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	3304      	adds	r3, #4
 8011c5c:	461a      	mov	r2, r3
 8011c5e:	4620      	mov	r0, r4
 8011c60:	f7ff f88c 	bl	8010d7c <tcp_eff_send_mss_netif>
 8011c64:	4603      	mov	r3, r0
 8011c66:	461a      	mov	r2, r3
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c70:	009a      	lsls	r2, r3, #2
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c76:	005b      	lsls	r3, r3, #1
 8011c78:	f241 111c 	movw	r1, #4380	; 0x111c
 8011c7c:	428b      	cmp	r3, r1
 8011c7e:	bf38      	it	cc
 8011c80:	460b      	movcc	r3, r1
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d204      	bcs.n	8011c90 <tcp_process+0x210>
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c8a:	009b      	lsls	r3, r3, #2
 8011c8c:	b29b      	uxth	r3, r3
 8011c8e:	e00d      	b.n	8011cac <tcp_process+0x22c>
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011c94:	005b      	lsls	r3, r3, #1
 8011c96:	f241 121c 	movw	r2, #4380	; 0x111c
 8011c9a:	4293      	cmp	r3, r2
 8011c9c:	d904      	bls.n	8011ca8 <tcp_process+0x228>
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ca2:	005b      	lsls	r3, r3, #1
 8011ca4:	b29b      	uxth	r3, r3
 8011ca6:	e001      	b.n	8011cac <tcp_process+0x22c>
 8011ca8:	f241 131c 	movw	r3, #4380	; 0x111c
 8011cac:	687a      	ldr	r2, [r7, #4]
 8011cae:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d106      	bne.n	8011cca <tcp_process+0x24a>
 8011cbc:	4b13      	ldr	r3, [pc, #76]	; (8011d0c <tcp_process+0x28c>)
 8011cbe:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8011cc2:	491c      	ldr	r1, [pc, #112]	; (8011d34 <tcp_process+0x2b4>)
 8011cc4:	4813      	ldr	r0, [pc, #76]	; (8011d14 <tcp_process+0x294>)
 8011cc6:	f006 ff4b 	bl	8018b60 <iprintf>
        --pcb->snd_queuelen;
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011cd0:	3b01      	subs	r3, #1
 8011cd2:	b29a      	uxth	r2, r3
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011cde:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011ce0:	69fb      	ldr	r3, [r7, #28]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d12a      	bne.n	8011d3c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cea:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011cec:	69fb      	ldr	r3, [r7, #28]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d106      	bne.n	8011d00 <tcp_process+0x280>
 8011cf2:	4b06      	ldr	r3, [pc, #24]	; (8011d0c <tcp_process+0x28c>)
 8011cf4:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011cf8:	490f      	ldr	r1, [pc, #60]	; (8011d38 <tcp_process+0x2b8>)
 8011cfa:	4806      	ldr	r0, [pc, #24]	; (8011d14 <tcp_process+0x294>)
 8011cfc:	f006 ff30 	bl	8018b60 <iprintf>
          pcb->unsent = rseg->next;
 8011d00:	69fb      	ldr	r3, [r7, #28]
 8011d02:	681a      	ldr	r2, [r3, #0]
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	66da      	str	r2, [r3, #108]	; 0x6c
 8011d08:	e01c      	b.n	8011d44 <tcp_process+0x2c4>
 8011d0a:	bf00      	nop
 8011d0c:	0801b008 	.word	0x0801b008
 8011d10:	0801b240 	.word	0x0801b240
 8011d14:	0801b054 	.word	0x0801b054
 8011d18:	24008ac4 	.word	0x24008ac4
 8011d1c:	24008abc 	.word	0x24008abc
 8011d20:	24008ab8 	.word	0x24008ab8
 8011d24:	0801b25c 	.word	0x0801b25c
 8011d28:	24008ac5 	.word	0x24008ac5
 8011d2c:	24008a80 	.word	0x24008a80
 8011d30:	24008aa8 	.word	0x24008aa8
 8011d34:	0801b27c 	.word	0x0801b27c
 8011d38:	0801b294 	.word	0x0801b294
        } else {
          pcb->unacked = rseg->next;
 8011d3c:	69fb      	ldr	r3, [r7, #28]
 8011d3e:	681a      	ldr	r2, [r3, #0]
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011d44:	69f8      	ldr	r0, [r7, #28]
 8011d46:	f7fe fc36 	bl	80105b6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d104      	bne.n	8011d5c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d58:	861a      	strh	r2, [r3, #48]	; 0x30
 8011d5a:	e006      	b.n	8011d6a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2200      	movs	r2, #0
 8011d60:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	2200      	movs	r2, #0
 8011d66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d00a      	beq.n	8011d8a <tcp_process+0x30a>
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011d7a:	687a      	ldr	r2, [r7, #4]
 8011d7c:	6910      	ldr	r0, [r2, #16]
 8011d7e:	2200      	movs	r2, #0
 8011d80:	6879      	ldr	r1, [r7, #4]
 8011d82:	4798      	blx	r3
 8011d84:	4603      	mov	r3, r0
 8011d86:	76bb      	strb	r3, [r7, #26]
 8011d88:	e001      	b.n	8011d8e <tcp_process+0x30e>
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8011d8e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011d92:	f113 0f0d 	cmn.w	r3, #13
 8011d96:	d102      	bne.n	8011d9e <tcp_process+0x31e>
          return ERR_ABRT;
 8011d98:	f06f 030c 	mvn.w	r3, #12
 8011d9c:	e250      	b.n	8012240 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	8b5b      	ldrh	r3, [r3, #26]
 8011da2:	f043 0302 	orr.w	r3, r3, #2
 8011da6:	b29a      	uxth	r2, r3
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011dac:	e23a      	b.n	8012224 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011dae:	4b98      	ldr	r3, [pc, #608]	; (8012010 <tcp_process+0x590>)
 8011db0:	781b      	ldrb	r3, [r3, #0]
 8011db2:	f003 0310 	and.w	r3, r3, #16
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	f000 8234 	beq.w	8012224 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011dbc:	4b95      	ldr	r3, [pc, #596]	; (8012014 <tcp_process+0x594>)
 8011dbe:	6819      	ldr	r1, [r3, #0]
 8011dc0:	4b95      	ldr	r3, [pc, #596]	; (8012018 <tcp_process+0x598>)
 8011dc2:	881b      	ldrh	r3, [r3, #0]
 8011dc4:	461a      	mov	r2, r3
 8011dc6:	4b95      	ldr	r3, [pc, #596]	; (801201c <tcp_process+0x59c>)
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011dcc:	4b94      	ldr	r3, [pc, #592]	; (8012020 <tcp_process+0x5a0>)
 8011dce:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011dd0:	885b      	ldrh	r3, [r3, #2]
 8011dd2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011dd4:	4a92      	ldr	r2, [pc, #584]	; (8012020 <tcp_process+0x5a0>)
 8011dd6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011dd8:	8812      	ldrh	r2, [r2, #0]
 8011dda:	b292      	uxth	r2, r2
 8011ddc:	9202      	str	r2, [sp, #8]
 8011dde:	9301      	str	r3, [sp, #4]
 8011de0:	4b90      	ldr	r3, [pc, #576]	; (8012024 <tcp_process+0x5a4>)
 8011de2:	9300      	str	r3, [sp, #0]
 8011de4:	4b90      	ldr	r3, [pc, #576]	; (8012028 <tcp_process+0x5a8>)
 8011de6:	4602      	mov	r2, r0
 8011de8:	6878      	ldr	r0, [r7, #4]
 8011dea:	f003 f8dd 	bl	8014fa8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011df4:	2b05      	cmp	r3, #5
 8011df6:	f200 8215 	bhi.w	8012224 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011e00:	6878      	ldr	r0, [r7, #4]
 8011e02:	f002 fea7 	bl	8014b54 <tcp_rexmit_rto>
      break;
 8011e06:	e20d      	b.n	8012224 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011e08:	4b81      	ldr	r3, [pc, #516]	; (8012010 <tcp_process+0x590>)
 8011e0a:	781b      	ldrb	r3, [r3, #0]
 8011e0c:	f003 0310 	and.w	r3, r3, #16
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	f000 80a1 	beq.w	8011f58 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011e16:	4b7f      	ldr	r3, [pc, #508]	; (8012014 <tcp_process+0x594>)
 8011e18:	681a      	ldr	r2, [r3, #0]
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e1e:	1ad3      	subs	r3, r2, r3
 8011e20:	3b01      	subs	r3, #1
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	db7e      	blt.n	8011f24 <tcp_process+0x4a4>
 8011e26:	4b7b      	ldr	r3, [pc, #492]	; (8012014 <tcp_process+0x594>)
 8011e28:	681a      	ldr	r2, [r3, #0]
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e2e:	1ad3      	subs	r3, r2, r3
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	dc77      	bgt.n	8011f24 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	2204      	movs	r2, #4
 8011e38:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d102      	bne.n	8011e48 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8011e42:	23fa      	movs	r3, #250	; 0xfa
 8011e44:	76bb      	strb	r3, [r7, #26]
 8011e46:	e01d      	b.n	8011e84 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e4c:	699b      	ldr	r3, [r3, #24]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d106      	bne.n	8011e60 <tcp_process+0x3e0>
 8011e52:	4b76      	ldr	r3, [pc, #472]	; (801202c <tcp_process+0x5ac>)
 8011e54:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011e58:	4975      	ldr	r1, [pc, #468]	; (8012030 <tcp_process+0x5b0>)
 8011e5a:	4876      	ldr	r0, [pc, #472]	; (8012034 <tcp_process+0x5b4>)
 8011e5c:	f006 fe80 	bl	8018b60 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e64:	699b      	ldr	r3, [r3, #24]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d00a      	beq.n	8011e80 <tcp_process+0x400>
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e6e:	699b      	ldr	r3, [r3, #24]
 8011e70:	687a      	ldr	r2, [r7, #4]
 8011e72:	6910      	ldr	r0, [r2, #16]
 8011e74:	2200      	movs	r2, #0
 8011e76:	6879      	ldr	r1, [r7, #4]
 8011e78:	4798      	blx	r3
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	76bb      	strb	r3, [r7, #26]
 8011e7e:	e001      	b.n	8011e84 <tcp_process+0x404>
 8011e80:	23f0      	movs	r3, #240	; 0xf0
 8011e82:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011e84:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d00a      	beq.n	8011ea2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011e8c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011e90:	f113 0f0d 	cmn.w	r3, #13
 8011e94:	d002      	beq.n	8011e9c <tcp_process+0x41c>
              tcp_abort(pcb);
 8011e96:	6878      	ldr	r0, [r7, #4]
 8011e98:	f7fd fce8 	bl	800f86c <tcp_abort>
            }
            return ERR_ABRT;
 8011e9c:	f06f 030c 	mvn.w	r3, #12
 8011ea0:	e1ce      	b.n	8012240 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f000 fae0 	bl	8012468 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011ea8:	4b63      	ldr	r3, [pc, #396]	; (8012038 <tcp_process+0x5b8>)
 8011eaa:	881b      	ldrh	r3, [r3, #0]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d005      	beq.n	8011ebc <tcp_process+0x43c>
            recv_acked--;
 8011eb0:	4b61      	ldr	r3, [pc, #388]	; (8012038 <tcp_process+0x5b8>)
 8011eb2:	881b      	ldrh	r3, [r3, #0]
 8011eb4:	3b01      	subs	r3, #1
 8011eb6:	b29a      	uxth	r2, r3
 8011eb8:	4b5f      	ldr	r3, [pc, #380]	; (8012038 <tcp_process+0x5b8>)
 8011eba:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ec0:	009a      	lsls	r2, r3, #2
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ec6:	005b      	lsls	r3, r3, #1
 8011ec8:	f241 111c 	movw	r1, #4380	; 0x111c
 8011ecc:	428b      	cmp	r3, r1
 8011ece:	bf38      	it	cc
 8011ed0:	460b      	movcc	r3, r1
 8011ed2:	429a      	cmp	r2, r3
 8011ed4:	d204      	bcs.n	8011ee0 <tcp_process+0x460>
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011eda:	009b      	lsls	r3, r3, #2
 8011edc:	b29b      	uxth	r3, r3
 8011ede:	e00d      	b.n	8011efc <tcp_process+0x47c>
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ee4:	005b      	lsls	r3, r3, #1
 8011ee6:	f241 121c 	movw	r2, #4380	; 0x111c
 8011eea:	4293      	cmp	r3, r2
 8011eec:	d904      	bls.n	8011ef8 <tcp_process+0x478>
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ef2:	005b      	lsls	r3, r3, #1
 8011ef4:	b29b      	uxth	r3, r3
 8011ef6:	e001      	b.n	8011efc <tcp_process+0x47c>
 8011ef8:	f241 131c 	movw	r3, #4380	; 0x111c
 8011efc:	687a      	ldr	r2, [r7, #4]
 8011efe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011f02:	4b4e      	ldr	r3, [pc, #312]	; (801203c <tcp_process+0x5bc>)
 8011f04:	781b      	ldrb	r3, [r3, #0]
 8011f06:	f003 0320 	and.w	r3, r3, #32
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d037      	beq.n	8011f7e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	8b5b      	ldrh	r3, [r3, #26]
 8011f12:	f043 0302 	orr.w	r3, r3, #2
 8011f16:	b29a      	uxth	r2, r3
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	2207      	movs	r2, #7
 8011f20:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011f22:	e02c      	b.n	8011f7e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f24:	4b3b      	ldr	r3, [pc, #236]	; (8012014 <tcp_process+0x594>)
 8011f26:	6819      	ldr	r1, [r3, #0]
 8011f28:	4b3b      	ldr	r3, [pc, #236]	; (8012018 <tcp_process+0x598>)
 8011f2a:	881b      	ldrh	r3, [r3, #0]
 8011f2c:	461a      	mov	r2, r3
 8011f2e:	4b3b      	ldr	r3, [pc, #236]	; (801201c <tcp_process+0x59c>)
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011f34:	4b3a      	ldr	r3, [pc, #232]	; (8012020 <tcp_process+0x5a0>)
 8011f36:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f38:	885b      	ldrh	r3, [r3, #2]
 8011f3a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011f3c:	4a38      	ldr	r2, [pc, #224]	; (8012020 <tcp_process+0x5a0>)
 8011f3e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f40:	8812      	ldrh	r2, [r2, #0]
 8011f42:	b292      	uxth	r2, r2
 8011f44:	9202      	str	r2, [sp, #8]
 8011f46:	9301      	str	r3, [sp, #4]
 8011f48:	4b36      	ldr	r3, [pc, #216]	; (8012024 <tcp_process+0x5a4>)
 8011f4a:	9300      	str	r3, [sp, #0]
 8011f4c:	4b36      	ldr	r3, [pc, #216]	; (8012028 <tcp_process+0x5a8>)
 8011f4e:	4602      	mov	r2, r0
 8011f50:	6878      	ldr	r0, [r7, #4]
 8011f52:	f003 f829 	bl	8014fa8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011f56:	e167      	b.n	8012228 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011f58:	4b2d      	ldr	r3, [pc, #180]	; (8012010 <tcp_process+0x590>)
 8011f5a:	781b      	ldrb	r3, [r3, #0]
 8011f5c:	f003 0302 	and.w	r3, r3, #2
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	f000 8161 	beq.w	8012228 <tcp_process+0x7a8>
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f6a:	1e5a      	subs	r2, r3, #1
 8011f6c:	4b2b      	ldr	r3, [pc, #172]	; (801201c <tcp_process+0x59c>)
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	429a      	cmp	r2, r3
 8011f72:	f040 8159 	bne.w	8012228 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	f002 fe0e 	bl	8014b98 <tcp_rexmit>
      break;
 8011f7c:	e154      	b.n	8012228 <tcp_process+0x7a8>
 8011f7e:	e153      	b.n	8012228 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011f80:	6878      	ldr	r0, [r7, #4]
 8011f82:	f000 fa71 	bl	8012468 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011f86:	4b2d      	ldr	r3, [pc, #180]	; (801203c <tcp_process+0x5bc>)
 8011f88:	781b      	ldrb	r3, [r3, #0]
 8011f8a:	f003 0320 	and.w	r3, r3, #32
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	f000 814c 	beq.w	801222c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	8b5b      	ldrh	r3, [r3, #26]
 8011f98:	f043 0302 	orr.w	r3, r3, #2
 8011f9c:	b29a      	uxth	r2, r3
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	2207      	movs	r2, #7
 8011fa6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011fa8:	e140      	b.n	801222c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011faa:	6878      	ldr	r0, [r7, #4]
 8011fac:	f000 fa5c 	bl	8012468 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011fb0:	4b22      	ldr	r3, [pc, #136]	; (801203c <tcp_process+0x5bc>)
 8011fb2:	781b      	ldrb	r3, [r3, #0]
 8011fb4:	f003 0320 	and.w	r3, r3, #32
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d071      	beq.n	80120a0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011fbc:	4b14      	ldr	r3, [pc, #80]	; (8012010 <tcp_process+0x590>)
 8011fbe:	781b      	ldrb	r3, [r3, #0]
 8011fc0:	f003 0310 	and.w	r3, r3, #16
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d060      	beq.n	801208a <tcp_process+0x60a>
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011fcc:	4b11      	ldr	r3, [pc, #68]	; (8012014 <tcp_process+0x594>)
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	429a      	cmp	r2, r3
 8011fd2:	d15a      	bne.n	801208a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d156      	bne.n	801208a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	8b5b      	ldrh	r3, [r3, #26]
 8011fe0:	f043 0302 	orr.w	r3, r3, #2
 8011fe4:	b29a      	uxth	r2, r3
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011fea:	6878      	ldr	r0, [r7, #4]
 8011fec:	f7fe fdbc 	bl	8010b68 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011ff0:	4b13      	ldr	r3, [pc, #76]	; (8012040 <tcp_process+0x5c0>)
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	687a      	ldr	r2, [r7, #4]
 8011ff6:	429a      	cmp	r2, r3
 8011ff8:	d105      	bne.n	8012006 <tcp_process+0x586>
 8011ffa:	4b11      	ldr	r3, [pc, #68]	; (8012040 <tcp_process+0x5c0>)
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	68db      	ldr	r3, [r3, #12]
 8012000:	4a0f      	ldr	r2, [pc, #60]	; (8012040 <tcp_process+0x5c0>)
 8012002:	6013      	str	r3, [r2, #0]
 8012004:	e02e      	b.n	8012064 <tcp_process+0x5e4>
 8012006:	4b0e      	ldr	r3, [pc, #56]	; (8012040 <tcp_process+0x5c0>)
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	617b      	str	r3, [r7, #20]
 801200c:	e027      	b.n	801205e <tcp_process+0x5de>
 801200e:	bf00      	nop
 8012010:	24008ac4 	.word	0x24008ac4
 8012014:	24008abc 	.word	0x24008abc
 8012018:	24008ac2 	.word	0x24008ac2
 801201c:	24008ab8 	.word	0x24008ab8
 8012020:	24008aa8 	.word	0x24008aa8
 8012024:	24005990 	.word	0x24005990
 8012028:	24005994 	.word	0x24005994
 801202c:	0801b008 	.word	0x0801b008
 8012030:	0801b2a8 	.word	0x0801b2a8
 8012034:	0801b054 	.word	0x0801b054
 8012038:	24008ac0 	.word	0x24008ac0
 801203c:	24008ac5 	.word	0x24008ac5
 8012040:	24008a8c 	.word	0x24008a8c
 8012044:	697b      	ldr	r3, [r7, #20]
 8012046:	68db      	ldr	r3, [r3, #12]
 8012048:	687a      	ldr	r2, [r7, #4]
 801204a:	429a      	cmp	r2, r3
 801204c:	d104      	bne.n	8012058 <tcp_process+0x5d8>
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	68da      	ldr	r2, [r3, #12]
 8012052:	697b      	ldr	r3, [r7, #20]
 8012054:	60da      	str	r2, [r3, #12]
 8012056:	e005      	b.n	8012064 <tcp_process+0x5e4>
 8012058:	697b      	ldr	r3, [r7, #20]
 801205a:	68db      	ldr	r3, [r3, #12]
 801205c:	617b      	str	r3, [r7, #20]
 801205e:	697b      	ldr	r3, [r7, #20]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d1ef      	bne.n	8012044 <tcp_process+0x5c4>
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2200      	movs	r2, #0
 8012068:	60da      	str	r2, [r3, #12]
 801206a:	4b77      	ldr	r3, [pc, #476]	; (8012248 <tcp_process+0x7c8>)
 801206c:	2201      	movs	r2, #1
 801206e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	220a      	movs	r2, #10
 8012074:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8012076:	4b75      	ldr	r3, [pc, #468]	; (801224c <tcp_process+0x7cc>)
 8012078:	681a      	ldr	r2, [r3, #0]
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	60da      	str	r2, [r3, #12]
 801207e:	4a73      	ldr	r2, [pc, #460]	; (801224c <tcp_process+0x7cc>)
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	6013      	str	r3, [r2, #0]
 8012084:	f003 f952 	bl	801532c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8012088:	e0d2      	b.n	8012230 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	8b5b      	ldrh	r3, [r3, #26]
 801208e:	f043 0302 	orr.w	r3, r3, #2
 8012092:	b29a      	uxth	r2, r3
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	2208      	movs	r2, #8
 801209c:	751a      	strb	r2, [r3, #20]
      break;
 801209e:	e0c7      	b.n	8012230 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80120a0:	4b6b      	ldr	r3, [pc, #428]	; (8012250 <tcp_process+0x7d0>)
 80120a2:	781b      	ldrb	r3, [r3, #0]
 80120a4:	f003 0310 	and.w	r3, r3, #16
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	f000 80c1 	beq.w	8012230 <tcp_process+0x7b0>
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80120b2:	4b68      	ldr	r3, [pc, #416]	; (8012254 <tcp_process+0x7d4>)
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	429a      	cmp	r2, r3
 80120b8:	f040 80ba 	bne.w	8012230 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	f040 80b5 	bne.w	8012230 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	2206      	movs	r2, #6
 80120ca:	751a      	strb	r2, [r3, #20]
      break;
 80120cc:	e0b0      	b.n	8012230 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80120ce:	6878      	ldr	r0, [r7, #4]
 80120d0:	f000 f9ca 	bl	8012468 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80120d4:	4b60      	ldr	r3, [pc, #384]	; (8012258 <tcp_process+0x7d8>)
 80120d6:	781b      	ldrb	r3, [r3, #0]
 80120d8:	f003 0320 	and.w	r3, r3, #32
 80120dc:	2b00      	cmp	r3, #0
 80120de:	f000 80a9 	beq.w	8012234 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	8b5b      	ldrh	r3, [r3, #26]
 80120e6:	f043 0302 	orr.w	r3, r3, #2
 80120ea:	b29a      	uxth	r2, r3
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80120f0:	6878      	ldr	r0, [r7, #4]
 80120f2:	f7fe fd39 	bl	8010b68 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80120f6:	4b59      	ldr	r3, [pc, #356]	; (801225c <tcp_process+0x7dc>)
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	687a      	ldr	r2, [r7, #4]
 80120fc:	429a      	cmp	r2, r3
 80120fe:	d105      	bne.n	801210c <tcp_process+0x68c>
 8012100:	4b56      	ldr	r3, [pc, #344]	; (801225c <tcp_process+0x7dc>)
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	68db      	ldr	r3, [r3, #12]
 8012106:	4a55      	ldr	r2, [pc, #340]	; (801225c <tcp_process+0x7dc>)
 8012108:	6013      	str	r3, [r2, #0]
 801210a:	e013      	b.n	8012134 <tcp_process+0x6b4>
 801210c:	4b53      	ldr	r3, [pc, #332]	; (801225c <tcp_process+0x7dc>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	613b      	str	r3, [r7, #16]
 8012112:	e00c      	b.n	801212e <tcp_process+0x6ae>
 8012114:	693b      	ldr	r3, [r7, #16]
 8012116:	68db      	ldr	r3, [r3, #12]
 8012118:	687a      	ldr	r2, [r7, #4]
 801211a:	429a      	cmp	r2, r3
 801211c:	d104      	bne.n	8012128 <tcp_process+0x6a8>
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	68da      	ldr	r2, [r3, #12]
 8012122:	693b      	ldr	r3, [r7, #16]
 8012124:	60da      	str	r2, [r3, #12]
 8012126:	e005      	b.n	8012134 <tcp_process+0x6b4>
 8012128:	693b      	ldr	r3, [r7, #16]
 801212a:	68db      	ldr	r3, [r3, #12]
 801212c:	613b      	str	r3, [r7, #16]
 801212e:	693b      	ldr	r3, [r7, #16]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d1ef      	bne.n	8012114 <tcp_process+0x694>
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	2200      	movs	r2, #0
 8012138:	60da      	str	r2, [r3, #12]
 801213a:	4b43      	ldr	r3, [pc, #268]	; (8012248 <tcp_process+0x7c8>)
 801213c:	2201      	movs	r2, #1
 801213e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	220a      	movs	r2, #10
 8012144:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012146:	4b41      	ldr	r3, [pc, #260]	; (801224c <tcp_process+0x7cc>)
 8012148:	681a      	ldr	r2, [r3, #0]
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	60da      	str	r2, [r3, #12]
 801214e:	4a3f      	ldr	r2, [pc, #252]	; (801224c <tcp_process+0x7cc>)
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	6013      	str	r3, [r2, #0]
 8012154:	f003 f8ea 	bl	801532c <tcp_timer_needed>
      }
      break;
 8012158:	e06c      	b.n	8012234 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801215a:	6878      	ldr	r0, [r7, #4]
 801215c:	f000 f984 	bl	8012468 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012160:	4b3b      	ldr	r3, [pc, #236]	; (8012250 <tcp_process+0x7d0>)
 8012162:	781b      	ldrb	r3, [r3, #0]
 8012164:	f003 0310 	and.w	r3, r3, #16
 8012168:	2b00      	cmp	r3, #0
 801216a:	d065      	beq.n	8012238 <tcp_process+0x7b8>
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012170:	4b38      	ldr	r3, [pc, #224]	; (8012254 <tcp_process+0x7d4>)
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	429a      	cmp	r2, r3
 8012176:	d15f      	bne.n	8012238 <tcp_process+0x7b8>
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801217c:	2b00      	cmp	r3, #0
 801217e:	d15b      	bne.n	8012238 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8012180:	6878      	ldr	r0, [r7, #4]
 8012182:	f7fe fcf1 	bl	8010b68 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012186:	4b35      	ldr	r3, [pc, #212]	; (801225c <tcp_process+0x7dc>)
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	687a      	ldr	r2, [r7, #4]
 801218c:	429a      	cmp	r2, r3
 801218e:	d105      	bne.n	801219c <tcp_process+0x71c>
 8012190:	4b32      	ldr	r3, [pc, #200]	; (801225c <tcp_process+0x7dc>)
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	68db      	ldr	r3, [r3, #12]
 8012196:	4a31      	ldr	r2, [pc, #196]	; (801225c <tcp_process+0x7dc>)
 8012198:	6013      	str	r3, [r2, #0]
 801219a:	e013      	b.n	80121c4 <tcp_process+0x744>
 801219c:	4b2f      	ldr	r3, [pc, #188]	; (801225c <tcp_process+0x7dc>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	60fb      	str	r3, [r7, #12]
 80121a2:	e00c      	b.n	80121be <tcp_process+0x73e>
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	68db      	ldr	r3, [r3, #12]
 80121a8:	687a      	ldr	r2, [r7, #4]
 80121aa:	429a      	cmp	r2, r3
 80121ac:	d104      	bne.n	80121b8 <tcp_process+0x738>
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	68da      	ldr	r2, [r3, #12]
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	60da      	str	r2, [r3, #12]
 80121b6:	e005      	b.n	80121c4 <tcp_process+0x744>
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	68db      	ldr	r3, [r3, #12]
 80121bc:	60fb      	str	r3, [r7, #12]
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d1ef      	bne.n	80121a4 <tcp_process+0x724>
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	2200      	movs	r2, #0
 80121c8:	60da      	str	r2, [r3, #12]
 80121ca:	4b1f      	ldr	r3, [pc, #124]	; (8012248 <tcp_process+0x7c8>)
 80121cc:	2201      	movs	r2, #1
 80121ce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	220a      	movs	r2, #10
 80121d4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80121d6:	4b1d      	ldr	r3, [pc, #116]	; (801224c <tcp_process+0x7cc>)
 80121d8:	681a      	ldr	r2, [r3, #0]
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	60da      	str	r2, [r3, #12]
 80121de:	4a1b      	ldr	r2, [pc, #108]	; (801224c <tcp_process+0x7cc>)
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	6013      	str	r3, [r2, #0]
 80121e4:	f003 f8a2 	bl	801532c <tcp_timer_needed>
      }
      break;
 80121e8:	e026      	b.n	8012238 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80121ea:	6878      	ldr	r0, [r7, #4]
 80121ec:	f000 f93c 	bl	8012468 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80121f0:	4b17      	ldr	r3, [pc, #92]	; (8012250 <tcp_process+0x7d0>)
 80121f2:	781b      	ldrb	r3, [r3, #0]
 80121f4:	f003 0310 	and.w	r3, r3, #16
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d01f      	beq.n	801223c <tcp_process+0x7bc>
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012200:	4b14      	ldr	r3, [pc, #80]	; (8012254 <tcp_process+0x7d4>)
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	429a      	cmp	r2, r3
 8012206:	d119      	bne.n	801223c <tcp_process+0x7bc>
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801220c:	2b00      	cmp	r3, #0
 801220e:	d115      	bne.n	801223c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8012210:	4b11      	ldr	r3, [pc, #68]	; (8012258 <tcp_process+0x7d8>)
 8012212:	781b      	ldrb	r3, [r3, #0]
 8012214:	f043 0310 	orr.w	r3, r3, #16
 8012218:	b2da      	uxtb	r2, r3
 801221a:	4b0f      	ldr	r3, [pc, #60]	; (8012258 <tcp_process+0x7d8>)
 801221c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801221e:	e00d      	b.n	801223c <tcp_process+0x7bc>
    default:
      break;
 8012220:	bf00      	nop
 8012222:	e00c      	b.n	801223e <tcp_process+0x7be>
      break;
 8012224:	bf00      	nop
 8012226:	e00a      	b.n	801223e <tcp_process+0x7be>
      break;
 8012228:	bf00      	nop
 801222a:	e008      	b.n	801223e <tcp_process+0x7be>
      break;
 801222c:	bf00      	nop
 801222e:	e006      	b.n	801223e <tcp_process+0x7be>
      break;
 8012230:	bf00      	nop
 8012232:	e004      	b.n	801223e <tcp_process+0x7be>
      break;
 8012234:	bf00      	nop
 8012236:	e002      	b.n	801223e <tcp_process+0x7be>
      break;
 8012238:	bf00      	nop
 801223a:	e000      	b.n	801223e <tcp_process+0x7be>
      break;
 801223c:	bf00      	nop
  }
  return ERR_OK;
 801223e:	2300      	movs	r3, #0
}
 8012240:	4618      	mov	r0, r3
 8012242:	3724      	adds	r7, #36	; 0x24
 8012244:	46bd      	mov	sp, r7
 8012246:	bd90      	pop	{r4, r7, pc}
 8012248:	24008a94 	.word	0x24008a94
 801224c:	24008a90 	.word	0x24008a90
 8012250:	24008ac4 	.word	0x24008ac4
 8012254:	24008abc 	.word	0x24008abc
 8012258:	24008ac5 	.word	0x24008ac5
 801225c:	24008a8c 	.word	0x24008a8c

08012260 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012260:	b590      	push	{r4, r7, lr}
 8012262:	b085      	sub	sp, #20
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
 8012268:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d106      	bne.n	801227e <tcp_oos_insert_segment+0x1e>
 8012270:	4b3b      	ldr	r3, [pc, #236]	; (8012360 <tcp_oos_insert_segment+0x100>)
 8012272:	f240 421f 	movw	r2, #1055	; 0x41f
 8012276:	493b      	ldr	r1, [pc, #236]	; (8012364 <tcp_oos_insert_segment+0x104>)
 8012278:	483b      	ldr	r0, [pc, #236]	; (8012368 <tcp_oos_insert_segment+0x108>)
 801227a:	f006 fc71 	bl	8018b60 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	68db      	ldr	r3, [r3, #12]
 8012282:	899b      	ldrh	r3, [r3, #12]
 8012284:	b29b      	uxth	r3, r3
 8012286:	4618      	mov	r0, r3
 8012288:	f7fb f86c 	bl	800d364 <lwip_htons>
 801228c:	4603      	mov	r3, r0
 801228e:	b2db      	uxtb	r3, r3
 8012290:	f003 0301 	and.w	r3, r3, #1
 8012294:	2b00      	cmp	r3, #0
 8012296:	d028      	beq.n	80122ea <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012298:	6838      	ldr	r0, [r7, #0]
 801229a:	f7fe f977 	bl	801058c <tcp_segs_free>
    next = NULL;
 801229e:	2300      	movs	r3, #0
 80122a0:	603b      	str	r3, [r7, #0]
 80122a2:	e056      	b.n	8012352 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80122a4:	683b      	ldr	r3, [r7, #0]
 80122a6:	68db      	ldr	r3, [r3, #12]
 80122a8:	899b      	ldrh	r3, [r3, #12]
 80122aa:	b29b      	uxth	r3, r3
 80122ac:	4618      	mov	r0, r3
 80122ae:	f7fb f859 	bl	800d364 <lwip_htons>
 80122b2:	4603      	mov	r3, r0
 80122b4:	b2db      	uxtb	r3, r3
 80122b6:	f003 0301 	and.w	r3, r3, #1
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d00d      	beq.n	80122da <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	68db      	ldr	r3, [r3, #12]
 80122c2:	899b      	ldrh	r3, [r3, #12]
 80122c4:	b29c      	uxth	r4, r3
 80122c6:	2001      	movs	r0, #1
 80122c8:	f7fb f84c 	bl	800d364 <lwip_htons>
 80122cc:	4603      	mov	r3, r0
 80122ce:	461a      	mov	r2, r3
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	68db      	ldr	r3, [r3, #12]
 80122d4:	4322      	orrs	r2, r4
 80122d6:	b292      	uxth	r2, r2
 80122d8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80122da:	683b      	ldr	r3, [r7, #0]
 80122dc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80122de:	683b      	ldr	r3, [r7, #0]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80122e4:	68f8      	ldr	r0, [r7, #12]
 80122e6:	f7fe f966 	bl	80105b6 <tcp_seg_free>
    while (next &&
 80122ea:	683b      	ldr	r3, [r7, #0]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d00e      	beq.n	801230e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	891b      	ldrh	r3, [r3, #8]
 80122f4:	461a      	mov	r2, r3
 80122f6:	4b1d      	ldr	r3, [pc, #116]	; (801236c <tcp_oos_insert_segment+0x10c>)
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	441a      	add	r2, r3
 80122fc:	683b      	ldr	r3, [r7, #0]
 80122fe:	68db      	ldr	r3, [r3, #12]
 8012300:	685b      	ldr	r3, [r3, #4]
 8012302:	6839      	ldr	r1, [r7, #0]
 8012304:	8909      	ldrh	r1, [r1, #8]
 8012306:	440b      	add	r3, r1
 8012308:	1ad3      	subs	r3, r2, r3
    while (next &&
 801230a:	2b00      	cmp	r3, #0
 801230c:	daca      	bge.n	80122a4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d01e      	beq.n	8012352 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	891b      	ldrh	r3, [r3, #8]
 8012318:	461a      	mov	r2, r3
 801231a:	4b14      	ldr	r3, [pc, #80]	; (801236c <tcp_oos_insert_segment+0x10c>)
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	441a      	add	r2, r3
 8012320:	683b      	ldr	r3, [r7, #0]
 8012322:	68db      	ldr	r3, [r3, #12]
 8012324:	685b      	ldr	r3, [r3, #4]
 8012326:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012328:	2b00      	cmp	r3, #0
 801232a:	dd12      	ble.n	8012352 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801232c:	683b      	ldr	r3, [r7, #0]
 801232e:	68db      	ldr	r3, [r3, #12]
 8012330:	685b      	ldr	r3, [r3, #4]
 8012332:	b29a      	uxth	r2, r3
 8012334:	4b0d      	ldr	r3, [pc, #52]	; (801236c <tcp_oos_insert_segment+0x10c>)
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	b29b      	uxth	r3, r3
 801233a:	1ad3      	subs	r3, r2, r3
 801233c:	b29a      	uxth	r2, r3
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	685a      	ldr	r2, [r3, #4]
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	891b      	ldrh	r3, [r3, #8]
 801234a:	4619      	mov	r1, r3
 801234c:	4610      	mov	r0, r2
 801234e:	f7fc fb63 	bl	800ea18 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	683a      	ldr	r2, [r7, #0]
 8012356:	601a      	str	r2, [r3, #0]
}
 8012358:	bf00      	nop
 801235a:	3714      	adds	r7, #20
 801235c:	46bd      	mov	sp, r7
 801235e:	bd90      	pop	{r4, r7, pc}
 8012360:	0801b008 	.word	0x0801b008
 8012364:	0801b2c8 	.word	0x0801b2c8
 8012368:	0801b054 	.word	0x0801b054
 801236c:	24008ab8 	.word	0x24008ab8

08012370 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8012370:	b5b0      	push	{r4, r5, r7, lr}
 8012372:	b086      	sub	sp, #24
 8012374:	af00      	add	r7, sp, #0
 8012376:	60f8      	str	r0, [r7, #12]
 8012378:	60b9      	str	r1, [r7, #8]
 801237a:	607a      	str	r2, [r7, #4]
 801237c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801237e:	e03e      	b.n	80123fe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8012380:	68bb      	ldr	r3, [r7, #8]
 8012382:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8012384:	68bb      	ldr	r3, [r7, #8]
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801238a:	697b      	ldr	r3, [r7, #20]
 801238c:	685b      	ldr	r3, [r3, #4]
 801238e:	4618      	mov	r0, r3
 8012390:	f7fc fd56 	bl	800ee40 <pbuf_clen>
 8012394:	4603      	mov	r3, r0
 8012396:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801239e:	8a7a      	ldrh	r2, [r7, #18]
 80123a0:	429a      	cmp	r2, r3
 80123a2:	d906      	bls.n	80123b2 <tcp_free_acked_segments+0x42>
 80123a4:	4b2a      	ldr	r3, [pc, #168]	; (8012450 <tcp_free_acked_segments+0xe0>)
 80123a6:	f240 4257 	movw	r2, #1111	; 0x457
 80123aa:	492a      	ldr	r1, [pc, #168]	; (8012454 <tcp_free_acked_segments+0xe4>)
 80123ac:	482a      	ldr	r0, [pc, #168]	; (8012458 <tcp_free_acked_segments+0xe8>)
 80123ae:	f006 fbd7 	bl	8018b60 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80123b8:	8a7b      	ldrh	r3, [r7, #18]
 80123ba:	1ad3      	subs	r3, r2, r3
 80123bc:	b29a      	uxth	r2, r3
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80123c4:	697b      	ldr	r3, [r7, #20]
 80123c6:	891a      	ldrh	r2, [r3, #8]
 80123c8:	4b24      	ldr	r3, [pc, #144]	; (801245c <tcp_free_acked_segments+0xec>)
 80123ca:	881b      	ldrh	r3, [r3, #0]
 80123cc:	4413      	add	r3, r2
 80123ce:	b29a      	uxth	r2, r3
 80123d0:	4b22      	ldr	r3, [pc, #136]	; (801245c <tcp_free_acked_segments+0xec>)
 80123d2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80123d4:	6978      	ldr	r0, [r7, #20]
 80123d6:	f7fe f8ee 	bl	80105b6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d00c      	beq.n	80123fe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80123e4:	68bb      	ldr	r3, [r7, #8]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d109      	bne.n	80123fe <tcp_free_acked_segments+0x8e>
 80123ea:	683b      	ldr	r3, [r7, #0]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d106      	bne.n	80123fe <tcp_free_acked_segments+0x8e>
 80123f0:	4b17      	ldr	r3, [pc, #92]	; (8012450 <tcp_free_acked_segments+0xe0>)
 80123f2:	f240 4261 	movw	r2, #1121	; 0x461
 80123f6:	491a      	ldr	r1, [pc, #104]	; (8012460 <tcp_free_acked_segments+0xf0>)
 80123f8:	4817      	ldr	r0, [pc, #92]	; (8012458 <tcp_free_acked_segments+0xe8>)
 80123fa:	f006 fbb1 	bl	8018b60 <iprintf>
  while (seg_list != NULL &&
 80123fe:	68bb      	ldr	r3, [r7, #8]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d020      	beq.n	8012446 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012404:	68bb      	ldr	r3, [r7, #8]
 8012406:	68db      	ldr	r3, [r3, #12]
 8012408:	685b      	ldr	r3, [r3, #4]
 801240a:	4618      	mov	r0, r3
 801240c:	f7fa ffbf 	bl	800d38e <lwip_htonl>
 8012410:	4604      	mov	r4, r0
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	891b      	ldrh	r3, [r3, #8]
 8012416:	461d      	mov	r5, r3
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	68db      	ldr	r3, [r3, #12]
 801241c:	899b      	ldrh	r3, [r3, #12]
 801241e:	b29b      	uxth	r3, r3
 8012420:	4618      	mov	r0, r3
 8012422:	f7fa ff9f 	bl	800d364 <lwip_htons>
 8012426:	4603      	mov	r3, r0
 8012428:	b2db      	uxtb	r3, r3
 801242a:	f003 0303 	and.w	r3, r3, #3
 801242e:	2b00      	cmp	r3, #0
 8012430:	d001      	beq.n	8012436 <tcp_free_acked_segments+0xc6>
 8012432:	2301      	movs	r3, #1
 8012434:	e000      	b.n	8012438 <tcp_free_acked_segments+0xc8>
 8012436:	2300      	movs	r3, #0
 8012438:	442b      	add	r3, r5
 801243a:	18e2      	adds	r2, r4, r3
 801243c:	4b09      	ldr	r3, [pc, #36]	; (8012464 <tcp_free_acked_segments+0xf4>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8012442:	2b00      	cmp	r3, #0
 8012444:	dd9c      	ble.n	8012380 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012446:	68bb      	ldr	r3, [r7, #8]
}
 8012448:	4618      	mov	r0, r3
 801244a:	3718      	adds	r7, #24
 801244c:	46bd      	mov	sp, r7
 801244e:	bdb0      	pop	{r4, r5, r7, pc}
 8012450:	0801b008 	.word	0x0801b008
 8012454:	0801b2f0 	.word	0x0801b2f0
 8012458:	0801b054 	.word	0x0801b054
 801245c:	24008ac0 	.word	0x24008ac0
 8012460:	0801b318 	.word	0x0801b318
 8012464:	24008abc 	.word	0x24008abc

08012468 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012468:	b5b0      	push	{r4, r5, r7, lr}
 801246a:	b094      	sub	sp, #80	; 0x50
 801246c:	af00      	add	r7, sp, #0
 801246e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8012470:	2300      	movs	r3, #0
 8012472:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d106      	bne.n	8012488 <tcp_receive+0x20>
 801247a:	4b91      	ldr	r3, [pc, #580]	; (80126c0 <tcp_receive+0x258>)
 801247c:	f240 427b 	movw	r2, #1147	; 0x47b
 8012480:	4990      	ldr	r1, [pc, #576]	; (80126c4 <tcp_receive+0x25c>)
 8012482:	4891      	ldr	r0, [pc, #580]	; (80126c8 <tcp_receive+0x260>)
 8012484:	f006 fb6c 	bl	8018b60 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	7d1b      	ldrb	r3, [r3, #20]
 801248c:	2b03      	cmp	r3, #3
 801248e:	d806      	bhi.n	801249e <tcp_receive+0x36>
 8012490:	4b8b      	ldr	r3, [pc, #556]	; (80126c0 <tcp_receive+0x258>)
 8012492:	f240 427c 	movw	r2, #1148	; 0x47c
 8012496:	498d      	ldr	r1, [pc, #564]	; (80126cc <tcp_receive+0x264>)
 8012498:	488b      	ldr	r0, [pc, #556]	; (80126c8 <tcp_receive+0x260>)
 801249a:	f006 fb61 	bl	8018b60 <iprintf>

  if (flags & TCP_ACK) {
 801249e:	4b8c      	ldr	r3, [pc, #560]	; (80126d0 <tcp_receive+0x268>)
 80124a0:	781b      	ldrb	r3, [r3, #0]
 80124a2:	f003 0310 	and.w	r3, r3, #16
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	f000 8264 	beq.w	8012974 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80124b2:	461a      	mov	r2, r3
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80124b8:	4413      	add	r3, r2
 80124ba:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80124c0:	4b84      	ldr	r3, [pc, #528]	; (80126d4 <tcp_receive+0x26c>)
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	1ad3      	subs	r3, r2, r3
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	db1b      	blt.n	8012502 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80124ce:	4b81      	ldr	r3, [pc, #516]	; (80126d4 <tcp_receive+0x26c>)
 80124d0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80124d2:	429a      	cmp	r2, r3
 80124d4:	d106      	bne.n	80124e4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80124da:	4b7f      	ldr	r3, [pc, #508]	; (80126d8 <tcp_receive+0x270>)
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	1ad3      	subs	r3, r2, r3
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	db0e      	blt.n	8012502 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80124e8:	4b7b      	ldr	r3, [pc, #492]	; (80126d8 <tcp_receive+0x270>)
 80124ea:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80124ec:	429a      	cmp	r2, r3
 80124ee:	d125      	bne.n	801253c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80124f0:	4b7a      	ldr	r3, [pc, #488]	; (80126dc <tcp_receive+0x274>)
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	89db      	ldrh	r3, [r3, #14]
 80124f6:	b29a      	uxth	r2, r3
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80124fe:	429a      	cmp	r2, r3
 8012500:	d91c      	bls.n	801253c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012502:	4b76      	ldr	r3, [pc, #472]	; (80126dc <tcp_receive+0x274>)
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	89db      	ldrh	r3, [r3, #14]
 8012508:	b29a      	uxth	r2, r3
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801251c:	429a      	cmp	r2, r3
 801251e:	d205      	bcs.n	801252c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801252c:	4b69      	ldr	r3, [pc, #420]	; (80126d4 <tcp_receive+0x26c>)
 801252e:	681a      	ldr	r2, [r3, #0]
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8012534:	4b68      	ldr	r3, [pc, #416]	; (80126d8 <tcp_receive+0x270>)
 8012536:	681a      	ldr	r2, [r3, #0]
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801253c:	4b66      	ldr	r3, [pc, #408]	; (80126d8 <tcp_receive+0x270>)
 801253e:	681a      	ldr	r2, [r3, #0]
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012544:	1ad3      	subs	r3, r2, r3
 8012546:	2b00      	cmp	r3, #0
 8012548:	dc58      	bgt.n	80125fc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801254a:	4b65      	ldr	r3, [pc, #404]	; (80126e0 <tcp_receive+0x278>)
 801254c:	881b      	ldrh	r3, [r3, #0]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d14b      	bne.n	80125ea <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012556:	687a      	ldr	r2, [r7, #4]
 8012558:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801255c:	4413      	add	r3, r2
 801255e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012560:	429a      	cmp	r2, r3
 8012562:	d142      	bne.n	80125ea <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801256a:	2b00      	cmp	r3, #0
 801256c:	db3d      	blt.n	80125ea <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012572:	4b59      	ldr	r3, [pc, #356]	; (80126d8 <tcp_receive+0x270>)
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	429a      	cmp	r2, r3
 8012578:	d137      	bne.n	80125ea <tcp_receive+0x182>
              found_dupack = 1;
 801257a:	2301      	movs	r3, #1
 801257c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012584:	2bff      	cmp	r3, #255	; 0xff
 8012586:	d007      	beq.n	8012598 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801258e:	3301      	adds	r3, #1
 8012590:	b2da      	uxtb	r2, r3
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801259e:	2b03      	cmp	r3, #3
 80125a0:	d91b      	bls.n	80125da <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80125ac:	4413      	add	r3, r2
 80125ae:	b29a      	uxth	r2, r3
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80125b6:	429a      	cmp	r2, r3
 80125b8:	d30a      	bcc.n	80125d0 <tcp_receive+0x168>
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80125c4:	4413      	add	r3, r2
 80125c6:	b29a      	uxth	r2, r3
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80125ce:	e004      	b.n	80125da <tcp_receive+0x172>
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80125d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80125e0:	2b02      	cmp	r3, #2
 80125e2:	d902      	bls.n	80125ea <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80125e4:	6878      	ldr	r0, [r7, #4]
 80125e6:	f002 fb43 	bl	8014c70 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80125ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	f040 8161 	bne.w	80128b4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	2200      	movs	r2, #0
 80125f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80125fa:	e15b      	b.n	80128b4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80125fc:	4b36      	ldr	r3, [pc, #216]	; (80126d8 <tcp_receive+0x270>)
 80125fe:	681a      	ldr	r2, [r3, #0]
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012604:	1ad3      	subs	r3, r2, r3
 8012606:	3b01      	subs	r3, #1
 8012608:	2b00      	cmp	r3, #0
 801260a:	f2c0 814e 	blt.w	80128aa <tcp_receive+0x442>
 801260e:	4b32      	ldr	r3, [pc, #200]	; (80126d8 <tcp_receive+0x270>)
 8012610:	681a      	ldr	r2, [r3, #0]
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012616:	1ad3      	subs	r3, r2, r3
 8012618:	2b00      	cmp	r3, #0
 801261a:	f300 8146 	bgt.w	80128aa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	8b5b      	ldrh	r3, [r3, #26]
 8012622:	f003 0304 	and.w	r3, r3, #4
 8012626:	2b00      	cmp	r3, #0
 8012628:	d010      	beq.n	801264c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	8b5b      	ldrh	r3, [r3, #26]
 801262e:	f023 0304 	bic.w	r3, r3, #4
 8012632:	b29a      	uxth	r2, r3
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	2200      	movs	r2, #0
 8012648:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	2200      	movs	r2, #0
 8012650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801265a:	10db      	asrs	r3, r3, #3
 801265c:	b21b      	sxth	r3, r3
 801265e:	b29a      	uxth	r2, r3
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012666:	b29b      	uxth	r3, r3
 8012668:	4413      	add	r3, r2
 801266a:	b29b      	uxth	r3, r3
 801266c:	b21a      	sxth	r2, r3
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012674:	4b18      	ldr	r3, [pc, #96]	; (80126d8 <tcp_receive+0x270>)
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	b29a      	uxth	r2, r3
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801267e:	b29b      	uxth	r3, r3
 8012680:	1ad3      	subs	r3, r2, r3
 8012682:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	2200      	movs	r2, #0
 8012688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801268c:	4b12      	ldr	r3, [pc, #72]	; (80126d8 <tcp_receive+0x270>)
 801268e:	681a      	ldr	r2, [r3, #0]
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	7d1b      	ldrb	r3, [r3, #20]
 8012698:	2b03      	cmp	r3, #3
 801269a:	f240 8097 	bls.w	80127cc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80126aa:	429a      	cmp	r2, r3
 80126ac:	d245      	bcs.n	801273a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	8b5b      	ldrh	r3, [r3, #26]
 80126b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d014      	beq.n	80126e4 <tcp_receive+0x27c>
 80126ba:	2301      	movs	r3, #1
 80126bc:	e013      	b.n	80126e6 <tcp_receive+0x27e>
 80126be:	bf00      	nop
 80126c0:	0801b008 	.word	0x0801b008
 80126c4:	0801b338 	.word	0x0801b338
 80126c8:	0801b054 	.word	0x0801b054
 80126cc:	0801b354 	.word	0x0801b354
 80126d0:	24008ac4 	.word	0x24008ac4
 80126d4:	24008ab8 	.word	0x24008ab8
 80126d8:	24008abc 	.word	0x24008abc
 80126dc:	24008aa8 	.word	0x24008aa8
 80126e0:	24008ac2 	.word	0x24008ac2
 80126e4:	2302      	movs	r3, #2
 80126e6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80126ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80126ee:	b29a      	uxth	r2, r3
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80126f4:	fb12 f303 	smulbb	r3, r2, r3
 80126f8:	b29b      	uxth	r3, r3
 80126fa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80126fc:	4293      	cmp	r3, r2
 80126fe:	bf28      	it	cs
 8012700:	4613      	movcs	r3, r2
 8012702:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801270a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801270c:	4413      	add	r3, r2
 801270e:	b29a      	uxth	r2, r3
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012716:	429a      	cmp	r2, r3
 8012718:	d309      	bcc.n	801272e <tcp_receive+0x2c6>
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012720:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012722:	4413      	add	r3, r2
 8012724:	b29a      	uxth	r2, r3
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801272c:	e04e      	b.n	80127cc <tcp_receive+0x364>
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012734:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012738:	e048      	b.n	80127cc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012740:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012742:	4413      	add	r3, r2
 8012744:	b29a      	uxth	r2, r3
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801274c:	429a      	cmp	r2, r3
 801274e:	d309      	bcc.n	8012764 <tcp_receive+0x2fc>
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012756:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012758:	4413      	add	r3, r2
 801275a:	b29a      	uxth	r2, r3
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8012762:	e004      	b.n	801276e <tcp_receive+0x306>
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801276a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801277a:	429a      	cmp	r2, r3
 801277c:	d326      	bcc.n	80127cc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801278a:	1ad3      	subs	r3, r2, r3
 801278c:	b29a      	uxth	r2, r3
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801279e:	4413      	add	r3, r2
 80127a0:	b29a      	uxth	r2, r3
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80127a8:	429a      	cmp	r2, r3
 80127aa:	d30a      	bcc.n	80127c2 <tcp_receive+0x35a>
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80127b6:	4413      	add	r3, r2
 80127b8:	b29a      	uxth	r2, r3
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80127c0:	e004      	b.n	80127cc <tcp_receive+0x364>
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80127c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127d4:	4a98      	ldr	r2, [pc, #608]	; (8012a38 <tcp_receive+0x5d0>)
 80127d6:	6878      	ldr	r0, [r7, #4]
 80127d8:	f7ff fdca 	bl	8012370 <tcp_free_acked_segments>
 80127dc:	4602      	mov	r2, r0
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127ea:	4a94      	ldr	r2, [pc, #592]	; (8012a3c <tcp_receive+0x5d4>)
 80127ec:	6878      	ldr	r0, [r7, #4]
 80127ee:	f7ff fdbf 	bl	8012370 <tcp_free_acked_segments>
 80127f2:	4602      	mov	r2, r0
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d104      	bne.n	801280a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012806:	861a      	strh	r2, [r3, #48]	; 0x30
 8012808:	e002      	b.n	8012810 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	2200      	movs	r2, #0
 801280e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	2200      	movs	r2, #0
 8012814:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801281a:	2b00      	cmp	r3, #0
 801281c:	d103      	bne.n	8012826 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	2200      	movs	r2, #0
 8012822:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801282c:	4b84      	ldr	r3, [pc, #528]	; (8012a40 <tcp_receive+0x5d8>)
 801282e:	881b      	ldrh	r3, [r3, #0]
 8012830:	4413      	add	r3, r2
 8012832:	b29a      	uxth	r2, r3
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	8b5b      	ldrh	r3, [r3, #26]
 801283e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012842:	2b00      	cmp	r3, #0
 8012844:	d035      	beq.n	80128b2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801284a:	2b00      	cmp	r3, #0
 801284c:	d118      	bne.n	8012880 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012852:	2b00      	cmp	r3, #0
 8012854:	d00c      	beq.n	8012870 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801285e:	68db      	ldr	r3, [r3, #12]
 8012860:	685b      	ldr	r3, [r3, #4]
 8012862:	4618      	mov	r0, r3
 8012864:	f7fa fd93 	bl	800d38e <lwip_htonl>
 8012868:	4603      	mov	r3, r0
 801286a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801286c:	2b00      	cmp	r3, #0
 801286e:	dc20      	bgt.n	80128b2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	8b5b      	ldrh	r3, [r3, #26]
 8012874:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012878:	b29a      	uxth	r2, r3
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801287e:	e018      	b.n	80128b2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012888:	68db      	ldr	r3, [r3, #12]
 801288a:	685b      	ldr	r3, [r3, #4]
 801288c:	4618      	mov	r0, r3
 801288e:	f7fa fd7e 	bl	800d38e <lwip_htonl>
 8012892:	4603      	mov	r3, r0
 8012894:	1ae3      	subs	r3, r4, r3
 8012896:	2b00      	cmp	r3, #0
 8012898:	dc0b      	bgt.n	80128b2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	8b5b      	ldrh	r3, [r3, #26]
 801289e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80128a2:	b29a      	uxth	r2, r3
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80128a8:	e003      	b.n	80128b2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80128aa:	6878      	ldr	r0, [r7, #4]
 80128ac:	f002 fbce 	bl	801504c <tcp_send_empty_ack>
 80128b0:	e000      	b.n	80128b4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80128b2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d05b      	beq.n	8012974 <tcp_receive+0x50c>
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80128c0:	4b60      	ldr	r3, [pc, #384]	; (8012a44 <tcp_receive+0x5dc>)
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	1ad3      	subs	r3, r2, r3
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	da54      	bge.n	8012974 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80128ca:	4b5f      	ldr	r3, [pc, #380]	; (8012a48 <tcp_receive+0x5e0>)
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	b29a      	uxth	r2, r3
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128d4:	b29b      	uxth	r3, r3
 80128d6:	1ad3      	subs	r3, r2, r3
 80128d8:	b29b      	uxth	r3, r3
 80128da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80128de:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80128e8:	10db      	asrs	r3, r3, #3
 80128ea:	b21b      	sxth	r3, r3
 80128ec:	b29b      	uxth	r3, r3
 80128ee:	1ad3      	subs	r3, r2, r3
 80128f0:	b29b      	uxth	r3, r3
 80128f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80128fc:	b29a      	uxth	r2, r3
 80128fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012902:	4413      	add	r3, r2
 8012904:	b29b      	uxth	r3, r3
 8012906:	b21a      	sxth	r2, r3
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801290c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012910:	2b00      	cmp	r3, #0
 8012912:	da05      	bge.n	8012920 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8012914:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012918:	425b      	negs	r3, r3
 801291a:	b29b      	uxth	r3, r3
 801291c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012920:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801292a:	109b      	asrs	r3, r3, #2
 801292c:	b21b      	sxth	r3, r3
 801292e:	b29b      	uxth	r3, r3
 8012930:	1ad3      	subs	r3, r2, r3
 8012932:	b29b      	uxth	r3, r3
 8012934:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801293e:	b29a      	uxth	r2, r3
 8012940:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012944:	4413      	add	r3, r2
 8012946:	b29b      	uxth	r3, r3
 8012948:	b21a      	sxth	r2, r3
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012954:	10db      	asrs	r3, r3, #3
 8012956:	b21b      	sxth	r3, r3
 8012958:	b29a      	uxth	r2, r3
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012960:	b29b      	uxth	r3, r3
 8012962:	4413      	add	r3, r2
 8012964:	b29b      	uxth	r3, r3
 8012966:	b21a      	sxth	r2, r3
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	2200      	movs	r2, #0
 8012972:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012974:	4b35      	ldr	r3, [pc, #212]	; (8012a4c <tcp_receive+0x5e4>)
 8012976:	881b      	ldrh	r3, [r3, #0]
 8012978:	2b00      	cmp	r3, #0
 801297a:	f000 84e2 	beq.w	8013342 <tcp_receive+0xeda>
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	7d1b      	ldrb	r3, [r3, #20]
 8012982:	2b06      	cmp	r3, #6
 8012984:	f200 84dd 	bhi.w	8013342 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801298c:	4b30      	ldr	r3, [pc, #192]	; (8012a50 <tcp_receive+0x5e8>)
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	1ad3      	subs	r3, r2, r3
 8012992:	3b01      	subs	r3, #1
 8012994:	2b00      	cmp	r3, #0
 8012996:	f2c0 808f 	blt.w	8012ab8 <tcp_receive+0x650>
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801299e:	4b2b      	ldr	r3, [pc, #172]	; (8012a4c <tcp_receive+0x5e4>)
 80129a0:	881b      	ldrh	r3, [r3, #0]
 80129a2:	4619      	mov	r1, r3
 80129a4:	4b2a      	ldr	r3, [pc, #168]	; (8012a50 <tcp_receive+0x5e8>)
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	440b      	add	r3, r1
 80129aa:	1ad3      	subs	r3, r2, r3
 80129ac:	3301      	adds	r3, #1
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	f300 8082 	bgt.w	8012ab8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80129b4:	4b27      	ldr	r3, [pc, #156]	; (8012a54 <tcp_receive+0x5ec>)
 80129b6:	685b      	ldr	r3, [r3, #4]
 80129b8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80129be:	4b24      	ldr	r3, [pc, #144]	; (8012a50 <tcp_receive+0x5e8>)
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	1ad3      	subs	r3, r2, r3
 80129c4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80129c6:	4b23      	ldr	r3, [pc, #140]	; (8012a54 <tcp_receive+0x5ec>)
 80129c8:	685b      	ldr	r3, [r3, #4]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d106      	bne.n	80129dc <tcp_receive+0x574>
 80129ce:	4b22      	ldr	r3, [pc, #136]	; (8012a58 <tcp_receive+0x5f0>)
 80129d0:	f240 5294 	movw	r2, #1428	; 0x594
 80129d4:	4921      	ldr	r1, [pc, #132]	; (8012a5c <tcp_receive+0x5f4>)
 80129d6:	4822      	ldr	r0, [pc, #136]	; (8012a60 <tcp_receive+0x5f8>)
 80129d8:	f006 f8c2 	bl	8018b60 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80129dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80129e2:	4293      	cmp	r3, r2
 80129e4:	d906      	bls.n	80129f4 <tcp_receive+0x58c>
 80129e6:	4b1c      	ldr	r3, [pc, #112]	; (8012a58 <tcp_receive+0x5f0>)
 80129e8:	f240 5295 	movw	r2, #1429	; 0x595
 80129ec:	491d      	ldr	r1, [pc, #116]	; (8012a64 <tcp_receive+0x5fc>)
 80129ee:	481c      	ldr	r0, [pc, #112]	; (8012a60 <tcp_receive+0x5f8>)
 80129f0:	f006 f8b6 	bl	8018b60 <iprintf>
      off = (u16_t)off32;
 80129f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80129fa:	4b16      	ldr	r3, [pc, #88]	; (8012a54 <tcp_receive+0x5ec>)
 80129fc:	685b      	ldr	r3, [r3, #4]
 80129fe:	891b      	ldrh	r3, [r3, #8]
 8012a00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012a04:	429a      	cmp	r2, r3
 8012a06:	d906      	bls.n	8012a16 <tcp_receive+0x5ae>
 8012a08:	4b13      	ldr	r3, [pc, #76]	; (8012a58 <tcp_receive+0x5f0>)
 8012a0a:	f240 5297 	movw	r2, #1431	; 0x597
 8012a0e:	4916      	ldr	r1, [pc, #88]	; (8012a68 <tcp_receive+0x600>)
 8012a10:	4813      	ldr	r0, [pc, #76]	; (8012a60 <tcp_receive+0x5f8>)
 8012a12:	f006 f8a5 	bl	8018b60 <iprintf>
      inseg.len -= off;
 8012a16:	4b0f      	ldr	r3, [pc, #60]	; (8012a54 <tcp_receive+0x5ec>)
 8012a18:	891a      	ldrh	r2, [r3, #8]
 8012a1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012a1e:	1ad3      	subs	r3, r2, r3
 8012a20:	b29a      	uxth	r2, r3
 8012a22:	4b0c      	ldr	r3, [pc, #48]	; (8012a54 <tcp_receive+0x5ec>)
 8012a24:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012a26:	4b0b      	ldr	r3, [pc, #44]	; (8012a54 <tcp_receive+0x5ec>)
 8012a28:	685b      	ldr	r3, [r3, #4]
 8012a2a:	891a      	ldrh	r2, [r3, #8]
 8012a2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012a30:	1ad3      	subs	r3, r2, r3
 8012a32:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012a34:	e02a      	b.n	8012a8c <tcp_receive+0x624>
 8012a36:	bf00      	nop
 8012a38:	0801b370 	.word	0x0801b370
 8012a3c:	0801b378 	.word	0x0801b378
 8012a40:	24008ac0 	.word	0x24008ac0
 8012a44:	24008abc 	.word	0x24008abc
 8012a48:	24008a80 	.word	0x24008a80
 8012a4c:	24008ac2 	.word	0x24008ac2
 8012a50:	24008ab8 	.word	0x24008ab8
 8012a54:	24008a98 	.word	0x24008a98
 8012a58:	0801b008 	.word	0x0801b008
 8012a5c:	0801b380 	.word	0x0801b380
 8012a60:	0801b054 	.word	0x0801b054
 8012a64:	0801b390 	.word	0x0801b390
 8012a68:	0801b3a0 	.word	0x0801b3a0
        off -= p->len;
 8012a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a6e:	895b      	ldrh	r3, [r3, #10]
 8012a70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012a74:	1ad3      	subs	r3, r2, r3
 8012a76:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a7c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012a7e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a82:	2200      	movs	r2, #0
 8012a84:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a8e:	895b      	ldrh	r3, [r3, #10]
 8012a90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012a94:	429a      	cmp	r2, r3
 8012a96:	d8e9      	bhi.n	8012a6c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012a98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012a9c:	4619      	mov	r1, r3
 8012a9e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012aa0:	f7fc f8ba 	bl	800ec18 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012aa8:	4a91      	ldr	r2, [pc, #580]	; (8012cf0 <tcp_receive+0x888>)
 8012aaa:	6013      	str	r3, [r2, #0]
 8012aac:	4b91      	ldr	r3, [pc, #580]	; (8012cf4 <tcp_receive+0x88c>)
 8012aae:	68db      	ldr	r3, [r3, #12]
 8012ab0:	4a8f      	ldr	r2, [pc, #572]	; (8012cf0 <tcp_receive+0x888>)
 8012ab2:	6812      	ldr	r2, [r2, #0]
 8012ab4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012ab6:	e00d      	b.n	8012ad4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012ab8:	4b8d      	ldr	r3, [pc, #564]	; (8012cf0 <tcp_receive+0x888>)
 8012aba:	681a      	ldr	r2, [r3, #0]
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ac0:	1ad3      	subs	r3, r2, r3
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	da06      	bge.n	8012ad4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	8b5b      	ldrh	r3, [r3, #26]
 8012aca:	f043 0302 	orr.w	r3, r3, #2
 8012ace:	b29a      	uxth	r2, r3
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012ad4:	4b86      	ldr	r3, [pc, #536]	; (8012cf0 <tcp_receive+0x888>)
 8012ad6:	681a      	ldr	r2, [r3, #0]
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012adc:	1ad3      	subs	r3, r2, r3
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	f2c0 842a 	blt.w	8013338 <tcp_receive+0xed0>
 8012ae4:	4b82      	ldr	r3, [pc, #520]	; (8012cf0 <tcp_receive+0x888>)
 8012ae6:	681a      	ldr	r2, [r3, #0]
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012aec:	6879      	ldr	r1, [r7, #4]
 8012aee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012af0:	440b      	add	r3, r1
 8012af2:	1ad3      	subs	r3, r2, r3
 8012af4:	3301      	adds	r3, #1
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	f300 841e 	bgt.w	8013338 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012b00:	4b7b      	ldr	r3, [pc, #492]	; (8012cf0 <tcp_receive+0x888>)
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	429a      	cmp	r2, r3
 8012b06:	f040 829a 	bne.w	801303e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012b0a:	4b7a      	ldr	r3, [pc, #488]	; (8012cf4 <tcp_receive+0x88c>)
 8012b0c:	891c      	ldrh	r4, [r3, #8]
 8012b0e:	4b79      	ldr	r3, [pc, #484]	; (8012cf4 <tcp_receive+0x88c>)
 8012b10:	68db      	ldr	r3, [r3, #12]
 8012b12:	899b      	ldrh	r3, [r3, #12]
 8012b14:	b29b      	uxth	r3, r3
 8012b16:	4618      	mov	r0, r3
 8012b18:	f7fa fc24 	bl	800d364 <lwip_htons>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	b2db      	uxtb	r3, r3
 8012b20:	f003 0303 	and.w	r3, r3, #3
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d001      	beq.n	8012b2c <tcp_receive+0x6c4>
 8012b28:	2301      	movs	r3, #1
 8012b2a:	e000      	b.n	8012b2e <tcp_receive+0x6c6>
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	4423      	add	r3, r4
 8012b30:	b29a      	uxth	r2, r3
 8012b32:	4b71      	ldr	r3, [pc, #452]	; (8012cf8 <tcp_receive+0x890>)
 8012b34:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012b3a:	4b6f      	ldr	r3, [pc, #444]	; (8012cf8 <tcp_receive+0x890>)
 8012b3c:	881b      	ldrh	r3, [r3, #0]
 8012b3e:	429a      	cmp	r2, r3
 8012b40:	d275      	bcs.n	8012c2e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012b42:	4b6c      	ldr	r3, [pc, #432]	; (8012cf4 <tcp_receive+0x88c>)
 8012b44:	68db      	ldr	r3, [r3, #12]
 8012b46:	899b      	ldrh	r3, [r3, #12]
 8012b48:	b29b      	uxth	r3, r3
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	f7fa fc0a 	bl	800d364 <lwip_htons>
 8012b50:	4603      	mov	r3, r0
 8012b52:	b2db      	uxtb	r3, r3
 8012b54:	f003 0301 	and.w	r3, r3, #1
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d01f      	beq.n	8012b9c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012b5c:	4b65      	ldr	r3, [pc, #404]	; (8012cf4 <tcp_receive+0x88c>)
 8012b5e:	68db      	ldr	r3, [r3, #12]
 8012b60:	899b      	ldrh	r3, [r3, #12]
 8012b62:	b29b      	uxth	r3, r3
 8012b64:	b21b      	sxth	r3, r3
 8012b66:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012b6a:	b21c      	sxth	r4, r3
 8012b6c:	4b61      	ldr	r3, [pc, #388]	; (8012cf4 <tcp_receive+0x88c>)
 8012b6e:	68db      	ldr	r3, [r3, #12]
 8012b70:	899b      	ldrh	r3, [r3, #12]
 8012b72:	b29b      	uxth	r3, r3
 8012b74:	4618      	mov	r0, r3
 8012b76:	f7fa fbf5 	bl	800d364 <lwip_htons>
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	b2db      	uxtb	r3, r3
 8012b7e:	b29b      	uxth	r3, r3
 8012b80:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012b84:	b29b      	uxth	r3, r3
 8012b86:	4618      	mov	r0, r3
 8012b88:	f7fa fbec 	bl	800d364 <lwip_htons>
 8012b8c:	4603      	mov	r3, r0
 8012b8e:	b21b      	sxth	r3, r3
 8012b90:	4323      	orrs	r3, r4
 8012b92:	b21a      	sxth	r2, r3
 8012b94:	4b57      	ldr	r3, [pc, #348]	; (8012cf4 <tcp_receive+0x88c>)
 8012b96:	68db      	ldr	r3, [r3, #12]
 8012b98:	b292      	uxth	r2, r2
 8012b9a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012ba0:	4b54      	ldr	r3, [pc, #336]	; (8012cf4 <tcp_receive+0x88c>)
 8012ba2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012ba4:	4b53      	ldr	r3, [pc, #332]	; (8012cf4 <tcp_receive+0x88c>)
 8012ba6:	68db      	ldr	r3, [r3, #12]
 8012ba8:	899b      	ldrh	r3, [r3, #12]
 8012baa:	b29b      	uxth	r3, r3
 8012bac:	4618      	mov	r0, r3
 8012bae:	f7fa fbd9 	bl	800d364 <lwip_htons>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	b2db      	uxtb	r3, r3
 8012bb6:	f003 0302 	and.w	r3, r3, #2
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d005      	beq.n	8012bca <tcp_receive+0x762>
            inseg.len -= 1;
 8012bbe:	4b4d      	ldr	r3, [pc, #308]	; (8012cf4 <tcp_receive+0x88c>)
 8012bc0:	891b      	ldrh	r3, [r3, #8]
 8012bc2:	3b01      	subs	r3, #1
 8012bc4:	b29a      	uxth	r2, r3
 8012bc6:	4b4b      	ldr	r3, [pc, #300]	; (8012cf4 <tcp_receive+0x88c>)
 8012bc8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012bca:	4b4a      	ldr	r3, [pc, #296]	; (8012cf4 <tcp_receive+0x88c>)
 8012bcc:	685b      	ldr	r3, [r3, #4]
 8012bce:	4a49      	ldr	r2, [pc, #292]	; (8012cf4 <tcp_receive+0x88c>)
 8012bd0:	8912      	ldrh	r2, [r2, #8]
 8012bd2:	4611      	mov	r1, r2
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f7fb ff1f 	bl	800ea18 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012bda:	4b46      	ldr	r3, [pc, #280]	; (8012cf4 <tcp_receive+0x88c>)
 8012bdc:	891c      	ldrh	r4, [r3, #8]
 8012bde:	4b45      	ldr	r3, [pc, #276]	; (8012cf4 <tcp_receive+0x88c>)
 8012be0:	68db      	ldr	r3, [r3, #12]
 8012be2:	899b      	ldrh	r3, [r3, #12]
 8012be4:	b29b      	uxth	r3, r3
 8012be6:	4618      	mov	r0, r3
 8012be8:	f7fa fbbc 	bl	800d364 <lwip_htons>
 8012bec:	4603      	mov	r3, r0
 8012bee:	b2db      	uxtb	r3, r3
 8012bf0:	f003 0303 	and.w	r3, r3, #3
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d001      	beq.n	8012bfc <tcp_receive+0x794>
 8012bf8:	2301      	movs	r3, #1
 8012bfa:	e000      	b.n	8012bfe <tcp_receive+0x796>
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	4423      	add	r3, r4
 8012c00:	b29a      	uxth	r2, r3
 8012c02:	4b3d      	ldr	r3, [pc, #244]	; (8012cf8 <tcp_receive+0x890>)
 8012c04:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012c06:	4b3c      	ldr	r3, [pc, #240]	; (8012cf8 <tcp_receive+0x890>)
 8012c08:	881b      	ldrh	r3, [r3, #0]
 8012c0a:	461a      	mov	r2, r3
 8012c0c:	4b38      	ldr	r3, [pc, #224]	; (8012cf0 <tcp_receive+0x888>)
 8012c0e:	681b      	ldr	r3, [r3, #0]
 8012c10:	441a      	add	r2, r3
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c16:	6879      	ldr	r1, [r7, #4]
 8012c18:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012c1a:	440b      	add	r3, r1
 8012c1c:	429a      	cmp	r2, r3
 8012c1e:	d006      	beq.n	8012c2e <tcp_receive+0x7c6>
 8012c20:	4b36      	ldr	r3, [pc, #216]	; (8012cfc <tcp_receive+0x894>)
 8012c22:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8012c26:	4936      	ldr	r1, [pc, #216]	; (8012d00 <tcp_receive+0x898>)
 8012c28:	4836      	ldr	r0, [pc, #216]	; (8012d04 <tcp_receive+0x89c>)
 8012c2a:	f005 ff99 	bl	8018b60 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	f000 80e7 	beq.w	8012e06 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012c38:	4b2e      	ldr	r3, [pc, #184]	; (8012cf4 <tcp_receive+0x88c>)
 8012c3a:	68db      	ldr	r3, [r3, #12]
 8012c3c:	899b      	ldrh	r3, [r3, #12]
 8012c3e:	b29b      	uxth	r3, r3
 8012c40:	4618      	mov	r0, r3
 8012c42:	f7fa fb8f 	bl	800d364 <lwip_htons>
 8012c46:	4603      	mov	r3, r0
 8012c48:	b2db      	uxtb	r3, r3
 8012c4a:	f003 0301 	and.w	r3, r3, #1
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d010      	beq.n	8012c74 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012c52:	e00a      	b.n	8012c6a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c58:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c5e:	681a      	ldr	r2, [r3, #0]
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012c64:	68f8      	ldr	r0, [r7, #12]
 8012c66:	f7fd fca6 	bl	80105b6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d1f0      	bne.n	8012c54 <tcp_receive+0x7ec>
 8012c72:	e0c8      	b.n	8012e06 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c78:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012c7a:	e052      	b.n	8012d22 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c7e:	68db      	ldr	r3, [r3, #12]
 8012c80:	899b      	ldrh	r3, [r3, #12]
 8012c82:	b29b      	uxth	r3, r3
 8012c84:	4618      	mov	r0, r3
 8012c86:	f7fa fb6d 	bl	800d364 <lwip_htons>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	b2db      	uxtb	r3, r3
 8012c8e:	f003 0301 	and.w	r3, r3, #1
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d03d      	beq.n	8012d12 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012c96:	4b17      	ldr	r3, [pc, #92]	; (8012cf4 <tcp_receive+0x88c>)
 8012c98:	68db      	ldr	r3, [r3, #12]
 8012c9a:	899b      	ldrh	r3, [r3, #12]
 8012c9c:	b29b      	uxth	r3, r3
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	f7fa fb60 	bl	800d364 <lwip_htons>
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	b2db      	uxtb	r3, r3
 8012ca8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d130      	bne.n	8012d12 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012cb0:	4b10      	ldr	r3, [pc, #64]	; (8012cf4 <tcp_receive+0x88c>)
 8012cb2:	68db      	ldr	r3, [r3, #12]
 8012cb4:	899b      	ldrh	r3, [r3, #12]
 8012cb6:	b29c      	uxth	r4, r3
 8012cb8:	2001      	movs	r0, #1
 8012cba:	f7fa fb53 	bl	800d364 <lwip_htons>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	461a      	mov	r2, r3
 8012cc2:	4b0c      	ldr	r3, [pc, #48]	; (8012cf4 <tcp_receive+0x88c>)
 8012cc4:	68db      	ldr	r3, [r3, #12]
 8012cc6:	4322      	orrs	r2, r4
 8012cc8:	b292      	uxth	r2, r2
 8012cca:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012ccc:	4b09      	ldr	r3, [pc, #36]	; (8012cf4 <tcp_receive+0x88c>)
 8012cce:	891c      	ldrh	r4, [r3, #8]
 8012cd0:	4b08      	ldr	r3, [pc, #32]	; (8012cf4 <tcp_receive+0x88c>)
 8012cd2:	68db      	ldr	r3, [r3, #12]
 8012cd4:	899b      	ldrh	r3, [r3, #12]
 8012cd6:	b29b      	uxth	r3, r3
 8012cd8:	4618      	mov	r0, r3
 8012cda:	f7fa fb43 	bl	800d364 <lwip_htons>
 8012cde:	4603      	mov	r3, r0
 8012ce0:	b2db      	uxtb	r3, r3
 8012ce2:	f003 0303 	and.w	r3, r3, #3
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d00e      	beq.n	8012d08 <tcp_receive+0x8a0>
 8012cea:	2301      	movs	r3, #1
 8012cec:	e00d      	b.n	8012d0a <tcp_receive+0x8a2>
 8012cee:	bf00      	nop
 8012cf0:	24008ab8 	.word	0x24008ab8
 8012cf4:	24008a98 	.word	0x24008a98
 8012cf8:	24008ac2 	.word	0x24008ac2
 8012cfc:	0801b008 	.word	0x0801b008
 8012d00:	0801b3b0 	.word	0x0801b3b0
 8012d04:	0801b054 	.word	0x0801b054
 8012d08:	2300      	movs	r3, #0
 8012d0a:	4423      	add	r3, r4
 8012d0c:	b29a      	uxth	r2, r3
 8012d0e:	4b98      	ldr	r3, [pc, #608]	; (8012f70 <tcp_receive+0xb08>)
 8012d10:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8012d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d14:	613b      	str	r3, [r7, #16]
              next = next->next;
 8012d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8012d1c:	6938      	ldr	r0, [r7, #16]
 8012d1e:	f7fd fc4a 	bl	80105b6 <tcp_seg_free>
            while (next &&
 8012d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d00e      	beq.n	8012d46 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8012d28:	4b91      	ldr	r3, [pc, #580]	; (8012f70 <tcp_receive+0xb08>)
 8012d2a:	881b      	ldrh	r3, [r3, #0]
 8012d2c:	461a      	mov	r2, r3
 8012d2e:	4b91      	ldr	r3, [pc, #580]	; (8012f74 <tcp_receive+0xb0c>)
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	441a      	add	r2, r3
 8012d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d36:	68db      	ldr	r3, [r3, #12]
 8012d38:	685b      	ldr	r3, [r3, #4]
 8012d3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012d3c:	8909      	ldrh	r1, [r1, #8]
 8012d3e:	440b      	add	r3, r1
 8012d40:	1ad3      	subs	r3, r2, r3
            while (next &&
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	da9a      	bge.n	8012c7c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8012d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d059      	beq.n	8012e00 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8012d4c:	4b88      	ldr	r3, [pc, #544]	; (8012f70 <tcp_receive+0xb08>)
 8012d4e:	881b      	ldrh	r3, [r3, #0]
 8012d50:	461a      	mov	r2, r3
 8012d52:	4b88      	ldr	r3, [pc, #544]	; (8012f74 <tcp_receive+0xb0c>)
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	441a      	add	r2, r3
 8012d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d5a:	68db      	ldr	r3, [r3, #12]
 8012d5c:	685b      	ldr	r3, [r3, #4]
 8012d5e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	dd4d      	ble.n	8012e00 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8012d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d66:	68db      	ldr	r3, [r3, #12]
 8012d68:	685b      	ldr	r3, [r3, #4]
 8012d6a:	b29a      	uxth	r2, r3
 8012d6c:	4b81      	ldr	r3, [pc, #516]	; (8012f74 <tcp_receive+0xb0c>)
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	b29b      	uxth	r3, r3
 8012d72:	1ad3      	subs	r3, r2, r3
 8012d74:	b29a      	uxth	r2, r3
 8012d76:	4b80      	ldr	r3, [pc, #512]	; (8012f78 <tcp_receive+0xb10>)
 8012d78:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012d7a:	4b7f      	ldr	r3, [pc, #508]	; (8012f78 <tcp_receive+0xb10>)
 8012d7c:	68db      	ldr	r3, [r3, #12]
 8012d7e:	899b      	ldrh	r3, [r3, #12]
 8012d80:	b29b      	uxth	r3, r3
 8012d82:	4618      	mov	r0, r3
 8012d84:	f7fa faee 	bl	800d364 <lwip_htons>
 8012d88:	4603      	mov	r3, r0
 8012d8a:	b2db      	uxtb	r3, r3
 8012d8c:	f003 0302 	and.w	r3, r3, #2
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d005      	beq.n	8012da0 <tcp_receive+0x938>
                inseg.len -= 1;
 8012d94:	4b78      	ldr	r3, [pc, #480]	; (8012f78 <tcp_receive+0xb10>)
 8012d96:	891b      	ldrh	r3, [r3, #8]
 8012d98:	3b01      	subs	r3, #1
 8012d9a:	b29a      	uxth	r2, r3
 8012d9c:	4b76      	ldr	r3, [pc, #472]	; (8012f78 <tcp_receive+0xb10>)
 8012d9e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012da0:	4b75      	ldr	r3, [pc, #468]	; (8012f78 <tcp_receive+0xb10>)
 8012da2:	685b      	ldr	r3, [r3, #4]
 8012da4:	4a74      	ldr	r2, [pc, #464]	; (8012f78 <tcp_receive+0xb10>)
 8012da6:	8912      	ldrh	r2, [r2, #8]
 8012da8:	4611      	mov	r1, r2
 8012daa:	4618      	mov	r0, r3
 8012dac:	f7fb fe34 	bl	800ea18 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012db0:	4b71      	ldr	r3, [pc, #452]	; (8012f78 <tcp_receive+0xb10>)
 8012db2:	891c      	ldrh	r4, [r3, #8]
 8012db4:	4b70      	ldr	r3, [pc, #448]	; (8012f78 <tcp_receive+0xb10>)
 8012db6:	68db      	ldr	r3, [r3, #12]
 8012db8:	899b      	ldrh	r3, [r3, #12]
 8012dba:	b29b      	uxth	r3, r3
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	f7fa fad1 	bl	800d364 <lwip_htons>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	b2db      	uxtb	r3, r3
 8012dc6:	f003 0303 	and.w	r3, r3, #3
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d001      	beq.n	8012dd2 <tcp_receive+0x96a>
 8012dce:	2301      	movs	r3, #1
 8012dd0:	e000      	b.n	8012dd4 <tcp_receive+0x96c>
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	4423      	add	r3, r4
 8012dd6:	b29a      	uxth	r2, r3
 8012dd8:	4b65      	ldr	r3, [pc, #404]	; (8012f70 <tcp_receive+0xb08>)
 8012dda:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012ddc:	4b64      	ldr	r3, [pc, #400]	; (8012f70 <tcp_receive+0xb08>)
 8012dde:	881b      	ldrh	r3, [r3, #0]
 8012de0:	461a      	mov	r2, r3
 8012de2:	4b64      	ldr	r3, [pc, #400]	; (8012f74 <tcp_receive+0xb0c>)
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	441a      	add	r2, r3
 8012de8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012dea:	68db      	ldr	r3, [r3, #12]
 8012dec:	685b      	ldr	r3, [r3, #4]
 8012dee:	429a      	cmp	r2, r3
 8012df0:	d006      	beq.n	8012e00 <tcp_receive+0x998>
 8012df2:	4b62      	ldr	r3, [pc, #392]	; (8012f7c <tcp_receive+0xb14>)
 8012df4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8012df8:	4961      	ldr	r1, [pc, #388]	; (8012f80 <tcp_receive+0xb18>)
 8012dfa:	4862      	ldr	r0, [pc, #392]	; (8012f84 <tcp_receive+0xb1c>)
 8012dfc:	f005 feb0 	bl	8018b60 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012e04:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012e06:	4b5a      	ldr	r3, [pc, #360]	; (8012f70 <tcp_receive+0xb08>)
 8012e08:	881b      	ldrh	r3, [r3, #0]
 8012e0a:	461a      	mov	r2, r3
 8012e0c:	4b59      	ldr	r3, [pc, #356]	; (8012f74 <tcp_receive+0xb0c>)
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	441a      	add	r2, r3
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012e1a:	4b55      	ldr	r3, [pc, #340]	; (8012f70 <tcp_receive+0xb08>)
 8012e1c:	881b      	ldrh	r3, [r3, #0]
 8012e1e:	429a      	cmp	r2, r3
 8012e20:	d206      	bcs.n	8012e30 <tcp_receive+0x9c8>
 8012e22:	4b56      	ldr	r3, [pc, #344]	; (8012f7c <tcp_receive+0xb14>)
 8012e24:	f240 6207 	movw	r2, #1543	; 0x607
 8012e28:	4957      	ldr	r1, [pc, #348]	; (8012f88 <tcp_receive+0xb20>)
 8012e2a:	4856      	ldr	r0, [pc, #344]	; (8012f84 <tcp_receive+0xb1c>)
 8012e2c:	f005 fe98 	bl	8018b60 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012e34:	4b4e      	ldr	r3, [pc, #312]	; (8012f70 <tcp_receive+0xb08>)
 8012e36:	881b      	ldrh	r3, [r3, #0]
 8012e38:	1ad3      	subs	r3, r2, r3
 8012e3a:	b29a      	uxth	r2, r3
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012e40:	6878      	ldr	r0, [r7, #4]
 8012e42:	f7fc fe93 	bl	800fb6c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012e46:	4b4c      	ldr	r3, [pc, #304]	; (8012f78 <tcp_receive+0xb10>)
 8012e48:	685b      	ldr	r3, [r3, #4]
 8012e4a:	891b      	ldrh	r3, [r3, #8]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d006      	beq.n	8012e5e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8012e50:	4b49      	ldr	r3, [pc, #292]	; (8012f78 <tcp_receive+0xb10>)
 8012e52:	685b      	ldr	r3, [r3, #4]
 8012e54:	4a4d      	ldr	r2, [pc, #308]	; (8012f8c <tcp_receive+0xb24>)
 8012e56:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012e58:	4b47      	ldr	r3, [pc, #284]	; (8012f78 <tcp_receive+0xb10>)
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012e5e:	4b46      	ldr	r3, [pc, #280]	; (8012f78 <tcp_receive+0xb10>)
 8012e60:	68db      	ldr	r3, [r3, #12]
 8012e62:	899b      	ldrh	r3, [r3, #12]
 8012e64:	b29b      	uxth	r3, r3
 8012e66:	4618      	mov	r0, r3
 8012e68:	f7fa fa7c 	bl	800d364 <lwip_htons>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	b2db      	uxtb	r3, r3
 8012e70:	f003 0301 	and.w	r3, r3, #1
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	f000 80b8 	beq.w	8012fea <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012e7a:	4b45      	ldr	r3, [pc, #276]	; (8012f90 <tcp_receive+0xb28>)
 8012e7c:	781b      	ldrb	r3, [r3, #0]
 8012e7e:	f043 0320 	orr.w	r3, r3, #32
 8012e82:	b2da      	uxtb	r2, r3
 8012e84:	4b42      	ldr	r3, [pc, #264]	; (8012f90 <tcp_receive+0xb28>)
 8012e86:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012e88:	e0af      	b.n	8012fea <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e8e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e94:	68db      	ldr	r3, [r3, #12]
 8012e96:	685b      	ldr	r3, [r3, #4]
 8012e98:	4a36      	ldr	r2, [pc, #216]	; (8012f74 <tcp_receive+0xb0c>)
 8012e9a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012e9c:	68bb      	ldr	r3, [r7, #8]
 8012e9e:	891b      	ldrh	r3, [r3, #8]
 8012ea0:	461c      	mov	r4, r3
 8012ea2:	68bb      	ldr	r3, [r7, #8]
 8012ea4:	68db      	ldr	r3, [r3, #12]
 8012ea6:	899b      	ldrh	r3, [r3, #12]
 8012ea8:	b29b      	uxth	r3, r3
 8012eaa:	4618      	mov	r0, r3
 8012eac:	f7fa fa5a 	bl	800d364 <lwip_htons>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	b2db      	uxtb	r3, r3
 8012eb4:	f003 0303 	and.w	r3, r3, #3
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d001      	beq.n	8012ec0 <tcp_receive+0xa58>
 8012ebc:	2301      	movs	r3, #1
 8012ebe:	e000      	b.n	8012ec2 <tcp_receive+0xa5a>
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	191a      	adds	r2, r3, r4
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ec8:	441a      	add	r2, r3
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ed2:	461c      	mov	r4, r3
 8012ed4:	68bb      	ldr	r3, [r7, #8]
 8012ed6:	891b      	ldrh	r3, [r3, #8]
 8012ed8:	461d      	mov	r5, r3
 8012eda:	68bb      	ldr	r3, [r7, #8]
 8012edc:	68db      	ldr	r3, [r3, #12]
 8012ede:	899b      	ldrh	r3, [r3, #12]
 8012ee0:	b29b      	uxth	r3, r3
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f7fa fa3e 	bl	800d364 <lwip_htons>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	b2db      	uxtb	r3, r3
 8012eec:	f003 0303 	and.w	r3, r3, #3
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d001      	beq.n	8012ef8 <tcp_receive+0xa90>
 8012ef4:	2301      	movs	r3, #1
 8012ef6:	e000      	b.n	8012efa <tcp_receive+0xa92>
 8012ef8:	2300      	movs	r3, #0
 8012efa:	442b      	add	r3, r5
 8012efc:	429c      	cmp	r4, r3
 8012efe:	d206      	bcs.n	8012f0e <tcp_receive+0xaa6>
 8012f00:	4b1e      	ldr	r3, [pc, #120]	; (8012f7c <tcp_receive+0xb14>)
 8012f02:	f240 622b 	movw	r2, #1579	; 0x62b
 8012f06:	4923      	ldr	r1, [pc, #140]	; (8012f94 <tcp_receive+0xb2c>)
 8012f08:	481e      	ldr	r0, [pc, #120]	; (8012f84 <tcp_receive+0xb1c>)
 8012f0a:	f005 fe29 	bl	8018b60 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012f0e:	68bb      	ldr	r3, [r7, #8]
 8012f10:	891b      	ldrh	r3, [r3, #8]
 8012f12:	461c      	mov	r4, r3
 8012f14:	68bb      	ldr	r3, [r7, #8]
 8012f16:	68db      	ldr	r3, [r3, #12]
 8012f18:	899b      	ldrh	r3, [r3, #12]
 8012f1a:	b29b      	uxth	r3, r3
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f7fa fa21 	bl	800d364 <lwip_htons>
 8012f22:	4603      	mov	r3, r0
 8012f24:	b2db      	uxtb	r3, r3
 8012f26:	f003 0303 	and.w	r3, r3, #3
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d001      	beq.n	8012f32 <tcp_receive+0xaca>
 8012f2e:	2301      	movs	r3, #1
 8012f30:	e000      	b.n	8012f34 <tcp_receive+0xacc>
 8012f32:	2300      	movs	r3, #0
 8012f34:	1919      	adds	r1, r3, r4
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012f3a:	b28b      	uxth	r3, r1
 8012f3c:	1ad3      	subs	r3, r2, r3
 8012f3e:	b29a      	uxth	r2, r3
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012f44:	6878      	ldr	r0, [r7, #4]
 8012f46:	f7fc fe11 	bl	800fb6c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012f4a:	68bb      	ldr	r3, [r7, #8]
 8012f4c:	685b      	ldr	r3, [r3, #4]
 8012f4e:	891b      	ldrh	r3, [r3, #8]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d028      	beq.n	8012fa6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012f54:	4b0d      	ldr	r3, [pc, #52]	; (8012f8c <tcp_receive+0xb24>)
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d01d      	beq.n	8012f98 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8012f5c:	4b0b      	ldr	r3, [pc, #44]	; (8012f8c <tcp_receive+0xb24>)
 8012f5e:	681a      	ldr	r2, [r3, #0]
 8012f60:	68bb      	ldr	r3, [r7, #8]
 8012f62:	685b      	ldr	r3, [r3, #4]
 8012f64:	4619      	mov	r1, r3
 8012f66:	4610      	mov	r0, r2
 8012f68:	f7fb ffaa 	bl	800eec0 <pbuf_cat>
 8012f6c:	e018      	b.n	8012fa0 <tcp_receive+0xb38>
 8012f6e:	bf00      	nop
 8012f70:	24008ac2 	.word	0x24008ac2
 8012f74:	24008ab8 	.word	0x24008ab8
 8012f78:	24008a98 	.word	0x24008a98
 8012f7c:	0801b008 	.word	0x0801b008
 8012f80:	0801b3e8 	.word	0x0801b3e8
 8012f84:	0801b054 	.word	0x0801b054
 8012f88:	0801b424 	.word	0x0801b424
 8012f8c:	24008ac8 	.word	0x24008ac8
 8012f90:	24008ac5 	.word	0x24008ac5
 8012f94:	0801b444 	.word	0x0801b444
            } else {
              recv_data = cseg->p;
 8012f98:	68bb      	ldr	r3, [r7, #8]
 8012f9a:	685b      	ldr	r3, [r3, #4]
 8012f9c:	4a70      	ldr	r2, [pc, #448]	; (8013160 <tcp_receive+0xcf8>)
 8012f9e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012fa0:	68bb      	ldr	r3, [r7, #8]
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012fa6:	68bb      	ldr	r3, [r7, #8]
 8012fa8:	68db      	ldr	r3, [r3, #12]
 8012faa:	899b      	ldrh	r3, [r3, #12]
 8012fac:	b29b      	uxth	r3, r3
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f7fa f9d8 	bl	800d364 <lwip_htons>
 8012fb4:	4603      	mov	r3, r0
 8012fb6:	b2db      	uxtb	r3, r3
 8012fb8:	f003 0301 	and.w	r3, r3, #1
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d00d      	beq.n	8012fdc <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012fc0:	4b68      	ldr	r3, [pc, #416]	; (8013164 <tcp_receive+0xcfc>)
 8012fc2:	781b      	ldrb	r3, [r3, #0]
 8012fc4:	f043 0320 	orr.w	r3, r3, #32
 8012fc8:	b2da      	uxtb	r2, r3
 8012fca:	4b66      	ldr	r3, [pc, #408]	; (8013164 <tcp_receive+0xcfc>)
 8012fcc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	7d1b      	ldrb	r3, [r3, #20]
 8012fd2:	2b04      	cmp	r3, #4
 8012fd4:	d102      	bne.n	8012fdc <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	2207      	movs	r2, #7
 8012fda:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012fdc:	68bb      	ldr	r3, [r7, #8]
 8012fde:	681a      	ldr	r2, [r3, #0]
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012fe4:	68b8      	ldr	r0, [r7, #8]
 8012fe6:	f7fd fae6 	bl	80105b6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d008      	beq.n	8013004 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ff6:	68db      	ldr	r3, [r3, #12]
 8012ff8:	685a      	ldr	r2, [r3, #4]
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012ffe:	429a      	cmp	r2, r3
 8013000:	f43f af43 	beq.w	8012e8a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	8b5b      	ldrh	r3, [r3, #26]
 8013008:	f003 0301 	and.w	r3, r3, #1
 801300c:	2b00      	cmp	r3, #0
 801300e:	d00e      	beq.n	801302e <tcp_receive+0xbc6>
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	8b5b      	ldrh	r3, [r3, #26]
 8013014:	f023 0301 	bic.w	r3, r3, #1
 8013018:	b29a      	uxth	r2, r3
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	835a      	strh	r2, [r3, #26]
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	8b5b      	ldrh	r3, [r3, #26]
 8013022:	f043 0302 	orr.w	r3, r3, #2
 8013026:	b29a      	uxth	r2, r3
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801302c:	e188      	b.n	8013340 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	8b5b      	ldrh	r3, [r3, #26]
 8013032:	f043 0301 	orr.w	r3, r3, #1
 8013036:	b29a      	uxth	r2, r3
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801303c:	e180      	b.n	8013340 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013042:	2b00      	cmp	r3, #0
 8013044:	d106      	bne.n	8013054 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8013046:	4848      	ldr	r0, [pc, #288]	; (8013168 <tcp_receive+0xd00>)
 8013048:	f7fd faec 	bl	8010624 <tcp_seg_copy>
 801304c:	4602      	mov	r2, r0
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	675a      	str	r2, [r3, #116]	; 0x74
 8013052:	e16d      	b.n	8013330 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8013054:	2300      	movs	r3, #0
 8013056:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801305c:	63bb      	str	r3, [r7, #56]	; 0x38
 801305e:	e157      	b.n	8013310 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8013060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013062:	68db      	ldr	r3, [r3, #12]
 8013064:	685a      	ldr	r2, [r3, #4]
 8013066:	4b41      	ldr	r3, [pc, #260]	; (801316c <tcp_receive+0xd04>)
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	429a      	cmp	r2, r3
 801306c:	d11d      	bne.n	80130aa <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801306e:	4b3e      	ldr	r3, [pc, #248]	; (8013168 <tcp_receive+0xd00>)
 8013070:	891a      	ldrh	r2, [r3, #8]
 8013072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013074:	891b      	ldrh	r3, [r3, #8]
 8013076:	429a      	cmp	r2, r3
 8013078:	f240 814f 	bls.w	801331a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801307c:	483a      	ldr	r0, [pc, #232]	; (8013168 <tcp_receive+0xd00>)
 801307e:	f7fd fad1 	bl	8010624 <tcp_seg_copy>
 8013082:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8013084:	697b      	ldr	r3, [r7, #20]
 8013086:	2b00      	cmp	r3, #0
 8013088:	f000 8149 	beq.w	801331e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801308c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801308e:	2b00      	cmp	r3, #0
 8013090:	d003      	beq.n	801309a <tcp_receive+0xc32>
                    prev->next = cseg;
 8013092:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013094:	697a      	ldr	r2, [r7, #20]
 8013096:	601a      	str	r2, [r3, #0]
 8013098:	e002      	b.n	80130a0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	697a      	ldr	r2, [r7, #20]
 801309e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80130a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80130a2:	6978      	ldr	r0, [r7, #20]
 80130a4:	f7ff f8dc 	bl	8012260 <tcp_oos_insert_segment>
                }
                break;
 80130a8:	e139      	b.n	801331e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80130aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d117      	bne.n	80130e0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80130b0:	4b2e      	ldr	r3, [pc, #184]	; (801316c <tcp_receive+0xd04>)
 80130b2:	681a      	ldr	r2, [r3, #0]
 80130b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130b6:	68db      	ldr	r3, [r3, #12]
 80130b8:	685b      	ldr	r3, [r3, #4]
 80130ba:	1ad3      	subs	r3, r2, r3
 80130bc:	2b00      	cmp	r3, #0
 80130be:	da57      	bge.n	8013170 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80130c0:	4829      	ldr	r0, [pc, #164]	; (8013168 <tcp_receive+0xd00>)
 80130c2:	f7fd faaf 	bl	8010624 <tcp_seg_copy>
 80130c6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80130c8:	69bb      	ldr	r3, [r7, #24]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	f000 8129 	beq.w	8013322 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	69ba      	ldr	r2, [r7, #24]
 80130d4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80130d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80130d8:	69b8      	ldr	r0, [r7, #24]
 80130da:	f7ff f8c1 	bl	8012260 <tcp_oos_insert_segment>
                  }
                  break;
 80130de:	e120      	b.n	8013322 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80130e0:	4b22      	ldr	r3, [pc, #136]	; (801316c <tcp_receive+0xd04>)
 80130e2:	681a      	ldr	r2, [r3, #0]
 80130e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130e6:	68db      	ldr	r3, [r3, #12]
 80130e8:	685b      	ldr	r3, [r3, #4]
 80130ea:	1ad3      	subs	r3, r2, r3
 80130ec:	3b01      	subs	r3, #1
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	db3e      	blt.n	8013170 <tcp_receive+0xd08>
 80130f2:	4b1e      	ldr	r3, [pc, #120]	; (801316c <tcp_receive+0xd04>)
 80130f4:	681a      	ldr	r2, [r3, #0]
 80130f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130f8:	68db      	ldr	r3, [r3, #12]
 80130fa:	685b      	ldr	r3, [r3, #4]
 80130fc:	1ad3      	subs	r3, r2, r3
 80130fe:	3301      	adds	r3, #1
 8013100:	2b00      	cmp	r3, #0
 8013102:	dc35      	bgt.n	8013170 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013104:	4818      	ldr	r0, [pc, #96]	; (8013168 <tcp_receive+0xd00>)
 8013106:	f7fd fa8d 	bl	8010624 <tcp_seg_copy>
 801310a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801310c:	69fb      	ldr	r3, [r7, #28]
 801310e:	2b00      	cmp	r3, #0
 8013110:	f000 8109 	beq.w	8013326 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013116:	68db      	ldr	r3, [r3, #12]
 8013118:	685b      	ldr	r3, [r3, #4]
 801311a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801311c:	8912      	ldrh	r2, [r2, #8]
 801311e:	441a      	add	r2, r3
 8013120:	4b12      	ldr	r3, [pc, #72]	; (801316c <tcp_receive+0xd04>)
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	1ad3      	subs	r3, r2, r3
 8013126:	2b00      	cmp	r3, #0
 8013128:	dd12      	ble.n	8013150 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801312a:	4b10      	ldr	r3, [pc, #64]	; (801316c <tcp_receive+0xd04>)
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	b29a      	uxth	r2, r3
 8013130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013132:	68db      	ldr	r3, [r3, #12]
 8013134:	685b      	ldr	r3, [r3, #4]
 8013136:	b29b      	uxth	r3, r3
 8013138:	1ad3      	subs	r3, r2, r3
 801313a:	b29a      	uxth	r2, r3
 801313c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801313e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013142:	685a      	ldr	r2, [r3, #4]
 8013144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013146:	891b      	ldrh	r3, [r3, #8]
 8013148:	4619      	mov	r1, r3
 801314a:	4610      	mov	r0, r2
 801314c:	f7fb fc64 	bl	800ea18 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013152:	69fa      	ldr	r2, [r7, #28]
 8013154:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8013156:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013158:	69f8      	ldr	r0, [r7, #28]
 801315a:	f7ff f881 	bl	8012260 <tcp_oos_insert_segment>
                  }
                  break;
 801315e:	e0e2      	b.n	8013326 <tcp_receive+0xebe>
 8013160:	24008ac8 	.word	0x24008ac8
 8013164:	24008ac5 	.word	0x24008ac5
 8013168:	24008a98 	.word	0x24008a98
 801316c:	24008ab8 	.word	0x24008ab8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8013170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013172:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	2b00      	cmp	r3, #0
 801317a:	f040 80c6 	bne.w	801330a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801317e:	4b80      	ldr	r3, [pc, #512]	; (8013380 <tcp_receive+0xf18>)
 8013180:	681a      	ldr	r2, [r3, #0]
 8013182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013184:	68db      	ldr	r3, [r3, #12]
 8013186:	685b      	ldr	r3, [r3, #4]
 8013188:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801318a:	2b00      	cmp	r3, #0
 801318c:	f340 80bd 	ble.w	801330a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013192:	68db      	ldr	r3, [r3, #12]
 8013194:	899b      	ldrh	r3, [r3, #12]
 8013196:	b29b      	uxth	r3, r3
 8013198:	4618      	mov	r0, r3
 801319a:	f7fa f8e3 	bl	800d364 <lwip_htons>
 801319e:	4603      	mov	r3, r0
 80131a0:	b2db      	uxtb	r3, r3
 80131a2:	f003 0301 	and.w	r3, r3, #1
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	f040 80bf 	bne.w	801332a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80131ac:	4875      	ldr	r0, [pc, #468]	; (8013384 <tcp_receive+0xf1c>)
 80131ae:	f7fd fa39 	bl	8010624 <tcp_seg_copy>
 80131b2:	4602      	mov	r2, r0
 80131b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131b6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80131b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	f000 80b6 	beq.w	801332e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80131c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131c4:	68db      	ldr	r3, [r3, #12]
 80131c6:	685b      	ldr	r3, [r3, #4]
 80131c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80131ca:	8912      	ldrh	r2, [r2, #8]
 80131cc:	441a      	add	r2, r3
 80131ce:	4b6c      	ldr	r3, [pc, #432]	; (8013380 <tcp_receive+0xf18>)
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	1ad3      	subs	r3, r2, r3
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	dd12      	ble.n	80131fe <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80131d8:	4b69      	ldr	r3, [pc, #420]	; (8013380 <tcp_receive+0xf18>)
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	b29a      	uxth	r2, r3
 80131de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131e0:	68db      	ldr	r3, [r3, #12]
 80131e2:	685b      	ldr	r3, [r3, #4]
 80131e4:	b29b      	uxth	r3, r3
 80131e6:	1ad3      	subs	r3, r2, r3
 80131e8:	b29a      	uxth	r2, r3
 80131ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ec:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80131ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131f0:	685a      	ldr	r2, [r3, #4]
 80131f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131f4:	891b      	ldrh	r3, [r3, #8]
 80131f6:	4619      	mov	r1, r3
 80131f8:	4610      	mov	r0, r2
 80131fa:	f7fb fc0d 	bl	800ea18 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80131fe:	4b62      	ldr	r3, [pc, #392]	; (8013388 <tcp_receive+0xf20>)
 8013200:	881b      	ldrh	r3, [r3, #0]
 8013202:	461a      	mov	r2, r3
 8013204:	4b5e      	ldr	r3, [pc, #376]	; (8013380 <tcp_receive+0xf18>)
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	441a      	add	r2, r3
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801320e:	6879      	ldr	r1, [r7, #4]
 8013210:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013212:	440b      	add	r3, r1
 8013214:	1ad3      	subs	r3, r2, r3
 8013216:	2b00      	cmp	r3, #0
 8013218:	f340 8089 	ble.w	801332e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801321c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	68db      	ldr	r3, [r3, #12]
 8013222:	899b      	ldrh	r3, [r3, #12]
 8013224:	b29b      	uxth	r3, r3
 8013226:	4618      	mov	r0, r3
 8013228:	f7fa f89c 	bl	800d364 <lwip_htons>
 801322c:	4603      	mov	r3, r0
 801322e:	b2db      	uxtb	r3, r3
 8013230:	f003 0301 	and.w	r3, r3, #1
 8013234:	2b00      	cmp	r3, #0
 8013236:	d022      	beq.n	801327e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	68db      	ldr	r3, [r3, #12]
 801323e:	899b      	ldrh	r3, [r3, #12]
 8013240:	b29b      	uxth	r3, r3
 8013242:	b21b      	sxth	r3, r3
 8013244:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013248:	b21c      	sxth	r4, r3
 801324a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	68db      	ldr	r3, [r3, #12]
 8013250:	899b      	ldrh	r3, [r3, #12]
 8013252:	b29b      	uxth	r3, r3
 8013254:	4618      	mov	r0, r3
 8013256:	f7fa f885 	bl	800d364 <lwip_htons>
 801325a:	4603      	mov	r3, r0
 801325c:	b2db      	uxtb	r3, r3
 801325e:	b29b      	uxth	r3, r3
 8013260:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013264:	b29b      	uxth	r3, r3
 8013266:	4618      	mov	r0, r3
 8013268:	f7fa f87c 	bl	800d364 <lwip_htons>
 801326c:	4603      	mov	r3, r0
 801326e:	b21b      	sxth	r3, r3
 8013270:	4323      	orrs	r3, r4
 8013272:	b21a      	sxth	r2, r3
 8013274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	68db      	ldr	r3, [r3, #12]
 801327a:	b292      	uxth	r2, r2
 801327c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013282:	b29a      	uxth	r2, r3
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013288:	4413      	add	r3, r2
 801328a:	b299      	uxth	r1, r3
 801328c:	4b3c      	ldr	r3, [pc, #240]	; (8013380 <tcp_receive+0xf18>)
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	b29a      	uxth	r2, r3
 8013292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	1a8a      	subs	r2, r1, r2
 8013298:	b292      	uxth	r2, r2
 801329a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801329c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	685a      	ldr	r2, [r3, #4]
 80132a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	891b      	ldrh	r3, [r3, #8]
 80132a8:	4619      	mov	r1, r3
 80132aa:	4610      	mov	r0, r2
 80132ac:	f7fb fbb4 	bl	800ea18 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80132b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	891c      	ldrh	r4, [r3, #8]
 80132b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	68db      	ldr	r3, [r3, #12]
 80132bc:	899b      	ldrh	r3, [r3, #12]
 80132be:	b29b      	uxth	r3, r3
 80132c0:	4618      	mov	r0, r3
 80132c2:	f7fa f84f 	bl	800d364 <lwip_htons>
 80132c6:	4603      	mov	r3, r0
 80132c8:	b2db      	uxtb	r3, r3
 80132ca:	f003 0303 	and.w	r3, r3, #3
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d001      	beq.n	80132d6 <tcp_receive+0xe6e>
 80132d2:	2301      	movs	r3, #1
 80132d4:	e000      	b.n	80132d8 <tcp_receive+0xe70>
 80132d6:	2300      	movs	r3, #0
 80132d8:	4423      	add	r3, r4
 80132da:	b29a      	uxth	r2, r3
 80132dc:	4b2a      	ldr	r3, [pc, #168]	; (8013388 <tcp_receive+0xf20>)
 80132de:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80132e0:	4b29      	ldr	r3, [pc, #164]	; (8013388 <tcp_receive+0xf20>)
 80132e2:	881b      	ldrh	r3, [r3, #0]
 80132e4:	461a      	mov	r2, r3
 80132e6:	4b26      	ldr	r3, [pc, #152]	; (8013380 <tcp_receive+0xf18>)
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	441a      	add	r2, r3
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132f0:	6879      	ldr	r1, [r7, #4]
 80132f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80132f4:	440b      	add	r3, r1
 80132f6:	429a      	cmp	r2, r3
 80132f8:	d019      	beq.n	801332e <tcp_receive+0xec6>
 80132fa:	4b24      	ldr	r3, [pc, #144]	; (801338c <tcp_receive+0xf24>)
 80132fc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8013300:	4923      	ldr	r1, [pc, #140]	; (8013390 <tcp_receive+0xf28>)
 8013302:	4824      	ldr	r0, [pc, #144]	; (8013394 <tcp_receive+0xf2c>)
 8013304:	f005 fc2c 	bl	8018b60 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013308:	e011      	b.n	801332e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801330a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	63bb      	str	r3, [r7, #56]	; 0x38
 8013310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013312:	2b00      	cmp	r3, #0
 8013314:	f47f aea4 	bne.w	8013060 <tcp_receive+0xbf8>
 8013318:	e00a      	b.n	8013330 <tcp_receive+0xec8>
                break;
 801331a:	bf00      	nop
 801331c:	e008      	b.n	8013330 <tcp_receive+0xec8>
                break;
 801331e:	bf00      	nop
 8013320:	e006      	b.n	8013330 <tcp_receive+0xec8>
                  break;
 8013322:	bf00      	nop
 8013324:	e004      	b.n	8013330 <tcp_receive+0xec8>
                  break;
 8013326:	bf00      	nop
 8013328:	e002      	b.n	8013330 <tcp_receive+0xec8>
                  break;
 801332a:	bf00      	nop
 801332c:	e000      	b.n	8013330 <tcp_receive+0xec8>
                break;
 801332e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8013330:	6878      	ldr	r0, [r7, #4]
 8013332:	f001 fe8b 	bl	801504c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013336:	e003      	b.n	8013340 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013338:	6878      	ldr	r0, [r7, #4]
 801333a:	f001 fe87 	bl	801504c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801333e:	e01a      	b.n	8013376 <tcp_receive+0xf0e>
 8013340:	e019      	b.n	8013376 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8013342:	4b0f      	ldr	r3, [pc, #60]	; (8013380 <tcp_receive+0xf18>)
 8013344:	681a      	ldr	r2, [r3, #0]
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801334a:	1ad3      	subs	r3, r2, r3
 801334c:	2b00      	cmp	r3, #0
 801334e:	db0a      	blt.n	8013366 <tcp_receive+0xefe>
 8013350:	4b0b      	ldr	r3, [pc, #44]	; (8013380 <tcp_receive+0xf18>)
 8013352:	681a      	ldr	r2, [r3, #0]
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013358:	6879      	ldr	r1, [r7, #4]
 801335a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801335c:	440b      	add	r3, r1
 801335e:	1ad3      	subs	r3, r2, r3
 8013360:	3301      	adds	r3, #1
 8013362:	2b00      	cmp	r3, #0
 8013364:	dd07      	ble.n	8013376 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	8b5b      	ldrh	r3, [r3, #26]
 801336a:	f043 0302 	orr.w	r3, r3, #2
 801336e:	b29a      	uxth	r2, r3
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8013374:	e7ff      	b.n	8013376 <tcp_receive+0xf0e>
 8013376:	bf00      	nop
 8013378:	3750      	adds	r7, #80	; 0x50
 801337a:	46bd      	mov	sp, r7
 801337c:	bdb0      	pop	{r4, r5, r7, pc}
 801337e:	bf00      	nop
 8013380:	24008ab8 	.word	0x24008ab8
 8013384:	24008a98 	.word	0x24008a98
 8013388:	24008ac2 	.word	0x24008ac2
 801338c:	0801b008 	.word	0x0801b008
 8013390:	0801b3b0 	.word	0x0801b3b0
 8013394:	0801b054 	.word	0x0801b054

08013398 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013398:	b480      	push	{r7}
 801339a:	b083      	sub	sp, #12
 801339c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801339e:	4b15      	ldr	r3, [pc, #84]	; (80133f4 <tcp_get_next_optbyte+0x5c>)
 80133a0:	881b      	ldrh	r3, [r3, #0]
 80133a2:	1c5a      	adds	r2, r3, #1
 80133a4:	b291      	uxth	r1, r2
 80133a6:	4a13      	ldr	r2, [pc, #76]	; (80133f4 <tcp_get_next_optbyte+0x5c>)
 80133a8:	8011      	strh	r1, [r2, #0]
 80133aa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80133ac:	4b12      	ldr	r3, [pc, #72]	; (80133f8 <tcp_get_next_optbyte+0x60>)
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d004      	beq.n	80133be <tcp_get_next_optbyte+0x26>
 80133b4:	4b11      	ldr	r3, [pc, #68]	; (80133fc <tcp_get_next_optbyte+0x64>)
 80133b6:	881b      	ldrh	r3, [r3, #0]
 80133b8:	88fa      	ldrh	r2, [r7, #6]
 80133ba:	429a      	cmp	r2, r3
 80133bc:	d208      	bcs.n	80133d0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80133be:	4b10      	ldr	r3, [pc, #64]	; (8013400 <tcp_get_next_optbyte+0x68>)
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	3314      	adds	r3, #20
 80133c4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80133c6:	88fb      	ldrh	r3, [r7, #6]
 80133c8:	683a      	ldr	r2, [r7, #0]
 80133ca:	4413      	add	r3, r2
 80133cc:	781b      	ldrb	r3, [r3, #0]
 80133ce:	e00b      	b.n	80133e8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80133d0:	88fb      	ldrh	r3, [r7, #6]
 80133d2:	b2da      	uxtb	r2, r3
 80133d4:	4b09      	ldr	r3, [pc, #36]	; (80133fc <tcp_get_next_optbyte+0x64>)
 80133d6:	881b      	ldrh	r3, [r3, #0]
 80133d8:	b2db      	uxtb	r3, r3
 80133da:	1ad3      	subs	r3, r2, r3
 80133dc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80133de:	4b06      	ldr	r3, [pc, #24]	; (80133f8 <tcp_get_next_optbyte+0x60>)
 80133e0:	681a      	ldr	r2, [r3, #0]
 80133e2:	797b      	ldrb	r3, [r7, #5]
 80133e4:	4413      	add	r3, r2
 80133e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80133e8:	4618      	mov	r0, r3
 80133ea:	370c      	adds	r7, #12
 80133ec:	46bd      	mov	sp, r7
 80133ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133f2:	4770      	bx	lr
 80133f4:	24008ab4 	.word	0x24008ab4
 80133f8:	24008ab0 	.word	0x24008ab0
 80133fc:	24008aae 	.word	0x24008aae
 8013400:	24008aa8 	.word	0x24008aa8

08013404 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013404:	b580      	push	{r7, lr}
 8013406:	b084      	sub	sp, #16
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d106      	bne.n	8013420 <tcp_parseopt+0x1c>
 8013412:	4b32      	ldr	r3, [pc, #200]	; (80134dc <tcp_parseopt+0xd8>)
 8013414:	f240 727d 	movw	r2, #1917	; 0x77d
 8013418:	4931      	ldr	r1, [pc, #196]	; (80134e0 <tcp_parseopt+0xdc>)
 801341a:	4832      	ldr	r0, [pc, #200]	; (80134e4 <tcp_parseopt+0xe0>)
 801341c:	f005 fba0 	bl	8018b60 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013420:	4b31      	ldr	r3, [pc, #196]	; (80134e8 <tcp_parseopt+0xe4>)
 8013422:	881b      	ldrh	r3, [r3, #0]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d055      	beq.n	80134d4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013428:	4b30      	ldr	r3, [pc, #192]	; (80134ec <tcp_parseopt+0xe8>)
 801342a:	2200      	movs	r2, #0
 801342c:	801a      	strh	r2, [r3, #0]
 801342e:	e045      	b.n	80134bc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8013430:	f7ff ffb2 	bl	8013398 <tcp_get_next_optbyte>
 8013434:	4603      	mov	r3, r0
 8013436:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013438:	7bfb      	ldrb	r3, [r7, #15]
 801343a:	2b02      	cmp	r3, #2
 801343c:	d006      	beq.n	801344c <tcp_parseopt+0x48>
 801343e:	2b02      	cmp	r3, #2
 8013440:	dc2b      	bgt.n	801349a <tcp_parseopt+0x96>
 8013442:	2b00      	cmp	r3, #0
 8013444:	d041      	beq.n	80134ca <tcp_parseopt+0xc6>
 8013446:	2b01      	cmp	r3, #1
 8013448:	d127      	bne.n	801349a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801344a:	e037      	b.n	80134bc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801344c:	f7ff ffa4 	bl	8013398 <tcp_get_next_optbyte>
 8013450:	4603      	mov	r3, r0
 8013452:	2b04      	cmp	r3, #4
 8013454:	d13b      	bne.n	80134ce <tcp_parseopt+0xca>
 8013456:	4b25      	ldr	r3, [pc, #148]	; (80134ec <tcp_parseopt+0xe8>)
 8013458:	881b      	ldrh	r3, [r3, #0]
 801345a:	3301      	adds	r3, #1
 801345c:	4a22      	ldr	r2, [pc, #136]	; (80134e8 <tcp_parseopt+0xe4>)
 801345e:	8812      	ldrh	r2, [r2, #0]
 8013460:	4293      	cmp	r3, r2
 8013462:	da34      	bge.n	80134ce <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013464:	f7ff ff98 	bl	8013398 <tcp_get_next_optbyte>
 8013468:	4603      	mov	r3, r0
 801346a:	b29b      	uxth	r3, r3
 801346c:	021b      	lsls	r3, r3, #8
 801346e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8013470:	f7ff ff92 	bl	8013398 <tcp_get_next_optbyte>
 8013474:	4603      	mov	r3, r0
 8013476:	b29a      	uxth	r2, r3
 8013478:	89bb      	ldrh	r3, [r7, #12]
 801347a:	4313      	orrs	r3, r2
 801347c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801347e:	89bb      	ldrh	r3, [r7, #12]
 8013480:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013484:	d804      	bhi.n	8013490 <tcp_parseopt+0x8c>
 8013486:	89bb      	ldrh	r3, [r7, #12]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d001      	beq.n	8013490 <tcp_parseopt+0x8c>
 801348c:	89ba      	ldrh	r2, [r7, #12]
 801348e:	e001      	b.n	8013494 <tcp_parseopt+0x90>
 8013490:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8013498:	e010      	b.n	80134bc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801349a:	f7ff ff7d 	bl	8013398 <tcp_get_next_optbyte>
 801349e:	4603      	mov	r3, r0
 80134a0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80134a2:	7afb      	ldrb	r3, [r7, #11]
 80134a4:	2b01      	cmp	r3, #1
 80134a6:	d914      	bls.n	80134d2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80134a8:	7afb      	ldrb	r3, [r7, #11]
 80134aa:	b29a      	uxth	r2, r3
 80134ac:	4b0f      	ldr	r3, [pc, #60]	; (80134ec <tcp_parseopt+0xe8>)
 80134ae:	881b      	ldrh	r3, [r3, #0]
 80134b0:	4413      	add	r3, r2
 80134b2:	b29b      	uxth	r3, r3
 80134b4:	3b02      	subs	r3, #2
 80134b6:	b29a      	uxth	r2, r3
 80134b8:	4b0c      	ldr	r3, [pc, #48]	; (80134ec <tcp_parseopt+0xe8>)
 80134ba:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80134bc:	4b0b      	ldr	r3, [pc, #44]	; (80134ec <tcp_parseopt+0xe8>)
 80134be:	881a      	ldrh	r2, [r3, #0]
 80134c0:	4b09      	ldr	r3, [pc, #36]	; (80134e8 <tcp_parseopt+0xe4>)
 80134c2:	881b      	ldrh	r3, [r3, #0]
 80134c4:	429a      	cmp	r2, r3
 80134c6:	d3b3      	bcc.n	8013430 <tcp_parseopt+0x2c>
 80134c8:	e004      	b.n	80134d4 <tcp_parseopt+0xd0>
          return;
 80134ca:	bf00      	nop
 80134cc:	e002      	b.n	80134d4 <tcp_parseopt+0xd0>
            return;
 80134ce:	bf00      	nop
 80134d0:	e000      	b.n	80134d4 <tcp_parseopt+0xd0>
            return;
 80134d2:	bf00      	nop
      }
    }
  }
}
 80134d4:	3710      	adds	r7, #16
 80134d6:	46bd      	mov	sp, r7
 80134d8:	bd80      	pop	{r7, pc}
 80134da:	bf00      	nop
 80134dc:	0801b008 	.word	0x0801b008
 80134e0:	0801b46c 	.word	0x0801b46c
 80134e4:	0801b054 	.word	0x0801b054
 80134e8:	24008aac 	.word	0x24008aac
 80134ec:	24008ab4 	.word	0x24008ab4

080134f0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80134f0:	b480      	push	{r7}
 80134f2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80134f4:	4b05      	ldr	r3, [pc, #20]	; (801350c <tcp_trigger_input_pcb_close+0x1c>)
 80134f6:	781b      	ldrb	r3, [r3, #0]
 80134f8:	f043 0310 	orr.w	r3, r3, #16
 80134fc:	b2da      	uxtb	r2, r3
 80134fe:	4b03      	ldr	r3, [pc, #12]	; (801350c <tcp_trigger_input_pcb_close+0x1c>)
 8013500:	701a      	strb	r2, [r3, #0]
}
 8013502:	bf00      	nop
 8013504:	46bd      	mov	sp, r7
 8013506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350a:	4770      	bx	lr
 801350c:	24008ac5 	.word	0x24008ac5

08013510 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b084      	sub	sp, #16
 8013514:	af00      	add	r7, sp, #0
 8013516:	60f8      	str	r0, [r7, #12]
 8013518:	60b9      	str	r1, [r7, #8]
 801351a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d00a      	beq.n	8013538 <tcp_route+0x28>
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	7a1b      	ldrb	r3, [r3, #8]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d006      	beq.n	8013538 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	7a1b      	ldrb	r3, [r3, #8]
 801352e:	4618      	mov	r0, r3
 8013530:	f7fb f86a 	bl	800e608 <netif_get_by_index>
 8013534:	4603      	mov	r3, r0
 8013536:	e003      	b.n	8013540 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013538:	6878      	ldr	r0, [r7, #4]
 801353a:	f003 fe5b 	bl	80171f4 <ip4_route>
 801353e:	4603      	mov	r3, r0
  }
}
 8013540:	4618      	mov	r0, r3
 8013542:	3710      	adds	r7, #16
 8013544:	46bd      	mov	sp, r7
 8013546:	bd80      	pop	{r7, pc}

08013548 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013548:	b590      	push	{r4, r7, lr}
 801354a:	b087      	sub	sp, #28
 801354c:	af00      	add	r7, sp, #0
 801354e:	60f8      	str	r0, [r7, #12]
 8013550:	60b9      	str	r1, [r7, #8]
 8013552:	603b      	str	r3, [r7, #0]
 8013554:	4613      	mov	r3, r2
 8013556:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d105      	bne.n	801356a <tcp_create_segment+0x22>
 801355e:	4b44      	ldr	r3, [pc, #272]	; (8013670 <tcp_create_segment+0x128>)
 8013560:	22a3      	movs	r2, #163	; 0xa3
 8013562:	4944      	ldr	r1, [pc, #272]	; (8013674 <tcp_create_segment+0x12c>)
 8013564:	4844      	ldr	r0, [pc, #272]	; (8013678 <tcp_create_segment+0x130>)
 8013566:	f005 fafb 	bl	8018b60 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d105      	bne.n	801357c <tcp_create_segment+0x34>
 8013570:	4b3f      	ldr	r3, [pc, #252]	; (8013670 <tcp_create_segment+0x128>)
 8013572:	22a4      	movs	r2, #164	; 0xa4
 8013574:	4941      	ldr	r1, [pc, #260]	; (801367c <tcp_create_segment+0x134>)
 8013576:	4840      	ldr	r0, [pc, #256]	; (8013678 <tcp_create_segment+0x130>)
 8013578:	f005 faf2 	bl	8018b60 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801357c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013580:	009b      	lsls	r3, r3, #2
 8013582:	b2db      	uxtb	r3, r3
 8013584:	f003 0304 	and.w	r3, r3, #4
 8013588:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801358a:	2003      	movs	r0, #3
 801358c:	f7fa fcb0 	bl	800def0 <memp_malloc>
 8013590:	6138      	str	r0, [r7, #16]
 8013592:	693b      	ldr	r3, [r7, #16]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d104      	bne.n	80135a2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013598:	68b8      	ldr	r0, [r7, #8]
 801359a:	f7fb fbc3 	bl	800ed24 <pbuf_free>
    return NULL;
 801359e:	2300      	movs	r3, #0
 80135a0:	e061      	b.n	8013666 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80135a2:	693b      	ldr	r3, [r7, #16]
 80135a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80135a8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80135aa:	693b      	ldr	r3, [r7, #16]
 80135ac:	2200      	movs	r2, #0
 80135ae:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80135b0:	693b      	ldr	r3, [r7, #16]
 80135b2:	68ba      	ldr	r2, [r7, #8]
 80135b4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80135b6:	68bb      	ldr	r3, [r7, #8]
 80135b8:	891a      	ldrh	r2, [r3, #8]
 80135ba:	7dfb      	ldrb	r3, [r7, #23]
 80135bc:	b29b      	uxth	r3, r3
 80135be:	429a      	cmp	r2, r3
 80135c0:	d205      	bcs.n	80135ce <tcp_create_segment+0x86>
 80135c2:	4b2b      	ldr	r3, [pc, #172]	; (8013670 <tcp_create_segment+0x128>)
 80135c4:	22b0      	movs	r2, #176	; 0xb0
 80135c6:	492e      	ldr	r1, [pc, #184]	; (8013680 <tcp_create_segment+0x138>)
 80135c8:	482b      	ldr	r0, [pc, #172]	; (8013678 <tcp_create_segment+0x130>)
 80135ca:	f005 fac9 	bl	8018b60 <iprintf>
  seg->len = p->tot_len - optlen;
 80135ce:	68bb      	ldr	r3, [r7, #8]
 80135d0:	891a      	ldrh	r2, [r3, #8]
 80135d2:	7dfb      	ldrb	r3, [r7, #23]
 80135d4:	b29b      	uxth	r3, r3
 80135d6:	1ad3      	subs	r3, r2, r3
 80135d8:	b29a      	uxth	r2, r3
 80135da:	693b      	ldr	r3, [r7, #16]
 80135dc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80135de:	2114      	movs	r1, #20
 80135e0:	68b8      	ldr	r0, [r7, #8]
 80135e2:	f7fb fb09 	bl	800ebf8 <pbuf_add_header>
 80135e6:	4603      	mov	r3, r0
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d004      	beq.n	80135f6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80135ec:	6938      	ldr	r0, [r7, #16]
 80135ee:	f7fc ffe2 	bl	80105b6 <tcp_seg_free>
    return NULL;
 80135f2:	2300      	movs	r3, #0
 80135f4:	e037      	b.n	8013666 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80135f6:	693b      	ldr	r3, [r7, #16]
 80135f8:	685b      	ldr	r3, [r3, #4]
 80135fa:	685a      	ldr	r2, [r3, #4]
 80135fc:	693b      	ldr	r3, [r7, #16]
 80135fe:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	8ada      	ldrh	r2, [r3, #22]
 8013604:	693b      	ldr	r3, [r7, #16]
 8013606:	68dc      	ldr	r4, [r3, #12]
 8013608:	4610      	mov	r0, r2
 801360a:	f7f9 feab 	bl	800d364 <lwip_htons>
 801360e:	4603      	mov	r3, r0
 8013610:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	8b1a      	ldrh	r2, [r3, #24]
 8013616:	693b      	ldr	r3, [r7, #16]
 8013618:	68dc      	ldr	r4, [r3, #12]
 801361a:	4610      	mov	r0, r2
 801361c:	f7f9 fea2 	bl	800d364 <lwip_htons>
 8013620:	4603      	mov	r3, r0
 8013622:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013624:	693b      	ldr	r3, [r7, #16]
 8013626:	68dc      	ldr	r4, [r3, #12]
 8013628:	6838      	ldr	r0, [r7, #0]
 801362a:	f7f9 feb0 	bl	800d38e <lwip_htonl>
 801362e:	4603      	mov	r3, r0
 8013630:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013632:	7dfb      	ldrb	r3, [r7, #23]
 8013634:	089b      	lsrs	r3, r3, #2
 8013636:	b2db      	uxtb	r3, r3
 8013638:	b29b      	uxth	r3, r3
 801363a:	3305      	adds	r3, #5
 801363c:	b29b      	uxth	r3, r3
 801363e:	031b      	lsls	r3, r3, #12
 8013640:	b29a      	uxth	r2, r3
 8013642:	79fb      	ldrb	r3, [r7, #7]
 8013644:	b29b      	uxth	r3, r3
 8013646:	4313      	orrs	r3, r2
 8013648:	b29a      	uxth	r2, r3
 801364a:	693b      	ldr	r3, [r7, #16]
 801364c:	68dc      	ldr	r4, [r3, #12]
 801364e:	4610      	mov	r0, r2
 8013650:	f7f9 fe88 	bl	800d364 <lwip_htons>
 8013654:	4603      	mov	r3, r0
 8013656:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013658:	693b      	ldr	r3, [r7, #16]
 801365a:	68db      	ldr	r3, [r3, #12]
 801365c:	2200      	movs	r2, #0
 801365e:	749a      	strb	r2, [r3, #18]
 8013660:	2200      	movs	r2, #0
 8013662:	74da      	strb	r2, [r3, #19]
  return seg;
 8013664:	693b      	ldr	r3, [r7, #16]
}
 8013666:	4618      	mov	r0, r3
 8013668:	371c      	adds	r7, #28
 801366a:	46bd      	mov	sp, r7
 801366c:	bd90      	pop	{r4, r7, pc}
 801366e:	bf00      	nop
 8013670:	0801b488 	.word	0x0801b488
 8013674:	0801b4bc 	.word	0x0801b4bc
 8013678:	0801b4dc 	.word	0x0801b4dc
 801367c:	0801b504 	.word	0x0801b504
 8013680:	0801b528 	.word	0x0801b528

08013684 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b086      	sub	sp, #24
 8013688:	af00      	add	r7, sp, #0
 801368a:	607b      	str	r3, [r7, #4]
 801368c:	4603      	mov	r3, r0
 801368e:	73fb      	strb	r3, [r7, #15]
 8013690:	460b      	mov	r3, r1
 8013692:	81bb      	strh	r3, [r7, #12]
 8013694:	4613      	mov	r3, r2
 8013696:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013698:	89bb      	ldrh	r3, [r7, #12]
 801369a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d105      	bne.n	80136ae <tcp_pbuf_prealloc+0x2a>
 80136a2:	4b30      	ldr	r3, [pc, #192]	; (8013764 <tcp_pbuf_prealloc+0xe0>)
 80136a4:	22e8      	movs	r2, #232	; 0xe8
 80136a6:	4930      	ldr	r1, [pc, #192]	; (8013768 <tcp_pbuf_prealloc+0xe4>)
 80136a8:	4830      	ldr	r0, [pc, #192]	; (801376c <tcp_pbuf_prealloc+0xe8>)
 80136aa:	f005 fa59 	bl	8018b60 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80136ae:	6a3b      	ldr	r3, [r7, #32]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d105      	bne.n	80136c0 <tcp_pbuf_prealloc+0x3c>
 80136b4:	4b2b      	ldr	r3, [pc, #172]	; (8013764 <tcp_pbuf_prealloc+0xe0>)
 80136b6:	22e9      	movs	r2, #233	; 0xe9
 80136b8:	492d      	ldr	r1, [pc, #180]	; (8013770 <tcp_pbuf_prealloc+0xec>)
 80136ba:	482c      	ldr	r0, [pc, #176]	; (801376c <tcp_pbuf_prealloc+0xe8>)
 80136bc:	f005 fa50 	bl	8018b60 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80136c0:	89ba      	ldrh	r2, [r7, #12]
 80136c2:	897b      	ldrh	r3, [r7, #10]
 80136c4:	429a      	cmp	r2, r3
 80136c6:	d221      	bcs.n	801370c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80136c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80136cc:	f003 0302 	and.w	r3, r3, #2
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d111      	bne.n	80136f8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80136d4:	6a3b      	ldr	r3, [r7, #32]
 80136d6:	8b5b      	ldrh	r3, [r3, #26]
 80136d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d115      	bne.n	801370c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80136e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d007      	beq.n	80136f8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80136e8:	6a3b      	ldr	r3, [r7, #32]
 80136ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d103      	bne.n	80136f8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80136f0:	6a3b      	ldr	r3, [r7, #32]
 80136f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d009      	beq.n	801370c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80136f8:	89bb      	ldrh	r3, [r7, #12]
 80136fa:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80136fe:	f023 0203 	bic.w	r2, r3, #3
 8013702:	897b      	ldrh	r3, [r7, #10]
 8013704:	4293      	cmp	r3, r2
 8013706:	bf28      	it	cs
 8013708:	4613      	movcs	r3, r2
 801370a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801370c:	8af9      	ldrh	r1, [r7, #22]
 801370e:	7bfb      	ldrb	r3, [r7, #15]
 8013710:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013714:	4618      	mov	r0, r3
 8013716:	f7fb f821 	bl	800e75c <pbuf_alloc>
 801371a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801371c:	693b      	ldr	r3, [r7, #16]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d101      	bne.n	8013726 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8013722:	2300      	movs	r3, #0
 8013724:	e019      	b.n	801375a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8013726:	693b      	ldr	r3, [r7, #16]
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	2b00      	cmp	r3, #0
 801372c:	d006      	beq.n	801373c <tcp_pbuf_prealloc+0xb8>
 801372e:	4b0d      	ldr	r3, [pc, #52]	; (8013764 <tcp_pbuf_prealloc+0xe0>)
 8013730:	f240 120b 	movw	r2, #267	; 0x10b
 8013734:	490f      	ldr	r1, [pc, #60]	; (8013774 <tcp_pbuf_prealloc+0xf0>)
 8013736:	480d      	ldr	r0, [pc, #52]	; (801376c <tcp_pbuf_prealloc+0xe8>)
 8013738:	f005 fa12 	bl	8018b60 <iprintf>
  *oversize = p->len - length;
 801373c:	693b      	ldr	r3, [r7, #16]
 801373e:	895a      	ldrh	r2, [r3, #10]
 8013740:	89bb      	ldrh	r3, [r7, #12]
 8013742:	1ad3      	subs	r3, r2, r3
 8013744:	b29a      	uxth	r2, r3
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801374a:	693b      	ldr	r3, [r7, #16]
 801374c:	89ba      	ldrh	r2, [r7, #12]
 801374e:	811a      	strh	r2, [r3, #8]
 8013750:	693b      	ldr	r3, [r7, #16]
 8013752:	891a      	ldrh	r2, [r3, #8]
 8013754:	693b      	ldr	r3, [r7, #16]
 8013756:	815a      	strh	r2, [r3, #10]
  return p;
 8013758:	693b      	ldr	r3, [r7, #16]
}
 801375a:	4618      	mov	r0, r3
 801375c:	3718      	adds	r7, #24
 801375e:	46bd      	mov	sp, r7
 8013760:	bd80      	pop	{r7, pc}
 8013762:	bf00      	nop
 8013764:	0801b488 	.word	0x0801b488
 8013768:	0801b540 	.word	0x0801b540
 801376c:	0801b4dc 	.word	0x0801b4dc
 8013770:	0801b564 	.word	0x0801b564
 8013774:	0801b584 	.word	0x0801b584

08013778 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b082      	sub	sp, #8
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
 8013780:	460b      	mov	r3, r1
 8013782:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d106      	bne.n	8013798 <tcp_write_checks+0x20>
 801378a:	4b33      	ldr	r3, [pc, #204]	; (8013858 <tcp_write_checks+0xe0>)
 801378c:	f240 1233 	movw	r2, #307	; 0x133
 8013790:	4932      	ldr	r1, [pc, #200]	; (801385c <tcp_write_checks+0xe4>)
 8013792:	4833      	ldr	r0, [pc, #204]	; (8013860 <tcp_write_checks+0xe8>)
 8013794:	f005 f9e4 	bl	8018b60 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	7d1b      	ldrb	r3, [r3, #20]
 801379c:	2b04      	cmp	r3, #4
 801379e:	d00e      	beq.n	80137be <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80137a4:	2b07      	cmp	r3, #7
 80137a6:	d00a      	beq.n	80137be <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80137ac:	2b02      	cmp	r3, #2
 80137ae:	d006      	beq.n	80137be <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80137b4:	2b03      	cmp	r3, #3
 80137b6:	d002      	beq.n	80137be <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80137b8:	f06f 030a 	mvn.w	r3, #10
 80137bc:	e048      	b.n	8013850 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80137be:	887b      	ldrh	r3, [r7, #2]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d101      	bne.n	80137c8 <tcp_write_checks+0x50>
    return ERR_OK;
 80137c4:	2300      	movs	r3, #0
 80137c6:	e043      	b.n	8013850 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80137ce:	887a      	ldrh	r2, [r7, #2]
 80137d0:	429a      	cmp	r2, r3
 80137d2:	d909      	bls.n	80137e8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	8b5b      	ldrh	r3, [r3, #26]
 80137d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80137dc:	b29a      	uxth	r2, r3
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80137e2:	f04f 33ff 	mov.w	r3, #4294967295
 80137e6:	e033      	b.n	8013850 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80137ee:	2b08      	cmp	r3, #8
 80137f0:	d909      	bls.n	8013806 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	8b5b      	ldrh	r3, [r3, #26]
 80137f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80137fa:	b29a      	uxth	r2, r3
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013800:	f04f 33ff 	mov.w	r3, #4294967295
 8013804:	e024      	b.n	8013850 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801380c:	2b00      	cmp	r3, #0
 801380e:	d00f      	beq.n	8013830 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013814:	2b00      	cmp	r3, #0
 8013816:	d11a      	bne.n	801384e <tcp_write_checks+0xd6>
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801381c:	2b00      	cmp	r3, #0
 801381e:	d116      	bne.n	801384e <tcp_write_checks+0xd6>
 8013820:	4b0d      	ldr	r3, [pc, #52]	; (8013858 <tcp_write_checks+0xe0>)
 8013822:	f240 1255 	movw	r2, #341	; 0x155
 8013826:	490f      	ldr	r1, [pc, #60]	; (8013864 <tcp_write_checks+0xec>)
 8013828:	480d      	ldr	r0, [pc, #52]	; (8013860 <tcp_write_checks+0xe8>)
 801382a:	f005 f999 	bl	8018b60 <iprintf>
 801382e:	e00e      	b.n	801384e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013834:	2b00      	cmp	r3, #0
 8013836:	d103      	bne.n	8013840 <tcp_write_checks+0xc8>
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801383c:	2b00      	cmp	r3, #0
 801383e:	d006      	beq.n	801384e <tcp_write_checks+0xd6>
 8013840:	4b05      	ldr	r3, [pc, #20]	; (8013858 <tcp_write_checks+0xe0>)
 8013842:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8013846:	4908      	ldr	r1, [pc, #32]	; (8013868 <tcp_write_checks+0xf0>)
 8013848:	4805      	ldr	r0, [pc, #20]	; (8013860 <tcp_write_checks+0xe8>)
 801384a:	f005 f989 	bl	8018b60 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801384e:	2300      	movs	r3, #0
}
 8013850:	4618      	mov	r0, r3
 8013852:	3708      	adds	r7, #8
 8013854:	46bd      	mov	sp, r7
 8013856:	bd80      	pop	{r7, pc}
 8013858:	0801b488 	.word	0x0801b488
 801385c:	0801b598 	.word	0x0801b598
 8013860:	0801b4dc 	.word	0x0801b4dc
 8013864:	0801b5b8 	.word	0x0801b5b8
 8013868:	0801b5f4 	.word	0x0801b5f4

0801386c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801386c:	b590      	push	{r4, r7, lr}
 801386e:	b09b      	sub	sp, #108	; 0x6c
 8013870:	af04      	add	r7, sp, #16
 8013872:	60f8      	str	r0, [r7, #12]
 8013874:	60b9      	str	r1, [r7, #8]
 8013876:	4611      	mov	r1, r2
 8013878:	461a      	mov	r2, r3
 801387a:	460b      	mov	r3, r1
 801387c:	80fb      	strh	r3, [r7, #6]
 801387e:	4613      	mov	r3, r2
 8013880:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8013882:	2300      	movs	r3, #0
 8013884:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8013886:	2300      	movs	r3, #0
 8013888:	653b      	str	r3, [r7, #80]	; 0x50
 801388a:	2300      	movs	r3, #0
 801388c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801388e:	2300      	movs	r3, #0
 8013890:	64bb      	str	r3, [r7, #72]	; 0x48
 8013892:	2300      	movs	r3, #0
 8013894:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8013896:	2300      	movs	r3, #0
 8013898:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801389c:	2300      	movs	r3, #0
 801389e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80138a2:	2300      	movs	r3, #0
 80138a4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80138a6:	2300      	movs	r3, #0
 80138a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80138aa:	2300      	movs	r3, #0
 80138ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d109      	bne.n	80138c8 <tcp_write+0x5c>
 80138b4:	4ba4      	ldr	r3, [pc, #656]	; (8013b48 <tcp_write+0x2dc>)
 80138b6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80138ba:	49a4      	ldr	r1, [pc, #656]	; (8013b4c <tcp_write+0x2e0>)
 80138bc:	48a4      	ldr	r0, [pc, #656]	; (8013b50 <tcp_write+0x2e4>)
 80138be:	f005 f94f 	bl	8018b60 <iprintf>
 80138c2:	f06f 030f 	mvn.w	r3, #15
 80138c6:	e32a      	b.n	8013f1e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80138ce:	085b      	lsrs	r3, r3, #1
 80138d0:	b29a      	uxth	r2, r3
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80138d6:	4293      	cmp	r3, r2
 80138d8:	bf28      	it	cs
 80138da:	4613      	movcs	r3, r2
 80138dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80138de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d102      	bne.n	80138ea <tcp_write+0x7e>
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80138e8:	e000      	b.n	80138ec <tcp_write+0x80>
 80138ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80138ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80138ee:	68bb      	ldr	r3, [r7, #8]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d109      	bne.n	8013908 <tcp_write+0x9c>
 80138f4:	4b94      	ldr	r3, [pc, #592]	; (8013b48 <tcp_write+0x2dc>)
 80138f6:	f240 12ad 	movw	r2, #429	; 0x1ad
 80138fa:	4996      	ldr	r1, [pc, #600]	; (8013b54 <tcp_write+0x2e8>)
 80138fc:	4894      	ldr	r0, [pc, #592]	; (8013b50 <tcp_write+0x2e4>)
 80138fe:	f005 f92f 	bl	8018b60 <iprintf>
 8013902:	f06f 030f 	mvn.w	r3, #15
 8013906:	e30a      	b.n	8013f1e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8013908:	88fb      	ldrh	r3, [r7, #6]
 801390a:	4619      	mov	r1, r3
 801390c:	68f8      	ldr	r0, [r7, #12]
 801390e:	f7ff ff33 	bl	8013778 <tcp_write_checks>
 8013912:	4603      	mov	r3, r0
 8013914:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8013918:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801391c:	2b00      	cmp	r3, #0
 801391e:	d002      	beq.n	8013926 <tcp_write+0xba>
    return err;
 8013920:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013924:	e2fb      	b.n	8013f1e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801392c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013930:	2300      	movs	r3, #0
 8013932:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801393a:	2b00      	cmp	r3, #0
 801393c:	f000 80f6 	beq.w	8013b2c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013944:	653b      	str	r3, [r7, #80]	; 0x50
 8013946:	e002      	b.n	801394e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8013948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801394e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d1f8      	bne.n	8013948 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8013956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013958:	7a9b      	ldrb	r3, [r3, #10]
 801395a:	009b      	lsls	r3, r3, #2
 801395c:	b29b      	uxth	r3, r3
 801395e:	f003 0304 	and.w	r3, r3, #4
 8013962:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8013964:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013968:	891b      	ldrh	r3, [r3, #8]
 801396a:	4619      	mov	r1, r3
 801396c:	8c3b      	ldrh	r3, [r7, #32]
 801396e:	440b      	add	r3, r1
 8013970:	429a      	cmp	r2, r3
 8013972:	da06      	bge.n	8013982 <tcp_write+0x116>
 8013974:	4b74      	ldr	r3, [pc, #464]	; (8013b48 <tcp_write+0x2dc>)
 8013976:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801397a:	4977      	ldr	r1, [pc, #476]	; (8013b58 <tcp_write+0x2ec>)
 801397c:	4874      	ldr	r0, [pc, #464]	; (8013b50 <tcp_write+0x2e4>)
 801397e:	f005 f8ef 	bl	8018b60 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8013982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013984:	891a      	ldrh	r2, [r3, #8]
 8013986:	8c3b      	ldrh	r3, [r7, #32]
 8013988:	4413      	add	r3, r2
 801398a:	b29b      	uxth	r3, r3
 801398c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801398e:	1ad3      	subs	r3, r2, r3
 8013990:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013998:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801399a:	8a7b      	ldrh	r3, [r7, #18]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d026      	beq.n	80139ee <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80139a0:	8a7b      	ldrh	r3, [r7, #18]
 80139a2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80139a4:	429a      	cmp	r2, r3
 80139a6:	d206      	bcs.n	80139b6 <tcp_write+0x14a>
 80139a8:	4b67      	ldr	r3, [pc, #412]	; (8013b48 <tcp_write+0x2dc>)
 80139aa:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80139ae:	496b      	ldr	r1, [pc, #428]	; (8013b5c <tcp_write+0x2f0>)
 80139b0:	4867      	ldr	r0, [pc, #412]	; (8013b50 <tcp_write+0x2e4>)
 80139b2:	f005 f8d5 	bl	8018b60 <iprintf>
      seg = last_unsent;
 80139b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139b8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80139ba:	8a7b      	ldrh	r3, [r7, #18]
 80139bc:	88fa      	ldrh	r2, [r7, #6]
 80139be:	4293      	cmp	r3, r2
 80139c0:	bf28      	it	cs
 80139c2:	4613      	movcs	r3, r2
 80139c4:	b29b      	uxth	r3, r3
 80139c6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80139c8:	4293      	cmp	r3, r2
 80139ca:	bf28      	it	cs
 80139cc:	4613      	movcs	r3, r2
 80139ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80139d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80139d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80139d6:	4413      	add	r3, r2
 80139d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80139dc:	8a7a      	ldrh	r2, [r7, #18]
 80139de:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80139e0:	1ad3      	subs	r3, r2, r3
 80139e2:	b29b      	uxth	r3, r3
 80139e4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80139e6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80139e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80139ea:	1ad3      	subs	r3, r2, r3
 80139ec:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80139ee:	8a7b      	ldrh	r3, [r7, #18]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d00b      	beq.n	8013a0c <tcp_write+0x1a0>
 80139f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80139f8:	88fb      	ldrh	r3, [r7, #6]
 80139fa:	429a      	cmp	r2, r3
 80139fc:	d006      	beq.n	8013a0c <tcp_write+0x1a0>
 80139fe:	4b52      	ldr	r3, [pc, #328]	; (8013b48 <tcp_write+0x2dc>)
 8013a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013a04:	4956      	ldr	r1, [pc, #344]	; (8013b60 <tcp_write+0x2f4>)
 8013a06:	4852      	ldr	r0, [pc, #328]	; (8013b50 <tcp_write+0x2e4>)
 8013a08:	f005 f8aa 	bl	8018b60 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013a0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013a10:	88fb      	ldrh	r3, [r7, #6]
 8013a12:	429a      	cmp	r2, r3
 8013a14:	f080 8167 	bcs.w	8013ce6 <tcp_write+0x47a>
 8013a18:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	f000 8163 	beq.w	8013ce6 <tcp_write+0x47a>
 8013a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a22:	891b      	ldrh	r3, [r3, #8]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	f000 815e 	beq.w	8013ce6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013a2a:	88fa      	ldrh	r2, [r7, #6]
 8013a2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013a30:	1ad2      	subs	r2, r2, r3
 8013a32:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013a34:	4293      	cmp	r3, r2
 8013a36:	bfa8      	it	ge
 8013a38:	4613      	movge	r3, r2
 8013a3a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a3e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013a40:	797b      	ldrb	r3, [r7, #5]
 8013a42:	f003 0301 	and.w	r3, r3, #1
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d027      	beq.n	8013a9a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8013a4a:	f107 0012 	add.w	r0, r7, #18
 8013a4e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013a50:	8bf9      	ldrh	r1, [r7, #30]
 8013a52:	2301      	movs	r3, #1
 8013a54:	9302      	str	r3, [sp, #8]
 8013a56:	797b      	ldrb	r3, [r7, #5]
 8013a58:	9301      	str	r3, [sp, #4]
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	9300      	str	r3, [sp, #0]
 8013a5e:	4603      	mov	r3, r0
 8013a60:	2000      	movs	r0, #0
 8013a62:	f7ff fe0f 	bl	8013684 <tcp_pbuf_prealloc>
 8013a66:	6578      	str	r0, [r7, #84]	; 0x54
 8013a68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	f000 8225 	beq.w	8013eba <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8013a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a72:	6858      	ldr	r0, [r3, #4]
 8013a74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013a78:	68ba      	ldr	r2, [r7, #8]
 8013a7a:	4413      	add	r3, r2
 8013a7c:	8bfa      	ldrh	r2, [r7, #30]
 8013a7e:	4619      	mov	r1, r3
 8013a80:	f004 ffc3 	bl	8018a0a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013a84:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013a86:	f7fb f9db 	bl	800ee40 <pbuf_clen>
 8013a8a:	4603      	mov	r3, r0
 8013a8c:	461a      	mov	r2, r3
 8013a8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013a92:	4413      	add	r3, r2
 8013a94:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013a98:	e041      	b.n	8013b1e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a9c:	685b      	ldr	r3, [r3, #4]
 8013a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8013aa0:	e002      	b.n	8013aa8 <tcp_write+0x23c>
 8013aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013aa4:	681b      	ldr	r3, [r3, #0]
 8013aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8013aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d1f8      	bne.n	8013aa2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ab2:	7b1b      	ldrb	r3, [r3, #12]
 8013ab4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d115      	bne.n	8013ae8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013abe:	685b      	ldr	r3, [r3, #4]
 8013ac0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ac2:	8952      	ldrh	r2, [r2, #10]
 8013ac4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013ac6:	68ba      	ldr	r2, [r7, #8]
 8013ac8:	429a      	cmp	r2, r3
 8013aca:	d10d      	bne.n	8013ae8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013acc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d006      	beq.n	8013ae2 <tcp_write+0x276>
 8013ad4:	4b1c      	ldr	r3, [pc, #112]	; (8013b48 <tcp_write+0x2dc>)
 8013ad6:	f240 2231 	movw	r2, #561	; 0x231
 8013ada:	4922      	ldr	r1, [pc, #136]	; (8013b64 <tcp_write+0x2f8>)
 8013adc:	481c      	ldr	r0, [pc, #112]	; (8013b50 <tcp_write+0x2e4>)
 8013ade:	f005 f83f 	bl	8018b60 <iprintf>
          extendlen = seglen;
 8013ae2:	8bfb      	ldrh	r3, [r7, #30]
 8013ae4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8013ae6:	e01a      	b.n	8013b1e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8013ae8:	8bfb      	ldrh	r3, [r7, #30]
 8013aea:	2201      	movs	r2, #1
 8013aec:	4619      	mov	r1, r3
 8013aee:	2000      	movs	r0, #0
 8013af0:	f7fa fe34 	bl	800e75c <pbuf_alloc>
 8013af4:	6578      	str	r0, [r7, #84]	; 0x54
 8013af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	f000 81e0 	beq.w	8013ebe <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8013afe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013b02:	68ba      	ldr	r2, [r7, #8]
 8013b04:	441a      	add	r2, r3
 8013b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013b08:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8013b0a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013b0c:	f7fb f998 	bl	800ee40 <pbuf_clen>
 8013b10:	4603      	mov	r3, r0
 8013b12:	461a      	mov	r2, r3
 8013b14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013b18:	4413      	add	r3, r2
 8013b1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8013b1e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013b22:	8bfb      	ldrh	r3, [r7, #30]
 8013b24:	4413      	add	r3, r2
 8013b26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8013b2a:	e0dc      	b.n	8013ce6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	f000 80d7 	beq.w	8013ce6 <tcp_write+0x47a>
 8013b38:	4b03      	ldr	r3, [pc, #12]	; (8013b48 <tcp_write+0x2dc>)
 8013b3a:	f240 224a 	movw	r2, #586	; 0x24a
 8013b3e:	490a      	ldr	r1, [pc, #40]	; (8013b68 <tcp_write+0x2fc>)
 8013b40:	4803      	ldr	r0, [pc, #12]	; (8013b50 <tcp_write+0x2e4>)
 8013b42:	f005 f80d 	bl	8018b60 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8013b46:	e0ce      	b.n	8013ce6 <tcp_write+0x47a>
 8013b48:	0801b488 	.word	0x0801b488
 8013b4c:	0801b628 	.word	0x0801b628
 8013b50:	0801b4dc 	.word	0x0801b4dc
 8013b54:	0801b640 	.word	0x0801b640
 8013b58:	0801b674 	.word	0x0801b674
 8013b5c:	0801b68c 	.word	0x0801b68c
 8013b60:	0801b6ac 	.word	0x0801b6ac
 8013b64:	0801b6cc 	.word	0x0801b6cc
 8013b68:	0801b6f8 	.word	0x0801b6f8
    struct pbuf *p;
    u16_t left = len - pos;
 8013b6c:	88fa      	ldrh	r2, [r7, #6]
 8013b6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013b72:	1ad3      	subs	r3, r2, r3
 8013b74:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8013b76:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013b7a:	b29b      	uxth	r3, r3
 8013b7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013b7e:	1ad3      	subs	r3, r2, r3
 8013b80:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8013b82:	8b7a      	ldrh	r2, [r7, #26]
 8013b84:	8bbb      	ldrh	r3, [r7, #28]
 8013b86:	4293      	cmp	r3, r2
 8013b88:	bf28      	it	cs
 8013b8a:	4613      	movcs	r3, r2
 8013b8c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013b8e:	797b      	ldrb	r3, [r7, #5]
 8013b90:	f003 0301 	and.w	r3, r3, #1
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d036      	beq.n	8013c06 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013b98:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013b9c:	b29a      	uxth	r2, r3
 8013b9e:	8b3b      	ldrh	r3, [r7, #24]
 8013ba0:	4413      	add	r3, r2
 8013ba2:	b299      	uxth	r1, r3
 8013ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	bf0c      	ite	eq
 8013baa:	2301      	moveq	r3, #1
 8013bac:	2300      	movne	r3, #0
 8013bae:	b2db      	uxtb	r3, r3
 8013bb0:	f107 0012 	add.w	r0, r7, #18
 8013bb4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013bb6:	9302      	str	r3, [sp, #8]
 8013bb8:	797b      	ldrb	r3, [r7, #5]
 8013bba:	9301      	str	r3, [sp, #4]
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	9300      	str	r3, [sp, #0]
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	2036      	movs	r0, #54	; 0x36
 8013bc4:	f7ff fd5e 	bl	8013684 <tcp_pbuf_prealloc>
 8013bc8:	6338      	str	r0, [r7, #48]	; 0x30
 8013bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	f000 8178 	beq.w	8013ec2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8013bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bd4:	895b      	ldrh	r3, [r3, #10]
 8013bd6:	8b3a      	ldrh	r2, [r7, #24]
 8013bd8:	429a      	cmp	r2, r3
 8013bda:	d906      	bls.n	8013bea <tcp_write+0x37e>
 8013bdc:	4b8c      	ldr	r3, [pc, #560]	; (8013e10 <tcp_write+0x5a4>)
 8013bde:	f240 2266 	movw	r2, #614	; 0x266
 8013be2:	498c      	ldr	r1, [pc, #560]	; (8013e14 <tcp_write+0x5a8>)
 8013be4:	488c      	ldr	r0, [pc, #560]	; (8013e18 <tcp_write+0x5ac>)
 8013be6:	f004 ffbb 	bl	8018b60 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8013bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bec:	685a      	ldr	r2, [r3, #4]
 8013bee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013bf2:	18d0      	adds	r0, r2, r3
 8013bf4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013bf8:	68ba      	ldr	r2, [r7, #8]
 8013bfa:	4413      	add	r3, r2
 8013bfc:	8b3a      	ldrh	r2, [r7, #24]
 8013bfe:	4619      	mov	r1, r3
 8013c00:	f004 ff03 	bl	8018a0a <memcpy>
 8013c04:	e02f      	b.n	8013c66 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8013c06:	8a7b      	ldrh	r3, [r7, #18]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d006      	beq.n	8013c1a <tcp_write+0x3ae>
 8013c0c:	4b80      	ldr	r3, [pc, #512]	; (8013e10 <tcp_write+0x5a4>)
 8013c0e:	f240 2271 	movw	r2, #625	; 0x271
 8013c12:	4982      	ldr	r1, [pc, #520]	; (8013e1c <tcp_write+0x5b0>)
 8013c14:	4880      	ldr	r0, [pc, #512]	; (8013e18 <tcp_write+0x5ac>)
 8013c16:	f004 ffa3 	bl	8018b60 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8013c1a:	8b3b      	ldrh	r3, [r7, #24]
 8013c1c:	2201      	movs	r2, #1
 8013c1e:	4619      	mov	r1, r3
 8013c20:	2036      	movs	r0, #54	; 0x36
 8013c22:	f7fa fd9b 	bl	800e75c <pbuf_alloc>
 8013c26:	6178      	str	r0, [r7, #20]
 8013c28:	697b      	ldr	r3, [r7, #20]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	f000 814b 	beq.w	8013ec6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8013c30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013c34:	68ba      	ldr	r2, [r7, #8]
 8013c36:	441a      	add	r2, r3
 8013c38:	697b      	ldr	r3, [r7, #20]
 8013c3a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013c3c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013c40:	b29b      	uxth	r3, r3
 8013c42:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013c46:	4619      	mov	r1, r3
 8013c48:	2036      	movs	r0, #54	; 0x36
 8013c4a:	f7fa fd87 	bl	800e75c <pbuf_alloc>
 8013c4e:	6338      	str	r0, [r7, #48]	; 0x30
 8013c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d103      	bne.n	8013c5e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8013c56:	6978      	ldr	r0, [r7, #20]
 8013c58:	f7fb f864 	bl	800ed24 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013c5c:	e136      	b.n	8013ecc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8013c5e:	6979      	ldr	r1, [r7, #20]
 8013c60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013c62:	f7fb f92d 	bl	800eec0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013c66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013c68:	f7fb f8ea 	bl	800ee40 <pbuf_clen>
 8013c6c:	4603      	mov	r3, r0
 8013c6e:	461a      	mov	r2, r3
 8013c70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013c74:	4413      	add	r3, r2
 8013c76:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013c7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013c7e:	2b09      	cmp	r3, #9
 8013c80:	d903      	bls.n	8013c8a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8013c82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013c84:	f7fb f84e 	bl	800ed24 <pbuf_free>
      goto memerr;
 8013c88:	e120      	b.n	8013ecc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013c8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013c92:	441a      	add	r2, r3
 8013c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c98:	9300      	str	r3, [sp, #0]
 8013c9a:	4613      	mov	r3, r2
 8013c9c:	2200      	movs	r2, #0
 8013c9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013ca0:	68f8      	ldr	r0, [r7, #12]
 8013ca2:	f7ff fc51 	bl	8013548 <tcp_create_segment>
 8013ca6:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	f000 810d 	beq.w	8013eca <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8013cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d102      	bne.n	8013cbc <tcp_write+0x450>
      queue = seg;
 8013cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013cb8:	647b      	str	r3, [r7, #68]	; 0x44
 8013cba:	e00c      	b.n	8013cd6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013cbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d106      	bne.n	8013cd0 <tcp_write+0x464>
 8013cc2:	4b53      	ldr	r3, [pc, #332]	; (8013e10 <tcp_write+0x5a4>)
 8013cc4:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013cc8:	4955      	ldr	r1, [pc, #340]	; (8013e20 <tcp_write+0x5b4>)
 8013cca:	4853      	ldr	r0, [pc, #332]	; (8013e18 <tcp_write+0x5ac>)
 8013ccc:	f004 ff48 	bl	8018b60 <iprintf>
      prev_seg->next = seg;
 8013cd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013cd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013cd4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8013cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013cd8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8013cda:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013cde:	8b3b      	ldrh	r3, [r7, #24]
 8013ce0:	4413      	add	r3, r2
 8013ce2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8013ce6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013cea:	88fb      	ldrh	r3, [r7, #6]
 8013cec:	429a      	cmp	r2, r3
 8013cee:	f4ff af3d 	bcc.w	8013b6c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8013cf2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d02c      	beq.n	8013d52 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8013cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cfa:	685b      	ldr	r3, [r3, #4]
 8013cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013cfe:	e01e      	b.n	8013d3e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8013d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d02:	891a      	ldrh	r2, [r3, #8]
 8013d04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013d06:	4413      	add	r3, r2
 8013d08:	b29a      	uxth	r2, r3
 8013d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d0c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8013d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d110      	bne.n	8013d38 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8013d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d18:	685b      	ldr	r3, [r3, #4]
 8013d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d1c:	8952      	ldrh	r2, [r2, #10]
 8013d1e:	4413      	add	r3, r2
 8013d20:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013d22:	68b9      	ldr	r1, [r7, #8]
 8013d24:	4618      	mov	r0, r3
 8013d26:	f004 fe70 	bl	8018a0a <memcpy>
        p->len += oversize_used;
 8013d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d2c:	895a      	ldrh	r2, [r3, #10]
 8013d2e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013d30:	4413      	add	r3, r2
 8013d32:	b29a      	uxth	r2, r3
 8013d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d36:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d1dd      	bne.n	8013d00 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8013d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d46:	891a      	ldrh	r2, [r3, #8]
 8013d48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013d4a:	4413      	add	r3, r2
 8013d4c:	b29a      	uxth	r2, r3
 8013d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d50:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8013d52:	8a7a      	ldrh	r2, [r7, #18]
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8013d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d018      	beq.n	8013d92 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8013d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d106      	bne.n	8013d74 <tcp_write+0x508>
 8013d66:	4b2a      	ldr	r3, [pc, #168]	; (8013e10 <tcp_write+0x5a4>)
 8013d68:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8013d6c:	492d      	ldr	r1, [pc, #180]	; (8013e24 <tcp_write+0x5b8>)
 8013d6e:	482a      	ldr	r0, [pc, #168]	; (8013e18 <tcp_write+0x5ac>)
 8013d70:	f004 fef6 	bl	8018b60 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d76:	685b      	ldr	r3, [r3, #4]
 8013d78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	f7fb f8a0 	bl	800eec0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8013d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d82:	891a      	ldrh	r2, [r3, #8]
 8013d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013d86:	891b      	ldrh	r3, [r3, #8]
 8013d88:	4413      	add	r3, r2
 8013d8a:	b29a      	uxth	r2, r3
 8013d8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d8e:	811a      	strh	r2, [r3, #8]
 8013d90:	e037      	b.n	8013e02 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8013d92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d034      	beq.n	8013e02 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d003      	beq.n	8013da6 <tcp_write+0x53a>
 8013d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013da0:	685b      	ldr	r3, [r3, #4]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d106      	bne.n	8013db4 <tcp_write+0x548>
 8013da6:	4b1a      	ldr	r3, [pc, #104]	; (8013e10 <tcp_write+0x5a4>)
 8013da8:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013dac:	491e      	ldr	r1, [pc, #120]	; (8013e28 <tcp_write+0x5bc>)
 8013dae:	481a      	ldr	r0, [pc, #104]	; (8013e18 <tcp_write+0x5ac>)
 8013db0:	f004 fed6 	bl	8018b60 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013db6:	685b      	ldr	r3, [r3, #4]
 8013db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8013dba:	e009      	b.n	8013dd0 <tcp_write+0x564>
      p->tot_len += extendlen;
 8013dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dbe:	891a      	ldrh	r2, [r3, #8]
 8013dc0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013dc2:	4413      	add	r3, r2
 8013dc4:	b29a      	uxth	r2, r3
 8013dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dc8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	62bb      	str	r3, [r7, #40]	; 0x28
 8013dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d1f1      	bne.n	8013dbc <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8013dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dda:	891a      	ldrh	r2, [r3, #8]
 8013ddc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013dde:	4413      	add	r3, r2
 8013de0:	b29a      	uxth	r2, r3
 8013de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013de4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8013de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013de8:	895a      	ldrh	r2, [r3, #10]
 8013dea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013dec:	4413      	add	r3, r2
 8013dee:	b29a      	uxth	r2, r3
 8013df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013df2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8013df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013df6:	891a      	ldrh	r2, [r3, #8]
 8013df8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013dfa:	4413      	add	r3, r2
 8013dfc:	b29a      	uxth	r2, r3
 8013dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e00:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8013e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d111      	bne.n	8013e2c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013e0c:	66da      	str	r2, [r3, #108]	; 0x6c
 8013e0e:	e010      	b.n	8013e32 <tcp_write+0x5c6>
 8013e10:	0801b488 	.word	0x0801b488
 8013e14:	0801b728 	.word	0x0801b728
 8013e18:	0801b4dc 	.word	0x0801b4dc
 8013e1c:	0801b768 	.word	0x0801b768
 8013e20:	0801b778 	.word	0x0801b778
 8013e24:	0801b78c 	.word	0x0801b78c
 8013e28:	0801b7c4 	.word	0x0801b7c4
  } else {
    last_unsent->next = queue;
 8013e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013e30:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8013e32:	68fb      	ldr	r3, [r7, #12]
 8013e34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013e36:	88fb      	ldrh	r3, [r7, #6]
 8013e38:	441a      	add	r2, r3
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8013e3e:	68fb      	ldr	r3, [r7, #12]
 8013e40:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013e44:	88fb      	ldrh	r3, [r7, #6]
 8013e46:	1ad3      	subs	r3, r2, r3
 8013e48:	b29a      	uxth	r2, r3
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013e56:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d00e      	beq.n	8013e82 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d10a      	bne.n	8013e82 <tcp_write+0x616>
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d106      	bne.n	8013e82 <tcp_write+0x616>
 8013e74:	4b2c      	ldr	r3, [pc, #176]	; (8013f28 <tcp_write+0x6bc>)
 8013e76:	f240 3212 	movw	r2, #786	; 0x312
 8013e7a:	492c      	ldr	r1, [pc, #176]	; (8013f2c <tcp_write+0x6c0>)
 8013e7c:	482c      	ldr	r0, [pc, #176]	; (8013f30 <tcp_write+0x6c4>)
 8013e7e:	f004 fe6f 	bl	8018b60 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8013e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d016      	beq.n	8013eb6 <tcp_write+0x64a>
 8013e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e8a:	68db      	ldr	r3, [r3, #12]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d012      	beq.n	8013eb6 <tcp_write+0x64a>
 8013e90:	797b      	ldrb	r3, [r7, #5]
 8013e92:	f003 0302 	and.w	r3, r3, #2
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d10d      	bne.n	8013eb6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e9c:	68db      	ldr	r3, [r3, #12]
 8013e9e:	899b      	ldrh	r3, [r3, #12]
 8013ea0:	b29c      	uxth	r4, r3
 8013ea2:	2008      	movs	r0, #8
 8013ea4:	f7f9 fa5e 	bl	800d364 <lwip_htons>
 8013ea8:	4603      	mov	r3, r0
 8013eaa:	461a      	mov	r2, r3
 8013eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013eae:	68db      	ldr	r3, [r3, #12]
 8013eb0:	4322      	orrs	r2, r4
 8013eb2:	b292      	uxth	r2, r2
 8013eb4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	e031      	b.n	8013f1e <tcp_write+0x6b2>
          goto memerr;
 8013eba:	bf00      	nop
 8013ebc:	e006      	b.n	8013ecc <tcp_write+0x660>
            goto memerr;
 8013ebe:	bf00      	nop
 8013ec0:	e004      	b.n	8013ecc <tcp_write+0x660>
        goto memerr;
 8013ec2:	bf00      	nop
 8013ec4:	e002      	b.n	8013ecc <tcp_write+0x660>
        goto memerr;
 8013ec6:	bf00      	nop
 8013ec8:	e000      	b.n	8013ecc <tcp_write+0x660>
      goto memerr;
 8013eca:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	8b5b      	ldrh	r3, [r3, #26]
 8013ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ed4:	b29a      	uxth	r2, r3
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d002      	beq.n	8013ee6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8013ee0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013ee2:	f7fa ff1f 	bl	800ed24 <pbuf_free>
  }
  if (queue != NULL) {
 8013ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d002      	beq.n	8013ef2 <tcp_write+0x686>
    tcp_segs_free(queue);
 8013eec:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013eee:	f7fc fb4d 	bl	801058c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d00e      	beq.n	8013f1a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d10a      	bne.n	8013f1a <tcp_write+0x6ae>
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d106      	bne.n	8013f1a <tcp_write+0x6ae>
 8013f0c:	4b06      	ldr	r3, [pc, #24]	; (8013f28 <tcp_write+0x6bc>)
 8013f0e:	f240 3227 	movw	r2, #807	; 0x327
 8013f12:	4906      	ldr	r1, [pc, #24]	; (8013f2c <tcp_write+0x6c0>)
 8013f14:	4806      	ldr	r0, [pc, #24]	; (8013f30 <tcp_write+0x6c4>)
 8013f16:	f004 fe23 	bl	8018b60 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013f1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013f1e:	4618      	mov	r0, r3
 8013f20:	375c      	adds	r7, #92	; 0x5c
 8013f22:	46bd      	mov	sp, r7
 8013f24:	bd90      	pop	{r4, r7, pc}
 8013f26:	bf00      	nop
 8013f28:	0801b488 	.word	0x0801b488
 8013f2c:	0801b7fc 	.word	0x0801b7fc
 8013f30:	0801b4dc 	.word	0x0801b4dc

08013f34 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013f34:	b590      	push	{r4, r7, lr}
 8013f36:	b08b      	sub	sp, #44	; 0x2c
 8013f38:	af02      	add	r7, sp, #8
 8013f3a:	6078      	str	r0, [r7, #4]
 8013f3c:	460b      	mov	r3, r1
 8013f3e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013f40:	2300      	movs	r3, #0
 8013f42:	61fb      	str	r3, [r7, #28]
 8013f44:	2300      	movs	r3, #0
 8013f46:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013f48:	2300      	movs	r3, #0
 8013f4a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d106      	bne.n	8013f60 <tcp_split_unsent_seg+0x2c>
 8013f52:	4b95      	ldr	r3, [pc, #596]	; (80141a8 <tcp_split_unsent_seg+0x274>)
 8013f54:	f240 324b 	movw	r2, #843	; 0x34b
 8013f58:	4994      	ldr	r1, [pc, #592]	; (80141ac <tcp_split_unsent_seg+0x278>)
 8013f5a:	4895      	ldr	r0, [pc, #596]	; (80141b0 <tcp_split_unsent_seg+0x27c>)
 8013f5c:	f004 fe00 	bl	8018b60 <iprintf>

  useg = pcb->unsent;
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f64:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013f66:	697b      	ldr	r3, [r7, #20]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d102      	bne.n	8013f72 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8013f70:	e116      	b.n	80141a0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013f72:	887b      	ldrh	r3, [r7, #2]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d109      	bne.n	8013f8c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013f78:	4b8b      	ldr	r3, [pc, #556]	; (80141a8 <tcp_split_unsent_seg+0x274>)
 8013f7a:	f240 3253 	movw	r2, #851	; 0x353
 8013f7e:	498d      	ldr	r1, [pc, #564]	; (80141b4 <tcp_split_unsent_seg+0x280>)
 8013f80:	488b      	ldr	r0, [pc, #556]	; (80141b0 <tcp_split_unsent_seg+0x27c>)
 8013f82:	f004 fded 	bl	8018b60 <iprintf>
    return ERR_VAL;
 8013f86:	f06f 0305 	mvn.w	r3, #5
 8013f8a:	e109      	b.n	80141a0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013f8c:	697b      	ldr	r3, [r7, #20]
 8013f8e:	891b      	ldrh	r3, [r3, #8]
 8013f90:	887a      	ldrh	r2, [r7, #2]
 8013f92:	429a      	cmp	r2, r3
 8013f94:	d301      	bcc.n	8013f9a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013f96:	2300      	movs	r3, #0
 8013f98:	e102      	b.n	80141a0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f9e:	887a      	ldrh	r2, [r7, #2]
 8013fa0:	429a      	cmp	r2, r3
 8013fa2:	d906      	bls.n	8013fb2 <tcp_split_unsent_seg+0x7e>
 8013fa4:	4b80      	ldr	r3, [pc, #512]	; (80141a8 <tcp_split_unsent_seg+0x274>)
 8013fa6:	f240 325b 	movw	r2, #859	; 0x35b
 8013faa:	4983      	ldr	r1, [pc, #524]	; (80141b8 <tcp_split_unsent_seg+0x284>)
 8013fac:	4880      	ldr	r0, [pc, #512]	; (80141b0 <tcp_split_unsent_seg+0x27c>)
 8013fae:	f004 fdd7 	bl	8018b60 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013fb2:	697b      	ldr	r3, [r7, #20]
 8013fb4:	891b      	ldrh	r3, [r3, #8]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d106      	bne.n	8013fc8 <tcp_split_unsent_seg+0x94>
 8013fba:	4b7b      	ldr	r3, [pc, #492]	; (80141a8 <tcp_split_unsent_seg+0x274>)
 8013fbc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013fc0:	497e      	ldr	r1, [pc, #504]	; (80141bc <tcp_split_unsent_seg+0x288>)
 8013fc2:	487b      	ldr	r0, [pc, #492]	; (80141b0 <tcp_split_unsent_seg+0x27c>)
 8013fc4:	f004 fdcc 	bl	8018b60 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013fc8:	697b      	ldr	r3, [r7, #20]
 8013fca:	7a9b      	ldrb	r3, [r3, #10]
 8013fcc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013fce:	7bfb      	ldrb	r3, [r7, #15]
 8013fd0:	009b      	lsls	r3, r3, #2
 8013fd2:	b2db      	uxtb	r3, r3
 8013fd4:	f003 0304 	and.w	r3, r3, #4
 8013fd8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013fda:	697b      	ldr	r3, [r7, #20]
 8013fdc:	891a      	ldrh	r2, [r3, #8]
 8013fde:	887b      	ldrh	r3, [r7, #2]
 8013fe0:	1ad3      	subs	r3, r2, r3
 8013fe2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013fe4:	7bbb      	ldrb	r3, [r7, #14]
 8013fe6:	b29a      	uxth	r2, r3
 8013fe8:	89bb      	ldrh	r3, [r7, #12]
 8013fea:	4413      	add	r3, r2
 8013fec:	b29b      	uxth	r3, r3
 8013fee:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013ff2:	4619      	mov	r1, r3
 8013ff4:	2036      	movs	r0, #54	; 0x36
 8013ff6:	f7fa fbb1 	bl	800e75c <pbuf_alloc>
 8013ffa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013ffc:	693b      	ldr	r3, [r7, #16]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	f000 80b7 	beq.w	8014172 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014004:	697b      	ldr	r3, [r7, #20]
 8014006:	685b      	ldr	r3, [r3, #4]
 8014008:	891a      	ldrh	r2, [r3, #8]
 801400a:	697b      	ldr	r3, [r7, #20]
 801400c:	891b      	ldrh	r3, [r3, #8]
 801400e:	1ad3      	subs	r3, r2, r3
 8014010:	b29a      	uxth	r2, r3
 8014012:	887b      	ldrh	r3, [r7, #2]
 8014014:	4413      	add	r3, r2
 8014016:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014018:	697b      	ldr	r3, [r7, #20]
 801401a:	6858      	ldr	r0, [r3, #4]
 801401c:	693b      	ldr	r3, [r7, #16]
 801401e:	685a      	ldr	r2, [r3, #4]
 8014020:	7bbb      	ldrb	r3, [r7, #14]
 8014022:	18d1      	adds	r1, r2, r3
 8014024:	897b      	ldrh	r3, [r7, #10]
 8014026:	89ba      	ldrh	r2, [r7, #12]
 8014028:	f7fb f882 	bl	800f130 <pbuf_copy_partial>
 801402c:	4603      	mov	r3, r0
 801402e:	461a      	mov	r2, r3
 8014030:	89bb      	ldrh	r3, [r7, #12]
 8014032:	4293      	cmp	r3, r2
 8014034:	f040 809f 	bne.w	8014176 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014038:	697b      	ldr	r3, [r7, #20]
 801403a:	68db      	ldr	r3, [r3, #12]
 801403c:	899b      	ldrh	r3, [r3, #12]
 801403e:	b29b      	uxth	r3, r3
 8014040:	4618      	mov	r0, r3
 8014042:	f7f9 f98f 	bl	800d364 <lwip_htons>
 8014046:	4603      	mov	r3, r0
 8014048:	b2db      	uxtb	r3, r3
 801404a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801404e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014050:	2300      	movs	r3, #0
 8014052:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014054:	7efb      	ldrb	r3, [r7, #27]
 8014056:	f003 0308 	and.w	r3, r3, #8
 801405a:	2b00      	cmp	r3, #0
 801405c:	d007      	beq.n	801406e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801405e:	7efb      	ldrb	r3, [r7, #27]
 8014060:	f023 0308 	bic.w	r3, r3, #8
 8014064:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014066:	7ebb      	ldrb	r3, [r7, #26]
 8014068:	f043 0308 	orr.w	r3, r3, #8
 801406c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801406e:	7efb      	ldrb	r3, [r7, #27]
 8014070:	f003 0301 	and.w	r3, r3, #1
 8014074:	2b00      	cmp	r3, #0
 8014076:	d007      	beq.n	8014088 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014078:	7efb      	ldrb	r3, [r7, #27]
 801407a:	f023 0301 	bic.w	r3, r3, #1
 801407e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8014080:	7ebb      	ldrb	r3, [r7, #26]
 8014082:	f043 0301 	orr.w	r3, r3, #1
 8014086:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014088:	697b      	ldr	r3, [r7, #20]
 801408a:	68db      	ldr	r3, [r3, #12]
 801408c:	685b      	ldr	r3, [r3, #4]
 801408e:	4618      	mov	r0, r3
 8014090:	f7f9 f97d 	bl	800d38e <lwip_htonl>
 8014094:	4602      	mov	r2, r0
 8014096:	887b      	ldrh	r3, [r7, #2]
 8014098:	18d1      	adds	r1, r2, r3
 801409a:	7eba      	ldrb	r2, [r7, #26]
 801409c:	7bfb      	ldrb	r3, [r7, #15]
 801409e:	9300      	str	r3, [sp, #0]
 80140a0:	460b      	mov	r3, r1
 80140a2:	6939      	ldr	r1, [r7, #16]
 80140a4:	6878      	ldr	r0, [r7, #4]
 80140a6:	f7ff fa4f 	bl	8013548 <tcp_create_segment>
 80140aa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80140ac:	69fb      	ldr	r3, [r7, #28]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d063      	beq.n	801417a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80140b2:	697b      	ldr	r3, [r7, #20]
 80140b4:	685b      	ldr	r3, [r3, #4]
 80140b6:	4618      	mov	r0, r3
 80140b8:	f7fa fec2 	bl	800ee40 <pbuf_clen>
 80140bc:	4603      	mov	r3, r0
 80140be:	461a      	mov	r2, r3
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80140c6:	1a9b      	subs	r3, r3, r2
 80140c8:	b29a      	uxth	r2, r3
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80140d0:	697b      	ldr	r3, [r7, #20]
 80140d2:	6858      	ldr	r0, [r3, #4]
 80140d4:	697b      	ldr	r3, [r7, #20]
 80140d6:	685b      	ldr	r3, [r3, #4]
 80140d8:	891a      	ldrh	r2, [r3, #8]
 80140da:	89bb      	ldrh	r3, [r7, #12]
 80140dc:	1ad3      	subs	r3, r2, r3
 80140de:	b29b      	uxth	r3, r3
 80140e0:	4619      	mov	r1, r3
 80140e2:	f7fa fc99 	bl	800ea18 <pbuf_realloc>
  useg->len -= remainder;
 80140e6:	697b      	ldr	r3, [r7, #20]
 80140e8:	891a      	ldrh	r2, [r3, #8]
 80140ea:	89bb      	ldrh	r3, [r7, #12]
 80140ec:	1ad3      	subs	r3, r2, r3
 80140ee:	b29a      	uxth	r2, r3
 80140f0:	697b      	ldr	r3, [r7, #20]
 80140f2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80140f4:	697b      	ldr	r3, [r7, #20]
 80140f6:	68db      	ldr	r3, [r3, #12]
 80140f8:	899b      	ldrh	r3, [r3, #12]
 80140fa:	b29c      	uxth	r4, r3
 80140fc:	7efb      	ldrb	r3, [r7, #27]
 80140fe:	b29b      	uxth	r3, r3
 8014100:	4618      	mov	r0, r3
 8014102:	f7f9 f92f 	bl	800d364 <lwip_htons>
 8014106:	4603      	mov	r3, r0
 8014108:	461a      	mov	r2, r3
 801410a:	697b      	ldr	r3, [r7, #20]
 801410c:	68db      	ldr	r3, [r3, #12]
 801410e:	4322      	orrs	r2, r4
 8014110:	b292      	uxth	r2, r2
 8014112:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014114:	697b      	ldr	r3, [r7, #20]
 8014116:	685b      	ldr	r3, [r3, #4]
 8014118:	4618      	mov	r0, r3
 801411a:	f7fa fe91 	bl	800ee40 <pbuf_clen>
 801411e:	4603      	mov	r3, r0
 8014120:	461a      	mov	r2, r3
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014128:	4413      	add	r3, r2
 801412a:	b29a      	uxth	r2, r3
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014132:	69fb      	ldr	r3, [r7, #28]
 8014134:	685b      	ldr	r3, [r3, #4]
 8014136:	4618      	mov	r0, r3
 8014138:	f7fa fe82 	bl	800ee40 <pbuf_clen>
 801413c:	4603      	mov	r3, r0
 801413e:	461a      	mov	r2, r3
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014146:	4413      	add	r3, r2
 8014148:	b29a      	uxth	r2, r3
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014150:	697b      	ldr	r3, [r7, #20]
 8014152:	681a      	ldr	r2, [r3, #0]
 8014154:	69fb      	ldr	r3, [r7, #28]
 8014156:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014158:	697b      	ldr	r3, [r7, #20]
 801415a:	69fa      	ldr	r2, [r7, #28]
 801415c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801415e:	69fb      	ldr	r3, [r7, #28]
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	2b00      	cmp	r3, #0
 8014164:	d103      	bne.n	801416e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	2200      	movs	r2, #0
 801416a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801416e:	2300      	movs	r3, #0
 8014170:	e016      	b.n	80141a0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8014172:	bf00      	nop
 8014174:	e002      	b.n	801417c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014176:	bf00      	nop
 8014178:	e000      	b.n	801417c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801417a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801417c:	69fb      	ldr	r3, [r7, #28]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d006      	beq.n	8014190 <tcp_split_unsent_seg+0x25c>
 8014182:	4b09      	ldr	r3, [pc, #36]	; (80141a8 <tcp_split_unsent_seg+0x274>)
 8014184:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8014188:	490d      	ldr	r1, [pc, #52]	; (80141c0 <tcp_split_unsent_seg+0x28c>)
 801418a:	4809      	ldr	r0, [pc, #36]	; (80141b0 <tcp_split_unsent_seg+0x27c>)
 801418c:	f004 fce8 	bl	8018b60 <iprintf>
  if (p != NULL) {
 8014190:	693b      	ldr	r3, [r7, #16]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d002      	beq.n	801419c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8014196:	6938      	ldr	r0, [r7, #16]
 8014198:	f7fa fdc4 	bl	800ed24 <pbuf_free>
  }

  return ERR_MEM;
 801419c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80141a0:	4618      	mov	r0, r3
 80141a2:	3724      	adds	r7, #36	; 0x24
 80141a4:	46bd      	mov	sp, r7
 80141a6:	bd90      	pop	{r4, r7, pc}
 80141a8:	0801b488 	.word	0x0801b488
 80141ac:	0801b81c 	.word	0x0801b81c
 80141b0:	0801b4dc 	.word	0x0801b4dc
 80141b4:	0801b840 	.word	0x0801b840
 80141b8:	0801b864 	.word	0x0801b864
 80141bc:	0801b874 	.word	0x0801b874
 80141c0:	0801b884 	.word	0x0801b884

080141c4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80141c4:	b590      	push	{r4, r7, lr}
 80141c6:	b085      	sub	sp, #20
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d106      	bne.n	80141e0 <tcp_send_fin+0x1c>
 80141d2:	4b21      	ldr	r3, [pc, #132]	; (8014258 <tcp_send_fin+0x94>)
 80141d4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80141d8:	4920      	ldr	r1, [pc, #128]	; (801425c <tcp_send_fin+0x98>)
 80141da:	4821      	ldr	r0, [pc, #132]	; (8014260 <tcp_send_fin+0x9c>)
 80141dc:	f004 fcc0 	bl	8018b60 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d02e      	beq.n	8014246 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141ec:	60fb      	str	r3, [r7, #12]
 80141ee:	e002      	b.n	80141f6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d1f8      	bne.n	80141f0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	68db      	ldr	r3, [r3, #12]
 8014202:	899b      	ldrh	r3, [r3, #12]
 8014204:	b29b      	uxth	r3, r3
 8014206:	4618      	mov	r0, r3
 8014208:	f7f9 f8ac 	bl	800d364 <lwip_htons>
 801420c:	4603      	mov	r3, r0
 801420e:	b2db      	uxtb	r3, r3
 8014210:	f003 0307 	and.w	r3, r3, #7
 8014214:	2b00      	cmp	r3, #0
 8014216:	d116      	bne.n	8014246 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	68db      	ldr	r3, [r3, #12]
 801421c:	899b      	ldrh	r3, [r3, #12]
 801421e:	b29c      	uxth	r4, r3
 8014220:	2001      	movs	r0, #1
 8014222:	f7f9 f89f 	bl	800d364 <lwip_htons>
 8014226:	4603      	mov	r3, r0
 8014228:	461a      	mov	r2, r3
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	68db      	ldr	r3, [r3, #12]
 801422e:	4322      	orrs	r2, r4
 8014230:	b292      	uxth	r2, r2
 8014232:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	8b5b      	ldrh	r3, [r3, #26]
 8014238:	f043 0320 	orr.w	r3, r3, #32
 801423c:	b29a      	uxth	r2, r3
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8014242:	2300      	movs	r3, #0
 8014244:	e004      	b.n	8014250 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014246:	2101      	movs	r1, #1
 8014248:	6878      	ldr	r0, [r7, #4]
 801424a:	f000 f80b 	bl	8014264 <tcp_enqueue_flags>
 801424e:	4603      	mov	r3, r0
}
 8014250:	4618      	mov	r0, r3
 8014252:	3714      	adds	r7, #20
 8014254:	46bd      	mov	sp, r7
 8014256:	bd90      	pop	{r4, r7, pc}
 8014258:	0801b488 	.word	0x0801b488
 801425c:	0801b890 	.word	0x0801b890
 8014260:	0801b4dc 	.word	0x0801b4dc

08014264 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014264:	b580      	push	{r7, lr}
 8014266:	b08a      	sub	sp, #40	; 0x28
 8014268:	af02      	add	r7, sp, #8
 801426a:	6078      	str	r0, [r7, #4]
 801426c:	460b      	mov	r3, r1
 801426e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8014270:	2300      	movs	r3, #0
 8014272:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014274:	2300      	movs	r3, #0
 8014276:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014278:	78fb      	ldrb	r3, [r7, #3]
 801427a:	f003 0303 	and.w	r3, r3, #3
 801427e:	2b00      	cmp	r3, #0
 8014280:	d106      	bne.n	8014290 <tcp_enqueue_flags+0x2c>
 8014282:	4b67      	ldr	r3, [pc, #412]	; (8014420 <tcp_enqueue_flags+0x1bc>)
 8014284:	f240 4211 	movw	r2, #1041	; 0x411
 8014288:	4966      	ldr	r1, [pc, #408]	; (8014424 <tcp_enqueue_flags+0x1c0>)
 801428a:	4867      	ldr	r0, [pc, #412]	; (8014428 <tcp_enqueue_flags+0x1c4>)
 801428c:	f004 fc68 	bl	8018b60 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d106      	bne.n	80142a4 <tcp_enqueue_flags+0x40>
 8014296:	4b62      	ldr	r3, [pc, #392]	; (8014420 <tcp_enqueue_flags+0x1bc>)
 8014298:	f240 4213 	movw	r2, #1043	; 0x413
 801429c:	4963      	ldr	r1, [pc, #396]	; (801442c <tcp_enqueue_flags+0x1c8>)
 801429e:	4862      	ldr	r0, [pc, #392]	; (8014428 <tcp_enqueue_flags+0x1c4>)
 80142a0:	f004 fc5e 	bl	8018b60 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80142a4:	78fb      	ldrb	r3, [r7, #3]
 80142a6:	f003 0302 	and.w	r3, r3, #2
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d001      	beq.n	80142b2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80142ae:	2301      	movs	r3, #1
 80142b0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80142b2:	7ffb      	ldrb	r3, [r7, #31]
 80142b4:	009b      	lsls	r3, r3, #2
 80142b6:	b2db      	uxtb	r3, r3
 80142b8:	f003 0304 	and.w	r3, r3, #4
 80142bc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80142be:	7dfb      	ldrb	r3, [r7, #23]
 80142c0:	b29b      	uxth	r3, r3
 80142c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80142c6:	4619      	mov	r1, r3
 80142c8:	2036      	movs	r0, #54	; 0x36
 80142ca:	f7fa fa47 	bl	800e75c <pbuf_alloc>
 80142ce:	6138      	str	r0, [r7, #16]
 80142d0:	693b      	ldr	r3, [r7, #16]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d109      	bne.n	80142ea <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	8b5b      	ldrh	r3, [r3, #26]
 80142da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80142de:	b29a      	uxth	r2, r3
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80142e4:	f04f 33ff 	mov.w	r3, #4294967295
 80142e8:	e095      	b.n	8014416 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80142ea:	693b      	ldr	r3, [r7, #16]
 80142ec:	895a      	ldrh	r2, [r3, #10]
 80142ee:	7dfb      	ldrb	r3, [r7, #23]
 80142f0:	b29b      	uxth	r3, r3
 80142f2:	429a      	cmp	r2, r3
 80142f4:	d206      	bcs.n	8014304 <tcp_enqueue_flags+0xa0>
 80142f6:	4b4a      	ldr	r3, [pc, #296]	; (8014420 <tcp_enqueue_flags+0x1bc>)
 80142f8:	f240 4239 	movw	r2, #1081	; 0x439
 80142fc:	494c      	ldr	r1, [pc, #304]	; (8014430 <tcp_enqueue_flags+0x1cc>)
 80142fe:	484a      	ldr	r0, [pc, #296]	; (8014428 <tcp_enqueue_flags+0x1c4>)
 8014300:	f004 fc2e 	bl	8018b60 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014308:	78fa      	ldrb	r2, [r7, #3]
 801430a:	7ffb      	ldrb	r3, [r7, #31]
 801430c:	9300      	str	r3, [sp, #0]
 801430e:	460b      	mov	r3, r1
 8014310:	6939      	ldr	r1, [r7, #16]
 8014312:	6878      	ldr	r0, [r7, #4]
 8014314:	f7ff f918 	bl	8013548 <tcp_create_segment>
 8014318:	60f8      	str	r0, [r7, #12]
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d109      	bne.n	8014334 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	8b5b      	ldrh	r3, [r3, #26]
 8014324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014328:	b29a      	uxth	r2, r3
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801432e:	f04f 33ff 	mov.w	r3, #4294967295
 8014332:	e070      	b.n	8014416 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	68db      	ldr	r3, [r3, #12]
 8014338:	f003 0303 	and.w	r3, r3, #3
 801433c:	2b00      	cmp	r3, #0
 801433e:	d006      	beq.n	801434e <tcp_enqueue_flags+0xea>
 8014340:	4b37      	ldr	r3, [pc, #220]	; (8014420 <tcp_enqueue_flags+0x1bc>)
 8014342:	f240 4242 	movw	r2, #1090	; 0x442
 8014346:	493b      	ldr	r1, [pc, #236]	; (8014434 <tcp_enqueue_flags+0x1d0>)
 8014348:	4837      	ldr	r0, [pc, #220]	; (8014428 <tcp_enqueue_flags+0x1c4>)
 801434a:	f004 fc09 	bl	8018b60 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	891b      	ldrh	r3, [r3, #8]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d006      	beq.n	8014364 <tcp_enqueue_flags+0x100>
 8014356:	4b32      	ldr	r3, [pc, #200]	; (8014420 <tcp_enqueue_flags+0x1bc>)
 8014358:	f240 4243 	movw	r2, #1091	; 0x443
 801435c:	4936      	ldr	r1, [pc, #216]	; (8014438 <tcp_enqueue_flags+0x1d4>)
 801435e:	4832      	ldr	r0, [pc, #200]	; (8014428 <tcp_enqueue_flags+0x1c4>)
 8014360:	f004 fbfe 	bl	8018b60 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014368:	2b00      	cmp	r3, #0
 801436a:	d103      	bne.n	8014374 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	68fa      	ldr	r2, [r7, #12]
 8014370:	66da      	str	r2, [r3, #108]	; 0x6c
 8014372:	e00d      	b.n	8014390 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014378:	61bb      	str	r3, [r7, #24]
 801437a:	e002      	b.n	8014382 <tcp_enqueue_flags+0x11e>
 801437c:	69bb      	ldr	r3, [r7, #24]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	61bb      	str	r3, [r7, #24]
 8014382:	69bb      	ldr	r3, [r7, #24]
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d1f8      	bne.n	801437c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801438a:	69bb      	ldr	r3, [r7, #24]
 801438c:	68fa      	ldr	r2, [r7, #12]
 801438e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	2200      	movs	r2, #0
 8014394:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014398:	78fb      	ldrb	r3, [r7, #3]
 801439a:	f003 0302 	and.w	r3, r3, #2
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d104      	bne.n	80143ac <tcp_enqueue_flags+0x148>
 80143a2:	78fb      	ldrb	r3, [r7, #3]
 80143a4:	f003 0301 	and.w	r3, r3, #1
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d004      	beq.n	80143b6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80143b0:	1c5a      	adds	r2, r3, #1
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80143b6:	78fb      	ldrb	r3, [r7, #3]
 80143b8:	f003 0301 	and.w	r3, r3, #1
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d006      	beq.n	80143ce <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	8b5b      	ldrh	r3, [r3, #26]
 80143c4:	f043 0320 	orr.w	r3, r3, #32
 80143c8:	b29a      	uxth	r2, r3
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	685b      	ldr	r3, [r3, #4]
 80143d2:	4618      	mov	r0, r3
 80143d4:	f7fa fd34 	bl	800ee40 <pbuf_clen>
 80143d8:	4603      	mov	r3, r0
 80143da:	461a      	mov	r2, r3
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80143e2:	4413      	add	r3, r2
 80143e4:	b29a      	uxth	r2, r3
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d00e      	beq.n	8014414 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d10a      	bne.n	8014414 <tcp_enqueue_flags+0x1b0>
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014402:	2b00      	cmp	r3, #0
 8014404:	d106      	bne.n	8014414 <tcp_enqueue_flags+0x1b0>
 8014406:	4b06      	ldr	r3, [pc, #24]	; (8014420 <tcp_enqueue_flags+0x1bc>)
 8014408:	f240 4265 	movw	r2, #1125	; 0x465
 801440c:	490b      	ldr	r1, [pc, #44]	; (801443c <tcp_enqueue_flags+0x1d8>)
 801440e:	4806      	ldr	r0, [pc, #24]	; (8014428 <tcp_enqueue_flags+0x1c4>)
 8014410:	f004 fba6 	bl	8018b60 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014414:	2300      	movs	r3, #0
}
 8014416:	4618      	mov	r0, r3
 8014418:	3720      	adds	r7, #32
 801441a:	46bd      	mov	sp, r7
 801441c:	bd80      	pop	{r7, pc}
 801441e:	bf00      	nop
 8014420:	0801b488 	.word	0x0801b488
 8014424:	0801b8ac 	.word	0x0801b8ac
 8014428:	0801b4dc 	.word	0x0801b4dc
 801442c:	0801b904 	.word	0x0801b904
 8014430:	0801b924 	.word	0x0801b924
 8014434:	0801b960 	.word	0x0801b960
 8014438:	0801b978 	.word	0x0801b978
 801443c:	0801b9a4 	.word	0x0801b9a4

08014440 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014440:	b5b0      	push	{r4, r5, r7, lr}
 8014442:	b08a      	sub	sp, #40	; 0x28
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d106      	bne.n	801445c <tcp_output+0x1c>
 801444e:	4b8a      	ldr	r3, [pc, #552]	; (8014678 <tcp_output+0x238>)
 8014450:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8014454:	4989      	ldr	r1, [pc, #548]	; (801467c <tcp_output+0x23c>)
 8014456:	488a      	ldr	r0, [pc, #552]	; (8014680 <tcp_output+0x240>)
 8014458:	f004 fb82 	bl	8018b60 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	7d1b      	ldrb	r3, [r3, #20]
 8014460:	2b01      	cmp	r3, #1
 8014462:	d106      	bne.n	8014472 <tcp_output+0x32>
 8014464:	4b84      	ldr	r3, [pc, #528]	; (8014678 <tcp_output+0x238>)
 8014466:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801446a:	4986      	ldr	r1, [pc, #536]	; (8014684 <tcp_output+0x244>)
 801446c:	4884      	ldr	r0, [pc, #528]	; (8014680 <tcp_output+0x240>)
 801446e:	f004 fb77 	bl	8018b60 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8014472:	4b85      	ldr	r3, [pc, #532]	; (8014688 <tcp_output+0x248>)
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	687a      	ldr	r2, [r7, #4]
 8014478:	429a      	cmp	r2, r3
 801447a:	d101      	bne.n	8014480 <tcp_output+0x40>
    return ERR_OK;
 801447c:	2300      	movs	r3, #0
 801447e:	e1ce      	b.n	801481e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801448c:	4293      	cmp	r3, r2
 801448e:	bf28      	it	cs
 8014490:	4613      	movcs	r3, r2
 8014492:	b29b      	uxth	r3, r3
 8014494:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801449a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d10b      	bne.n	80144ba <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	8b5b      	ldrh	r3, [r3, #26]
 80144a6:	f003 0302 	and.w	r3, r3, #2
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	f000 81aa 	beq.w	8014804 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80144b0:	6878      	ldr	r0, [r7, #4]
 80144b2:	f000 fdcb 	bl	801504c <tcp_send_empty_ack>
 80144b6:	4603      	mov	r3, r0
 80144b8:	e1b1      	b.n	801481e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80144ba:	6879      	ldr	r1, [r7, #4]
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	3304      	adds	r3, #4
 80144c0:	461a      	mov	r2, r3
 80144c2:	6878      	ldr	r0, [r7, #4]
 80144c4:	f7ff f824 	bl	8013510 <tcp_route>
 80144c8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80144ca:	697b      	ldr	r3, [r7, #20]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d102      	bne.n	80144d6 <tcp_output+0x96>
    return ERR_RTE;
 80144d0:	f06f 0303 	mvn.w	r3, #3
 80144d4:	e1a3      	b.n	801481e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d003      	beq.n	80144e4 <tcp_output+0xa4>
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d111      	bne.n	8014508 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80144e4:	697b      	ldr	r3, [r7, #20]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d002      	beq.n	80144f0 <tcp_output+0xb0>
 80144ea:	697b      	ldr	r3, [r7, #20]
 80144ec:	3304      	adds	r3, #4
 80144ee:	e000      	b.n	80144f2 <tcp_output+0xb2>
 80144f0:	2300      	movs	r3, #0
 80144f2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80144f4:	693b      	ldr	r3, [r7, #16]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d102      	bne.n	8014500 <tcp_output+0xc0>
      return ERR_RTE;
 80144fa:	f06f 0303 	mvn.w	r3, #3
 80144fe:	e18e      	b.n	801481e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014500:	693b      	ldr	r3, [r7, #16]
 8014502:	681a      	ldr	r2, [r3, #0]
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801450a:	68db      	ldr	r3, [r3, #12]
 801450c:	685b      	ldr	r3, [r3, #4]
 801450e:	4618      	mov	r0, r3
 8014510:	f7f8 ff3d 	bl	800d38e <lwip_htonl>
 8014514:	4602      	mov	r2, r0
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801451a:	1ad3      	subs	r3, r2, r3
 801451c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801451e:	8912      	ldrh	r2, [r2, #8]
 8014520:	4413      	add	r3, r2
 8014522:	69ba      	ldr	r2, [r7, #24]
 8014524:	429a      	cmp	r2, r3
 8014526:	d227      	bcs.n	8014578 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801452e:	461a      	mov	r2, r3
 8014530:	69bb      	ldr	r3, [r7, #24]
 8014532:	4293      	cmp	r3, r2
 8014534:	d114      	bne.n	8014560 <tcp_output+0x120>
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801453a:	2b00      	cmp	r3, #0
 801453c:	d110      	bne.n	8014560 <tcp_output+0x120>
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014544:	2b00      	cmp	r3, #0
 8014546:	d10b      	bne.n	8014560 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	2200      	movs	r2, #0
 801454c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	2201      	movs	r2, #1
 8014554:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	2200      	movs	r2, #0
 801455c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	8b5b      	ldrh	r3, [r3, #26]
 8014564:	f003 0302 	and.w	r3, r3, #2
 8014568:	2b00      	cmp	r3, #0
 801456a:	f000 814d 	beq.w	8014808 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801456e:	6878      	ldr	r0, [r7, #4]
 8014570:	f000 fd6c 	bl	801504c <tcp_send_empty_ack>
 8014574:	4603      	mov	r3, r0
 8014576:	e152      	b.n	801481e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	2200      	movs	r2, #0
 801457c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014584:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014586:	6a3b      	ldr	r3, [r7, #32]
 8014588:	2b00      	cmp	r3, #0
 801458a:	f000 811c 	beq.w	80147c6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801458e:	e002      	b.n	8014596 <tcp_output+0x156>
 8014590:	6a3b      	ldr	r3, [r7, #32]
 8014592:	681b      	ldr	r3, [r3, #0]
 8014594:	623b      	str	r3, [r7, #32]
 8014596:	6a3b      	ldr	r3, [r7, #32]
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d1f8      	bne.n	8014590 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801459e:	e112      	b.n	80147c6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80145a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145a2:	68db      	ldr	r3, [r3, #12]
 80145a4:	899b      	ldrh	r3, [r3, #12]
 80145a6:	b29b      	uxth	r3, r3
 80145a8:	4618      	mov	r0, r3
 80145aa:	f7f8 fedb 	bl	800d364 <lwip_htons>
 80145ae:	4603      	mov	r3, r0
 80145b0:	b2db      	uxtb	r3, r3
 80145b2:	f003 0304 	and.w	r3, r3, #4
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d006      	beq.n	80145c8 <tcp_output+0x188>
 80145ba:	4b2f      	ldr	r3, [pc, #188]	; (8014678 <tcp_output+0x238>)
 80145bc:	f240 5236 	movw	r2, #1334	; 0x536
 80145c0:	4932      	ldr	r1, [pc, #200]	; (801468c <tcp_output+0x24c>)
 80145c2:	482f      	ldr	r0, [pc, #188]	; (8014680 <tcp_output+0x240>)
 80145c4:	f004 facc 	bl	8018b60 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d01f      	beq.n	8014610 <tcp_output+0x1d0>
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	8b5b      	ldrh	r3, [r3, #26]
 80145d4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d119      	bne.n	8014610 <tcp_output+0x1d0>
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	d00b      	beq.n	80145fc <tcp_output+0x1bc>
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d110      	bne.n	8014610 <tcp_output+0x1d0>
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145f2:	891a      	ldrh	r2, [r3, #8]
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80145f8:	429a      	cmp	r2, r3
 80145fa:	d209      	bcs.n	8014610 <tcp_output+0x1d0>
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014602:	2b00      	cmp	r3, #0
 8014604:	d004      	beq.n	8014610 <tcp_output+0x1d0>
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801460c:	2b08      	cmp	r3, #8
 801460e:	d901      	bls.n	8014614 <tcp_output+0x1d4>
 8014610:	2301      	movs	r3, #1
 8014612:	e000      	b.n	8014616 <tcp_output+0x1d6>
 8014614:	2300      	movs	r3, #0
 8014616:	2b00      	cmp	r3, #0
 8014618:	d106      	bne.n	8014628 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	8b5b      	ldrh	r3, [r3, #26]
 801461e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014622:	2b00      	cmp	r3, #0
 8014624:	f000 80e4 	beq.w	80147f0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	7d1b      	ldrb	r3, [r3, #20]
 801462c:	2b02      	cmp	r3, #2
 801462e:	d00d      	beq.n	801464c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014632:	68db      	ldr	r3, [r3, #12]
 8014634:	899b      	ldrh	r3, [r3, #12]
 8014636:	b29c      	uxth	r4, r3
 8014638:	2010      	movs	r0, #16
 801463a:	f7f8 fe93 	bl	800d364 <lwip_htons>
 801463e:	4603      	mov	r3, r0
 8014640:	461a      	mov	r2, r3
 8014642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014644:	68db      	ldr	r3, [r3, #12]
 8014646:	4322      	orrs	r2, r4
 8014648:	b292      	uxth	r2, r2
 801464a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801464c:	697a      	ldr	r2, [r7, #20]
 801464e:	6879      	ldr	r1, [r7, #4]
 8014650:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014652:	f000 f909 	bl	8014868 <tcp_output_segment>
 8014656:	4603      	mov	r3, r0
 8014658:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801465a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d016      	beq.n	8014690 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	8b5b      	ldrh	r3, [r3, #26]
 8014666:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801466a:	b29a      	uxth	r2, r3
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	835a      	strh	r2, [r3, #26]
      return err;
 8014670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014674:	e0d3      	b.n	801481e <tcp_output+0x3de>
 8014676:	bf00      	nop
 8014678:	0801b488 	.word	0x0801b488
 801467c:	0801b9cc 	.word	0x0801b9cc
 8014680:	0801b4dc 	.word	0x0801b4dc
 8014684:	0801b9e4 	.word	0x0801b9e4
 8014688:	24008acc 	.word	0x24008acc
 801468c:	0801ba0c 	.word	0x0801ba0c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014692:	681a      	ldr	r2, [r3, #0]
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	7d1b      	ldrb	r3, [r3, #20]
 801469c:	2b02      	cmp	r3, #2
 801469e:	d006      	beq.n	80146ae <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	8b5b      	ldrh	r3, [r3, #26]
 80146a4:	f023 0303 	bic.w	r3, r3, #3
 80146a8:	b29a      	uxth	r2, r3
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80146ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b0:	68db      	ldr	r3, [r3, #12]
 80146b2:	685b      	ldr	r3, [r3, #4]
 80146b4:	4618      	mov	r0, r3
 80146b6:	f7f8 fe6a 	bl	800d38e <lwip_htonl>
 80146ba:	4604      	mov	r4, r0
 80146bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146be:	891b      	ldrh	r3, [r3, #8]
 80146c0:	461d      	mov	r5, r3
 80146c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146c4:	68db      	ldr	r3, [r3, #12]
 80146c6:	899b      	ldrh	r3, [r3, #12]
 80146c8:	b29b      	uxth	r3, r3
 80146ca:	4618      	mov	r0, r3
 80146cc:	f7f8 fe4a 	bl	800d364 <lwip_htons>
 80146d0:	4603      	mov	r3, r0
 80146d2:	b2db      	uxtb	r3, r3
 80146d4:	f003 0303 	and.w	r3, r3, #3
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d001      	beq.n	80146e0 <tcp_output+0x2a0>
 80146dc:	2301      	movs	r3, #1
 80146de:	e000      	b.n	80146e2 <tcp_output+0x2a2>
 80146e0:	2300      	movs	r3, #0
 80146e2:	442b      	add	r3, r5
 80146e4:	4423      	add	r3, r4
 80146e6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80146ec:	68bb      	ldr	r3, [r7, #8]
 80146ee:	1ad3      	subs	r3, r2, r3
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	da02      	bge.n	80146fa <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	68ba      	ldr	r2, [r7, #8]
 80146f8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80146fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146fc:	891b      	ldrh	r3, [r3, #8]
 80146fe:	461c      	mov	r4, r3
 8014700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014702:	68db      	ldr	r3, [r3, #12]
 8014704:	899b      	ldrh	r3, [r3, #12]
 8014706:	b29b      	uxth	r3, r3
 8014708:	4618      	mov	r0, r3
 801470a:	f7f8 fe2b 	bl	800d364 <lwip_htons>
 801470e:	4603      	mov	r3, r0
 8014710:	b2db      	uxtb	r3, r3
 8014712:	f003 0303 	and.w	r3, r3, #3
 8014716:	2b00      	cmp	r3, #0
 8014718:	d001      	beq.n	801471e <tcp_output+0x2de>
 801471a:	2301      	movs	r3, #1
 801471c:	e000      	b.n	8014720 <tcp_output+0x2e0>
 801471e:	2300      	movs	r3, #0
 8014720:	4423      	add	r3, r4
 8014722:	2b00      	cmp	r3, #0
 8014724:	d049      	beq.n	80147ba <tcp_output+0x37a>
      seg->next = NULL;
 8014726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014728:	2200      	movs	r2, #0
 801472a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014730:	2b00      	cmp	r3, #0
 8014732:	d105      	bne.n	8014740 <tcp_output+0x300>
        pcb->unacked = seg;
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014738:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801473c:	623b      	str	r3, [r7, #32]
 801473e:	e03f      	b.n	80147c0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014742:	68db      	ldr	r3, [r3, #12]
 8014744:	685b      	ldr	r3, [r3, #4]
 8014746:	4618      	mov	r0, r3
 8014748:	f7f8 fe21 	bl	800d38e <lwip_htonl>
 801474c:	4604      	mov	r4, r0
 801474e:	6a3b      	ldr	r3, [r7, #32]
 8014750:	68db      	ldr	r3, [r3, #12]
 8014752:	685b      	ldr	r3, [r3, #4]
 8014754:	4618      	mov	r0, r3
 8014756:	f7f8 fe1a 	bl	800d38e <lwip_htonl>
 801475a:	4603      	mov	r3, r0
 801475c:	1ae3      	subs	r3, r4, r3
 801475e:	2b00      	cmp	r3, #0
 8014760:	da24      	bge.n	80147ac <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	3370      	adds	r3, #112	; 0x70
 8014766:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014768:	e002      	b.n	8014770 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801476a:	69fb      	ldr	r3, [r7, #28]
 801476c:	681b      	ldr	r3, [r3, #0]
 801476e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014770:	69fb      	ldr	r3, [r7, #28]
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d011      	beq.n	801479c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014778:	69fb      	ldr	r3, [r7, #28]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	68db      	ldr	r3, [r3, #12]
 801477e:	685b      	ldr	r3, [r3, #4]
 8014780:	4618      	mov	r0, r3
 8014782:	f7f8 fe04 	bl	800d38e <lwip_htonl>
 8014786:	4604      	mov	r4, r0
 8014788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801478a:	68db      	ldr	r3, [r3, #12]
 801478c:	685b      	ldr	r3, [r3, #4]
 801478e:	4618      	mov	r0, r3
 8014790:	f7f8 fdfd 	bl	800d38e <lwip_htonl>
 8014794:	4603      	mov	r3, r0
 8014796:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014798:	2b00      	cmp	r3, #0
 801479a:	dbe6      	blt.n	801476a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801479c:	69fb      	ldr	r3, [r7, #28]
 801479e:	681a      	ldr	r2, [r3, #0]
 80147a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147a2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80147a4:	69fb      	ldr	r3, [r7, #28]
 80147a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147a8:	601a      	str	r2, [r3, #0]
 80147aa:	e009      	b.n	80147c0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80147ac:	6a3b      	ldr	r3, [r7, #32]
 80147ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147b0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80147b2:	6a3b      	ldr	r3, [r7, #32]
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	623b      	str	r3, [r7, #32]
 80147b8:	e002      	b.n	80147c0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80147ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80147bc:	f7fb fefb 	bl	80105b6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147c4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80147c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d012      	beq.n	80147f2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80147cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ce:	68db      	ldr	r3, [r3, #12]
 80147d0:	685b      	ldr	r3, [r3, #4]
 80147d2:	4618      	mov	r0, r3
 80147d4:	f7f8 fddb 	bl	800d38e <lwip_htonl>
 80147d8:	4602      	mov	r2, r0
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80147de:	1ad3      	subs	r3, r2, r3
 80147e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147e2:	8912      	ldrh	r2, [r2, #8]
 80147e4:	4413      	add	r3, r2
  while (seg != NULL &&
 80147e6:	69ba      	ldr	r2, [r7, #24]
 80147e8:	429a      	cmp	r2, r3
 80147ea:	f4bf aed9 	bcs.w	80145a0 <tcp_output+0x160>
 80147ee:	e000      	b.n	80147f2 <tcp_output+0x3b2>
      break;
 80147f0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d108      	bne.n	801480c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	2200      	movs	r2, #0
 80147fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8014802:	e004      	b.n	801480e <tcp_output+0x3ce>
    goto output_done;
 8014804:	bf00      	nop
 8014806:	e002      	b.n	801480e <tcp_output+0x3ce>
    goto output_done;
 8014808:	bf00      	nop
 801480a:	e000      	b.n	801480e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801480c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	8b5b      	ldrh	r3, [r3, #26]
 8014812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014816:	b29a      	uxth	r2, r3
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801481c:	2300      	movs	r3, #0
}
 801481e:	4618      	mov	r0, r3
 8014820:	3728      	adds	r7, #40	; 0x28
 8014822:	46bd      	mov	sp, r7
 8014824:	bdb0      	pop	{r4, r5, r7, pc}
 8014826:	bf00      	nop

08014828 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b082      	sub	sp, #8
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	2b00      	cmp	r3, #0
 8014834:	d106      	bne.n	8014844 <tcp_output_segment_busy+0x1c>
 8014836:	4b09      	ldr	r3, [pc, #36]	; (801485c <tcp_output_segment_busy+0x34>)
 8014838:	f240 529a 	movw	r2, #1434	; 0x59a
 801483c:	4908      	ldr	r1, [pc, #32]	; (8014860 <tcp_output_segment_busy+0x38>)
 801483e:	4809      	ldr	r0, [pc, #36]	; (8014864 <tcp_output_segment_busy+0x3c>)
 8014840:	f004 f98e 	bl	8018b60 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	685b      	ldr	r3, [r3, #4]
 8014848:	7b9b      	ldrb	r3, [r3, #14]
 801484a:	2b01      	cmp	r3, #1
 801484c:	d001      	beq.n	8014852 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801484e:	2301      	movs	r3, #1
 8014850:	e000      	b.n	8014854 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8014852:	2300      	movs	r3, #0
}
 8014854:	4618      	mov	r0, r3
 8014856:	3708      	adds	r7, #8
 8014858:	46bd      	mov	sp, r7
 801485a:	bd80      	pop	{r7, pc}
 801485c:	0801b488 	.word	0x0801b488
 8014860:	0801ba24 	.word	0x0801ba24
 8014864:	0801b4dc 	.word	0x0801b4dc

08014868 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014868:	b5b0      	push	{r4, r5, r7, lr}
 801486a:	b08c      	sub	sp, #48	; 0x30
 801486c:	af04      	add	r7, sp, #16
 801486e:	60f8      	str	r0, [r7, #12]
 8014870:	60b9      	str	r1, [r7, #8]
 8014872:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	2b00      	cmp	r3, #0
 8014878:	d106      	bne.n	8014888 <tcp_output_segment+0x20>
 801487a:	4b63      	ldr	r3, [pc, #396]	; (8014a08 <tcp_output_segment+0x1a0>)
 801487c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8014880:	4962      	ldr	r1, [pc, #392]	; (8014a0c <tcp_output_segment+0x1a4>)
 8014882:	4863      	ldr	r0, [pc, #396]	; (8014a10 <tcp_output_segment+0x1a8>)
 8014884:	f004 f96c 	bl	8018b60 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014888:	68bb      	ldr	r3, [r7, #8]
 801488a:	2b00      	cmp	r3, #0
 801488c:	d106      	bne.n	801489c <tcp_output_segment+0x34>
 801488e:	4b5e      	ldr	r3, [pc, #376]	; (8014a08 <tcp_output_segment+0x1a0>)
 8014890:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014894:	495f      	ldr	r1, [pc, #380]	; (8014a14 <tcp_output_segment+0x1ac>)
 8014896:	485e      	ldr	r0, [pc, #376]	; (8014a10 <tcp_output_segment+0x1a8>)
 8014898:	f004 f962 	bl	8018b60 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d106      	bne.n	80148b0 <tcp_output_segment+0x48>
 80148a2:	4b59      	ldr	r3, [pc, #356]	; (8014a08 <tcp_output_segment+0x1a0>)
 80148a4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80148a8:	495b      	ldr	r1, [pc, #364]	; (8014a18 <tcp_output_segment+0x1b0>)
 80148aa:	4859      	ldr	r0, [pc, #356]	; (8014a10 <tcp_output_segment+0x1a8>)
 80148ac:	f004 f958 	bl	8018b60 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80148b0:	68f8      	ldr	r0, [r7, #12]
 80148b2:	f7ff ffb9 	bl	8014828 <tcp_output_segment_busy>
 80148b6:	4603      	mov	r3, r0
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d001      	beq.n	80148c0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80148bc:	2300      	movs	r3, #0
 80148be:	e09f      	b.n	8014a00 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80148c0:	68bb      	ldr	r3, [r7, #8]
 80148c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	68dc      	ldr	r4, [r3, #12]
 80148c8:	4610      	mov	r0, r2
 80148ca:	f7f8 fd60 	bl	800d38e <lwip_htonl>
 80148ce:	4603      	mov	r3, r0
 80148d0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80148d2:	68bb      	ldr	r3, [r7, #8]
 80148d4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	68dc      	ldr	r4, [r3, #12]
 80148da:	4610      	mov	r0, r2
 80148dc:	f7f8 fd42 	bl	800d364 <lwip_htons>
 80148e0:	4603      	mov	r3, r0
 80148e2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80148e4:	68bb      	ldr	r3, [r7, #8]
 80148e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148e8:	68ba      	ldr	r2, [r7, #8]
 80148ea:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80148ec:	441a      	add	r2, r3
 80148ee:	68bb      	ldr	r3, [r7, #8]
 80148f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	68db      	ldr	r3, [r3, #12]
 80148f6:	3314      	adds	r3, #20
 80148f8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	7a9b      	ldrb	r3, [r3, #10]
 80148fe:	f003 0301 	and.w	r3, r3, #1
 8014902:	2b00      	cmp	r3, #0
 8014904:	d015      	beq.n	8014932 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014906:	68bb      	ldr	r3, [r7, #8]
 8014908:	3304      	adds	r3, #4
 801490a:	461a      	mov	r2, r3
 801490c:	6879      	ldr	r1, [r7, #4]
 801490e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8014912:	f7fc fa33 	bl	8010d7c <tcp_eff_send_mss_netif>
 8014916:	4603      	mov	r3, r0
 8014918:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801491a:	8b7b      	ldrh	r3, [r7, #26]
 801491c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8014920:	4618      	mov	r0, r3
 8014922:	f7f8 fd34 	bl	800d38e <lwip_htonl>
 8014926:	4602      	mov	r2, r0
 8014928:	69fb      	ldr	r3, [r7, #28]
 801492a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801492c:	69fb      	ldr	r3, [r7, #28]
 801492e:	3304      	adds	r3, #4
 8014930:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8014932:	68bb      	ldr	r3, [r7, #8]
 8014934:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014938:	2b00      	cmp	r3, #0
 801493a:	da02      	bge.n	8014942 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801493c:	68bb      	ldr	r3, [r7, #8]
 801493e:	2200      	movs	r2, #0
 8014940:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8014942:	68bb      	ldr	r3, [r7, #8]
 8014944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014946:	2b00      	cmp	r3, #0
 8014948:	d10c      	bne.n	8014964 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801494a:	4b34      	ldr	r3, [pc, #208]	; (8014a1c <tcp_output_segment+0x1b4>)
 801494c:	681a      	ldr	r2, [r3, #0]
 801494e:	68bb      	ldr	r3, [r7, #8]
 8014950:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	68db      	ldr	r3, [r3, #12]
 8014956:	685b      	ldr	r3, [r3, #4]
 8014958:	4618      	mov	r0, r3
 801495a:	f7f8 fd18 	bl	800d38e <lwip_htonl>
 801495e:	4602      	mov	r2, r0
 8014960:	68bb      	ldr	r3, [r7, #8]
 8014962:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	68da      	ldr	r2, [r3, #12]
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	685b      	ldr	r3, [r3, #4]
 801496c:	685b      	ldr	r3, [r3, #4]
 801496e:	1ad3      	subs	r3, r2, r3
 8014970:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	685b      	ldr	r3, [r3, #4]
 8014976:	8959      	ldrh	r1, [r3, #10]
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	685b      	ldr	r3, [r3, #4]
 801497c:	8b3a      	ldrh	r2, [r7, #24]
 801497e:	1a8a      	subs	r2, r1, r2
 8014980:	b292      	uxth	r2, r2
 8014982:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	685b      	ldr	r3, [r3, #4]
 8014988:	8919      	ldrh	r1, [r3, #8]
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	685b      	ldr	r3, [r3, #4]
 801498e:	8b3a      	ldrh	r2, [r7, #24]
 8014990:	1a8a      	subs	r2, r1, r2
 8014992:	b292      	uxth	r2, r2
 8014994:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	685b      	ldr	r3, [r3, #4]
 801499a:	68fa      	ldr	r2, [r7, #12]
 801499c:	68d2      	ldr	r2, [r2, #12]
 801499e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	68db      	ldr	r3, [r3, #12]
 80149a4:	2200      	movs	r2, #0
 80149a6:	741a      	strb	r2, [r3, #16]
 80149a8:	2200      	movs	r2, #0
 80149aa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	68db      	ldr	r3, [r3, #12]
 80149b0:	f103 0214 	add.w	r2, r3, #20
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	7a9b      	ldrb	r3, [r3, #10]
 80149b8:	009b      	lsls	r3, r3, #2
 80149ba:	f003 0304 	and.w	r3, r3, #4
 80149be:	4413      	add	r3, r2
 80149c0:	69fa      	ldr	r2, [r7, #28]
 80149c2:	429a      	cmp	r2, r3
 80149c4:	d006      	beq.n	80149d4 <tcp_output_segment+0x16c>
 80149c6:	4b10      	ldr	r3, [pc, #64]	; (8014a08 <tcp_output_segment+0x1a0>)
 80149c8:	f240 621c 	movw	r2, #1564	; 0x61c
 80149cc:	4914      	ldr	r1, [pc, #80]	; (8014a20 <tcp_output_segment+0x1b8>)
 80149ce:	4810      	ldr	r0, [pc, #64]	; (8014a10 <tcp_output_segment+0x1a8>)
 80149d0:	f004 f8c6 	bl	8018b60 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	6858      	ldr	r0, [r3, #4]
 80149d8:	68b9      	ldr	r1, [r7, #8]
 80149da:	68bb      	ldr	r3, [r7, #8]
 80149dc:	1d1c      	adds	r4, r3, #4
 80149de:	68bb      	ldr	r3, [r7, #8]
 80149e0:	7add      	ldrb	r5, [r3, #11]
 80149e2:	68bb      	ldr	r3, [r7, #8]
 80149e4:	7a9b      	ldrb	r3, [r3, #10]
 80149e6:	687a      	ldr	r2, [r7, #4]
 80149e8:	9202      	str	r2, [sp, #8]
 80149ea:	2206      	movs	r2, #6
 80149ec:	9201      	str	r2, [sp, #4]
 80149ee:	9300      	str	r3, [sp, #0]
 80149f0:	462b      	mov	r3, r5
 80149f2:	4622      	mov	r2, r4
 80149f4:	f002 fdbc 	bl	8017570 <ip4_output_if>
 80149f8:	4603      	mov	r3, r0
 80149fa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80149fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014a00:	4618      	mov	r0, r3
 8014a02:	3720      	adds	r7, #32
 8014a04:	46bd      	mov	sp, r7
 8014a06:	bdb0      	pop	{r4, r5, r7, pc}
 8014a08:	0801b488 	.word	0x0801b488
 8014a0c:	0801ba4c 	.word	0x0801ba4c
 8014a10:	0801b4dc 	.word	0x0801b4dc
 8014a14:	0801ba6c 	.word	0x0801ba6c
 8014a18:	0801ba8c 	.word	0x0801ba8c
 8014a1c:	24008a80 	.word	0x24008a80
 8014a20:	0801bab0 	.word	0x0801bab0

08014a24 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014a24:	b5b0      	push	{r4, r5, r7, lr}
 8014a26:	b084      	sub	sp, #16
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d106      	bne.n	8014a40 <tcp_rexmit_rto_prepare+0x1c>
 8014a32:	4b31      	ldr	r3, [pc, #196]	; (8014af8 <tcp_rexmit_rto_prepare+0xd4>)
 8014a34:	f240 6263 	movw	r2, #1635	; 0x663
 8014a38:	4930      	ldr	r1, [pc, #192]	; (8014afc <tcp_rexmit_rto_prepare+0xd8>)
 8014a3a:	4831      	ldr	r0, [pc, #196]	; (8014b00 <tcp_rexmit_rto_prepare+0xdc>)
 8014a3c:	f004 f890 	bl	8018b60 <iprintf>

  if (pcb->unacked == NULL) {
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d102      	bne.n	8014a4e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014a48:	f06f 0305 	mvn.w	r3, #5
 8014a4c:	e050      	b.n	8014af0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a52:	60fb      	str	r3, [r7, #12]
 8014a54:	e00b      	b.n	8014a6e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014a56:	68f8      	ldr	r0, [r7, #12]
 8014a58:	f7ff fee6 	bl	8014828 <tcp_output_segment_busy>
 8014a5c:	4603      	mov	r3, r0
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d002      	beq.n	8014a68 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8014a62:	f06f 0305 	mvn.w	r3, #5
 8014a66:	e043      	b.n	8014af0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	681b      	ldr	r3, [r3, #0]
 8014a6c:	60fb      	str	r3, [r7, #12]
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d1ef      	bne.n	8014a56 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014a76:	68f8      	ldr	r0, [r7, #12]
 8014a78:	f7ff fed6 	bl	8014828 <tcp_output_segment_busy>
 8014a7c:	4603      	mov	r3, r0
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d002      	beq.n	8014a88 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8014a82:	f06f 0305 	mvn.w	r3, #5
 8014a86:	e033      	b.n	8014af0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014a8c:	68fb      	ldr	r3, [r7, #12]
 8014a8e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	2200      	movs	r2, #0
 8014a9c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	8b5b      	ldrh	r3, [r3, #26]
 8014aa2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014aa6:	b29a      	uxth	r2, r3
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	68db      	ldr	r3, [r3, #12]
 8014ab0:	685b      	ldr	r3, [r3, #4]
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	f7f8 fc6b 	bl	800d38e <lwip_htonl>
 8014ab8:	4604      	mov	r4, r0
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	891b      	ldrh	r3, [r3, #8]
 8014abe:	461d      	mov	r5, r3
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	68db      	ldr	r3, [r3, #12]
 8014ac4:	899b      	ldrh	r3, [r3, #12]
 8014ac6:	b29b      	uxth	r3, r3
 8014ac8:	4618      	mov	r0, r3
 8014aca:	f7f8 fc4b 	bl	800d364 <lwip_htons>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	b2db      	uxtb	r3, r3
 8014ad2:	f003 0303 	and.w	r3, r3, #3
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d001      	beq.n	8014ade <tcp_rexmit_rto_prepare+0xba>
 8014ada:	2301      	movs	r3, #1
 8014adc:	e000      	b.n	8014ae0 <tcp_rexmit_rto_prepare+0xbc>
 8014ade:	2300      	movs	r3, #0
 8014ae0:	442b      	add	r3, r5
 8014ae2:	18e2      	adds	r2, r4, r3
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	2200      	movs	r2, #0
 8014aec:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8014aee:	2300      	movs	r3, #0
}
 8014af0:	4618      	mov	r0, r3
 8014af2:	3710      	adds	r7, #16
 8014af4:	46bd      	mov	sp, r7
 8014af6:	bdb0      	pop	{r4, r5, r7, pc}
 8014af8:	0801b488 	.word	0x0801b488
 8014afc:	0801bac4 	.word	0x0801bac4
 8014b00:	0801b4dc 	.word	0x0801b4dc

08014b04 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b082      	sub	sp, #8
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d106      	bne.n	8014b20 <tcp_rexmit_rto_commit+0x1c>
 8014b12:	4b0d      	ldr	r3, [pc, #52]	; (8014b48 <tcp_rexmit_rto_commit+0x44>)
 8014b14:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014b18:	490c      	ldr	r1, [pc, #48]	; (8014b4c <tcp_rexmit_rto_commit+0x48>)
 8014b1a:	480d      	ldr	r0, [pc, #52]	; (8014b50 <tcp_rexmit_rto_commit+0x4c>)
 8014b1c:	f004 f820 	bl	8018b60 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014b26:	2bff      	cmp	r3, #255	; 0xff
 8014b28:	d007      	beq.n	8014b3a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014b30:	3301      	adds	r3, #1
 8014b32:	b2da      	uxtb	r2, r3
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014b3a:	6878      	ldr	r0, [r7, #4]
 8014b3c:	f7ff fc80 	bl	8014440 <tcp_output>
}
 8014b40:	bf00      	nop
 8014b42:	3708      	adds	r7, #8
 8014b44:	46bd      	mov	sp, r7
 8014b46:	bd80      	pop	{r7, pc}
 8014b48:	0801b488 	.word	0x0801b488
 8014b4c:	0801bae8 	.word	0x0801bae8
 8014b50:	0801b4dc 	.word	0x0801b4dc

08014b54 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b082      	sub	sp, #8
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d106      	bne.n	8014b70 <tcp_rexmit_rto+0x1c>
 8014b62:	4b0a      	ldr	r3, [pc, #40]	; (8014b8c <tcp_rexmit_rto+0x38>)
 8014b64:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014b68:	4909      	ldr	r1, [pc, #36]	; (8014b90 <tcp_rexmit_rto+0x3c>)
 8014b6a:	480a      	ldr	r0, [pc, #40]	; (8014b94 <tcp_rexmit_rto+0x40>)
 8014b6c:	f003 fff8 	bl	8018b60 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014b70:	6878      	ldr	r0, [r7, #4]
 8014b72:	f7ff ff57 	bl	8014a24 <tcp_rexmit_rto_prepare>
 8014b76:	4603      	mov	r3, r0
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d102      	bne.n	8014b82 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014b7c:	6878      	ldr	r0, [r7, #4]
 8014b7e:	f7ff ffc1 	bl	8014b04 <tcp_rexmit_rto_commit>
  }
}
 8014b82:	bf00      	nop
 8014b84:	3708      	adds	r7, #8
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}
 8014b8a:	bf00      	nop
 8014b8c:	0801b488 	.word	0x0801b488
 8014b90:	0801bb0c 	.word	0x0801bb0c
 8014b94:	0801b4dc 	.word	0x0801b4dc

08014b98 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014b98:	b590      	push	{r4, r7, lr}
 8014b9a:	b085      	sub	sp, #20
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d106      	bne.n	8014bb4 <tcp_rexmit+0x1c>
 8014ba6:	4b2f      	ldr	r3, [pc, #188]	; (8014c64 <tcp_rexmit+0xcc>)
 8014ba8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014bac:	492e      	ldr	r1, [pc, #184]	; (8014c68 <tcp_rexmit+0xd0>)
 8014bae:	482f      	ldr	r0, [pc, #188]	; (8014c6c <tcp_rexmit+0xd4>)
 8014bb0:	f003 ffd6 	bl	8018b60 <iprintf>

  if (pcb->unacked == NULL) {
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d102      	bne.n	8014bc2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014bbc:	f06f 0305 	mvn.w	r3, #5
 8014bc0:	e04c      	b.n	8014c5c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bc6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014bc8:	68b8      	ldr	r0, [r7, #8]
 8014bca:	f7ff fe2d 	bl	8014828 <tcp_output_segment_busy>
 8014bce:	4603      	mov	r3, r0
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d002      	beq.n	8014bda <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014bd4:	f06f 0305 	mvn.w	r3, #5
 8014bd8:	e040      	b.n	8014c5c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014bda:	68bb      	ldr	r3, [r7, #8]
 8014bdc:	681a      	ldr	r2, [r3, #0]
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	336c      	adds	r3, #108	; 0x6c
 8014be6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014be8:	e002      	b.n	8014bf0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d011      	beq.n	8014c1c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	68db      	ldr	r3, [r3, #12]
 8014bfe:	685b      	ldr	r3, [r3, #4]
 8014c00:	4618      	mov	r0, r3
 8014c02:	f7f8 fbc4 	bl	800d38e <lwip_htonl>
 8014c06:	4604      	mov	r4, r0
 8014c08:	68bb      	ldr	r3, [r7, #8]
 8014c0a:	68db      	ldr	r3, [r3, #12]
 8014c0c:	685b      	ldr	r3, [r3, #4]
 8014c0e:	4618      	mov	r0, r3
 8014c10:	f7f8 fbbd 	bl	800d38e <lwip_htonl>
 8014c14:	4603      	mov	r3, r0
 8014c16:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	dbe6      	blt.n	8014bea <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	681a      	ldr	r2, [r3, #0]
 8014c20:	68bb      	ldr	r3, [r7, #8]
 8014c22:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	68ba      	ldr	r2, [r7, #8]
 8014c28:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014c2a:	68bb      	ldr	r3, [r7, #8]
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d103      	bne.n	8014c3a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	2200      	movs	r2, #0
 8014c36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014c40:	2bff      	cmp	r3, #255	; 0xff
 8014c42:	d007      	beq.n	8014c54 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014c4a:	3301      	adds	r3, #1
 8014c4c:	b2da      	uxtb	r2, r3
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	2200      	movs	r2, #0
 8014c58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014c5a:	2300      	movs	r3, #0
}
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	3714      	adds	r7, #20
 8014c60:	46bd      	mov	sp, r7
 8014c62:	bd90      	pop	{r4, r7, pc}
 8014c64:	0801b488 	.word	0x0801b488
 8014c68:	0801bb28 	.word	0x0801bb28
 8014c6c:	0801b4dc 	.word	0x0801b4dc

08014c70 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014c70:	b580      	push	{r7, lr}
 8014c72:	b082      	sub	sp, #8
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d106      	bne.n	8014c8c <tcp_rexmit_fast+0x1c>
 8014c7e:	4b2a      	ldr	r3, [pc, #168]	; (8014d28 <tcp_rexmit_fast+0xb8>)
 8014c80:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014c84:	4929      	ldr	r1, [pc, #164]	; (8014d2c <tcp_rexmit_fast+0xbc>)
 8014c86:	482a      	ldr	r0, [pc, #168]	; (8014d30 <tcp_rexmit_fast+0xc0>)
 8014c88:	f003 ff6a 	bl	8018b60 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d045      	beq.n	8014d20 <tcp_rexmit_fast+0xb0>
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	8b5b      	ldrh	r3, [r3, #26]
 8014c98:	f003 0304 	and.w	r3, r3, #4
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d13f      	bne.n	8014d20 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014ca0:	6878      	ldr	r0, [r7, #4]
 8014ca2:	f7ff ff79 	bl	8014b98 <tcp_rexmit>
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d139      	bne.n	8014d20 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014cb8:	4293      	cmp	r3, r2
 8014cba:	bf28      	it	cs
 8014cbc:	4613      	movcs	r3, r2
 8014cbe:	b29b      	uxth	r3, r3
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	da00      	bge.n	8014cc6 <tcp_rexmit_fast+0x56>
 8014cc4:	3301      	adds	r3, #1
 8014cc6:	105b      	asrs	r3, r3, #1
 8014cc8:	b29a      	uxth	r2, r3
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014cd6:	461a      	mov	r2, r3
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014cdc:	005b      	lsls	r3, r3, #1
 8014cde:	429a      	cmp	r2, r3
 8014ce0:	d206      	bcs.n	8014cf0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ce6:	005b      	lsls	r3, r3, #1
 8014ce8:	b29a      	uxth	r2, r3
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014cfa:	4619      	mov	r1, r3
 8014cfc:	0049      	lsls	r1, r1, #1
 8014cfe:	440b      	add	r3, r1
 8014d00:	b29b      	uxth	r3, r3
 8014d02:	4413      	add	r3, r2
 8014d04:	b29a      	uxth	r2, r3
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	8b5b      	ldrh	r3, [r3, #26]
 8014d10:	f043 0304 	orr.w	r3, r3, #4
 8014d14:	b29a      	uxth	r2, r3
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8014d20:	bf00      	nop
 8014d22:	3708      	adds	r7, #8
 8014d24:	46bd      	mov	sp, r7
 8014d26:	bd80      	pop	{r7, pc}
 8014d28:	0801b488 	.word	0x0801b488
 8014d2c:	0801bb40 	.word	0x0801bb40
 8014d30:	0801b4dc 	.word	0x0801b4dc

08014d34 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b086      	sub	sp, #24
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	60f8      	str	r0, [r7, #12]
 8014d3c:	607b      	str	r3, [r7, #4]
 8014d3e:	460b      	mov	r3, r1
 8014d40:	817b      	strh	r3, [r7, #10]
 8014d42:	4613      	mov	r3, r2
 8014d44:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014d46:	897a      	ldrh	r2, [r7, #10]
 8014d48:	893b      	ldrh	r3, [r7, #8]
 8014d4a:	4413      	add	r3, r2
 8014d4c:	b29b      	uxth	r3, r3
 8014d4e:	3314      	adds	r3, #20
 8014d50:	b29b      	uxth	r3, r3
 8014d52:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014d56:	4619      	mov	r1, r3
 8014d58:	2022      	movs	r0, #34	; 0x22
 8014d5a:	f7f9 fcff 	bl	800e75c <pbuf_alloc>
 8014d5e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014d60:	697b      	ldr	r3, [r7, #20]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d04d      	beq.n	8014e02 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014d66:	897b      	ldrh	r3, [r7, #10]
 8014d68:	3313      	adds	r3, #19
 8014d6a:	697a      	ldr	r2, [r7, #20]
 8014d6c:	8952      	ldrh	r2, [r2, #10]
 8014d6e:	4293      	cmp	r3, r2
 8014d70:	db06      	blt.n	8014d80 <tcp_output_alloc_header_common+0x4c>
 8014d72:	4b26      	ldr	r3, [pc, #152]	; (8014e0c <tcp_output_alloc_header_common+0xd8>)
 8014d74:	f240 7223 	movw	r2, #1827	; 0x723
 8014d78:	4925      	ldr	r1, [pc, #148]	; (8014e10 <tcp_output_alloc_header_common+0xdc>)
 8014d7a:	4826      	ldr	r0, [pc, #152]	; (8014e14 <tcp_output_alloc_header_common+0xe0>)
 8014d7c:	f003 fef0 	bl	8018b60 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014d80:	697b      	ldr	r3, [r7, #20]
 8014d82:	685b      	ldr	r3, [r3, #4]
 8014d84:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014d86:	8c3b      	ldrh	r3, [r7, #32]
 8014d88:	4618      	mov	r0, r3
 8014d8a:	f7f8 faeb 	bl	800d364 <lwip_htons>
 8014d8e:	4603      	mov	r3, r0
 8014d90:	461a      	mov	r2, r3
 8014d92:	693b      	ldr	r3, [r7, #16]
 8014d94:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014d96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014d98:	4618      	mov	r0, r3
 8014d9a:	f7f8 fae3 	bl	800d364 <lwip_htons>
 8014d9e:	4603      	mov	r3, r0
 8014da0:	461a      	mov	r2, r3
 8014da2:	693b      	ldr	r3, [r7, #16]
 8014da4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014da6:	693b      	ldr	r3, [r7, #16]
 8014da8:	687a      	ldr	r2, [r7, #4]
 8014daa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014dac:	68f8      	ldr	r0, [r7, #12]
 8014dae:	f7f8 faee 	bl	800d38e <lwip_htonl>
 8014db2:	4602      	mov	r2, r0
 8014db4:	693b      	ldr	r3, [r7, #16]
 8014db6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014db8:	897b      	ldrh	r3, [r7, #10]
 8014dba:	089b      	lsrs	r3, r3, #2
 8014dbc:	b29b      	uxth	r3, r3
 8014dbe:	3305      	adds	r3, #5
 8014dc0:	b29b      	uxth	r3, r3
 8014dc2:	031b      	lsls	r3, r3, #12
 8014dc4:	b29a      	uxth	r2, r3
 8014dc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014dca:	b29b      	uxth	r3, r3
 8014dcc:	4313      	orrs	r3, r2
 8014dce:	b29b      	uxth	r3, r3
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	f7f8 fac7 	bl	800d364 <lwip_htons>
 8014dd6:	4603      	mov	r3, r0
 8014dd8:	461a      	mov	r2, r3
 8014dda:	693b      	ldr	r3, [r7, #16]
 8014ddc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014dde:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014de0:	4618      	mov	r0, r3
 8014de2:	f7f8 fabf 	bl	800d364 <lwip_htons>
 8014de6:	4603      	mov	r3, r0
 8014de8:	461a      	mov	r2, r3
 8014dea:	693b      	ldr	r3, [r7, #16]
 8014dec:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014dee:	693b      	ldr	r3, [r7, #16]
 8014df0:	2200      	movs	r2, #0
 8014df2:	741a      	strb	r2, [r3, #16]
 8014df4:	2200      	movs	r2, #0
 8014df6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014df8:	693b      	ldr	r3, [r7, #16]
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	749a      	strb	r2, [r3, #18]
 8014dfe:	2200      	movs	r2, #0
 8014e00:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014e02:	697b      	ldr	r3, [r7, #20]
}
 8014e04:	4618      	mov	r0, r3
 8014e06:	3718      	adds	r7, #24
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	bd80      	pop	{r7, pc}
 8014e0c:	0801b488 	.word	0x0801b488
 8014e10:	0801bb60 	.word	0x0801bb60
 8014e14:	0801b4dc 	.word	0x0801b4dc

08014e18 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014e18:	b5b0      	push	{r4, r5, r7, lr}
 8014e1a:	b08a      	sub	sp, #40	; 0x28
 8014e1c:	af04      	add	r7, sp, #16
 8014e1e:	60f8      	str	r0, [r7, #12]
 8014e20:	607b      	str	r3, [r7, #4]
 8014e22:	460b      	mov	r3, r1
 8014e24:	817b      	strh	r3, [r7, #10]
 8014e26:	4613      	mov	r3, r2
 8014e28:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d106      	bne.n	8014e3e <tcp_output_alloc_header+0x26>
 8014e30:	4b15      	ldr	r3, [pc, #84]	; (8014e88 <tcp_output_alloc_header+0x70>)
 8014e32:	f240 7242 	movw	r2, #1858	; 0x742
 8014e36:	4915      	ldr	r1, [pc, #84]	; (8014e8c <tcp_output_alloc_header+0x74>)
 8014e38:	4815      	ldr	r0, [pc, #84]	; (8014e90 <tcp_output_alloc_header+0x78>)
 8014e3a:	f003 fe91 	bl	8018b60 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	8adb      	ldrh	r3, [r3, #22]
 8014e46:	68fa      	ldr	r2, [r7, #12]
 8014e48:	8b12      	ldrh	r2, [r2, #24]
 8014e4a:	68f9      	ldr	r1, [r7, #12]
 8014e4c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8014e4e:	893d      	ldrh	r5, [r7, #8]
 8014e50:	897c      	ldrh	r4, [r7, #10]
 8014e52:	9103      	str	r1, [sp, #12]
 8014e54:	2110      	movs	r1, #16
 8014e56:	9102      	str	r1, [sp, #8]
 8014e58:	9201      	str	r2, [sp, #4]
 8014e5a:	9300      	str	r3, [sp, #0]
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	462a      	mov	r2, r5
 8014e60:	4621      	mov	r1, r4
 8014e62:	f7ff ff67 	bl	8014d34 <tcp_output_alloc_header_common>
 8014e66:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014e68:	697b      	ldr	r3, [r7, #20]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d006      	beq.n	8014e7c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e72:	68fa      	ldr	r2, [r7, #12]
 8014e74:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014e76:	441a      	add	r2, r3
 8014e78:	68fb      	ldr	r3, [r7, #12]
 8014e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014e7c:	697b      	ldr	r3, [r7, #20]
}
 8014e7e:	4618      	mov	r0, r3
 8014e80:	3718      	adds	r7, #24
 8014e82:	46bd      	mov	sp, r7
 8014e84:	bdb0      	pop	{r4, r5, r7, pc}
 8014e86:	bf00      	nop
 8014e88:	0801b488 	.word	0x0801b488
 8014e8c:	0801bb90 	.word	0x0801bb90
 8014e90:	0801b4dc 	.word	0x0801b4dc

08014e94 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b088      	sub	sp, #32
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	60f8      	str	r0, [r7, #12]
 8014e9c:	60b9      	str	r1, [r7, #8]
 8014e9e:	4611      	mov	r1, r2
 8014ea0:	461a      	mov	r2, r3
 8014ea2:	460b      	mov	r3, r1
 8014ea4:	71fb      	strb	r3, [r7, #7]
 8014ea6:	4613      	mov	r3, r2
 8014ea8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014eaa:	2300      	movs	r3, #0
 8014eac:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014eae:	68bb      	ldr	r3, [r7, #8]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d106      	bne.n	8014ec2 <tcp_output_fill_options+0x2e>
 8014eb4:	4b13      	ldr	r3, [pc, #76]	; (8014f04 <tcp_output_fill_options+0x70>)
 8014eb6:	f240 7256 	movw	r2, #1878	; 0x756
 8014eba:	4913      	ldr	r1, [pc, #76]	; (8014f08 <tcp_output_fill_options+0x74>)
 8014ebc:	4813      	ldr	r0, [pc, #76]	; (8014f0c <tcp_output_fill_options+0x78>)
 8014ebe:	f003 fe4f 	bl	8018b60 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014ec2:	68bb      	ldr	r3, [r7, #8]
 8014ec4:	685b      	ldr	r3, [r3, #4]
 8014ec6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014ec8:	69bb      	ldr	r3, [r7, #24]
 8014eca:	3314      	adds	r3, #20
 8014ecc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014ece:	69bb      	ldr	r3, [r7, #24]
 8014ed0:	f103 0214 	add.w	r2, r3, #20
 8014ed4:	8bfb      	ldrh	r3, [r7, #30]
 8014ed6:	009b      	lsls	r3, r3, #2
 8014ed8:	4619      	mov	r1, r3
 8014eda:	79fb      	ldrb	r3, [r7, #7]
 8014edc:	009b      	lsls	r3, r3, #2
 8014ede:	f003 0304 	and.w	r3, r3, #4
 8014ee2:	440b      	add	r3, r1
 8014ee4:	4413      	add	r3, r2
 8014ee6:	697a      	ldr	r2, [r7, #20]
 8014ee8:	429a      	cmp	r2, r3
 8014eea:	d006      	beq.n	8014efa <tcp_output_fill_options+0x66>
 8014eec:	4b05      	ldr	r3, [pc, #20]	; (8014f04 <tcp_output_fill_options+0x70>)
 8014eee:	f240 7275 	movw	r2, #1909	; 0x775
 8014ef2:	4907      	ldr	r1, [pc, #28]	; (8014f10 <tcp_output_fill_options+0x7c>)
 8014ef4:	4805      	ldr	r0, [pc, #20]	; (8014f0c <tcp_output_fill_options+0x78>)
 8014ef6:	f003 fe33 	bl	8018b60 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014efa:	bf00      	nop
 8014efc:	3720      	adds	r7, #32
 8014efe:	46bd      	mov	sp, r7
 8014f00:	bd80      	pop	{r7, pc}
 8014f02:	bf00      	nop
 8014f04:	0801b488 	.word	0x0801b488
 8014f08:	0801bbb8 	.word	0x0801bbb8
 8014f0c:	0801b4dc 	.word	0x0801b4dc
 8014f10:	0801bab0 	.word	0x0801bab0

08014f14 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014f14:	b580      	push	{r7, lr}
 8014f16:	b08a      	sub	sp, #40	; 0x28
 8014f18:	af04      	add	r7, sp, #16
 8014f1a:	60f8      	str	r0, [r7, #12]
 8014f1c:	60b9      	str	r1, [r7, #8]
 8014f1e:	607a      	str	r2, [r7, #4]
 8014f20:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014f22:	68bb      	ldr	r3, [r7, #8]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d106      	bne.n	8014f36 <tcp_output_control_segment+0x22>
 8014f28:	4b1c      	ldr	r3, [pc, #112]	; (8014f9c <tcp_output_control_segment+0x88>)
 8014f2a:	f240 7287 	movw	r2, #1927	; 0x787
 8014f2e:	491c      	ldr	r1, [pc, #112]	; (8014fa0 <tcp_output_control_segment+0x8c>)
 8014f30:	481c      	ldr	r0, [pc, #112]	; (8014fa4 <tcp_output_control_segment+0x90>)
 8014f32:	f003 fe15 	bl	8018b60 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014f36:	683a      	ldr	r2, [r7, #0]
 8014f38:	6879      	ldr	r1, [r7, #4]
 8014f3a:	68f8      	ldr	r0, [r7, #12]
 8014f3c:	f7fe fae8 	bl	8013510 <tcp_route>
 8014f40:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014f42:	693b      	ldr	r3, [r7, #16]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d102      	bne.n	8014f4e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014f48:	23fc      	movs	r3, #252	; 0xfc
 8014f4a:	75fb      	strb	r3, [r7, #23]
 8014f4c:	e01c      	b.n	8014f88 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d006      	beq.n	8014f62 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	7adb      	ldrb	r3, [r3, #11]
 8014f58:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	7a9b      	ldrb	r3, [r3, #10]
 8014f5e:	757b      	strb	r3, [r7, #21]
 8014f60:	e003      	b.n	8014f6a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014f62:	23ff      	movs	r3, #255	; 0xff
 8014f64:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014f66:	2300      	movs	r3, #0
 8014f68:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014f6a:	7dba      	ldrb	r2, [r7, #22]
 8014f6c:	693b      	ldr	r3, [r7, #16]
 8014f6e:	9302      	str	r3, [sp, #8]
 8014f70:	2306      	movs	r3, #6
 8014f72:	9301      	str	r3, [sp, #4]
 8014f74:	7d7b      	ldrb	r3, [r7, #21]
 8014f76:	9300      	str	r3, [sp, #0]
 8014f78:	4613      	mov	r3, r2
 8014f7a:	683a      	ldr	r2, [r7, #0]
 8014f7c:	6879      	ldr	r1, [r7, #4]
 8014f7e:	68b8      	ldr	r0, [r7, #8]
 8014f80:	f002 faf6 	bl	8017570 <ip4_output_if>
 8014f84:	4603      	mov	r3, r0
 8014f86:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014f88:	68b8      	ldr	r0, [r7, #8]
 8014f8a:	f7f9 fecb 	bl	800ed24 <pbuf_free>
  return err;
 8014f8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014f92:	4618      	mov	r0, r3
 8014f94:	3718      	adds	r7, #24
 8014f96:	46bd      	mov	sp, r7
 8014f98:	bd80      	pop	{r7, pc}
 8014f9a:	bf00      	nop
 8014f9c:	0801b488 	.word	0x0801b488
 8014fa0:	0801bbe0 	.word	0x0801bbe0
 8014fa4:	0801b4dc 	.word	0x0801b4dc

08014fa8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014fa8:	b590      	push	{r4, r7, lr}
 8014faa:	b08b      	sub	sp, #44	; 0x2c
 8014fac:	af04      	add	r7, sp, #16
 8014fae:	60f8      	str	r0, [r7, #12]
 8014fb0:	60b9      	str	r1, [r7, #8]
 8014fb2:	607a      	str	r2, [r7, #4]
 8014fb4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014fb6:	683b      	ldr	r3, [r7, #0]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d106      	bne.n	8014fca <tcp_rst+0x22>
 8014fbc:	4b1f      	ldr	r3, [pc, #124]	; (801503c <tcp_rst+0x94>)
 8014fbe:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014fc2:	491f      	ldr	r1, [pc, #124]	; (8015040 <tcp_rst+0x98>)
 8014fc4:	481f      	ldr	r0, [pc, #124]	; (8015044 <tcp_rst+0x9c>)
 8014fc6:	f003 fdcb 	bl	8018b60 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d106      	bne.n	8014fde <tcp_rst+0x36>
 8014fd0:	4b1a      	ldr	r3, [pc, #104]	; (801503c <tcp_rst+0x94>)
 8014fd2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014fd6:	491c      	ldr	r1, [pc, #112]	; (8015048 <tcp_rst+0xa0>)
 8014fd8:	481a      	ldr	r0, [pc, #104]	; (8015044 <tcp_rst+0x9c>)
 8014fda:	f003 fdc1 	bl	8018b60 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014fde:	2300      	movs	r3, #0
 8014fe0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014fe2:	f246 0308 	movw	r3, #24584	; 0x6008
 8014fe6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014fe8:	7dfb      	ldrb	r3, [r7, #23]
 8014fea:	b29c      	uxth	r4, r3
 8014fec:	68b8      	ldr	r0, [r7, #8]
 8014fee:	f7f8 f9ce 	bl	800d38e <lwip_htonl>
 8014ff2:	4602      	mov	r2, r0
 8014ff4:	8abb      	ldrh	r3, [r7, #20]
 8014ff6:	9303      	str	r3, [sp, #12]
 8014ff8:	2314      	movs	r3, #20
 8014ffa:	9302      	str	r3, [sp, #8]
 8014ffc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014ffe:	9301      	str	r3, [sp, #4]
 8015000:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015002:	9300      	str	r3, [sp, #0]
 8015004:	4613      	mov	r3, r2
 8015006:	2200      	movs	r2, #0
 8015008:	4621      	mov	r1, r4
 801500a:	6878      	ldr	r0, [r7, #4]
 801500c:	f7ff fe92 	bl	8014d34 <tcp_output_alloc_header_common>
 8015010:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8015012:	693b      	ldr	r3, [r7, #16]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d00c      	beq.n	8015032 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015018:	7dfb      	ldrb	r3, [r7, #23]
 801501a:	2200      	movs	r2, #0
 801501c:	6939      	ldr	r1, [r7, #16]
 801501e:	68f8      	ldr	r0, [r7, #12]
 8015020:	f7ff ff38 	bl	8014e94 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015026:	683a      	ldr	r2, [r7, #0]
 8015028:	6939      	ldr	r1, [r7, #16]
 801502a:	68f8      	ldr	r0, [r7, #12]
 801502c:	f7ff ff72 	bl	8014f14 <tcp_output_control_segment>
 8015030:	e000      	b.n	8015034 <tcp_rst+0x8c>
    return;
 8015032:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015034:	371c      	adds	r7, #28
 8015036:	46bd      	mov	sp, r7
 8015038:	bd90      	pop	{r4, r7, pc}
 801503a:	bf00      	nop
 801503c:	0801b488 	.word	0x0801b488
 8015040:	0801bc0c 	.word	0x0801bc0c
 8015044:	0801b4dc 	.word	0x0801b4dc
 8015048:	0801bc28 	.word	0x0801bc28

0801504c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801504c:	b590      	push	{r4, r7, lr}
 801504e:	b087      	sub	sp, #28
 8015050:	af00      	add	r7, sp, #0
 8015052:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015054:	2300      	movs	r3, #0
 8015056:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015058:	2300      	movs	r3, #0
 801505a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d106      	bne.n	8015070 <tcp_send_empty_ack+0x24>
 8015062:	4b28      	ldr	r3, [pc, #160]	; (8015104 <tcp_send_empty_ack+0xb8>)
 8015064:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8015068:	4927      	ldr	r1, [pc, #156]	; (8015108 <tcp_send_empty_ack+0xbc>)
 801506a:	4828      	ldr	r0, [pc, #160]	; (801510c <tcp_send_empty_ack+0xc0>)
 801506c:	f003 fd78 	bl	8018b60 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015070:	7dfb      	ldrb	r3, [r7, #23]
 8015072:	009b      	lsls	r3, r3, #2
 8015074:	b2db      	uxtb	r3, r3
 8015076:	f003 0304 	and.w	r3, r3, #4
 801507a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801507c:	7d7b      	ldrb	r3, [r7, #21]
 801507e:	b29c      	uxth	r4, r3
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015084:	4618      	mov	r0, r3
 8015086:	f7f8 f982 	bl	800d38e <lwip_htonl>
 801508a:	4603      	mov	r3, r0
 801508c:	2200      	movs	r2, #0
 801508e:	4621      	mov	r1, r4
 8015090:	6878      	ldr	r0, [r7, #4]
 8015092:	f7ff fec1 	bl	8014e18 <tcp_output_alloc_header>
 8015096:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015098:	693b      	ldr	r3, [r7, #16]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d109      	bne.n	80150b2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	8b5b      	ldrh	r3, [r3, #26]
 80150a2:	f043 0303 	orr.w	r3, r3, #3
 80150a6:	b29a      	uxth	r2, r3
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80150ac:	f06f 0301 	mvn.w	r3, #1
 80150b0:	e023      	b.n	80150fa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80150b2:	7dbb      	ldrb	r3, [r7, #22]
 80150b4:	7dfa      	ldrb	r2, [r7, #23]
 80150b6:	6939      	ldr	r1, [r7, #16]
 80150b8:	6878      	ldr	r0, [r7, #4]
 80150ba:	f7ff feeb 	bl	8014e94 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80150be:	687a      	ldr	r2, [r7, #4]
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	3304      	adds	r3, #4
 80150c4:	6939      	ldr	r1, [r7, #16]
 80150c6:	6878      	ldr	r0, [r7, #4]
 80150c8:	f7ff ff24 	bl	8014f14 <tcp_output_control_segment>
 80150cc:	4603      	mov	r3, r0
 80150ce:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80150d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d007      	beq.n	80150e8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	8b5b      	ldrh	r3, [r3, #26]
 80150dc:	f043 0303 	orr.w	r3, r3, #3
 80150e0:	b29a      	uxth	r2, r3
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	835a      	strh	r2, [r3, #26]
 80150e6:	e006      	b.n	80150f6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	8b5b      	ldrh	r3, [r3, #26]
 80150ec:	f023 0303 	bic.w	r3, r3, #3
 80150f0:	b29a      	uxth	r2, r3
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80150f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80150fa:	4618      	mov	r0, r3
 80150fc:	371c      	adds	r7, #28
 80150fe:	46bd      	mov	sp, r7
 8015100:	bd90      	pop	{r4, r7, pc}
 8015102:	bf00      	nop
 8015104:	0801b488 	.word	0x0801b488
 8015108:	0801bc44 	.word	0x0801bc44
 801510c:	0801b4dc 	.word	0x0801b4dc

08015110 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015110:	b590      	push	{r4, r7, lr}
 8015112:	b087      	sub	sp, #28
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015118:	2300      	movs	r3, #0
 801511a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d106      	bne.n	8015130 <tcp_keepalive+0x20>
 8015122:	4b18      	ldr	r3, [pc, #96]	; (8015184 <tcp_keepalive+0x74>)
 8015124:	f640 0224 	movw	r2, #2084	; 0x824
 8015128:	4917      	ldr	r1, [pc, #92]	; (8015188 <tcp_keepalive+0x78>)
 801512a:	4818      	ldr	r0, [pc, #96]	; (801518c <tcp_keepalive+0x7c>)
 801512c:	f003 fd18 	bl	8018b60 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015130:	7dfb      	ldrb	r3, [r7, #23]
 8015132:	b29c      	uxth	r4, r3
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015138:	3b01      	subs	r3, #1
 801513a:	4618      	mov	r0, r3
 801513c:	f7f8 f927 	bl	800d38e <lwip_htonl>
 8015140:	4603      	mov	r3, r0
 8015142:	2200      	movs	r2, #0
 8015144:	4621      	mov	r1, r4
 8015146:	6878      	ldr	r0, [r7, #4]
 8015148:	f7ff fe66 	bl	8014e18 <tcp_output_alloc_header>
 801514c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801514e:	693b      	ldr	r3, [r7, #16]
 8015150:	2b00      	cmp	r3, #0
 8015152:	d102      	bne.n	801515a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015154:	f04f 33ff 	mov.w	r3, #4294967295
 8015158:	e010      	b.n	801517c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801515a:	7dfb      	ldrb	r3, [r7, #23]
 801515c:	2200      	movs	r2, #0
 801515e:	6939      	ldr	r1, [r7, #16]
 8015160:	6878      	ldr	r0, [r7, #4]
 8015162:	f7ff fe97 	bl	8014e94 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015166:	687a      	ldr	r2, [r7, #4]
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	3304      	adds	r3, #4
 801516c:	6939      	ldr	r1, [r7, #16]
 801516e:	6878      	ldr	r0, [r7, #4]
 8015170:	f7ff fed0 	bl	8014f14 <tcp_output_control_segment>
 8015174:	4603      	mov	r3, r0
 8015176:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015178:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801517c:	4618      	mov	r0, r3
 801517e:	371c      	adds	r7, #28
 8015180:	46bd      	mov	sp, r7
 8015182:	bd90      	pop	{r4, r7, pc}
 8015184:	0801b488 	.word	0x0801b488
 8015188:	0801bc64 	.word	0x0801bc64
 801518c:	0801b4dc 	.word	0x0801b4dc

08015190 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8015190:	b590      	push	{r4, r7, lr}
 8015192:	b08b      	sub	sp, #44	; 0x2c
 8015194:	af00      	add	r7, sp, #0
 8015196:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015198:	2300      	movs	r3, #0
 801519a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d106      	bne.n	80151b2 <tcp_zero_window_probe+0x22>
 80151a4:	4b4c      	ldr	r3, [pc, #304]	; (80152d8 <tcp_zero_window_probe+0x148>)
 80151a6:	f640 024f 	movw	r2, #2127	; 0x84f
 80151aa:	494c      	ldr	r1, [pc, #304]	; (80152dc <tcp_zero_window_probe+0x14c>)
 80151ac:	484c      	ldr	r0, [pc, #304]	; (80152e0 <tcp_zero_window_probe+0x150>)
 80151ae:	f003 fcd7 	bl	8018b60 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80151b6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80151b8:	6a3b      	ldr	r3, [r7, #32]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d101      	bne.n	80151c2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80151be:	2300      	movs	r3, #0
 80151c0:	e086      	b.n	80152d0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80151c8:	2bff      	cmp	r3, #255	; 0xff
 80151ca:	d007      	beq.n	80151dc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80151d2:	3301      	adds	r3, #1
 80151d4:	b2da      	uxtb	r2, r3
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80151dc:	6a3b      	ldr	r3, [r7, #32]
 80151de:	68db      	ldr	r3, [r3, #12]
 80151e0:	899b      	ldrh	r3, [r3, #12]
 80151e2:	b29b      	uxth	r3, r3
 80151e4:	4618      	mov	r0, r3
 80151e6:	f7f8 f8bd 	bl	800d364 <lwip_htons>
 80151ea:	4603      	mov	r3, r0
 80151ec:	b2db      	uxtb	r3, r3
 80151ee:	f003 0301 	and.w	r3, r3, #1
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d005      	beq.n	8015202 <tcp_zero_window_probe+0x72>
 80151f6:	6a3b      	ldr	r3, [r7, #32]
 80151f8:	891b      	ldrh	r3, [r3, #8]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d101      	bne.n	8015202 <tcp_zero_window_probe+0x72>
 80151fe:	2301      	movs	r3, #1
 8015200:	e000      	b.n	8015204 <tcp_zero_window_probe+0x74>
 8015202:	2300      	movs	r3, #0
 8015204:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015206:	7ffb      	ldrb	r3, [r7, #31]
 8015208:	2b00      	cmp	r3, #0
 801520a:	bf0c      	ite	eq
 801520c:	2301      	moveq	r3, #1
 801520e:	2300      	movne	r3, #0
 8015210:	b2db      	uxtb	r3, r3
 8015212:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015218:	b299      	uxth	r1, r3
 801521a:	6a3b      	ldr	r3, [r7, #32]
 801521c:	68db      	ldr	r3, [r3, #12]
 801521e:	685b      	ldr	r3, [r3, #4]
 8015220:	8bba      	ldrh	r2, [r7, #28]
 8015222:	6878      	ldr	r0, [r7, #4]
 8015224:	f7ff fdf8 	bl	8014e18 <tcp_output_alloc_header>
 8015228:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801522a:	69bb      	ldr	r3, [r7, #24]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d102      	bne.n	8015236 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015230:	f04f 33ff 	mov.w	r3, #4294967295
 8015234:	e04c      	b.n	80152d0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015236:	69bb      	ldr	r3, [r7, #24]
 8015238:	685b      	ldr	r3, [r3, #4]
 801523a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801523c:	7ffb      	ldrb	r3, [r7, #31]
 801523e:	2b00      	cmp	r3, #0
 8015240:	d011      	beq.n	8015266 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8015242:	697b      	ldr	r3, [r7, #20]
 8015244:	899b      	ldrh	r3, [r3, #12]
 8015246:	b29b      	uxth	r3, r3
 8015248:	b21b      	sxth	r3, r3
 801524a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801524e:	b21c      	sxth	r4, r3
 8015250:	2011      	movs	r0, #17
 8015252:	f7f8 f887 	bl	800d364 <lwip_htons>
 8015256:	4603      	mov	r3, r0
 8015258:	b21b      	sxth	r3, r3
 801525a:	4323      	orrs	r3, r4
 801525c:	b21b      	sxth	r3, r3
 801525e:	b29a      	uxth	r2, r3
 8015260:	697b      	ldr	r3, [r7, #20]
 8015262:	819a      	strh	r2, [r3, #12]
 8015264:	e010      	b.n	8015288 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015266:	69bb      	ldr	r3, [r7, #24]
 8015268:	685b      	ldr	r3, [r3, #4]
 801526a:	3314      	adds	r3, #20
 801526c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801526e:	6a3b      	ldr	r3, [r7, #32]
 8015270:	6858      	ldr	r0, [r3, #4]
 8015272:	6a3b      	ldr	r3, [r7, #32]
 8015274:	685b      	ldr	r3, [r3, #4]
 8015276:	891a      	ldrh	r2, [r3, #8]
 8015278:	6a3b      	ldr	r3, [r7, #32]
 801527a:	891b      	ldrh	r3, [r3, #8]
 801527c:	1ad3      	subs	r3, r2, r3
 801527e:	b29b      	uxth	r3, r3
 8015280:	2201      	movs	r2, #1
 8015282:	6939      	ldr	r1, [r7, #16]
 8015284:	f7f9 ff54 	bl	800f130 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015288:	6a3b      	ldr	r3, [r7, #32]
 801528a:	68db      	ldr	r3, [r3, #12]
 801528c:	685b      	ldr	r3, [r3, #4]
 801528e:	4618      	mov	r0, r3
 8015290:	f7f8 f87d 	bl	800d38e <lwip_htonl>
 8015294:	4603      	mov	r3, r0
 8015296:	3301      	adds	r3, #1
 8015298:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	1ad3      	subs	r3, r2, r3
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	da02      	bge.n	80152ac <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	68fa      	ldr	r2, [r7, #12]
 80152aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80152ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80152b0:	2200      	movs	r2, #0
 80152b2:	69b9      	ldr	r1, [r7, #24]
 80152b4:	6878      	ldr	r0, [r7, #4]
 80152b6:	f7ff fded 	bl	8014e94 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80152ba:	687a      	ldr	r2, [r7, #4]
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	3304      	adds	r3, #4
 80152c0:	69b9      	ldr	r1, [r7, #24]
 80152c2:	6878      	ldr	r0, [r7, #4]
 80152c4:	f7ff fe26 	bl	8014f14 <tcp_output_control_segment>
 80152c8:	4603      	mov	r3, r0
 80152ca:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80152cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80152d0:	4618      	mov	r0, r3
 80152d2:	372c      	adds	r7, #44	; 0x2c
 80152d4:	46bd      	mov	sp, r7
 80152d6:	bd90      	pop	{r4, r7, pc}
 80152d8:	0801b488 	.word	0x0801b488
 80152dc:	0801bc80 	.word	0x0801bc80
 80152e0:	0801b4dc 	.word	0x0801b4dc

080152e4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b082      	sub	sp, #8
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80152ec:	f7fa f80e 	bl	800f30c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80152f0:	4b0a      	ldr	r3, [pc, #40]	; (801531c <tcpip_tcp_timer+0x38>)
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d103      	bne.n	8015300 <tcpip_tcp_timer+0x1c>
 80152f8:	4b09      	ldr	r3, [pc, #36]	; (8015320 <tcpip_tcp_timer+0x3c>)
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d005      	beq.n	801530c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015300:	2200      	movs	r2, #0
 8015302:	4908      	ldr	r1, [pc, #32]	; (8015324 <tcpip_tcp_timer+0x40>)
 8015304:	20fa      	movs	r0, #250	; 0xfa
 8015306:	f000 f8f3 	bl	80154f0 <sys_timeout>
 801530a:	e003      	b.n	8015314 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801530c:	4b06      	ldr	r3, [pc, #24]	; (8015328 <tcpip_tcp_timer+0x44>)
 801530e:	2200      	movs	r2, #0
 8015310:	601a      	str	r2, [r3, #0]
  }
}
 8015312:	bf00      	nop
 8015314:	bf00      	nop
 8015316:	3708      	adds	r7, #8
 8015318:	46bd      	mov	sp, r7
 801531a:	bd80      	pop	{r7, pc}
 801531c:	24008a8c 	.word	0x24008a8c
 8015320:	24008a90 	.word	0x24008a90
 8015324:	080152e5 	.word	0x080152e5
 8015328:	24008ad8 	.word	0x24008ad8

0801532c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801532c:	b580      	push	{r7, lr}
 801532e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015330:	4b0a      	ldr	r3, [pc, #40]	; (801535c <tcp_timer_needed+0x30>)
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d10f      	bne.n	8015358 <tcp_timer_needed+0x2c>
 8015338:	4b09      	ldr	r3, [pc, #36]	; (8015360 <tcp_timer_needed+0x34>)
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d103      	bne.n	8015348 <tcp_timer_needed+0x1c>
 8015340:	4b08      	ldr	r3, [pc, #32]	; (8015364 <tcp_timer_needed+0x38>)
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	2b00      	cmp	r3, #0
 8015346:	d007      	beq.n	8015358 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015348:	4b04      	ldr	r3, [pc, #16]	; (801535c <tcp_timer_needed+0x30>)
 801534a:	2201      	movs	r2, #1
 801534c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801534e:	2200      	movs	r2, #0
 8015350:	4905      	ldr	r1, [pc, #20]	; (8015368 <tcp_timer_needed+0x3c>)
 8015352:	20fa      	movs	r0, #250	; 0xfa
 8015354:	f000 f8cc 	bl	80154f0 <sys_timeout>
  }
}
 8015358:	bf00      	nop
 801535a:	bd80      	pop	{r7, pc}
 801535c:	24008ad8 	.word	0x24008ad8
 8015360:	24008a8c 	.word	0x24008a8c
 8015364:	24008a90 	.word	0x24008a90
 8015368:	080152e5 	.word	0x080152e5

0801536c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b086      	sub	sp, #24
 8015370:	af00      	add	r7, sp, #0
 8015372:	60f8      	str	r0, [r7, #12]
 8015374:	60b9      	str	r1, [r7, #8]
 8015376:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015378:	200a      	movs	r0, #10
 801537a:	f7f8 fdb9 	bl	800def0 <memp_malloc>
 801537e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8015380:	693b      	ldr	r3, [r7, #16]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d109      	bne.n	801539a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015386:	693b      	ldr	r3, [r7, #16]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d151      	bne.n	8015430 <sys_timeout_abs+0xc4>
 801538c:	4b2a      	ldr	r3, [pc, #168]	; (8015438 <sys_timeout_abs+0xcc>)
 801538e:	22be      	movs	r2, #190	; 0xbe
 8015390:	492a      	ldr	r1, [pc, #168]	; (801543c <sys_timeout_abs+0xd0>)
 8015392:	482b      	ldr	r0, [pc, #172]	; (8015440 <sys_timeout_abs+0xd4>)
 8015394:	f003 fbe4 	bl	8018b60 <iprintf>
    return;
 8015398:	e04a      	b.n	8015430 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801539a:	693b      	ldr	r3, [r7, #16]
 801539c:	2200      	movs	r2, #0
 801539e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80153a0:	693b      	ldr	r3, [r7, #16]
 80153a2:	68ba      	ldr	r2, [r7, #8]
 80153a4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80153a6:	693b      	ldr	r3, [r7, #16]
 80153a8:	687a      	ldr	r2, [r7, #4]
 80153aa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80153ac:	693b      	ldr	r3, [r7, #16]
 80153ae:	68fa      	ldr	r2, [r7, #12]
 80153b0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80153b2:	4b24      	ldr	r3, [pc, #144]	; (8015444 <sys_timeout_abs+0xd8>)
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d103      	bne.n	80153c2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80153ba:	4a22      	ldr	r2, [pc, #136]	; (8015444 <sys_timeout_abs+0xd8>)
 80153bc:	693b      	ldr	r3, [r7, #16]
 80153be:	6013      	str	r3, [r2, #0]
    return;
 80153c0:	e037      	b.n	8015432 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80153c2:	693b      	ldr	r3, [r7, #16]
 80153c4:	685a      	ldr	r2, [r3, #4]
 80153c6:	4b1f      	ldr	r3, [pc, #124]	; (8015444 <sys_timeout_abs+0xd8>)
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	685b      	ldr	r3, [r3, #4]
 80153cc:	1ad3      	subs	r3, r2, r3
 80153ce:	0fdb      	lsrs	r3, r3, #31
 80153d0:	f003 0301 	and.w	r3, r3, #1
 80153d4:	b2db      	uxtb	r3, r3
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d007      	beq.n	80153ea <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80153da:	4b1a      	ldr	r3, [pc, #104]	; (8015444 <sys_timeout_abs+0xd8>)
 80153dc:	681a      	ldr	r2, [r3, #0]
 80153de:	693b      	ldr	r3, [r7, #16]
 80153e0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80153e2:	4a18      	ldr	r2, [pc, #96]	; (8015444 <sys_timeout_abs+0xd8>)
 80153e4:	693b      	ldr	r3, [r7, #16]
 80153e6:	6013      	str	r3, [r2, #0]
 80153e8:	e023      	b.n	8015432 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80153ea:	4b16      	ldr	r3, [pc, #88]	; (8015444 <sys_timeout_abs+0xd8>)
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	617b      	str	r3, [r7, #20]
 80153f0:	e01a      	b.n	8015428 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80153f2:	697b      	ldr	r3, [r7, #20]
 80153f4:	681b      	ldr	r3, [r3, #0]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d00b      	beq.n	8015412 <sys_timeout_abs+0xa6>
 80153fa:	693b      	ldr	r3, [r7, #16]
 80153fc:	685a      	ldr	r2, [r3, #4]
 80153fe:	697b      	ldr	r3, [r7, #20]
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	685b      	ldr	r3, [r3, #4]
 8015404:	1ad3      	subs	r3, r2, r3
 8015406:	0fdb      	lsrs	r3, r3, #31
 8015408:	f003 0301 	and.w	r3, r3, #1
 801540c:	b2db      	uxtb	r3, r3
 801540e:	2b00      	cmp	r3, #0
 8015410:	d007      	beq.n	8015422 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8015412:	697b      	ldr	r3, [r7, #20]
 8015414:	681a      	ldr	r2, [r3, #0]
 8015416:	693b      	ldr	r3, [r7, #16]
 8015418:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801541a:	697b      	ldr	r3, [r7, #20]
 801541c:	693a      	ldr	r2, [r7, #16]
 801541e:	601a      	str	r2, [r3, #0]
        break;
 8015420:	e007      	b.n	8015432 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8015422:	697b      	ldr	r3, [r7, #20]
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	617b      	str	r3, [r7, #20]
 8015428:	697b      	ldr	r3, [r7, #20]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d1e1      	bne.n	80153f2 <sys_timeout_abs+0x86>
 801542e:	e000      	b.n	8015432 <sys_timeout_abs+0xc6>
    return;
 8015430:	bf00      	nop
      }
    }
  }
}
 8015432:	3718      	adds	r7, #24
 8015434:	46bd      	mov	sp, r7
 8015436:	bd80      	pop	{r7, pc}
 8015438:	0801bca4 	.word	0x0801bca4
 801543c:	0801bcd8 	.word	0x0801bcd8
 8015440:	0801bd18 	.word	0x0801bd18
 8015444:	24008ad0 	.word	0x24008ad0

08015448 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b086      	sub	sp, #24
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015454:	697b      	ldr	r3, [r7, #20]
 8015456:	685b      	ldr	r3, [r3, #4]
 8015458:	4798      	blx	r3

  now = sys_now();
 801545a:	f7f2 ff63 	bl	8008324 <sys_now>
 801545e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015460:	697b      	ldr	r3, [r7, #20]
 8015462:	681a      	ldr	r2, [r3, #0]
 8015464:	4b0f      	ldr	r3, [pc, #60]	; (80154a4 <lwip_cyclic_timer+0x5c>)
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	4413      	add	r3, r2
 801546a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801546c:	68fa      	ldr	r2, [r7, #12]
 801546e:	693b      	ldr	r3, [r7, #16]
 8015470:	1ad3      	subs	r3, r2, r3
 8015472:	0fdb      	lsrs	r3, r3, #31
 8015474:	f003 0301 	and.w	r3, r3, #1
 8015478:	b2db      	uxtb	r3, r3
 801547a:	2b00      	cmp	r3, #0
 801547c:	d009      	beq.n	8015492 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801547e:	697b      	ldr	r3, [r7, #20]
 8015480:	681a      	ldr	r2, [r3, #0]
 8015482:	693b      	ldr	r3, [r7, #16]
 8015484:	4413      	add	r3, r2
 8015486:	687a      	ldr	r2, [r7, #4]
 8015488:	4907      	ldr	r1, [pc, #28]	; (80154a8 <lwip_cyclic_timer+0x60>)
 801548a:	4618      	mov	r0, r3
 801548c:	f7ff ff6e 	bl	801536c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015490:	e004      	b.n	801549c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8015492:	687a      	ldr	r2, [r7, #4]
 8015494:	4904      	ldr	r1, [pc, #16]	; (80154a8 <lwip_cyclic_timer+0x60>)
 8015496:	68f8      	ldr	r0, [r7, #12]
 8015498:	f7ff ff68 	bl	801536c <sys_timeout_abs>
}
 801549c:	bf00      	nop
 801549e:	3718      	adds	r7, #24
 80154a0:	46bd      	mov	sp, r7
 80154a2:	bd80      	pop	{r7, pc}
 80154a4:	24008ad4 	.word	0x24008ad4
 80154a8:	08015449 	.word	0x08015449

080154ac <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80154ac:	b580      	push	{r7, lr}
 80154ae:	b082      	sub	sp, #8
 80154b0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80154b2:	2301      	movs	r3, #1
 80154b4:	607b      	str	r3, [r7, #4]
 80154b6:	e00e      	b.n	80154d6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80154b8:	4a0b      	ldr	r2, [pc, #44]	; (80154e8 <sys_timeouts_init+0x3c>)
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	00db      	lsls	r3, r3, #3
 80154c4:	4a08      	ldr	r2, [pc, #32]	; (80154e8 <sys_timeouts_init+0x3c>)
 80154c6:	4413      	add	r3, r2
 80154c8:	461a      	mov	r2, r3
 80154ca:	4908      	ldr	r1, [pc, #32]	; (80154ec <sys_timeouts_init+0x40>)
 80154cc:	f000 f810 	bl	80154f0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	3301      	adds	r3, #1
 80154d4:	607b      	str	r3, [r7, #4]
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	2b02      	cmp	r3, #2
 80154da:	d9ed      	bls.n	80154b8 <sys_timeouts_init+0xc>
  }
}
 80154dc:	bf00      	nop
 80154de:	bf00      	nop
 80154e0:	3708      	adds	r7, #8
 80154e2:	46bd      	mov	sp, r7
 80154e4:	bd80      	pop	{r7, pc}
 80154e6:	bf00      	nop
 80154e8:	0801eba8 	.word	0x0801eba8
 80154ec:	08015449 	.word	0x08015449

080154f0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80154f0:	b580      	push	{r7, lr}
 80154f2:	b086      	sub	sp, #24
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	60f8      	str	r0, [r7, #12]
 80154f8:	60b9      	str	r1, [r7, #8]
 80154fa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015502:	d306      	bcc.n	8015512 <sys_timeout+0x22>
 8015504:	4b0a      	ldr	r3, [pc, #40]	; (8015530 <sys_timeout+0x40>)
 8015506:	f240 1229 	movw	r2, #297	; 0x129
 801550a:	490a      	ldr	r1, [pc, #40]	; (8015534 <sys_timeout+0x44>)
 801550c:	480a      	ldr	r0, [pc, #40]	; (8015538 <sys_timeout+0x48>)
 801550e:	f003 fb27 	bl	8018b60 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8015512:	f7f2 ff07 	bl	8008324 <sys_now>
 8015516:	4602      	mov	r2, r0
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	4413      	add	r3, r2
 801551c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801551e:	687a      	ldr	r2, [r7, #4]
 8015520:	68b9      	ldr	r1, [r7, #8]
 8015522:	6978      	ldr	r0, [r7, #20]
 8015524:	f7ff ff22 	bl	801536c <sys_timeout_abs>
#endif
}
 8015528:	bf00      	nop
 801552a:	3718      	adds	r7, #24
 801552c:	46bd      	mov	sp, r7
 801552e:	bd80      	pop	{r7, pc}
 8015530:	0801bca4 	.word	0x0801bca4
 8015534:	0801bd40 	.word	0x0801bd40
 8015538:	0801bd18 	.word	0x0801bd18

0801553c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801553c:	b580      	push	{r7, lr}
 801553e:	b084      	sub	sp, #16
 8015540:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8015542:	f7f2 feef 	bl	8008324 <sys_now>
 8015546:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015548:	4b17      	ldr	r3, [pc, #92]	; (80155a8 <sys_check_timeouts+0x6c>)
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801554e:	68bb      	ldr	r3, [r7, #8]
 8015550:	2b00      	cmp	r3, #0
 8015552:	d022      	beq.n	801559a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015554:	68bb      	ldr	r3, [r7, #8]
 8015556:	685b      	ldr	r3, [r3, #4]
 8015558:	68fa      	ldr	r2, [r7, #12]
 801555a:	1ad3      	subs	r3, r2, r3
 801555c:	0fdb      	lsrs	r3, r3, #31
 801555e:	f003 0301 	and.w	r3, r3, #1
 8015562:	b2db      	uxtb	r3, r3
 8015564:	2b00      	cmp	r3, #0
 8015566:	d11a      	bne.n	801559e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015568:	68bb      	ldr	r3, [r7, #8]
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	4a0e      	ldr	r2, [pc, #56]	; (80155a8 <sys_check_timeouts+0x6c>)
 801556e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8015570:	68bb      	ldr	r3, [r7, #8]
 8015572:	689b      	ldr	r3, [r3, #8]
 8015574:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015576:	68bb      	ldr	r3, [r7, #8]
 8015578:	68db      	ldr	r3, [r3, #12]
 801557a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801557c:	68bb      	ldr	r3, [r7, #8]
 801557e:	685b      	ldr	r3, [r3, #4]
 8015580:	4a0a      	ldr	r2, [pc, #40]	; (80155ac <sys_check_timeouts+0x70>)
 8015582:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015584:	68b9      	ldr	r1, [r7, #8]
 8015586:	200a      	movs	r0, #10
 8015588:	f7f8 fd28 	bl	800dfdc <memp_free>
    if (handler != NULL) {
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d0da      	beq.n	8015548 <sys_check_timeouts+0xc>
      handler(arg);
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	6838      	ldr	r0, [r7, #0]
 8015596:	4798      	blx	r3
  do {
 8015598:	e7d6      	b.n	8015548 <sys_check_timeouts+0xc>
      return;
 801559a:	bf00      	nop
 801559c:	e000      	b.n	80155a0 <sys_check_timeouts+0x64>
      return;
 801559e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80155a0:	3710      	adds	r7, #16
 80155a2:	46bd      	mov	sp, r7
 80155a4:	bd80      	pop	{r7, pc}
 80155a6:	bf00      	nop
 80155a8:	24008ad0 	.word	0x24008ad0
 80155ac:	24008ad4 	.word	0x24008ad4

080155b0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b082      	sub	sp, #8
 80155b4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80155b6:	4b16      	ldr	r3, [pc, #88]	; (8015610 <sys_timeouts_sleeptime+0x60>)
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d102      	bne.n	80155c4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80155be:	f04f 33ff 	mov.w	r3, #4294967295
 80155c2:	e020      	b.n	8015606 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80155c4:	f7f2 feae 	bl	8008324 <sys_now>
 80155c8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80155ca:	4b11      	ldr	r3, [pc, #68]	; (8015610 <sys_timeouts_sleeptime+0x60>)
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	685a      	ldr	r2, [r3, #4]
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	1ad3      	subs	r3, r2, r3
 80155d4:	0fdb      	lsrs	r3, r3, #31
 80155d6:	f003 0301 	and.w	r3, r3, #1
 80155da:	b2db      	uxtb	r3, r3
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d001      	beq.n	80155e4 <sys_timeouts_sleeptime+0x34>
    return 0;
 80155e0:	2300      	movs	r3, #0
 80155e2:	e010      	b.n	8015606 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80155e4:	4b0a      	ldr	r3, [pc, #40]	; (8015610 <sys_timeouts_sleeptime+0x60>)
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	685a      	ldr	r2, [r3, #4]
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	1ad3      	subs	r3, r2, r3
 80155ee:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80155f0:	683b      	ldr	r3, [r7, #0]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	da06      	bge.n	8015604 <sys_timeouts_sleeptime+0x54>
 80155f6:	4b07      	ldr	r3, [pc, #28]	; (8015614 <sys_timeouts_sleeptime+0x64>)
 80155f8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80155fc:	4906      	ldr	r1, [pc, #24]	; (8015618 <sys_timeouts_sleeptime+0x68>)
 80155fe:	4807      	ldr	r0, [pc, #28]	; (801561c <sys_timeouts_sleeptime+0x6c>)
 8015600:	f003 faae 	bl	8018b60 <iprintf>
    return ret;
 8015604:	683b      	ldr	r3, [r7, #0]
  }
}
 8015606:	4618      	mov	r0, r3
 8015608:	3708      	adds	r7, #8
 801560a:	46bd      	mov	sp, r7
 801560c:	bd80      	pop	{r7, pc}
 801560e:	bf00      	nop
 8015610:	24008ad0 	.word	0x24008ad0
 8015614:	0801bca4 	.word	0x0801bca4
 8015618:	0801bd78 	.word	0x0801bd78
 801561c:	0801bd18 	.word	0x0801bd18

08015620 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015620:	b580      	push	{r7, lr}
 8015622:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015624:	f003 fab4 	bl	8018b90 <rand>
 8015628:	4603      	mov	r3, r0
 801562a:	b29b      	uxth	r3, r3
 801562c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015630:	b29b      	uxth	r3, r3
 8015632:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015636:	b29a      	uxth	r2, r3
 8015638:	4b01      	ldr	r3, [pc, #4]	; (8015640 <udp_init+0x20>)
 801563a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801563c:	bf00      	nop
 801563e:	bd80      	pop	{r7, pc}
 8015640:	24000034 	.word	0x24000034

08015644 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8015644:	b480      	push	{r7}
 8015646:	b083      	sub	sp, #12
 8015648:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801564a:	2300      	movs	r3, #0
 801564c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801564e:	4b17      	ldr	r3, [pc, #92]	; (80156ac <udp_new_port+0x68>)
 8015650:	881b      	ldrh	r3, [r3, #0]
 8015652:	1c5a      	adds	r2, r3, #1
 8015654:	b291      	uxth	r1, r2
 8015656:	4a15      	ldr	r2, [pc, #84]	; (80156ac <udp_new_port+0x68>)
 8015658:	8011      	strh	r1, [r2, #0]
 801565a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801565e:	4293      	cmp	r3, r2
 8015660:	d103      	bne.n	801566a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8015662:	4b12      	ldr	r3, [pc, #72]	; (80156ac <udp_new_port+0x68>)
 8015664:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015668:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801566a:	4b11      	ldr	r3, [pc, #68]	; (80156b0 <udp_new_port+0x6c>)
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	603b      	str	r3, [r7, #0]
 8015670:	e011      	b.n	8015696 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8015672:	683b      	ldr	r3, [r7, #0]
 8015674:	8a5a      	ldrh	r2, [r3, #18]
 8015676:	4b0d      	ldr	r3, [pc, #52]	; (80156ac <udp_new_port+0x68>)
 8015678:	881b      	ldrh	r3, [r3, #0]
 801567a:	429a      	cmp	r2, r3
 801567c:	d108      	bne.n	8015690 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801567e:	88fb      	ldrh	r3, [r7, #6]
 8015680:	3301      	adds	r3, #1
 8015682:	80fb      	strh	r3, [r7, #6]
 8015684:	88fb      	ldrh	r3, [r7, #6]
 8015686:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801568a:	d3e0      	bcc.n	801564e <udp_new_port+0xa>
        return 0;
 801568c:	2300      	movs	r3, #0
 801568e:	e007      	b.n	80156a0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015690:	683b      	ldr	r3, [r7, #0]
 8015692:	68db      	ldr	r3, [r3, #12]
 8015694:	603b      	str	r3, [r7, #0]
 8015696:	683b      	ldr	r3, [r7, #0]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d1ea      	bne.n	8015672 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801569c:	4b03      	ldr	r3, [pc, #12]	; (80156ac <udp_new_port+0x68>)
 801569e:	881b      	ldrh	r3, [r3, #0]
}
 80156a0:	4618      	mov	r0, r3
 80156a2:	370c      	adds	r7, #12
 80156a4:	46bd      	mov	sp, r7
 80156a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156aa:	4770      	bx	lr
 80156ac:	24000034 	.word	0x24000034
 80156b0:	24008adc 	.word	0x24008adc

080156b4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80156b4:	b580      	push	{r7, lr}
 80156b6:	b084      	sub	sp, #16
 80156b8:	af00      	add	r7, sp, #0
 80156ba:	60f8      	str	r0, [r7, #12]
 80156bc:	60b9      	str	r1, [r7, #8]
 80156be:	4613      	mov	r3, r2
 80156c0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d105      	bne.n	80156d4 <udp_input_local_match+0x20>
 80156c8:	4b27      	ldr	r3, [pc, #156]	; (8015768 <udp_input_local_match+0xb4>)
 80156ca:	2287      	movs	r2, #135	; 0x87
 80156cc:	4927      	ldr	r1, [pc, #156]	; (801576c <udp_input_local_match+0xb8>)
 80156ce:	4828      	ldr	r0, [pc, #160]	; (8015770 <udp_input_local_match+0xbc>)
 80156d0:	f003 fa46 	bl	8018b60 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80156d4:	68bb      	ldr	r3, [r7, #8]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d105      	bne.n	80156e6 <udp_input_local_match+0x32>
 80156da:	4b23      	ldr	r3, [pc, #140]	; (8015768 <udp_input_local_match+0xb4>)
 80156dc:	2288      	movs	r2, #136	; 0x88
 80156de:	4925      	ldr	r1, [pc, #148]	; (8015774 <udp_input_local_match+0xc0>)
 80156e0:	4823      	ldr	r0, [pc, #140]	; (8015770 <udp_input_local_match+0xbc>)
 80156e2:	f003 fa3d 	bl	8018b60 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	7a1b      	ldrb	r3, [r3, #8]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d00b      	beq.n	8015706 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	7a1a      	ldrb	r2, [r3, #8]
 80156f2:	4b21      	ldr	r3, [pc, #132]	; (8015778 <udp_input_local_match+0xc4>)
 80156f4:	685b      	ldr	r3, [r3, #4]
 80156f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80156fa:	3301      	adds	r3, #1
 80156fc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80156fe:	429a      	cmp	r2, r3
 8015700:	d001      	beq.n	8015706 <udp_input_local_match+0x52>
    return 0;
 8015702:	2300      	movs	r3, #0
 8015704:	e02b      	b.n	801575e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015706:	79fb      	ldrb	r3, [r7, #7]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d018      	beq.n	801573e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d013      	beq.n	801573a <udp_input_local_match+0x86>
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d00f      	beq.n	801573a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801571a:	4b17      	ldr	r3, [pc, #92]	; (8015778 <udp_input_local_match+0xc4>)
 801571c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801571e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015722:	d00a      	beq.n	801573a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015724:	68fb      	ldr	r3, [r7, #12]
 8015726:	681a      	ldr	r2, [r3, #0]
 8015728:	4b13      	ldr	r3, [pc, #76]	; (8015778 <udp_input_local_match+0xc4>)
 801572a:	695b      	ldr	r3, [r3, #20]
 801572c:	405a      	eors	r2, r3
 801572e:	68bb      	ldr	r3, [r7, #8]
 8015730:	3308      	adds	r3, #8
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015736:	2b00      	cmp	r3, #0
 8015738:	d110      	bne.n	801575c <udp_input_local_match+0xa8>
          return 1;
 801573a:	2301      	movs	r3, #1
 801573c:	e00f      	b.n	801575e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d009      	beq.n	8015758 <udp_input_local_match+0xa4>
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	681b      	ldr	r3, [r3, #0]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d005      	beq.n	8015758 <udp_input_local_match+0xa4>
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	681a      	ldr	r2, [r3, #0]
 8015750:	4b09      	ldr	r3, [pc, #36]	; (8015778 <udp_input_local_match+0xc4>)
 8015752:	695b      	ldr	r3, [r3, #20]
 8015754:	429a      	cmp	r2, r3
 8015756:	d101      	bne.n	801575c <udp_input_local_match+0xa8>
        return 1;
 8015758:	2301      	movs	r3, #1
 801575a:	e000      	b.n	801575e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801575c:	2300      	movs	r3, #0
}
 801575e:	4618      	mov	r0, r3
 8015760:	3710      	adds	r7, #16
 8015762:	46bd      	mov	sp, r7
 8015764:	bd80      	pop	{r7, pc}
 8015766:	bf00      	nop
 8015768:	0801bd8c 	.word	0x0801bd8c
 801576c:	0801bdbc 	.word	0x0801bdbc
 8015770:	0801bde0 	.word	0x0801bde0
 8015774:	0801be08 	.word	0x0801be08
 8015778:	24005980 	.word	0x24005980

0801577c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801577c:	b590      	push	{r4, r7, lr}
 801577e:	b08d      	sub	sp, #52	; 0x34
 8015780:	af02      	add	r7, sp, #8
 8015782:	6078      	str	r0, [r7, #4]
 8015784:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015786:	2300      	movs	r3, #0
 8015788:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d105      	bne.n	801579c <udp_input+0x20>
 8015790:	4b7c      	ldr	r3, [pc, #496]	; (8015984 <udp_input+0x208>)
 8015792:	22cf      	movs	r2, #207	; 0xcf
 8015794:	497c      	ldr	r1, [pc, #496]	; (8015988 <udp_input+0x20c>)
 8015796:	487d      	ldr	r0, [pc, #500]	; (801598c <udp_input+0x210>)
 8015798:	f003 f9e2 	bl	8018b60 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801579c:	683b      	ldr	r3, [r7, #0]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d105      	bne.n	80157ae <udp_input+0x32>
 80157a2:	4b78      	ldr	r3, [pc, #480]	; (8015984 <udp_input+0x208>)
 80157a4:	22d0      	movs	r2, #208	; 0xd0
 80157a6:	497a      	ldr	r1, [pc, #488]	; (8015990 <udp_input+0x214>)
 80157a8:	4878      	ldr	r0, [pc, #480]	; (801598c <udp_input+0x210>)
 80157aa:	f003 f9d9 	bl	8018b60 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	895b      	ldrh	r3, [r3, #10]
 80157b2:	2b07      	cmp	r3, #7
 80157b4:	d803      	bhi.n	80157be <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80157b6:	6878      	ldr	r0, [r7, #4]
 80157b8:	f7f9 fab4 	bl	800ed24 <pbuf_free>
    goto end;
 80157bc:	e0de      	b.n	801597c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	685b      	ldr	r3, [r3, #4]
 80157c2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80157c4:	4b73      	ldr	r3, [pc, #460]	; (8015994 <udp_input+0x218>)
 80157c6:	695b      	ldr	r3, [r3, #20]
 80157c8:	4a72      	ldr	r2, [pc, #456]	; (8015994 <udp_input+0x218>)
 80157ca:	6812      	ldr	r2, [r2, #0]
 80157cc:	4611      	mov	r1, r2
 80157ce:	4618      	mov	r0, r3
 80157d0:	f001 ffa6 	bl	8017720 <ip4_addr_isbroadcast_u32>
 80157d4:	4603      	mov	r3, r0
 80157d6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	881b      	ldrh	r3, [r3, #0]
 80157dc:	b29b      	uxth	r3, r3
 80157de:	4618      	mov	r0, r3
 80157e0:	f7f7 fdc0 	bl	800d364 <lwip_htons>
 80157e4:	4603      	mov	r3, r0
 80157e6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80157e8:	697b      	ldr	r3, [r7, #20]
 80157ea:	885b      	ldrh	r3, [r3, #2]
 80157ec:	b29b      	uxth	r3, r3
 80157ee:	4618      	mov	r0, r3
 80157f0:	f7f7 fdb8 	bl	800d364 <lwip_htons>
 80157f4:	4603      	mov	r3, r0
 80157f6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80157f8:	2300      	movs	r3, #0
 80157fa:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80157fc:	2300      	movs	r3, #0
 80157fe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015800:	2300      	movs	r3, #0
 8015802:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015804:	4b64      	ldr	r3, [pc, #400]	; (8015998 <udp_input+0x21c>)
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	627b      	str	r3, [r7, #36]	; 0x24
 801580a:	e054      	b.n	80158b6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801580e:	8a5b      	ldrh	r3, [r3, #18]
 8015810:	89fa      	ldrh	r2, [r7, #14]
 8015812:	429a      	cmp	r2, r3
 8015814:	d14a      	bne.n	80158ac <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015816:	7cfb      	ldrb	r3, [r7, #19]
 8015818:	461a      	mov	r2, r3
 801581a:	6839      	ldr	r1, [r7, #0]
 801581c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801581e:	f7ff ff49 	bl	80156b4 <udp_input_local_match>
 8015822:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015824:	2b00      	cmp	r3, #0
 8015826:	d041      	beq.n	80158ac <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801582a:	7c1b      	ldrb	r3, [r3, #16]
 801582c:	f003 0304 	and.w	r3, r3, #4
 8015830:	2b00      	cmp	r3, #0
 8015832:	d11d      	bne.n	8015870 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015834:	69fb      	ldr	r3, [r7, #28]
 8015836:	2b00      	cmp	r3, #0
 8015838:	d102      	bne.n	8015840 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801583a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801583c:	61fb      	str	r3, [r7, #28]
 801583e:	e017      	b.n	8015870 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015840:	7cfb      	ldrb	r3, [r7, #19]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d014      	beq.n	8015870 <udp_input+0xf4>
 8015846:	4b53      	ldr	r3, [pc, #332]	; (8015994 <udp_input+0x218>)
 8015848:	695b      	ldr	r3, [r3, #20]
 801584a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801584e:	d10f      	bne.n	8015870 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015850:	69fb      	ldr	r3, [r7, #28]
 8015852:	681a      	ldr	r2, [r3, #0]
 8015854:	683b      	ldr	r3, [r7, #0]
 8015856:	3304      	adds	r3, #4
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	429a      	cmp	r2, r3
 801585c:	d008      	beq.n	8015870 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015860:	681a      	ldr	r2, [r3, #0]
 8015862:	683b      	ldr	r3, [r7, #0]
 8015864:	3304      	adds	r3, #4
 8015866:	681b      	ldr	r3, [r3, #0]
 8015868:	429a      	cmp	r2, r3
 801586a:	d101      	bne.n	8015870 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801586e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015872:	8a9b      	ldrh	r3, [r3, #20]
 8015874:	8a3a      	ldrh	r2, [r7, #16]
 8015876:	429a      	cmp	r2, r3
 8015878:	d118      	bne.n	80158ac <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801587c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801587e:	2b00      	cmp	r3, #0
 8015880:	d005      	beq.n	801588e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8015882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015884:	685a      	ldr	r2, [r3, #4]
 8015886:	4b43      	ldr	r3, [pc, #268]	; (8015994 <udp_input+0x218>)
 8015888:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801588a:	429a      	cmp	r2, r3
 801588c:	d10e      	bne.n	80158ac <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801588e:	6a3b      	ldr	r3, [r7, #32]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d014      	beq.n	80158be <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015896:	68da      	ldr	r2, [r3, #12]
 8015898:	6a3b      	ldr	r3, [r7, #32]
 801589a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801589c:	4b3e      	ldr	r3, [pc, #248]	; (8015998 <udp_input+0x21c>)
 801589e:	681a      	ldr	r2, [r3, #0]
 80158a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158a2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80158a4:	4a3c      	ldr	r2, [pc, #240]	; (8015998 <udp_input+0x21c>)
 80158a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158a8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80158aa:	e008      	b.n	80158be <udp_input+0x142>
      }
    }

    prev = pcb;
 80158ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158ae:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80158b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158b2:	68db      	ldr	r3, [r3, #12]
 80158b4:	627b      	str	r3, [r7, #36]	; 0x24
 80158b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d1a7      	bne.n	801580c <udp_input+0x90>
 80158bc:	e000      	b.n	80158c0 <udp_input+0x144>
        break;
 80158be:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80158c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d101      	bne.n	80158ca <udp_input+0x14e>
    pcb = uncon_pcb;
 80158c6:	69fb      	ldr	r3, [r7, #28]
 80158c8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80158ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d002      	beq.n	80158d6 <udp_input+0x15a>
    for_us = 1;
 80158d0:	2301      	movs	r3, #1
 80158d2:	76fb      	strb	r3, [r7, #27]
 80158d4:	e00a      	b.n	80158ec <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80158d6:	683b      	ldr	r3, [r7, #0]
 80158d8:	3304      	adds	r3, #4
 80158da:	681a      	ldr	r2, [r3, #0]
 80158dc:	4b2d      	ldr	r3, [pc, #180]	; (8015994 <udp_input+0x218>)
 80158de:	695b      	ldr	r3, [r3, #20]
 80158e0:	429a      	cmp	r2, r3
 80158e2:	bf0c      	ite	eq
 80158e4:	2301      	moveq	r3, #1
 80158e6:	2300      	movne	r3, #0
 80158e8:	b2db      	uxtb	r3, r3
 80158ea:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80158ec:	7efb      	ldrb	r3, [r7, #27]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d041      	beq.n	8015976 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80158f2:	2108      	movs	r1, #8
 80158f4:	6878      	ldr	r0, [r7, #4]
 80158f6:	f7f9 f98f 	bl	800ec18 <pbuf_remove_header>
 80158fa:	4603      	mov	r3, r0
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d00a      	beq.n	8015916 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015900:	4b20      	ldr	r3, [pc, #128]	; (8015984 <udp_input+0x208>)
 8015902:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8015906:	4925      	ldr	r1, [pc, #148]	; (801599c <udp_input+0x220>)
 8015908:	4820      	ldr	r0, [pc, #128]	; (801598c <udp_input+0x210>)
 801590a:	f003 f929 	bl	8018b60 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801590e:	6878      	ldr	r0, [r7, #4]
 8015910:	f7f9 fa08 	bl	800ed24 <pbuf_free>
      goto end;
 8015914:	e032      	b.n	801597c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8015916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015918:	2b00      	cmp	r3, #0
 801591a:	d012      	beq.n	8015942 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801591e:	699b      	ldr	r3, [r3, #24]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d00a      	beq.n	801593a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015926:	699c      	ldr	r4, [r3, #24]
 8015928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801592a:	69d8      	ldr	r0, [r3, #28]
 801592c:	8a3b      	ldrh	r3, [r7, #16]
 801592e:	9300      	str	r3, [sp, #0]
 8015930:	4b1b      	ldr	r3, [pc, #108]	; (80159a0 <udp_input+0x224>)
 8015932:	687a      	ldr	r2, [r7, #4]
 8015934:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015936:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015938:	e021      	b.n	801597e <udp_input+0x202>
        pbuf_free(p);
 801593a:	6878      	ldr	r0, [r7, #4]
 801593c:	f7f9 f9f2 	bl	800ed24 <pbuf_free>
        goto end;
 8015940:	e01c      	b.n	801597c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8015942:	7cfb      	ldrb	r3, [r7, #19]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d112      	bne.n	801596e <udp_input+0x1f2>
 8015948:	4b12      	ldr	r3, [pc, #72]	; (8015994 <udp_input+0x218>)
 801594a:	695b      	ldr	r3, [r3, #20]
 801594c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015950:	2be0      	cmp	r3, #224	; 0xe0
 8015952:	d00c      	beq.n	801596e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015954:	4b0f      	ldr	r3, [pc, #60]	; (8015994 <udp_input+0x218>)
 8015956:	899b      	ldrh	r3, [r3, #12]
 8015958:	3308      	adds	r3, #8
 801595a:	b29b      	uxth	r3, r3
 801595c:	b21b      	sxth	r3, r3
 801595e:	4619      	mov	r1, r3
 8015960:	6878      	ldr	r0, [r7, #4]
 8015962:	f7f9 f9cc 	bl	800ecfe <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015966:	2103      	movs	r1, #3
 8015968:	6878      	ldr	r0, [r7, #4]
 801596a:	f001 fbaf 	bl	80170cc <icmp_dest_unreach>
      pbuf_free(p);
 801596e:	6878      	ldr	r0, [r7, #4]
 8015970:	f7f9 f9d8 	bl	800ed24 <pbuf_free>
  return;
 8015974:	e003      	b.n	801597e <udp_input+0x202>
    pbuf_free(p);
 8015976:	6878      	ldr	r0, [r7, #4]
 8015978:	f7f9 f9d4 	bl	800ed24 <pbuf_free>
  return;
 801597c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801597e:	372c      	adds	r7, #44	; 0x2c
 8015980:	46bd      	mov	sp, r7
 8015982:	bd90      	pop	{r4, r7, pc}
 8015984:	0801bd8c 	.word	0x0801bd8c
 8015988:	0801be30 	.word	0x0801be30
 801598c:	0801bde0 	.word	0x0801bde0
 8015990:	0801be48 	.word	0x0801be48
 8015994:	24005980 	.word	0x24005980
 8015998:	24008adc 	.word	0x24008adc
 801599c:	0801be64 	.word	0x0801be64
 80159a0:	24005990 	.word	0x24005990

080159a4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80159a4:	b580      	push	{r7, lr}
 80159a6:	b082      	sub	sp, #8
 80159a8:	af00      	add	r7, sp, #0
 80159aa:	6078      	str	r0, [r7, #4]
 80159ac:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d109      	bne.n	80159c8 <udp_send+0x24>
 80159b4:	4b11      	ldr	r3, [pc, #68]	; (80159fc <udp_send+0x58>)
 80159b6:	f240 12d5 	movw	r2, #469	; 0x1d5
 80159ba:	4911      	ldr	r1, [pc, #68]	; (8015a00 <udp_send+0x5c>)
 80159bc:	4811      	ldr	r0, [pc, #68]	; (8015a04 <udp_send+0x60>)
 80159be:	f003 f8cf 	bl	8018b60 <iprintf>
 80159c2:	f06f 030f 	mvn.w	r3, #15
 80159c6:	e015      	b.n	80159f4 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80159c8:	683b      	ldr	r3, [r7, #0]
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d109      	bne.n	80159e2 <udp_send+0x3e>
 80159ce:	4b0b      	ldr	r3, [pc, #44]	; (80159fc <udp_send+0x58>)
 80159d0:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80159d4:	490c      	ldr	r1, [pc, #48]	; (8015a08 <udp_send+0x64>)
 80159d6:	480b      	ldr	r0, [pc, #44]	; (8015a04 <udp_send+0x60>)
 80159d8:	f003 f8c2 	bl	8018b60 <iprintf>
 80159dc:	f06f 030f 	mvn.w	r3, #15
 80159e0:	e008      	b.n	80159f4 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	1d1a      	adds	r2, r3, #4
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	8a9b      	ldrh	r3, [r3, #20]
 80159ea:	6839      	ldr	r1, [r7, #0]
 80159ec:	6878      	ldr	r0, [r7, #4]
 80159ee:	f000 f80d 	bl	8015a0c <udp_sendto>
 80159f2:	4603      	mov	r3, r0
}
 80159f4:	4618      	mov	r0, r3
 80159f6:	3708      	adds	r7, #8
 80159f8:	46bd      	mov	sp, r7
 80159fa:	bd80      	pop	{r7, pc}
 80159fc:	0801bd8c 	.word	0x0801bd8c
 8015a00:	0801be80 	.word	0x0801be80
 8015a04:	0801bde0 	.word	0x0801bde0
 8015a08:	0801be98 	.word	0x0801be98

08015a0c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8015a0c:	b580      	push	{r7, lr}
 8015a0e:	b088      	sub	sp, #32
 8015a10:	af02      	add	r7, sp, #8
 8015a12:	60f8      	str	r0, [r7, #12]
 8015a14:	60b9      	str	r1, [r7, #8]
 8015a16:	607a      	str	r2, [r7, #4]
 8015a18:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d109      	bne.n	8015a34 <udp_sendto+0x28>
 8015a20:	4b23      	ldr	r3, [pc, #140]	; (8015ab0 <udp_sendto+0xa4>)
 8015a22:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015a26:	4923      	ldr	r1, [pc, #140]	; (8015ab4 <udp_sendto+0xa8>)
 8015a28:	4823      	ldr	r0, [pc, #140]	; (8015ab8 <udp_sendto+0xac>)
 8015a2a:	f003 f899 	bl	8018b60 <iprintf>
 8015a2e:	f06f 030f 	mvn.w	r3, #15
 8015a32:	e038      	b.n	8015aa6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8015a34:	68bb      	ldr	r3, [r7, #8]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d109      	bne.n	8015a4e <udp_sendto+0x42>
 8015a3a:	4b1d      	ldr	r3, [pc, #116]	; (8015ab0 <udp_sendto+0xa4>)
 8015a3c:	f240 2219 	movw	r2, #537	; 0x219
 8015a40:	491e      	ldr	r1, [pc, #120]	; (8015abc <udp_sendto+0xb0>)
 8015a42:	481d      	ldr	r0, [pc, #116]	; (8015ab8 <udp_sendto+0xac>)
 8015a44:	f003 f88c 	bl	8018b60 <iprintf>
 8015a48:	f06f 030f 	mvn.w	r3, #15
 8015a4c:	e02b      	b.n	8015aa6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d109      	bne.n	8015a68 <udp_sendto+0x5c>
 8015a54:	4b16      	ldr	r3, [pc, #88]	; (8015ab0 <udp_sendto+0xa4>)
 8015a56:	f240 221a 	movw	r2, #538	; 0x21a
 8015a5a:	4919      	ldr	r1, [pc, #100]	; (8015ac0 <udp_sendto+0xb4>)
 8015a5c:	4816      	ldr	r0, [pc, #88]	; (8015ab8 <udp_sendto+0xac>)
 8015a5e:	f003 f87f 	bl	8018b60 <iprintf>
 8015a62:	f06f 030f 	mvn.w	r3, #15
 8015a66:	e01e      	b.n	8015aa6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	7a1b      	ldrb	r3, [r3, #8]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d006      	beq.n	8015a7e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	7a1b      	ldrb	r3, [r3, #8]
 8015a74:	4618      	mov	r0, r3
 8015a76:	f7f8 fdc7 	bl	800e608 <netif_get_by_index>
 8015a7a:	6178      	str	r0, [r7, #20]
 8015a7c:	e003      	b.n	8015a86 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8015a7e:	6878      	ldr	r0, [r7, #4]
 8015a80:	f001 fbb8 	bl	80171f4 <ip4_route>
 8015a84:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8015a86:	697b      	ldr	r3, [r7, #20]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d102      	bne.n	8015a92 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8015a8c:	f06f 0303 	mvn.w	r3, #3
 8015a90:	e009      	b.n	8015aa6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8015a92:	887a      	ldrh	r2, [r7, #2]
 8015a94:	697b      	ldr	r3, [r7, #20]
 8015a96:	9300      	str	r3, [sp, #0]
 8015a98:	4613      	mov	r3, r2
 8015a9a:	687a      	ldr	r2, [r7, #4]
 8015a9c:	68b9      	ldr	r1, [r7, #8]
 8015a9e:	68f8      	ldr	r0, [r7, #12]
 8015aa0:	f000 f810 	bl	8015ac4 <udp_sendto_if>
 8015aa4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	3718      	adds	r7, #24
 8015aaa:	46bd      	mov	sp, r7
 8015aac:	bd80      	pop	{r7, pc}
 8015aae:	bf00      	nop
 8015ab0:	0801bd8c 	.word	0x0801bd8c
 8015ab4:	0801beb0 	.word	0x0801beb0
 8015ab8:	0801bde0 	.word	0x0801bde0
 8015abc:	0801bec8 	.word	0x0801bec8
 8015ac0:	0801bee4 	.word	0x0801bee4

08015ac4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	b088      	sub	sp, #32
 8015ac8:	af02      	add	r7, sp, #8
 8015aca:	60f8      	str	r0, [r7, #12]
 8015acc:	60b9      	str	r1, [r7, #8]
 8015ace:	607a      	str	r2, [r7, #4]
 8015ad0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d109      	bne.n	8015aec <udp_sendto_if+0x28>
 8015ad8:	4b2e      	ldr	r3, [pc, #184]	; (8015b94 <udp_sendto_if+0xd0>)
 8015ada:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015ade:	492e      	ldr	r1, [pc, #184]	; (8015b98 <udp_sendto_if+0xd4>)
 8015ae0:	482e      	ldr	r0, [pc, #184]	; (8015b9c <udp_sendto_if+0xd8>)
 8015ae2:	f003 f83d 	bl	8018b60 <iprintf>
 8015ae6:	f06f 030f 	mvn.w	r3, #15
 8015aea:	e04f      	b.n	8015b8c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015aec:	68bb      	ldr	r3, [r7, #8]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d109      	bne.n	8015b06 <udp_sendto_if+0x42>
 8015af2:	4b28      	ldr	r3, [pc, #160]	; (8015b94 <udp_sendto_if+0xd0>)
 8015af4:	f240 2281 	movw	r2, #641	; 0x281
 8015af8:	4929      	ldr	r1, [pc, #164]	; (8015ba0 <udp_sendto_if+0xdc>)
 8015afa:	4828      	ldr	r0, [pc, #160]	; (8015b9c <udp_sendto_if+0xd8>)
 8015afc:	f003 f830 	bl	8018b60 <iprintf>
 8015b00:	f06f 030f 	mvn.w	r3, #15
 8015b04:	e042      	b.n	8015b8c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d109      	bne.n	8015b20 <udp_sendto_if+0x5c>
 8015b0c:	4b21      	ldr	r3, [pc, #132]	; (8015b94 <udp_sendto_if+0xd0>)
 8015b0e:	f240 2282 	movw	r2, #642	; 0x282
 8015b12:	4924      	ldr	r1, [pc, #144]	; (8015ba4 <udp_sendto_if+0xe0>)
 8015b14:	4821      	ldr	r0, [pc, #132]	; (8015b9c <udp_sendto_if+0xd8>)
 8015b16:	f003 f823 	bl	8018b60 <iprintf>
 8015b1a:	f06f 030f 	mvn.w	r3, #15
 8015b1e:	e035      	b.n	8015b8c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8015b20:	6a3b      	ldr	r3, [r7, #32]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d109      	bne.n	8015b3a <udp_sendto_if+0x76>
 8015b26:	4b1b      	ldr	r3, [pc, #108]	; (8015b94 <udp_sendto_if+0xd0>)
 8015b28:	f240 2283 	movw	r2, #643	; 0x283
 8015b2c:	491e      	ldr	r1, [pc, #120]	; (8015ba8 <udp_sendto_if+0xe4>)
 8015b2e:	481b      	ldr	r0, [pc, #108]	; (8015b9c <udp_sendto_if+0xd8>)
 8015b30:	f003 f816 	bl	8018b60 <iprintf>
 8015b34:	f06f 030f 	mvn.w	r3, #15
 8015b38:	e028      	b.n	8015b8c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d009      	beq.n	8015b54 <udp_sendto_if+0x90>
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d005      	beq.n	8015b54 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	681b      	ldr	r3, [r3, #0]
 8015b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015b50:	2be0      	cmp	r3, #224	; 0xe0
 8015b52:	d103      	bne.n	8015b5c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8015b54:	6a3b      	ldr	r3, [r7, #32]
 8015b56:	3304      	adds	r3, #4
 8015b58:	617b      	str	r3, [r7, #20]
 8015b5a:	e00b      	b.n	8015b74 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	681a      	ldr	r2, [r3, #0]
 8015b60:	6a3b      	ldr	r3, [r7, #32]
 8015b62:	3304      	adds	r3, #4
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	429a      	cmp	r2, r3
 8015b68:	d002      	beq.n	8015b70 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8015b6a:	f06f 0303 	mvn.w	r3, #3
 8015b6e:	e00d      	b.n	8015b8c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8015b74:	887a      	ldrh	r2, [r7, #2]
 8015b76:	697b      	ldr	r3, [r7, #20]
 8015b78:	9301      	str	r3, [sp, #4]
 8015b7a:	6a3b      	ldr	r3, [r7, #32]
 8015b7c:	9300      	str	r3, [sp, #0]
 8015b7e:	4613      	mov	r3, r2
 8015b80:	687a      	ldr	r2, [r7, #4]
 8015b82:	68b9      	ldr	r1, [r7, #8]
 8015b84:	68f8      	ldr	r0, [r7, #12]
 8015b86:	f000 f811 	bl	8015bac <udp_sendto_if_src>
 8015b8a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	3718      	adds	r7, #24
 8015b90:	46bd      	mov	sp, r7
 8015b92:	bd80      	pop	{r7, pc}
 8015b94:	0801bd8c 	.word	0x0801bd8c
 8015b98:	0801bf00 	.word	0x0801bf00
 8015b9c:	0801bde0 	.word	0x0801bde0
 8015ba0:	0801bf1c 	.word	0x0801bf1c
 8015ba4:	0801bf38 	.word	0x0801bf38
 8015ba8:	0801bf58 	.word	0x0801bf58

08015bac <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b08c      	sub	sp, #48	; 0x30
 8015bb0:	af04      	add	r7, sp, #16
 8015bb2:	60f8      	str	r0, [r7, #12]
 8015bb4:	60b9      	str	r1, [r7, #8]
 8015bb6:	607a      	str	r2, [r7, #4]
 8015bb8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d109      	bne.n	8015bd4 <udp_sendto_if_src+0x28>
 8015bc0:	4b65      	ldr	r3, [pc, #404]	; (8015d58 <udp_sendto_if_src+0x1ac>)
 8015bc2:	f240 22d1 	movw	r2, #721	; 0x2d1
 8015bc6:	4965      	ldr	r1, [pc, #404]	; (8015d5c <udp_sendto_if_src+0x1b0>)
 8015bc8:	4865      	ldr	r0, [pc, #404]	; (8015d60 <udp_sendto_if_src+0x1b4>)
 8015bca:	f002 ffc9 	bl	8018b60 <iprintf>
 8015bce:	f06f 030f 	mvn.w	r3, #15
 8015bd2:	e0bc      	b.n	8015d4e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8015bd4:	68bb      	ldr	r3, [r7, #8]
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d109      	bne.n	8015bee <udp_sendto_if_src+0x42>
 8015bda:	4b5f      	ldr	r3, [pc, #380]	; (8015d58 <udp_sendto_if_src+0x1ac>)
 8015bdc:	f240 22d2 	movw	r2, #722	; 0x2d2
 8015be0:	4960      	ldr	r1, [pc, #384]	; (8015d64 <udp_sendto_if_src+0x1b8>)
 8015be2:	485f      	ldr	r0, [pc, #380]	; (8015d60 <udp_sendto_if_src+0x1b4>)
 8015be4:	f002 ffbc 	bl	8018b60 <iprintf>
 8015be8:	f06f 030f 	mvn.w	r3, #15
 8015bec:	e0af      	b.n	8015d4e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d109      	bne.n	8015c08 <udp_sendto_if_src+0x5c>
 8015bf4:	4b58      	ldr	r3, [pc, #352]	; (8015d58 <udp_sendto_if_src+0x1ac>)
 8015bf6:	f240 22d3 	movw	r2, #723	; 0x2d3
 8015bfa:	495b      	ldr	r1, [pc, #364]	; (8015d68 <udp_sendto_if_src+0x1bc>)
 8015bfc:	4858      	ldr	r0, [pc, #352]	; (8015d60 <udp_sendto_if_src+0x1b4>)
 8015bfe:	f002 ffaf 	bl	8018b60 <iprintf>
 8015c02:	f06f 030f 	mvn.w	r3, #15
 8015c06:	e0a2      	b.n	8015d4e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8015c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d109      	bne.n	8015c22 <udp_sendto_if_src+0x76>
 8015c0e:	4b52      	ldr	r3, [pc, #328]	; (8015d58 <udp_sendto_if_src+0x1ac>)
 8015c10:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8015c14:	4955      	ldr	r1, [pc, #340]	; (8015d6c <udp_sendto_if_src+0x1c0>)
 8015c16:	4852      	ldr	r0, [pc, #328]	; (8015d60 <udp_sendto_if_src+0x1b4>)
 8015c18:	f002 ffa2 	bl	8018b60 <iprintf>
 8015c1c:	f06f 030f 	mvn.w	r3, #15
 8015c20:	e095      	b.n	8015d4e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8015c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d109      	bne.n	8015c3c <udp_sendto_if_src+0x90>
 8015c28:	4b4b      	ldr	r3, [pc, #300]	; (8015d58 <udp_sendto_if_src+0x1ac>)
 8015c2a:	f240 22d5 	movw	r2, #725	; 0x2d5
 8015c2e:	4950      	ldr	r1, [pc, #320]	; (8015d70 <udp_sendto_if_src+0x1c4>)
 8015c30:	484b      	ldr	r0, [pc, #300]	; (8015d60 <udp_sendto_if_src+0x1b4>)
 8015c32:	f002 ff95 	bl	8018b60 <iprintf>
 8015c36:	f06f 030f 	mvn.w	r3, #15
 8015c3a:	e088      	b.n	8015d4e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	8a5b      	ldrh	r3, [r3, #18]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d10f      	bne.n	8015c64 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015c44:	68f9      	ldr	r1, [r7, #12]
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	8a5b      	ldrh	r3, [r3, #18]
 8015c4a:	461a      	mov	r2, r3
 8015c4c:	68f8      	ldr	r0, [r7, #12]
 8015c4e:	f000 f893 	bl	8015d78 <udp_bind>
 8015c52:	4603      	mov	r3, r0
 8015c54:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8015c56:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d002      	beq.n	8015c64 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8015c5e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015c62:	e074      	b.n	8015d4e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8015c64:	68bb      	ldr	r3, [r7, #8]
 8015c66:	891b      	ldrh	r3, [r3, #8]
 8015c68:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8015c6c:	4293      	cmp	r3, r2
 8015c6e:	d902      	bls.n	8015c76 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8015c70:	f04f 33ff 	mov.w	r3, #4294967295
 8015c74:	e06b      	b.n	8015d4e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8015c76:	2108      	movs	r1, #8
 8015c78:	68b8      	ldr	r0, [r7, #8]
 8015c7a:	f7f8 ffbd 	bl	800ebf8 <pbuf_add_header>
 8015c7e:	4603      	mov	r3, r0
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d015      	beq.n	8015cb0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8015c84:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015c88:	2108      	movs	r1, #8
 8015c8a:	2022      	movs	r0, #34	; 0x22
 8015c8c:	f7f8 fd66 	bl	800e75c <pbuf_alloc>
 8015c90:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8015c92:	69fb      	ldr	r3, [r7, #28]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d102      	bne.n	8015c9e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8015c98:	f04f 33ff 	mov.w	r3, #4294967295
 8015c9c:	e057      	b.n	8015d4e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8015c9e:	68bb      	ldr	r3, [r7, #8]
 8015ca0:	891b      	ldrh	r3, [r3, #8]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d006      	beq.n	8015cb4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8015ca6:	68b9      	ldr	r1, [r7, #8]
 8015ca8:	69f8      	ldr	r0, [r7, #28]
 8015caa:	f7f9 f95f 	bl	800ef6c <pbuf_chain>
 8015cae:	e001      	b.n	8015cb4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8015cb0:	68bb      	ldr	r3, [r7, #8]
 8015cb2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8015cb4:	69fb      	ldr	r3, [r7, #28]
 8015cb6:	895b      	ldrh	r3, [r3, #10]
 8015cb8:	2b07      	cmp	r3, #7
 8015cba:	d806      	bhi.n	8015cca <udp_sendto_if_src+0x11e>
 8015cbc:	4b26      	ldr	r3, [pc, #152]	; (8015d58 <udp_sendto_if_src+0x1ac>)
 8015cbe:	f240 320d 	movw	r2, #781	; 0x30d
 8015cc2:	492c      	ldr	r1, [pc, #176]	; (8015d74 <udp_sendto_if_src+0x1c8>)
 8015cc4:	4826      	ldr	r0, [pc, #152]	; (8015d60 <udp_sendto_if_src+0x1b4>)
 8015cc6:	f002 ff4b 	bl	8018b60 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8015cca:	69fb      	ldr	r3, [r7, #28]
 8015ccc:	685b      	ldr	r3, [r3, #4]
 8015cce:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	8a5b      	ldrh	r3, [r3, #18]
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	f7f7 fb45 	bl	800d364 <lwip_htons>
 8015cda:	4603      	mov	r3, r0
 8015cdc:	461a      	mov	r2, r3
 8015cde:	697b      	ldr	r3, [r7, #20]
 8015ce0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8015ce2:	887b      	ldrh	r3, [r7, #2]
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	f7f7 fb3d 	bl	800d364 <lwip_htons>
 8015cea:	4603      	mov	r3, r0
 8015cec:	461a      	mov	r2, r3
 8015cee:	697b      	ldr	r3, [r7, #20]
 8015cf0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8015cf2:	697b      	ldr	r3, [r7, #20]
 8015cf4:	2200      	movs	r2, #0
 8015cf6:	719a      	strb	r2, [r3, #6]
 8015cf8:	2200      	movs	r2, #0
 8015cfa:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8015cfc:	69fb      	ldr	r3, [r7, #28]
 8015cfe:	891b      	ldrh	r3, [r3, #8]
 8015d00:	4618      	mov	r0, r3
 8015d02:	f7f7 fb2f 	bl	800d364 <lwip_htons>
 8015d06:	4603      	mov	r3, r0
 8015d08:	461a      	mov	r2, r3
 8015d0a:	697b      	ldr	r3, [r7, #20]
 8015d0c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8015d0e:	2311      	movs	r3, #17
 8015d10:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	7adb      	ldrb	r3, [r3, #11]
 8015d16:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	7a9b      	ldrb	r3, [r3, #10]
 8015d1c:	7cb9      	ldrb	r1, [r7, #18]
 8015d1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d20:	9202      	str	r2, [sp, #8]
 8015d22:	7cfa      	ldrb	r2, [r7, #19]
 8015d24:	9201      	str	r2, [sp, #4]
 8015d26:	9300      	str	r3, [sp, #0]
 8015d28:	460b      	mov	r3, r1
 8015d2a:	687a      	ldr	r2, [r7, #4]
 8015d2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015d2e:	69f8      	ldr	r0, [r7, #28]
 8015d30:	f001 fc48 	bl	80175c4 <ip4_output_if_src>
 8015d34:	4603      	mov	r3, r0
 8015d36:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8015d38:	69fa      	ldr	r2, [r7, #28]
 8015d3a:	68bb      	ldr	r3, [r7, #8]
 8015d3c:	429a      	cmp	r2, r3
 8015d3e:	d004      	beq.n	8015d4a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8015d40:	69f8      	ldr	r0, [r7, #28]
 8015d42:	f7f8 ffef 	bl	800ed24 <pbuf_free>
    q = NULL;
 8015d46:	2300      	movs	r3, #0
 8015d48:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8015d4a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8015d4e:	4618      	mov	r0, r3
 8015d50:	3720      	adds	r7, #32
 8015d52:	46bd      	mov	sp, r7
 8015d54:	bd80      	pop	{r7, pc}
 8015d56:	bf00      	nop
 8015d58:	0801bd8c 	.word	0x0801bd8c
 8015d5c:	0801bf78 	.word	0x0801bf78
 8015d60:	0801bde0 	.word	0x0801bde0
 8015d64:	0801bf98 	.word	0x0801bf98
 8015d68:	0801bfb8 	.word	0x0801bfb8
 8015d6c:	0801bfdc 	.word	0x0801bfdc
 8015d70:	0801c000 	.word	0x0801c000
 8015d74:	0801c024 	.word	0x0801c024

08015d78 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b086      	sub	sp, #24
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	60f8      	str	r0, [r7, #12]
 8015d80:	60b9      	str	r1, [r7, #8]
 8015d82:	4613      	mov	r3, r2
 8015d84:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015d86:	68bb      	ldr	r3, [r7, #8]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d101      	bne.n	8015d90 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015d8c:	4b39      	ldr	r3, [pc, #228]	; (8015e74 <udp_bind+0xfc>)
 8015d8e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015d90:	68fb      	ldr	r3, [r7, #12]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d109      	bne.n	8015daa <udp_bind+0x32>
 8015d96:	4b38      	ldr	r3, [pc, #224]	; (8015e78 <udp_bind+0x100>)
 8015d98:	f240 32b7 	movw	r2, #951	; 0x3b7
 8015d9c:	4937      	ldr	r1, [pc, #220]	; (8015e7c <udp_bind+0x104>)
 8015d9e:	4838      	ldr	r0, [pc, #224]	; (8015e80 <udp_bind+0x108>)
 8015da0:	f002 fede 	bl	8018b60 <iprintf>
 8015da4:	f06f 030f 	mvn.w	r3, #15
 8015da8:	e060      	b.n	8015e6c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8015daa:	2300      	movs	r3, #0
 8015dac:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015dae:	4b35      	ldr	r3, [pc, #212]	; (8015e84 <udp_bind+0x10c>)
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	617b      	str	r3, [r7, #20]
 8015db4:	e009      	b.n	8015dca <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8015db6:	68fa      	ldr	r2, [r7, #12]
 8015db8:	697b      	ldr	r3, [r7, #20]
 8015dba:	429a      	cmp	r2, r3
 8015dbc:	d102      	bne.n	8015dc4 <udp_bind+0x4c>
      rebind = 1;
 8015dbe:	2301      	movs	r3, #1
 8015dc0:	74fb      	strb	r3, [r7, #19]
      break;
 8015dc2:	e005      	b.n	8015dd0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015dc4:	697b      	ldr	r3, [r7, #20]
 8015dc6:	68db      	ldr	r3, [r3, #12]
 8015dc8:	617b      	str	r3, [r7, #20]
 8015dca:	697b      	ldr	r3, [r7, #20]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d1f2      	bne.n	8015db6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8015dd0:	88fb      	ldrh	r3, [r7, #6]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d109      	bne.n	8015dea <udp_bind+0x72>
    port = udp_new_port();
 8015dd6:	f7ff fc35 	bl	8015644 <udp_new_port>
 8015dda:	4603      	mov	r3, r0
 8015ddc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015dde:	88fb      	ldrh	r3, [r7, #6]
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d12c      	bne.n	8015e3e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8015de4:	f06f 0307 	mvn.w	r3, #7
 8015de8:	e040      	b.n	8015e6c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015dea:	4b26      	ldr	r3, [pc, #152]	; (8015e84 <udp_bind+0x10c>)
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	617b      	str	r3, [r7, #20]
 8015df0:	e022      	b.n	8015e38 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8015df2:	68fa      	ldr	r2, [r7, #12]
 8015df4:	697b      	ldr	r3, [r7, #20]
 8015df6:	429a      	cmp	r2, r3
 8015df8:	d01b      	beq.n	8015e32 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8015dfa:	697b      	ldr	r3, [r7, #20]
 8015dfc:	8a5b      	ldrh	r3, [r3, #18]
 8015dfe:	88fa      	ldrh	r2, [r7, #6]
 8015e00:	429a      	cmp	r2, r3
 8015e02:	d116      	bne.n	8015e32 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015e04:	697b      	ldr	r3, [r7, #20]
 8015e06:	681a      	ldr	r2, [r3, #0]
 8015e08:	68bb      	ldr	r3, [r7, #8]
 8015e0a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015e0c:	429a      	cmp	r2, r3
 8015e0e:	d00d      	beq.n	8015e2c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015e10:	68bb      	ldr	r3, [r7, #8]
 8015e12:	2b00      	cmp	r3, #0
 8015e14:	d00a      	beq.n	8015e2c <udp_bind+0xb4>
 8015e16:	68bb      	ldr	r3, [r7, #8]
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d006      	beq.n	8015e2c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015e1e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d003      	beq.n	8015e2c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015e24:	697b      	ldr	r3, [r7, #20]
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d102      	bne.n	8015e32 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015e2c:	f06f 0307 	mvn.w	r3, #7
 8015e30:	e01c      	b.n	8015e6c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015e32:	697b      	ldr	r3, [r7, #20]
 8015e34:	68db      	ldr	r3, [r3, #12]
 8015e36:	617b      	str	r3, [r7, #20]
 8015e38:	697b      	ldr	r3, [r7, #20]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d1d9      	bne.n	8015df2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015e3e:	68bb      	ldr	r3, [r7, #8]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d002      	beq.n	8015e4a <udp_bind+0xd2>
 8015e44:	68bb      	ldr	r3, [r7, #8]
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	e000      	b.n	8015e4c <udp_bind+0xd4>
 8015e4a:	2300      	movs	r3, #0
 8015e4c:	68fa      	ldr	r2, [r7, #12]
 8015e4e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	88fa      	ldrh	r2, [r7, #6]
 8015e54:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8015e56:	7cfb      	ldrb	r3, [r7, #19]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d106      	bne.n	8015e6a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015e5c:	4b09      	ldr	r3, [pc, #36]	; (8015e84 <udp_bind+0x10c>)
 8015e5e:	681a      	ldr	r2, [r3, #0]
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8015e64:	4a07      	ldr	r2, [pc, #28]	; (8015e84 <udp_bind+0x10c>)
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8015e6a:	2300      	movs	r3, #0
}
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	3718      	adds	r7, #24
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bd80      	pop	{r7, pc}
 8015e74:	0801ebc0 	.word	0x0801ebc0
 8015e78:	0801bd8c 	.word	0x0801bd8c
 8015e7c:	0801c054 	.word	0x0801c054
 8015e80:	0801bde0 	.word	0x0801bde0
 8015e84:	24008adc 	.word	0x24008adc

08015e88 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015e88:	b580      	push	{r7, lr}
 8015e8a:	b086      	sub	sp, #24
 8015e8c:	af00      	add	r7, sp, #0
 8015e8e:	60f8      	str	r0, [r7, #12]
 8015e90:	60b9      	str	r1, [r7, #8]
 8015e92:	4613      	mov	r3, r2
 8015e94:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d109      	bne.n	8015eb0 <udp_connect+0x28>
 8015e9c:	4b2c      	ldr	r3, [pc, #176]	; (8015f50 <udp_connect+0xc8>)
 8015e9e:	f240 4235 	movw	r2, #1077	; 0x435
 8015ea2:	492c      	ldr	r1, [pc, #176]	; (8015f54 <udp_connect+0xcc>)
 8015ea4:	482c      	ldr	r0, [pc, #176]	; (8015f58 <udp_connect+0xd0>)
 8015ea6:	f002 fe5b 	bl	8018b60 <iprintf>
 8015eaa:	f06f 030f 	mvn.w	r3, #15
 8015eae:	e04b      	b.n	8015f48 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8015eb0:	68bb      	ldr	r3, [r7, #8]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d109      	bne.n	8015eca <udp_connect+0x42>
 8015eb6:	4b26      	ldr	r3, [pc, #152]	; (8015f50 <udp_connect+0xc8>)
 8015eb8:	f240 4236 	movw	r2, #1078	; 0x436
 8015ebc:	4927      	ldr	r1, [pc, #156]	; (8015f5c <udp_connect+0xd4>)
 8015ebe:	4826      	ldr	r0, [pc, #152]	; (8015f58 <udp_connect+0xd0>)
 8015ec0:	f002 fe4e 	bl	8018b60 <iprintf>
 8015ec4:	f06f 030f 	mvn.w	r3, #15
 8015ec8:	e03e      	b.n	8015f48 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	8a5b      	ldrh	r3, [r3, #18]
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d10f      	bne.n	8015ef2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015ed2:	68f9      	ldr	r1, [r7, #12]
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	8a5b      	ldrh	r3, [r3, #18]
 8015ed8:	461a      	mov	r2, r3
 8015eda:	68f8      	ldr	r0, [r7, #12]
 8015edc:	f7ff ff4c 	bl	8015d78 <udp_bind>
 8015ee0:	4603      	mov	r3, r0
 8015ee2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8015ee4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d002      	beq.n	8015ef2 <udp_connect+0x6a>
      return err;
 8015eec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015ef0:	e02a      	b.n	8015f48 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8015ef2:	68bb      	ldr	r3, [r7, #8]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d002      	beq.n	8015efe <udp_connect+0x76>
 8015ef8:	68bb      	ldr	r3, [r7, #8]
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	e000      	b.n	8015f00 <udp_connect+0x78>
 8015efe:	2300      	movs	r3, #0
 8015f00:	68fa      	ldr	r2, [r7, #12]
 8015f02:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	88fa      	ldrh	r2, [r7, #6]
 8015f08:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	7c1b      	ldrb	r3, [r3, #16]
 8015f0e:	f043 0304 	orr.w	r3, r3, #4
 8015f12:	b2da      	uxtb	r2, r3
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015f18:	4b11      	ldr	r3, [pc, #68]	; (8015f60 <udp_connect+0xd8>)
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	617b      	str	r3, [r7, #20]
 8015f1e:	e008      	b.n	8015f32 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8015f20:	68fa      	ldr	r2, [r7, #12]
 8015f22:	697b      	ldr	r3, [r7, #20]
 8015f24:	429a      	cmp	r2, r3
 8015f26:	d101      	bne.n	8015f2c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8015f28:	2300      	movs	r3, #0
 8015f2a:	e00d      	b.n	8015f48 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015f2c:	697b      	ldr	r3, [r7, #20]
 8015f2e:	68db      	ldr	r3, [r3, #12]
 8015f30:	617b      	str	r3, [r7, #20]
 8015f32:	697b      	ldr	r3, [r7, #20]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d1f3      	bne.n	8015f20 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8015f38:	4b09      	ldr	r3, [pc, #36]	; (8015f60 <udp_connect+0xd8>)
 8015f3a:	681a      	ldr	r2, [r3, #0]
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8015f40:	4a07      	ldr	r2, [pc, #28]	; (8015f60 <udp_connect+0xd8>)
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8015f46:	2300      	movs	r3, #0
}
 8015f48:	4618      	mov	r0, r3
 8015f4a:	3718      	adds	r7, #24
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	bd80      	pop	{r7, pc}
 8015f50:	0801bd8c 	.word	0x0801bd8c
 8015f54:	0801c06c 	.word	0x0801c06c
 8015f58:	0801bde0 	.word	0x0801bde0
 8015f5c:	0801c088 	.word	0x0801c088
 8015f60:	24008adc 	.word	0x24008adc

08015f64 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015f64:	b580      	push	{r7, lr}
 8015f66:	b082      	sub	sp, #8
 8015f68:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015f6a:	2000      	movs	r0, #0
 8015f6c:	f7f7 ffc0 	bl	800def0 <memp_malloc>
 8015f70:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d007      	beq.n	8015f88 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015f78:	2220      	movs	r2, #32
 8015f7a:	2100      	movs	r1, #0
 8015f7c:	6878      	ldr	r0, [r7, #4]
 8015f7e:	f002 fd52 	bl	8018a26 <memset>
    pcb->ttl = UDP_TTL;
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	22ff      	movs	r2, #255	; 0xff
 8015f86:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015f88:	687b      	ldr	r3, [r7, #4]
}
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	3708      	adds	r7, #8
 8015f8e:	46bd      	mov	sp, r7
 8015f90:	bd80      	pop	{r7, pc}
	...

08015f94 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015f94:	b480      	push	{r7}
 8015f96:	b085      	sub	sp, #20
 8015f98:	af00      	add	r7, sp, #0
 8015f9a:	6078      	str	r0, [r7, #4]
 8015f9c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d01e      	beq.n	8015fe2 <udp_netif_ip_addr_changed+0x4e>
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d01a      	beq.n	8015fe2 <udp_netif_ip_addr_changed+0x4e>
 8015fac:	683b      	ldr	r3, [r7, #0]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d017      	beq.n	8015fe2 <udp_netif_ip_addr_changed+0x4e>
 8015fb2:	683b      	ldr	r3, [r7, #0]
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d013      	beq.n	8015fe2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015fba:	4b0d      	ldr	r3, [pc, #52]	; (8015ff0 <udp_netif_ip_addr_changed+0x5c>)
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	60fb      	str	r3, [r7, #12]
 8015fc0:	e00c      	b.n	8015fdc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	681a      	ldr	r2, [r3, #0]
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	429a      	cmp	r2, r3
 8015fcc:	d103      	bne.n	8015fd6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015fce:	683b      	ldr	r3, [r7, #0]
 8015fd0:	681a      	ldr	r2, [r3, #0]
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	68db      	ldr	r3, [r3, #12]
 8015fda:	60fb      	str	r3, [r7, #12]
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d1ef      	bne.n	8015fc2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015fe2:	bf00      	nop
 8015fe4:	3714      	adds	r7, #20
 8015fe6:	46bd      	mov	sp, r7
 8015fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fec:	4770      	bx	lr
 8015fee:	bf00      	nop
 8015ff0:	24008adc 	.word	0x24008adc

08015ff4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015ff4:	b580      	push	{r7, lr}
 8015ff6:	b082      	sub	sp, #8
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015ffc:	4915      	ldr	r1, [pc, #84]	; (8016054 <etharp_free_entry+0x60>)
 8015ffe:	687a      	ldr	r2, [r7, #4]
 8016000:	4613      	mov	r3, r2
 8016002:	005b      	lsls	r3, r3, #1
 8016004:	4413      	add	r3, r2
 8016006:	00db      	lsls	r3, r3, #3
 8016008:	440b      	add	r3, r1
 801600a:	681b      	ldr	r3, [r3, #0]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d013      	beq.n	8016038 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016010:	4910      	ldr	r1, [pc, #64]	; (8016054 <etharp_free_entry+0x60>)
 8016012:	687a      	ldr	r2, [r7, #4]
 8016014:	4613      	mov	r3, r2
 8016016:	005b      	lsls	r3, r3, #1
 8016018:	4413      	add	r3, r2
 801601a:	00db      	lsls	r3, r3, #3
 801601c:	440b      	add	r3, r1
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	4618      	mov	r0, r3
 8016022:	f7f8 fe7f 	bl	800ed24 <pbuf_free>
    arp_table[i].q = NULL;
 8016026:	490b      	ldr	r1, [pc, #44]	; (8016054 <etharp_free_entry+0x60>)
 8016028:	687a      	ldr	r2, [r7, #4]
 801602a:	4613      	mov	r3, r2
 801602c:	005b      	lsls	r3, r3, #1
 801602e:	4413      	add	r3, r2
 8016030:	00db      	lsls	r3, r3, #3
 8016032:	440b      	add	r3, r1
 8016034:	2200      	movs	r2, #0
 8016036:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016038:	4906      	ldr	r1, [pc, #24]	; (8016054 <etharp_free_entry+0x60>)
 801603a:	687a      	ldr	r2, [r7, #4]
 801603c:	4613      	mov	r3, r2
 801603e:	005b      	lsls	r3, r3, #1
 8016040:	4413      	add	r3, r2
 8016042:	00db      	lsls	r3, r3, #3
 8016044:	440b      	add	r3, r1
 8016046:	3314      	adds	r3, #20
 8016048:	2200      	movs	r2, #0
 801604a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801604c:	bf00      	nop
 801604e:	3708      	adds	r7, #8
 8016050:	46bd      	mov	sp, r7
 8016052:	bd80      	pop	{r7, pc}
 8016054:	24008ae0 	.word	0x24008ae0

08016058 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b082      	sub	sp, #8
 801605c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801605e:	2300      	movs	r3, #0
 8016060:	607b      	str	r3, [r7, #4]
 8016062:	e096      	b.n	8016192 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016064:	494f      	ldr	r1, [pc, #316]	; (80161a4 <etharp_tmr+0x14c>)
 8016066:	687a      	ldr	r2, [r7, #4]
 8016068:	4613      	mov	r3, r2
 801606a:	005b      	lsls	r3, r3, #1
 801606c:	4413      	add	r3, r2
 801606e:	00db      	lsls	r3, r3, #3
 8016070:	440b      	add	r3, r1
 8016072:	3314      	adds	r3, #20
 8016074:	781b      	ldrb	r3, [r3, #0]
 8016076:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016078:	78fb      	ldrb	r3, [r7, #3]
 801607a:	2b00      	cmp	r3, #0
 801607c:	f000 8086 	beq.w	801618c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016080:	4948      	ldr	r1, [pc, #288]	; (80161a4 <etharp_tmr+0x14c>)
 8016082:	687a      	ldr	r2, [r7, #4]
 8016084:	4613      	mov	r3, r2
 8016086:	005b      	lsls	r3, r3, #1
 8016088:	4413      	add	r3, r2
 801608a:	00db      	lsls	r3, r3, #3
 801608c:	440b      	add	r3, r1
 801608e:	3312      	adds	r3, #18
 8016090:	881b      	ldrh	r3, [r3, #0]
 8016092:	3301      	adds	r3, #1
 8016094:	b298      	uxth	r0, r3
 8016096:	4943      	ldr	r1, [pc, #268]	; (80161a4 <etharp_tmr+0x14c>)
 8016098:	687a      	ldr	r2, [r7, #4]
 801609a:	4613      	mov	r3, r2
 801609c:	005b      	lsls	r3, r3, #1
 801609e:	4413      	add	r3, r2
 80160a0:	00db      	lsls	r3, r3, #3
 80160a2:	440b      	add	r3, r1
 80160a4:	3312      	adds	r3, #18
 80160a6:	4602      	mov	r2, r0
 80160a8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80160aa:	493e      	ldr	r1, [pc, #248]	; (80161a4 <etharp_tmr+0x14c>)
 80160ac:	687a      	ldr	r2, [r7, #4]
 80160ae:	4613      	mov	r3, r2
 80160b0:	005b      	lsls	r3, r3, #1
 80160b2:	4413      	add	r3, r2
 80160b4:	00db      	lsls	r3, r3, #3
 80160b6:	440b      	add	r3, r1
 80160b8:	3312      	adds	r3, #18
 80160ba:	881b      	ldrh	r3, [r3, #0]
 80160bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80160c0:	d215      	bcs.n	80160ee <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80160c2:	4938      	ldr	r1, [pc, #224]	; (80161a4 <etharp_tmr+0x14c>)
 80160c4:	687a      	ldr	r2, [r7, #4]
 80160c6:	4613      	mov	r3, r2
 80160c8:	005b      	lsls	r3, r3, #1
 80160ca:	4413      	add	r3, r2
 80160cc:	00db      	lsls	r3, r3, #3
 80160ce:	440b      	add	r3, r1
 80160d0:	3314      	adds	r3, #20
 80160d2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80160d4:	2b01      	cmp	r3, #1
 80160d6:	d10e      	bne.n	80160f6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80160d8:	4932      	ldr	r1, [pc, #200]	; (80161a4 <etharp_tmr+0x14c>)
 80160da:	687a      	ldr	r2, [r7, #4]
 80160dc:	4613      	mov	r3, r2
 80160de:	005b      	lsls	r3, r3, #1
 80160e0:	4413      	add	r3, r2
 80160e2:	00db      	lsls	r3, r3, #3
 80160e4:	440b      	add	r3, r1
 80160e6:	3312      	adds	r3, #18
 80160e8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80160ea:	2b04      	cmp	r3, #4
 80160ec:	d903      	bls.n	80160f6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80160ee:	6878      	ldr	r0, [r7, #4]
 80160f0:	f7ff ff80 	bl	8015ff4 <etharp_free_entry>
 80160f4:	e04a      	b.n	801618c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80160f6:	492b      	ldr	r1, [pc, #172]	; (80161a4 <etharp_tmr+0x14c>)
 80160f8:	687a      	ldr	r2, [r7, #4]
 80160fa:	4613      	mov	r3, r2
 80160fc:	005b      	lsls	r3, r3, #1
 80160fe:	4413      	add	r3, r2
 8016100:	00db      	lsls	r3, r3, #3
 8016102:	440b      	add	r3, r1
 8016104:	3314      	adds	r3, #20
 8016106:	781b      	ldrb	r3, [r3, #0]
 8016108:	2b03      	cmp	r3, #3
 801610a:	d10a      	bne.n	8016122 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801610c:	4925      	ldr	r1, [pc, #148]	; (80161a4 <etharp_tmr+0x14c>)
 801610e:	687a      	ldr	r2, [r7, #4]
 8016110:	4613      	mov	r3, r2
 8016112:	005b      	lsls	r3, r3, #1
 8016114:	4413      	add	r3, r2
 8016116:	00db      	lsls	r3, r3, #3
 8016118:	440b      	add	r3, r1
 801611a:	3314      	adds	r3, #20
 801611c:	2204      	movs	r2, #4
 801611e:	701a      	strb	r2, [r3, #0]
 8016120:	e034      	b.n	801618c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016122:	4920      	ldr	r1, [pc, #128]	; (80161a4 <etharp_tmr+0x14c>)
 8016124:	687a      	ldr	r2, [r7, #4]
 8016126:	4613      	mov	r3, r2
 8016128:	005b      	lsls	r3, r3, #1
 801612a:	4413      	add	r3, r2
 801612c:	00db      	lsls	r3, r3, #3
 801612e:	440b      	add	r3, r1
 8016130:	3314      	adds	r3, #20
 8016132:	781b      	ldrb	r3, [r3, #0]
 8016134:	2b04      	cmp	r3, #4
 8016136:	d10a      	bne.n	801614e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016138:	491a      	ldr	r1, [pc, #104]	; (80161a4 <etharp_tmr+0x14c>)
 801613a:	687a      	ldr	r2, [r7, #4]
 801613c:	4613      	mov	r3, r2
 801613e:	005b      	lsls	r3, r3, #1
 8016140:	4413      	add	r3, r2
 8016142:	00db      	lsls	r3, r3, #3
 8016144:	440b      	add	r3, r1
 8016146:	3314      	adds	r3, #20
 8016148:	2202      	movs	r2, #2
 801614a:	701a      	strb	r2, [r3, #0]
 801614c:	e01e      	b.n	801618c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801614e:	4915      	ldr	r1, [pc, #84]	; (80161a4 <etharp_tmr+0x14c>)
 8016150:	687a      	ldr	r2, [r7, #4]
 8016152:	4613      	mov	r3, r2
 8016154:	005b      	lsls	r3, r3, #1
 8016156:	4413      	add	r3, r2
 8016158:	00db      	lsls	r3, r3, #3
 801615a:	440b      	add	r3, r1
 801615c:	3314      	adds	r3, #20
 801615e:	781b      	ldrb	r3, [r3, #0]
 8016160:	2b01      	cmp	r3, #1
 8016162:	d113      	bne.n	801618c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016164:	490f      	ldr	r1, [pc, #60]	; (80161a4 <etharp_tmr+0x14c>)
 8016166:	687a      	ldr	r2, [r7, #4]
 8016168:	4613      	mov	r3, r2
 801616a:	005b      	lsls	r3, r3, #1
 801616c:	4413      	add	r3, r2
 801616e:	00db      	lsls	r3, r3, #3
 8016170:	440b      	add	r3, r1
 8016172:	3308      	adds	r3, #8
 8016174:	6818      	ldr	r0, [r3, #0]
 8016176:	687a      	ldr	r2, [r7, #4]
 8016178:	4613      	mov	r3, r2
 801617a:	005b      	lsls	r3, r3, #1
 801617c:	4413      	add	r3, r2
 801617e:	00db      	lsls	r3, r3, #3
 8016180:	4a08      	ldr	r2, [pc, #32]	; (80161a4 <etharp_tmr+0x14c>)
 8016182:	4413      	add	r3, r2
 8016184:	3304      	adds	r3, #4
 8016186:	4619      	mov	r1, r3
 8016188:	f000 fe6e 	bl	8016e68 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	3301      	adds	r3, #1
 8016190:	607b      	str	r3, [r7, #4]
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	2b09      	cmp	r3, #9
 8016196:	f77f af65 	ble.w	8016064 <etharp_tmr+0xc>
      }
    }
  }
}
 801619a:	bf00      	nop
 801619c:	bf00      	nop
 801619e:	3708      	adds	r7, #8
 80161a0:	46bd      	mov	sp, r7
 80161a2:	bd80      	pop	{r7, pc}
 80161a4:	24008ae0 	.word	0x24008ae0

080161a8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80161a8:	b580      	push	{r7, lr}
 80161aa:	b08a      	sub	sp, #40	; 0x28
 80161ac:	af00      	add	r7, sp, #0
 80161ae:	60f8      	str	r0, [r7, #12]
 80161b0:	460b      	mov	r3, r1
 80161b2:	607a      	str	r2, [r7, #4]
 80161b4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80161b6:	230a      	movs	r3, #10
 80161b8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80161ba:	230a      	movs	r3, #10
 80161bc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80161be:	230a      	movs	r3, #10
 80161c0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80161c2:	2300      	movs	r3, #0
 80161c4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80161c6:	230a      	movs	r3, #10
 80161c8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80161ca:	2300      	movs	r3, #0
 80161cc:	83bb      	strh	r3, [r7, #28]
 80161ce:	2300      	movs	r3, #0
 80161d0:	837b      	strh	r3, [r7, #26]
 80161d2:	2300      	movs	r3, #0
 80161d4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80161d6:	2300      	movs	r3, #0
 80161d8:	843b      	strh	r3, [r7, #32]
 80161da:	e0ae      	b.n	801633a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80161dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80161e0:	49a6      	ldr	r1, [pc, #664]	; (801647c <etharp_find_entry+0x2d4>)
 80161e2:	4613      	mov	r3, r2
 80161e4:	005b      	lsls	r3, r3, #1
 80161e6:	4413      	add	r3, r2
 80161e8:	00db      	lsls	r3, r3, #3
 80161ea:	440b      	add	r3, r1
 80161ec:	3314      	adds	r3, #20
 80161ee:	781b      	ldrb	r3, [r3, #0]
 80161f0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80161f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80161f6:	2b0a      	cmp	r3, #10
 80161f8:	d105      	bne.n	8016206 <etharp_find_entry+0x5e>
 80161fa:	7dfb      	ldrb	r3, [r7, #23]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d102      	bne.n	8016206 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016200:	8c3b      	ldrh	r3, [r7, #32]
 8016202:	847b      	strh	r3, [r7, #34]	; 0x22
 8016204:	e095      	b.n	8016332 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016206:	7dfb      	ldrb	r3, [r7, #23]
 8016208:	2b00      	cmp	r3, #0
 801620a:	f000 8092 	beq.w	8016332 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801620e:	7dfb      	ldrb	r3, [r7, #23]
 8016210:	2b01      	cmp	r3, #1
 8016212:	d009      	beq.n	8016228 <etharp_find_entry+0x80>
 8016214:	7dfb      	ldrb	r3, [r7, #23]
 8016216:	2b01      	cmp	r3, #1
 8016218:	d806      	bhi.n	8016228 <etharp_find_entry+0x80>
 801621a:	4b99      	ldr	r3, [pc, #612]	; (8016480 <etharp_find_entry+0x2d8>)
 801621c:	f240 1223 	movw	r2, #291	; 0x123
 8016220:	4998      	ldr	r1, [pc, #608]	; (8016484 <etharp_find_entry+0x2dc>)
 8016222:	4899      	ldr	r0, [pc, #612]	; (8016488 <etharp_find_entry+0x2e0>)
 8016224:	f002 fc9c 	bl	8018b60 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d020      	beq.n	8016270 <etharp_find_entry+0xc8>
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	6819      	ldr	r1, [r3, #0]
 8016232:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016236:	4891      	ldr	r0, [pc, #580]	; (801647c <etharp_find_entry+0x2d4>)
 8016238:	4613      	mov	r3, r2
 801623a:	005b      	lsls	r3, r3, #1
 801623c:	4413      	add	r3, r2
 801623e:	00db      	lsls	r3, r3, #3
 8016240:	4403      	add	r3, r0
 8016242:	3304      	adds	r3, #4
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	4299      	cmp	r1, r3
 8016248:	d112      	bne.n	8016270 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d00c      	beq.n	801626a <etharp_find_entry+0xc2>
 8016250:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016254:	4989      	ldr	r1, [pc, #548]	; (801647c <etharp_find_entry+0x2d4>)
 8016256:	4613      	mov	r3, r2
 8016258:	005b      	lsls	r3, r3, #1
 801625a:	4413      	add	r3, r2
 801625c:	00db      	lsls	r3, r3, #3
 801625e:	440b      	add	r3, r1
 8016260:	3308      	adds	r3, #8
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	687a      	ldr	r2, [r7, #4]
 8016266:	429a      	cmp	r2, r3
 8016268:	d102      	bne.n	8016270 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801626a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801626e:	e100      	b.n	8016472 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016270:	7dfb      	ldrb	r3, [r7, #23]
 8016272:	2b01      	cmp	r3, #1
 8016274:	d140      	bne.n	80162f8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016276:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801627a:	4980      	ldr	r1, [pc, #512]	; (801647c <etharp_find_entry+0x2d4>)
 801627c:	4613      	mov	r3, r2
 801627e:	005b      	lsls	r3, r3, #1
 8016280:	4413      	add	r3, r2
 8016282:	00db      	lsls	r3, r3, #3
 8016284:	440b      	add	r3, r1
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d01a      	beq.n	80162c2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801628c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016290:	497a      	ldr	r1, [pc, #488]	; (801647c <etharp_find_entry+0x2d4>)
 8016292:	4613      	mov	r3, r2
 8016294:	005b      	lsls	r3, r3, #1
 8016296:	4413      	add	r3, r2
 8016298:	00db      	lsls	r3, r3, #3
 801629a:	440b      	add	r3, r1
 801629c:	3312      	adds	r3, #18
 801629e:	881b      	ldrh	r3, [r3, #0]
 80162a0:	8bba      	ldrh	r2, [r7, #28]
 80162a2:	429a      	cmp	r2, r3
 80162a4:	d845      	bhi.n	8016332 <etharp_find_entry+0x18a>
            old_queue = i;
 80162a6:	8c3b      	ldrh	r3, [r7, #32]
 80162a8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80162aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162ae:	4973      	ldr	r1, [pc, #460]	; (801647c <etharp_find_entry+0x2d4>)
 80162b0:	4613      	mov	r3, r2
 80162b2:	005b      	lsls	r3, r3, #1
 80162b4:	4413      	add	r3, r2
 80162b6:	00db      	lsls	r3, r3, #3
 80162b8:	440b      	add	r3, r1
 80162ba:	3312      	adds	r3, #18
 80162bc:	881b      	ldrh	r3, [r3, #0]
 80162be:	83bb      	strh	r3, [r7, #28]
 80162c0:	e037      	b.n	8016332 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80162c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162c6:	496d      	ldr	r1, [pc, #436]	; (801647c <etharp_find_entry+0x2d4>)
 80162c8:	4613      	mov	r3, r2
 80162ca:	005b      	lsls	r3, r3, #1
 80162cc:	4413      	add	r3, r2
 80162ce:	00db      	lsls	r3, r3, #3
 80162d0:	440b      	add	r3, r1
 80162d2:	3312      	adds	r3, #18
 80162d4:	881b      	ldrh	r3, [r3, #0]
 80162d6:	8b7a      	ldrh	r2, [r7, #26]
 80162d8:	429a      	cmp	r2, r3
 80162da:	d82a      	bhi.n	8016332 <etharp_find_entry+0x18a>
            old_pending = i;
 80162dc:	8c3b      	ldrh	r3, [r7, #32]
 80162de:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80162e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162e4:	4965      	ldr	r1, [pc, #404]	; (801647c <etharp_find_entry+0x2d4>)
 80162e6:	4613      	mov	r3, r2
 80162e8:	005b      	lsls	r3, r3, #1
 80162ea:	4413      	add	r3, r2
 80162ec:	00db      	lsls	r3, r3, #3
 80162ee:	440b      	add	r3, r1
 80162f0:	3312      	adds	r3, #18
 80162f2:	881b      	ldrh	r3, [r3, #0]
 80162f4:	837b      	strh	r3, [r7, #26]
 80162f6:	e01c      	b.n	8016332 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80162f8:	7dfb      	ldrb	r3, [r7, #23]
 80162fa:	2b01      	cmp	r3, #1
 80162fc:	d919      	bls.n	8016332 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80162fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016302:	495e      	ldr	r1, [pc, #376]	; (801647c <etharp_find_entry+0x2d4>)
 8016304:	4613      	mov	r3, r2
 8016306:	005b      	lsls	r3, r3, #1
 8016308:	4413      	add	r3, r2
 801630a:	00db      	lsls	r3, r3, #3
 801630c:	440b      	add	r3, r1
 801630e:	3312      	adds	r3, #18
 8016310:	881b      	ldrh	r3, [r3, #0]
 8016312:	8b3a      	ldrh	r2, [r7, #24]
 8016314:	429a      	cmp	r2, r3
 8016316:	d80c      	bhi.n	8016332 <etharp_find_entry+0x18a>
            old_stable = i;
 8016318:	8c3b      	ldrh	r3, [r7, #32]
 801631a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801631c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016320:	4956      	ldr	r1, [pc, #344]	; (801647c <etharp_find_entry+0x2d4>)
 8016322:	4613      	mov	r3, r2
 8016324:	005b      	lsls	r3, r3, #1
 8016326:	4413      	add	r3, r2
 8016328:	00db      	lsls	r3, r3, #3
 801632a:	440b      	add	r3, r1
 801632c:	3312      	adds	r3, #18
 801632e:	881b      	ldrh	r3, [r3, #0]
 8016330:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016332:	8c3b      	ldrh	r3, [r7, #32]
 8016334:	3301      	adds	r3, #1
 8016336:	b29b      	uxth	r3, r3
 8016338:	843b      	strh	r3, [r7, #32]
 801633a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801633e:	2b09      	cmp	r3, #9
 8016340:	f77f af4c 	ble.w	80161dc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016344:	7afb      	ldrb	r3, [r7, #11]
 8016346:	f003 0302 	and.w	r3, r3, #2
 801634a:	2b00      	cmp	r3, #0
 801634c:	d108      	bne.n	8016360 <etharp_find_entry+0x1b8>
 801634e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016352:	2b0a      	cmp	r3, #10
 8016354:	d107      	bne.n	8016366 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016356:	7afb      	ldrb	r3, [r7, #11]
 8016358:	f003 0301 	and.w	r3, r3, #1
 801635c:	2b00      	cmp	r3, #0
 801635e:	d102      	bne.n	8016366 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016360:	f04f 33ff 	mov.w	r3, #4294967295
 8016364:	e085      	b.n	8016472 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016366:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801636a:	2b09      	cmp	r3, #9
 801636c:	dc02      	bgt.n	8016374 <etharp_find_entry+0x1cc>
    i = empty;
 801636e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016370:	843b      	strh	r3, [r7, #32]
 8016372:	e039      	b.n	80163e8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016374:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016378:	2b09      	cmp	r3, #9
 801637a:	dc14      	bgt.n	80163a6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801637c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801637e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016380:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016384:	493d      	ldr	r1, [pc, #244]	; (801647c <etharp_find_entry+0x2d4>)
 8016386:	4613      	mov	r3, r2
 8016388:	005b      	lsls	r3, r3, #1
 801638a:	4413      	add	r3, r2
 801638c:	00db      	lsls	r3, r3, #3
 801638e:	440b      	add	r3, r1
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d018      	beq.n	80163c8 <etharp_find_entry+0x220>
 8016396:	4b3a      	ldr	r3, [pc, #232]	; (8016480 <etharp_find_entry+0x2d8>)
 8016398:	f240 126d 	movw	r2, #365	; 0x16d
 801639c:	493b      	ldr	r1, [pc, #236]	; (801648c <etharp_find_entry+0x2e4>)
 801639e:	483a      	ldr	r0, [pc, #232]	; (8016488 <etharp_find_entry+0x2e0>)
 80163a0:	f002 fbde 	bl	8018b60 <iprintf>
 80163a4:	e010      	b.n	80163c8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80163a6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80163aa:	2b09      	cmp	r3, #9
 80163ac:	dc02      	bgt.n	80163b4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80163ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80163b0:	843b      	strh	r3, [r7, #32]
 80163b2:	e009      	b.n	80163c8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80163b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80163b8:	2b09      	cmp	r3, #9
 80163ba:	dc02      	bgt.n	80163c2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80163bc:	8bfb      	ldrh	r3, [r7, #30]
 80163be:	843b      	strh	r3, [r7, #32]
 80163c0:	e002      	b.n	80163c8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80163c2:	f04f 33ff 	mov.w	r3, #4294967295
 80163c6:	e054      	b.n	8016472 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80163c8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80163cc:	2b09      	cmp	r3, #9
 80163ce:	dd06      	ble.n	80163de <etharp_find_entry+0x236>
 80163d0:	4b2b      	ldr	r3, [pc, #172]	; (8016480 <etharp_find_entry+0x2d8>)
 80163d2:	f240 127f 	movw	r2, #383	; 0x17f
 80163d6:	492e      	ldr	r1, [pc, #184]	; (8016490 <etharp_find_entry+0x2e8>)
 80163d8:	482b      	ldr	r0, [pc, #172]	; (8016488 <etharp_find_entry+0x2e0>)
 80163da:	f002 fbc1 	bl	8018b60 <iprintf>
    etharp_free_entry(i);
 80163de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80163e2:	4618      	mov	r0, r3
 80163e4:	f7ff fe06 	bl	8015ff4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80163e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80163ec:	2b09      	cmp	r3, #9
 80163ee:	dd06      	ble.n	80163fe <etharp_find_entry+0x256>
 80163f0:	4b23      	ldr	r3, [pc, #140]	; (8016480 <etharp_find_entry+0x2d8>)
 80163f2:	f240 1283 	movw	r2, #387	; 0x183
 80163f6:	4926      	ldr	r1, [pc, #152]	; (8016490 <etharp_find_entry+0x2e8>)
 80163f8:	4823      	ldr	r0, [pc, #140]	; (8016488 <etharp_find_entry+0x2e0>)
 80163fa:	f002 fbb1 	bl	8018b60 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80163fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016402:	491e      	ldr	r1, [pc, #120]	; (801647c <etharp_find_entry+0x2d4>)
 8016404:	4613      	mov	r3, r2
 8016406:	005b      	lsls	r3, r3, #1
 8016408:	4413      	add	r3, r2
 801640a:	00db      	lsls	r3, r3, #3
 801640c:	440b      	add	r3, r1
 801640e:	3314      	adds	r3, #20
 8016410:	781b      	ldrb	r3, [r3, #0]
 8016412:	2b00      	cmp	r3, #0
 8016414:	d006      	beq.n	8016424 <etharp_find_entry+0x27c>
 8016416:	4b1a      	ldr	r3, [pc, #104]	; (8016480 <etharp_find_entry+0x2d8>)
 8016418:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801641c:	491d      	ldr	r1, [pc, #116]	; (8016494 <etharp_find_entry+0x2ec>)
 801641e:	481a      	ldr	r0, [pc, #104]	; (8016488 <etharp_find_entry+0x2e0>)
 8016420:	f002 fb9e 	bl	8018b60 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	2b00      	cmp	r3, #0
 8016428:	d00b      	beq.n	8016442 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801642a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	6819      	ldr	r1, [r3, #0]
 8016432:	4812      	ldr	r0, [pc, #72]	; (801647c <etharp_find_entry+0x2d4>)
 8016434:	4613      	mov	r3, r2
 8016436:	005b      	lsls	r3, r3, #1
 8016438:	4413      	add	r3, r2
 801643a:	00db      	lsls	r3, r3, #3
 801643c:	4403      	add	r3, r0
 801643e:	3304      	adds	r3, #4
 8016440:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016442:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016446:	490d      	ldr	r1, [pc, #52]	; (801647c <etharp_find_entry+0x2d4>)
 8016448:	4613      	mov	r3, r2
 801644a:	005b      	lsls	r3, r3, #1
 801644c:	4413      	add	r3, r2
 801644e:	00db      	lsls	r3, r3, #3
 8016450:	440b      	add	r3, r1
 8016452:	3312      	adds	r3, #18
 8016454:	2200      	movs	r2, #0
 8016456:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016458:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801645c:	4907      	ldr	r1, [pc, #28]	; (801647c <etharp_find_entry+0x2d4>)
 801645e:	4613      	mov	r3, r2
 8016460:	005b      	lsls	r3, r3, #1
 8016462:	4413      	add	r3, r2
 8016464:	00db      	lsls	r3, r3, #3
 8016466:	440b      	add	r3, r1
 8016468:	3308      	adds	r3, #8
 801646a:	687a      	ldr	r2, [r7, #4]
 801646c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801646e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016472:	4618      	mov	r0, r3
 8016474:	3728      	adds	r7, #40	; 0x28
 8016476:	46bd      	mov	sp, r7
 8016478:	bd80      	pop	{r7, pc}
 801647a:	bf00      	nop
 801647c:	24008ae0 	.word	0x24008ae0
 8016480:	0801c0f0 	.word	0x0801c0f0
 8016484:	0801c128 	.word	0x0801c128
 8016488:	0801c168 	.word	0x0801c168
 801648c:	0801c190 	.word	0x0801c190
 8016490:	0801c1a8 	.word	0x0801c1a8
 8016494:	0801c1bc 	.word	0x0801c1bc

08016498 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016498:	b580      	push	{r7, lr}
 801649a:	b088      	sub	sp, #32
 801649c:	af02      	add	r7, sp, #8
 801649e:	60f8      	str	r0, [r7, #12]
 80164a0:	60b9      	str	r1, [r7, #8]
 80164a2:	607a      	str	r2, [r7, #4]
 80164a4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80164ac:	2b06      	cmp	r3, #6
 80164ae:	d006      	beq.n	80164be <etharp_update_arp_entry+0x26>
 80164b0:	4b48      	ldr	r3, [pc, #288]	; (80165d4 <etharp_update_arp_entry+0x13c>)
 80164b2:	f240 12a9 	movw	r2, #425	; 0x1a9
 80164b6:	4948      	ldr	r1, [pc, #288]	; (80165d8 <etharp_update_arp_entry+0x140>)
 80164b8:	4848      	ldr	r0, [pc, #288]	; (80165dc <etharp_update_arp_entry+0x144>)
 80164ba:	f002 fb51 	bl	8018b60 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80164be:	68bb      	ldr	r3, [r7, #8]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d012      	beq.n	80164ea <etharp_update_arp_entry+0x52>
 80164c4:	68bb      	ldr	r3, [r7, #8]
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d00e      	beq.n	80164ea <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80164cc:	68bb      	ldr	r3, [r7, #8]
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	68f9      	ldr	r1, [r7, #12]
 80164d2:	4618      	mov	r0, r3
 80164d4:	f001 f924 	bl	8017720 <ip4_addr_isbroadcast_u32>
 80164d8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d105      	bne.n	80164ea <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80164de:	68bb      	ldr	r3, [r7, #8]
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80164e6:	2be0      	cmp	r3, #224	; 0xe0
 80164e8:	d102      	bne.n	80164f0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80164ea:	f06f 030f 	mvn.w	r3, #15
 80164ee:	e06c      	b.n	80165ca <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80164f0:	78fb      	ldrb	r3, [r7, #3]
 80164f2:	68fa      	ldr	r2, [r7, #12]
 80164f4:	4619      	mov	r1, r3
 80164f6:	68b8      	ldr	r0, [r7, #8]
 80164f8:	f7ff fe56 	bl	80161a8 <etharp_find_entry>
 80164fc:	4603      	mov	r3, r0
 80164fe:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016500:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016504:	2b00      	cmp	r3, #0
 8016506:	da02      	bge.n	801650e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016508:	8afb      	ldrh	r3, [r7, #22]
 801650a:	b25b      	sxtb	r3, r3
 801650c:	e05d      	b.n	80165ca <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801650e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016512:	4933      	ldr	r1, [pc, #204]	; (80165e0 <etharp_update_arp_entry+0x148>)
 8016514:	4613      	mov	r3, r2
 8016516:	005b      	lsls	r3, r3, #1
 8016518:	4413      	add	r3, r2
 801651a:	00db      	lsls	r3, r3, #3
 801651c:	440b      	add	r3, r1
 801651e:	3314      	adds	r3, #20
 8016520:	2202      	movs	r2, #2
 8016522:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8016524:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016528:	492d      	ldr	r1, [pc, #180]	; (80165e0 <etharp_update_arp_entry+0x148>)
 801652a:	4613      	mov	r3, r2
 801652c:	005b      	lsls	r3, r3, #1
 801652e:	4413      	add	r3, r2
 8016530:	00db      	lsls	r3, r3, #3
 8016532:	440b      	add	r3, r1
 8016534:	3308      	adds	r3, #8
 8016536:	68fa      	ldr	r2, [r7, #12]
 8016538:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801653a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801653e:	4613      	mov	r3, r2
 8016540:	005b      	lsls	r3, r3, #1
 8016542:	4413      	add	r3, r2
 8016544:	00db      	lsls	r3, r3, #3
 8016546:	3308      	adds	r3, #8
 8016548:	4a25      	ldr	r2, [pc, #148]	; (80165e0 <etharp_update_arp_entry+0x148>)
 801654a:	4413      	add	r3, r2
 801654c:	3304      	adds	r3, #4
 801654e:	2206      	movs	r2, #6
 8016550:	6879      	ldr	r1, [r7, #4]
 8016552:	4618      	mov	r0, r3
 8016554:	f002 fa59 	bl	8018a0a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016558:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801655c:	4920      	ldr	r1, [pc, #128]	; (80165e0 <etharp_update_arp_entry+0x148>)
 801655e:	4613      	mov	r3, r2
 8016560:	005b      	lsls	r3, r3, #1
 8016562:	4413      	add	r3, r2
 8016564:	00db      	lsls	r3, r3, #3
 8016566:	440b      	add	r3, r1
 8016568:	3312      	adds	r3, #18
 801656a:	2200      	movs	r2, #0
 801656c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801656e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016572:	491b      	ldr	r1, [pc, #108]	; (80165e0 <etharp_update_arp_entry+0x148>)
 8016574:	4613      	mov	r3, r2
 8016576:	005b      	lsls	r3, r3, #1
 8016578:	4413      	add	r3, r2
 801657a:	00db      	lsls	r3, r3, #3
 801657c:	440b      	add	r3, r1
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d021      	beq.n	80165c8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016584:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016588:	4915      	ldr	r1, [pc, #84]	; (80165e0 <etharp_update_arp_entry+0x148>)
 801658a:	4613      	mov	r3, r2
 801658c:	005b      	lsls	r3, r3, #1
 801658e:	4413      	add	r3, r2
 8016590:	00db      	lsls	r3, r3, #3
 8016592:	440b      	add	r3, r1
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016598:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801659c:	4910      	ldr	r1, [pc, #64]	; (80165e0 <etharp_update_arp_entry+0x148>)
 801659e:	4613      	mov	r3, r2
 80165a0:	005b      	lsls	r3, r3, #1
 80165a2:	4413      	add	r3, r2
 80165a4:	00db      	lsls	r3, r3, #3
 80165a6:	440b      	add	r3, r1
 80165a8:	2200      	movs	r2, #0
 80165aa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80165b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80165b6:	9300      	str	r3, [sp, #0]
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	6939      	ldr	r1, [r7, #16]
 80165bc:	68f8      	ldr	r0, [r7, #12]
 80165be:	f001 ffbd 	bl	801853c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80165c2:	6938      	ldr	r0, [r7, #16]
 80165c4:	f7f8 fbae 	bl	800ed24 <pbuf_free>
  }
  return ERR_OK;
 80165c8:	2300      	movs	r3, #0
}
 80165ca:	4618      	mov	r0, r3
 80165cc:	3718      	adds	r7, #24
 80165ce:	46bd      	mov	sp, r7
 80165d0:	bd80      	pop	{r7, pc}
 80165d2:	bf00      	nop
 80165d4:	0801c0f0 	.word	0x0801c0f0
 80165d8:	0801c1e8 	.word	0x0801c1e8
 80165dc:	0801c168 	.word	0x0801c168
 80165e0:	24008ae0 	.word	0x24008ae0

080165e4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80165e4:	b580      	push	{r7, lr}
 80165e6:	b084      	sub	sp, #16
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80165ec:	2300      	movs	r3, #0
 80165ee:	60fb      	str	r3, [r7, #12]
 80165f0:	e01e      	b.n	8016630 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80165f2:	4913      	ldr	r1, [pc, #76]	; (8016640 <etharp_cleanup_netif+0x5c>)
 80165f4:	68fa      	ldr	r2, [r7, #12]
 80165f6:	4613      	mov	r3, r2
 80165f8:	005b      	lsls	r3, r3, #1
 80165fa:	4413      	add	r3, r2
 80165fc:	00db      	lsls	r3, r3, #3
 80165fe:	440b      	add	r3, r1
 8016600:	3314      	adds	r3, #20
 8016602:	781b      	ldrb	r3, [r3, #0]
 8016604:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016606:	7afb      	ldrb	r3, [r7, #11]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d00e      	beq.n	801662a <etharp_cleanup_netif+0x46>
 801660c:	490c      	ldr	r1, [pc, #48]	; (8016640 <etharp_cleanup_netif+0x5c>)
 801660e:	68fa      	ldr	r2, [r7, #12]
 8016610:	4613      	mov	r3, r2
 8016612:	005b      	lsls	r3, r3, #1
 8016614:	4413      	add	r3, r2
 8016616:	00db      	lsls	r3, r3, #3
 8016618:	440b      	add	r3, r1
 801661a:	3308      	adds	r3, #8
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	687a      	ldr	r2, [r7, #4]
 8016620:	429a      	cmp	r2, r3
 8016622:	d102      	bne.n	801662a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016624:	68f8      	ldr	r0, [r7, #12]
 8016626:	f7ff fce5 	bl	8015ff4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	3301      	adds	r3, #1
 801662e:	60fb      	str	r3, [r7, #12]
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	2b09      	cmp	r3, #9
 8016634:	dddd      	ble.n	80165f2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8016636:	bf00      	nop
 8016638:	bf00      	nop
 801663a:	3710      	adds	r7, #16
 801663c:	46bd      	mov	sp, r7
 801663e:	bd80      	pop	{r7, pc}
 8016640:	24008ae0 	.word	0x24008ae0

08016644 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016644:	b5b0      	push	{r4, r5, r7, lr}
 8016646:	b08a      	sub	sp, #40	; 0x28
 8016648:	af04      	add	r7, sp, #16
 801664a:	6078      	str	r0, [r7, #4]
 801664c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801664e:	683b      	ldr	r3, [r7, #0]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d107      	bne.n	8016664 <etharp_input+0x20>
 8016654:	4b3d      	ldr	r3, [pc, #244]	; (801674c <etharp_input+0x108>)
 8016656:	f240 228a 	movw	r2, #650	; 0x28a
 801665a:	493d      	ldr	r1, [pc, #244]	; (8016750 <etharp_input+0x10c>)
 801665c:	483d      	ldr	r0, [pc, #244]	; (8016754 <etharp_input+0x110>)
 801665e:	f002 fa7f 	bl	8018b60 <iprintf>
 8016662:	e06f      	b.n	8016744 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	685b      	ldr	r3, [r3, #4]
 8016668:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801666a:	693b      	ldr	r3, [r7, #16]
 801666c:	881b      	ldrh	r3, [r3, #0]
 801666e:	b29b      	uxth	r3, r3
 8016670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016674:	d10c      	bne.n	8016690 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016676:	693b      	ldr	r3, [r7, #16]
 8016678:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801667a:	2b06      	cmp	r3, #6
 801667c:	d108      	bne.n	8016690 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801667e:	693b      	ldr	r3, [r7, #16]
 8016680:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016682:	2b04      	cmp	r3, #4
 8016684:	d104      	bne.n	8016690 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016686:	693b      	ldr	r3, [r7, #16]
 8016688:	885b      	ldrh	r3, [r3, #2]
 801668a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801668c:	2b08      	cmp	r3, #8
 801668e:	d003      	beq.n	8016698 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016690:	6878      	ldr	r0, [r7, #4]
 8016692:	f7f8 fb47 	bl	800ed24 <pbuf_free>
    return;
 8016696:	e055      	b.n	8016744 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016698:	693b      	ldr	r3, [r7, #16]
 801669a:	330e      	adds	r3, #14
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80166a0:	693b      	ldr	r3, [r7, #16]
 80166a2:	3318      	adds	r3, #24
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80166a8:	683b      	ldr	r3, [r7, #0]
 80166aa:	3304      	adds	r3, #4
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d102      	bne.n	80166b8 <etharp_input+0x74>
    for_us = 0;
 80166b2:	2300      	movs	r3, #0
 80166b4:	75fb      	strb	r3, [r7, #23]
 80166b6:	e009      	b.n	80166cc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80166b8:	68ba      	ldr	r2, [r7, #8]
 80166ba:	683b      	ldr	r3, [r7, #0]
 80166bc:	3304      	adds	r3, #4
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	429a      	cmp	r2, r3
 80166c2:	bf0c      	ite	eq
 80166c4:	2301      	moveq	r3, #1
 80166c6:	2300      	movne	r3, #0
 80166c8:	b2db      	uxtb	r3, r3
 80166ca:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80166cc:	693b      	ldr	r3, [r7, #16]
 80166ce:	f103 0208 	add.w	r2, r3, #8
 80166d2:	7dfb      	ldrb	r3, [r7, #23]
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d001      	beq.n	80166dc <etharp_input+0x98>
 80166d8:	2301      	movs	r3, #1
 80166da:	e000      	b.n	80166de <etharp_input+0x9a>
 80166dc:	2302      	movs	r3, #2
 80166de:	f107 010c 	add.w	r1, r7, #12
 80166e2:	6838      	ldr	r0, [r7, #0]
 80166e4:	f7ff fed8 	bl	8016498 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80166e8:	693b      	ldr	r3, [r7, #16]
 80166ea:	88db      	ldrh	r3, [r3, #6]
 80166ec:	b29b      	uxth	r3, r3
 80166ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80166f2:	d003      	beq.n	80166fc <etharp_input+0xb8>
 80166f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80166f8:	d01e      	beq.n	8016738 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80166fa:	e020      	b.n	801673e <etharp_input+0xfa>
      if (for_us) {
 80166fc:	7dfb      	ldrb	r3, [r7, #23]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d01c      	beq.n	801673c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016702:	683b      	ldr	r3, [r7, #0]
 8016704:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016708:	693b      	ldr	r3, [r7, #16]
 801670a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801670e:	683b      	ldr	r3, [r7, #0]
 8016710:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8016714:	683b      	ldr	r3, [r7, #0]
 8016716:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016718:	693a      	ldr	r2, [r7, #16]
 801671a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801671c:	2102      	movs	r1, #2
 801671e:	9103      	str	r1, [sp, #12]
 8016720:	f107 010c 	add.w	r1, r7, #12
 8016724:	9102      	str	r1, [sp, #8]
 8016726:	9201      	str	r2, [sp, #4]
 8016728:	9300      	str	r3, [sp, #0]
 801672a:	462b      	mov	r3, r5
 801672c:	4622      	mov	r2, r4
 801672e:	4601      	mov	r1, r0
 8016730:	6838      	ldr	r0, [r7, #0]
 8016732:	f000 faeb 	bl	8016d0c <etharp_raw>
      break;
 8016736:	e001      	b.n	801673c <etharp_input+0xf8>
      break;
 8016738:	bf00      	nop
 801673a:	e000      	b.n	801673e <etharp_input+0xfa>
      break;
 801673c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801673e:	6878      	ldr	r0, [r7, #4]
 8016740:	f7f8 faf0 	bl	800ed24 <pbuf_free>
}
 8016744:	3718      	adds	r7, #24
 8016746:	46bd      	mov	sp, r7
 8016748:	bdb0      	pop	{r4, r5, r7, pc}
 801674a:	bf00      	nop
 801674c:	0801c0f0 	.word	0x0801c0f0
 8016750:	0801c240 	.word	0x0801c240
 8016754:	0801c168 	.word	0x0801c168

08016758 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016758:	b580      	push	{r7, lr}
 801675a:	b086      	sub	sp, #24
 801675c:	af02      	add	r7, sp, #8
 801675e:	60f8      	str	r0, [r7, #12]
 8016760:	60b9      	str	r1, [r7, #8]
 8016762:	4613      	mov	r3, r2
 8016764:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016766:	79fa      	ldrb	r2, [r7, #7]
 8016768:	4944      	ldr	r1, [pc, #272]	; (801687c <etharp_output_to_arp_index+0x124>)
 801676a:	4613      	mov	r3, r2
 801676c:	005b      	lsls	r3, r3, #1
 801676e:	4413      	add	r3, r2
 8016770:	00db      	lsls	r3, r3, #3
 8016772:	440b      	add	r3, r1
 8016774:	3314      	adds	r3, #20
 8016776:	781b      	ldrb	r3, [r3, #0]
 8016778:	2b01      	cmp	r3, #1
 801677a:	d806      	bhi.n	801678a <etharp_output_to_arp_index+0x32>
 801677c:	4b40      	ldr	r3, [pc, #256]	; (8016880 <etharp_output_to_arp_index+0x128>)
 801677e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016782:	4940      	ldr	r1, [pc, #256]	; (8016884 <etharp_output_to_arp_index+0x12c>)
 8016784:	4840      	ldr	r0, [pc, #256]	; (8016888 <etharp_output_to_arp_index+0x130>)
 8016786:	f002 f9eb 	bl	8018b60 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801678a:	79fa      	ldrb	r2, [r7, #7]
 801678c:	493b      	ldr	r1, [pc, #236]	; (801687c <etharp_output_to_arp_index+0x124>)
 801678e:	4613      	mov	r3, r2
 8016790:	005b      	lsls	r3, r3, #1
 8016792:	4413      	add	r3, r2
 8016794:	00db      	lsls	r3, r3, #3
 8016796:	440b      	add	r3, r1
 8016798:	3314      	adds	r3, #20
 801679a:	781b      	ldrb	r3, [r3, #0]
 801679c:	2b02      	cmp	r3, #2
 801679e:	d153      	bne.n	8016848 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80167a0:	79fa      	ldrb	r2, [r7, #7]
 80167a2:	4936      	ldr	r1, [pc, #216]	; (801687c <etharp_output_to_arp_index+0x124>)
 80167a4:	4613      	mov	r3, r2
 80167a6:	005b      	lsls	r3, r3, #1
 80167a8:	4413      	add	r3, r2
 80167aa:	00db      	lsls	r3, r3, #3
 80167ac:	440b      	add	r3, r1
 80167ae:	3312      	adds	r3, #18
 80167b0:	881b      	ldrh	r3, [r3, #0]
 80167b2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80167b6:	d919      	bls.n	80167ec <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80167b8:	79fa      	ldrb	r2, [r7, #7]
 80167ba:	4613      	mov	r3, r2
 80167bc:	005b      	lsls	r3, r3, #1
 80167be:	4413      	add	r3, r2
 80167c0:	00db      	lsls	r3, r3, #3
 80167c2:	4a2e      	ldr	r2, [pc, #184]	; (801687c <etharp_output_to_arp_index+0x124>)
 80167c4:	4413      	add	r3, r2
 80167c6:	3304      	adds	r3, #4
 80167c8:	4619      	mov	r1, r3
 80167ca:	68f8      	ldr	r0, [r7, #12]
 80167cc:	f000 fb4c 	bl	8016e68 <etharp_request>
 80167d0:	4603      	mov	r3, r0
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d138      	bne.n	8016848 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80167d6:	79fa      	ldrb	r2, [r7, #7]
 80167d8:	4928      	ldr	r1, [pc, #160]	; (801687c <etharp_output_to_arp_index+0x124>)
 80167da:	4613      	mov	r3, r2
 80167dc:	005b      	lsls	r3, r3, #1
 80167de:	4413      	add	r3, r2
 80167e0:	00db      	lsls	r3, r3, #3
 80167e2:	440b      	add	r3, r1
 80167e4:	3314      	adds	r3, #20
 80167e6:	2203      	movs	r2, #3
 80167e8:	701a      	strb	r2, [r3, #0]
 80167ea:	e02d      	b.n	8016848 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80167ec:	79fa      	ldrb	r2, [r7, #7]
 80167ee:	4923      	ldr	r1, [pc, #140]	; (801687c <etharp_output_to_arp_index+0x124>)
 80167f0:	4613      	mov	r3, r2
 80167f2:	005b      	lsls	r3, r3, #1
 80167f4:	4413      	add	r3, r2
 80167f6:	00db      	lsls	r3, r3, #3
 80167f8:	440b      	add	r3, r1
 80167fa:	3312      	adds	r3, #18
 80167fc:	881b      	ldrh	r3, [r3, #0]
 80167fe:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016802:	d321      	bcc.n	8016848 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016804:	79fa      	ldrb	r2, [r7, #7]
 8016806:	4613      	mov	r3, r2
 8016808:	005b      	lsls	r3, r3, #1
 801680a:	4413      	add	r3, r2
 801680c:	00db      	lsls	r3, r3, #3
 801680e:	4a1b      	ldr	r2, [pc, #108]	; (801687c <etharp_output_to_arp_index+0x124>)
 8016810:	4413      	add	r3, r2
 8016812:	1d19      	adds	r1, r3, #4
 8016814:	79fa      	ldrb	r2, [r7, #7]
 8016816:	4613      	mov	r3, r2
 8016818:	005b      	lsls	r3, r3, #1
 801681a:	4413      	add	r3, r2
 801681c:	00db      	lsls	r3, r3, #3
 801681e:	3308      	adds	r3, #8
 8016820:	4a16      	ldr	r2, [pc, #88]	; (801687c <etharp_output_to_arp_index+0x124>)
 8016822:	4413      	add	r3, r2
 8016824:	3304      	adds	r3, #4
 8016826:	461a      	mov	r2, r3
 8016828:	68f8      	ldr	r0, [r7, #12]
 801682a:	f000 fafb 	bl	8016e24 <etharp_request_dst>
 801682e:	4603      	mov	r3, r0
 8016830:	2b00      	cmp	r3, #0
 8016832:	d109      	bne.n	8016848 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016834:	79fa      	ldrb	r2, [r7, #7]
 8016836:	4911      	ldr	r1, [pc, #68]	; (801687c <etharp_output_to_arp_index+0x124>)
 8016838:	4613      	mov	r3, r2
 801683a:	005b      	lsls	r3, r3, #1
 801683c:	4413      	add	r3, r2
 801683e:	00db      	lsls	r3, r3, #3
 8016840:	440b      	add	r3, r1
 8016842:	3314      	adds	r3, #20
 8016844:	2203      	movs	r2, #3
 8016846:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801684e:	79fa      	ldrb	r2, [r7, #7]
 8016850:	4613      	mov	r3, r2
 8016852:	005b      	lsls	r3, r3, #1
 8016854:	4413      	add	r3, r2
 8016856:	00db      	lsls	r3, r3, #3
 8016858:	3308      	adds	r3, #8
 801685a:	4a08      	ldr	r2, [pc, #32]	; (801687c <etharp_output_to_arp_index+0x124>)
 801685c:	4413      	add	r3, r2
 801685e:	3304      	adds	r3, #4
 8016860:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016864:	9200      	str	r2, [sp, #0]
 8016866:	460a      	mov	r2, r1
 8016868:	68b9      	ldr	r1, [r7, #8]
 801686a:	68f8      	ldr	r0, [r7, #12]
 801686c:	f001 fe66 	bl	801853c <ethernet_output>
 8016870:	4603      	mov	r3, r0
}
 8016872:	4618      	mov	r0, r3
 8016874:	3710      	adds	r7, #16
 8016876:	46bd      	mov	sp, r7
 8016878:	bd80      	pop	{r7, pc}
 801687a:	bf00      	nop
 801687c:	24008ae0 	.word	0x24008ae0
 8016880:	0801c0f0 	.word	0x0801c0f0
 8016884:	0801c260 	.word	0x0801c260
 8016888:	0801c168 	.word	0x0801c168

0801688c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801688c:	b580      	push	{r7, lr}
 801688e:	b08a      	sub	sp, #40	; 0x28
 8016890:	af02      	add	r7, sp, #8
 8016892:	60f8      	str	r0, [r7, #12]
 8016894:	60b9      	str	r1, [r7, #8]
 8016896:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d106      	bne.n	80168b0 <etharp_output+0x24>
 80168a2:	4b73      	ldr	r3, [pc, #460]	; (8016a70 <etharp_output+0x1e4>)
 80168a4:	f240 321e 	movw	r2, #798	; 0x31e
 80168a8:	4972      	ldr	r1, [pc, #456]	; (8016a74 <etharp_output+0x1e8>)
 80168aa:	4873      	ldr	r0, [pc, #460]	; (8016a78 <etharp_output+0x1ec>)
 80168ac:	f002 f958 	bl	8018b60 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80168b0:	68bb      	ldr	r3, [r7, #8]
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d106      	bne.n	80168c4 <etharp_output+0x38>
 80168b6:	4b6e      	ldr	r3, [pc, #440]	; (8016a70 <etharp_output+0x1e4>)
 80168b8:	f240 321f 	movw	r2, #799	; 0x31f
 80168bc:	496f      	ldr	r1, [pc, #444]	; (8016a7c <etharp_output+0x1f0>)
 80168be:	486e      	ldr	r0, [pc, #440]	; (8016a78 <etharp_output+0x1ec>)
 80168c0:	f002 f94e 	bl	8018b60 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d106      	bne.n	80168d8 <etharp_output+0x4c>
 80168ca:	4b69      	ldr	r3, [pc, #420]	; (8016a70 <etharp_output+0x1e4>)
 80168cc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80168d0:	496b      	ldr	r1, [pc, #428]	; (8016a80 <etharp_output+0x1f4>)
 80168d2:	4869      	ldr	r0, [pc, #420]	; (8016a78 <etharp_output+0x1ec>)
 80168d4:	f002 f944 	bl	8018b60 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80168d8:	687b      	ldr	r3, [r7, #4]
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	68f9      	ldr	r1, [r7, #12]
 80168de:	4618      	mov	r0, r3
 80168e0:	f000 ff1e 	bl	8017720 <ip4_addr_isbroadcast_u32>
 80168e4:	4603      	mov	r3, r0
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d002      	beq.n	80168f0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80168ea:	4b66      	ldr	r3, [pc, #408]	; (8016a84 <etharp_output+0x1f8>)
 80168ec:	61fb      	str	r3, [r7, #28]
 80168ee:	e0af      	b.n	8016a50 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80168f8:	2be0      	cmp	r3, #224	; 0xe0
 80168fa:	d118      	bne.n	801692e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80168fc:	2301      	movs	r3, #1
 80168fe:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016900:	2300      	movs	r3, #0
 8016902:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016904:	235e      	movs	r3, #94	; 0x5e
 8016906:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	3301      	adds	r3, #1
 801690c:	781b      	ldrb	r3, [r3, #0]
 801690e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016912:	b2db      	uxtb	r3, r3
 8016914:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	3302      	adds	r3, #2
 801691a:	781b      	ldrb	r3, [r3, #0]
 801691c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	3303      	adds	r3, #3
 8016922:	781b      	ldrb	r3, [r3, #0]
 8016924:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016926:	f107 0310 	add.w	r3, r7, #16
 801692a:	61fb      	str	r3, [r7, #28]
 801692c:	e090      	b.n	8016a50 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	681a      	ldr	r2, [r3, #0]
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	3304      	adds	r3, #4
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	405a      	eors	r2, r3
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	3308      	adds	r3, #8
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	4013      	ands	r3, r2
 8016942:	2b00      	cmp	r3, #0
 8016944:	d012      	beq.n	801696c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	681b      	ldr	r3, [r3, #0]
 801694a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801694c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016950:	4293      	cmp	r3, r2
 8016952:	d00b      	beq.n	801696c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	330c      	adds	r3, #12
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	2b00      	cmp	r3, #0
 801695c:	d003      	beq.n	8016966 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	330c      	adds	r3, #12
 8016962:	61bb      	str	r3, [r7, #24]
 8016964:	e002      	b.n	801696c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016966:	f06f 0303 	mvn.w	r3, #3
 801696a:	e07d      	b.n	8016a68 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801696c:	4b46      	ldr	r3, [pc, #280]	; (8016a88 <etharp_output+0x1fc>)
 801696e:	781b      	ldrb	r3, [r3, #0]
 8016970:	4619      	mov	r1, r3
 8016972:	4a46      	ldr	r2, [pc, #280]	; (8016a8c <etharp_output+0x200>)
 8016974:	460b      	mov	r3, r1
 8016976:	005b      	lsls	r3, r3, #1
 8016978:	440b      	add	r3, r1
 801697a:	00db      	lsls	r3, r3, #3
 801697c:	4413      	add	r3, r2
 801697e:	3314      	adds	r3, #20
 8016980:	781b      	ldrb	r3, [r3, #0]
 8016982:	2b01      	cmp	r3, #1
 8016984:	d925      	bls.n	80169d2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016986:	4b40      	ldr	r3, [pc, #256]	; (8016a88 <etharp_output+0x1fc>)
 8016988:	781b      	ldrb	r3, [r3, #0]
 801698a:	4619      	mov	r1, r3
 801698c:	4a3f      	ldr	r2, [pc, #252]	; (8016a8c <etharp_output+0x200>)
 801698e:	460b      	mov	r3, r1
 8016990:	005b      	lsls	r3, r3, #1
 8016992:	440b      	add	r3, r1
 8016994:	00db      	lsls	r3, r3, #3
 8016996:	4413      	add	r3, r2
 8016998:	3308      	adds	r3, #8
 801699a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801699c:	68fa      	ldr	r2, [r7, #12]
 801699e:	429a      	cmp	r2, r3
 80169a0:	d117      	bne.n	80169d2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80169a2:	69bb      	ldr	r3, [r7, #24]
 80169a4:	681a      	ldr	r2, [r3, #0]
 80169a6:	4b38      	ldr	r3, [pc, #224]	; (8016a88 <etharp_output+0x1fc>)
 80169a8:	781b      	ldrb	r3, [r3, #0]
 80169aa:	4618      	mov	r0, r3
 80169ac:	4937      	ldr	r1, [pc, #220]	; (8016a8c <etharp_output+0x200>)
 80169ae:	4603      	mov	r3, r0
 80169b0:	005b      	lsls	r3, r3, #1
 80169b2:	4403      	add	r3, r0
 80169b4:	00db      	lsls	r3, r3, #3
 80169b6:	440b      	add	r3, r1
 80169b8:	3304      	adds	r3, #4
 80169ba:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80169bc:	429a      	cmp	r2, r3
 80169be:	d108      	bne.n	80169d2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80169c0:	4b31      	ldr	r3, [pc, #196]	; (8016a88 <etharp_output+0x1fc>)
 80169c2:	781b      	ldrb	r3, [r3, #0]
 80169c4:	461a      	mov	r2, r3
 80169c6:	68b9      	ldr	r1, [r7, #8]
 80169c8:	68f8      	ldr	r0, [r7, #12]
 80169ca:	f7ff fec5 	bl	8016758 <etharp_output_to_arp_index>
 80169ce:	4603      	mov	r3, r0
 80169d0:	e04a      	b.n	8016a68 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80169d2:	2300      	movs	r3, #0
 80169d4:	75fb      	strb	r3, [r7, #23]
 80169d6:	e031      	b.n	8016a3c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80169d8:	7dfa      	ldrb	r2, [r7, #23]
 80169da:	492c      	ldr	r1, [pc, #176]	; (8016a8c <etharp_output+0x200>)
 80169dc:	4613      	mov	r3, r2
 80169de:	005b      	lsls	r3, r3, #1
 80169e0:	4413      	add	r3, r2
 80169e2:	00db      	lsls	r3, r3, #3
 80169e4:	440b      	add	r3, r1
 80169e6:	3314      	adds	r3, #20
 80169e8:	781b      	ldrb	r3, [r3, #0]
 80169ea:	2b01      	cmp	r3, #1
 80169ec:	d923      	bls.n	8016a36 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80169ee:	7dfa      	ldrb	r2, [r7, #23]
 80169f0:	4926      	ldr	r1, [pc, #152]	; (8016a8c <etharp_output+0x200>)
 80169f2:	4613      	mov	r3, r2
 80169f4:	005b      	lsls	r3, r3, #1
 80169f6:	4413      	add	r3, r2
 80169f8:	00db      	lsls	r3, r3, #3
 80169fa:	440b      	add	r3, r1
 80169fc:	3308      	adds	r3, #8
 80169fe:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016a00:	68fa      	ldr	r2, [r7, #12]
 8016a02:	429a      	cmp	r2, r3
 8016a04:	d117      	bne.n	8016a36 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016a06:	69bb      	ldr	r3, [r7, #24]
 8016a08:	6819      	ldr	r1, [r3, #0]
 8016a0a:	7dfa      	ldrb	r2, [r7, #23]
 8016a0c:	481f      	ldr	r0, [pc, #124]	; (8016a8c <etharp_output+0x200>)
 8016a0e:	4613      	mov	r3, r2
 8016a10:	005b      	lsls	r3, r3, #1
 8016a12:	4413      	add	r3, r2
 8016a14:	00db      	lsls	r3, r3, #3
 8016a16:	4403      	add	r3, r0
 8016a18:	3304      	adds	r3, #4
 8016a1a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016a1c:	4299      	cmp	r1, r3
 8016a1e:	d10a      	bne.n	8016a36 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016a20:	4a19      	ldr	r2, [pc, #100]	; (8016a88 <etharp_output+0x1fc>)
 8016a22:	7dfb      	ldrb	r3, [r7, #23]
 8016a24:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016a26:	7dfb      	ldrb	r3, [r7, #23]
 8016a28:	461a      	mov	r2, r3
 8016a2a:	68b9      	ldr	r1, [r7, #8]
 8016a2c:	68f8      	ldr	r0, [r7, #12]
 8016a2e:	f7ff fe93 	bl	8016758 <etharp_output_to_arp_index>
 8016a32:	4603      	mov	r3, r0
 8016a34:	e018      	b.n	8016a68 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016a36:	7dfb      	ldrb	r3, [r7, #23]
 8016a38:	3301      	adds	r3, #1
 8016a3a:	75fb      	strb	r3, [r7, #23]
 8016a3c:	7dfb      	ldrb	r3, [r7, #23]
 8016a3e:	2b09      	cmp	r3, #9
 8016a40:	d9ca      	bls.n	80169d8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016a42:	68ba      	ldr	r2, [r7, #8]
 8016a44:	69b9      	ldr	r1, [r7, #24]
 8016a46:	68f8      	ldr	r0, [r7, #12]
 8016a48:	f000 f822 	bl	8016a90 <etharp_query>
 8016a4c:	4603      	mov	r3, r0
 8016a4e:	e00b      	b.n	8016a68 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016a56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016a5a:	9300      	str	r3, [sp, #0]
 8016a5c:	69fb      	ldr	r3, [r7, #28]
 8016a5e:	68b9      	ldr	r1, [r7, #8]
 8016a60:	68f8      	ldr	r0, [r7, #12]
 8016a62:	f001 fd6b 	bl	801853c <ethernet_output>
 8016a66:	4603      	mov	r3, r0
}
 8016a68:	4618      	mov	r0, r3
 8016a6a:	3720      	adds	r7, #32
 8016a6c:	46bd      	mov	sp, r7
 8016a6e:	bd80      	pop	{r7, pc}
 8016a70:	0801c0f0 	.word	0x0801c0f0
 8016a74:	0801c240 	.word	0x0801c240
 8016a78:	0801c168 	.word	0x0801c168
 8016a7c:	0801c290 	.word	0x0801c290
 8016a80:	0801c230 	.word	0x0801c230
 8016a84:	0801ebc4 	.word	0x0801ebc4
 8016a88:	24008bd0 	.word	0x24008bd0
 8016a8c:	24008ae0 	.word	0x24008ae0

08016a90 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016a90:	b580      	push	{r7, lr}
 8016a92:	b08c      	sub	sp, #48	; 0x30
 8016a94:	af02      	add	r7, sp, #8
 8016a96:	60f8      	str	r0, [r7, #12]
 8016a98:	60b9      	str	r1, [r7, #8]
 8016a9a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016a9c:	68fb      	ldr	r3, [r7, #12]
 8016a9e:	3326      	adds	r3, #38	; 0x26
 8016aa0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016aa2:	23ff      	movs	r3, #255	; 0xff
 8016aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016aa8:	2300      	movs	r3, #0
 8016aaa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016aac:	68bb      	ldr	r3, [r7, #8]
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	68f9      	ldr	r1, [r7, #12]
 8016ab2:	4618      	mov	r0, r3
 8016ab4:	f000 fe34 	bl	8017720 <ip4_addr_isbroadcast_u32>
 8016ab8:	4603      	mov	r3, r0
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d10c      	bne.n	8016ad8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016abe:	68bb      	ldr	r3, [r7, #8]
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016ac6:	2be0      	cmp	r3, #224	; 0xe0
 8016ac8:	d006      	beq.n	8016ad8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016aca:	68bb      	ldr	r3, [r7, #8]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d003      	beq.n	8016ad8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016ad0:	68bb      	ldr	r3, [r7, #8]
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d102      	bne.n	8016ade <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016ad8:	f06f 030f 	mvn.w	r3, #15
 8016adc:	e101      	b.n	8016ce2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016ade:	68fa      	ldr	r2, [r7, #12]
 8016ae0:	2101      	movs	r1, #1
 8016ae2:	68b8      	ldr	r0, [r7, #8]
 8016ae4:	f7ff fb60 	bl	80161a8 <etharp_find_entry>
 8016ae8:	4603      	mov	r3, r0
 8016aea:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016aec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	da02      	bge.n	8016afa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016af4:	8a7b      	ldrh	r3, [r7, #18]
 8016af6:	b25b      	sxtb	r3, r3
 8016af8:	e0f3      	b.n	8016ce2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016afa:	8a7b      	ldrh	r3, [r7, #18]
 8016afc:	2b7e      	cmp	r3, #126	; 0x7e
 8016afe:	d906      	bls.n	8016b0e <etharp_query+0x7e>
 8016b00:	4b7a      	ldr	r3, [pc, #488]	; (8016cec <etharp_query+0x25c>)
 8016b02:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016b06:	497a      	ldr	r1, [pc, #488]	; (8016cf0 <etharp_query+0x260>)
 8016b08:	487a      	ldr	r0, [pc, #488]	; (8016cf4 <etharp_query+0x264>)
 8016b0a:	f002 f829 	bl	8018b60 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016b0e:	8a7b      	ldrh	r3, [r7, #18]
 8016b10:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016b12:	7c7a      	ldrb	r2, [r7, #17]
 8016b14:	4978      	ldr	r1, [pc, #480]	; (8016cf8 <etharp_query+0x268>)
 8016b16:	4613      	mov	r3, r2
 8016b18:	005b      	lsls	r3, r3, #1
 8016b1a:	4413      	add	r3, r2
 8016b1c:	00db      	lsls	r3, r3, #3
 8016b1e:	440b      	add	r3, r1
 8016b20:	3314      	adds	r3, #20
 8016b22:	781b      	ldrb	r3, [r3, #0]
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d115      	bne.n	8016b54 <etharp_query+0xc4>
    is_new_entry = 1;
 8016b28:	2301      	movs	r3, #1
 8016b2a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016b2c:	7c7a      	ldrb	r2, [r7, #17]
 8016b2e:	4972      	ldr	r1, [pc, #456]	; (8016cf8 <etharp_query+0x268>)
 8016b30:	4613      	mov	r3, r2
 8016b32:	005b      	lsls	r3, r3, #1
 8016b34:	4413      	add	r3, r2
 8016b36:	00db      	lsls	r3, r3, #3
 8016b38:	440b      	add	r3, r1
 8016b3a:	3314      	adds	r3, #20
 8016b3c:	2201      	movs	r2, #1
 8016b3e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016b40:	7c7a      	ldrb	r2, [r7, #17]
 8016b42:	496d      	ldr	r1, [pc, #436]	; (8016cf8 <etharp_query+0x268>)
 8016b44:	4613      	mov	r3, r2
 8016b46:	005b      	lsls	r3, r3, #1
 8016b48:	4413      	add	r3, r2
 8016b4a:	00db      	lsls	r3, r3, #3
 8016b4c:	440b      	add	r3, r1
 8016b4e:	3308      	adds	r3, #8
 8016b50:	68fa      	ldr	r2, [r7, #12]
 8016b52:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016b54:	7c7a      	ldrb	r2, [r7, #17]
 8016b56:	4968      	ldr	r1, [pc, #416]	; (8016cf8 <etharp_query+0x268>)
 8016b58:	4613      	mov	r3, r2
 8016b5a:	005b      	lsls	r3, r3, #1
 8016b5c:	4413      	add	r3, r2
 8016b5e:	00db      	lsls	r3, r3, #3
 8016b60:	440b      	add	r3, r1
 8016b62:	3314      	adds	r3, #20
 8016b64:	781b      	ldrb	r3, [r3, #0]
 8016b66:	2b01      	cmp	r3, #1
 8016b68:	d011      	beq.n	8016b8e <etharp_query+0xfe>
 8016b6a:	7c7a      	ldrb	r2, [r7, #17]
 8016b6c:	4962      	ldr	r1, [pc, #392]	; (8016cf8 <etharp_query+0x268>)
 8016b6e:	4613      	mov	r3, r2
 8016b70:	005b      	lsls	r3, r3, #1
 8016b72:	4413      	add	r3, r2
 8016b74:	00db      	lsls	r3, r3, #3
 8016b76:	440b      	add	r3, r1
 8016b78:	3314      	adds	r3, #20
 8016b7a:	781b      	ldrb	r3, [r3, #0]
 8016b7c:	2b01      	cmp	r3, #1
 8016b7e:	d806      	bhi.n	8016b8e <etharp_query+0xfe>
 8016b80:	4b5a      	ldr	r3, [pc, #360]	; (8016cec <etharp_query+0x25c>)
 8016b82:	f240 32cd 	movw	r2, #973	; 0x3cd
 8016b86:	495d      	ldr	r1, [pc, #372]	; (8016cfc <etharp_query+0x26c>)
 8016b88:	485a      	ldr	r0, [pc, #360]	; (8016cf4 <etharp_query+0x264>)
 8016b8a:	f001 ffe9 	bl	8018b60 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016b8e:	6a3b      	ldr	r3, [r7, #32]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d102      	bne.n	8016b9a <etharp_query+0x10a>
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d10c      	bne.n	8016bb4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016b9a:	68b9      	ldr	r1, [r7, #8]
 8016b9c:	68f8      	ldr	r0, [r7, #12]
 8016b9e:	f000 f963 	bl	8016e68 <etharp_request>
 8016ba2:	4603      	mov	r3, r0
 8016ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d102      	bne.n	8016bb4 <etharp_query+0x124>
      return result;
 8016bae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016bb2:	e096      	b.n	8016ce2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d106      	bne.n	8016bc8 <etharp_query+0x138>
 8016bba:	4b4c      	ldr	r3, [pc, #304]	; (8016cec <etharp_query+0x25c>)
 8016bbc:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016bc0:	494f      	ldr	r1, [pc, #316]	; (8016d00 <etharp_query+0x270>)
 8016bc2:	484c      	ldr	r0, [pc, #304]	; (8016cf4 <etharp_query+0x264>)
 8016bc4:	f001 ffcc 	bl	8018b60 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016bc8:	7c7a      	ldrb	r2, [r7, #17]
 8016bca:	494b      	ldr	r1, [pc, #300]	; (8016cf8 <etharp_query+0x268>)
 8016bcc:	4613      	mov	r3, r2
 8016bce:	005b      	lsls	r3, r3, #1
 8016bd0:	4413      	add	r3, r2
 8016bd2:	00db      	lsls	r3, r3, #3
 8016bd4:	440b      	add	r3, r1
 8016bd6:	3314      	adds	r3, #20
 8016bd8:	781b      	ldrb	r3, [r3, #0]
 8016bda:	2b01      	cmp	r3, #1
 8016bdc:	d917      	bls.n	8016c0e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016bde:	4a49      	ldr	r2, [pc, #292]	; (8016d04 <etharp_query+0x274>)
 8016be0:	7c7b      	ldrb	r3, [r7, #17]
 8016be2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016be4:	7c7a      	ldrb	r2, [r7, #17]
 8016be6:	4613      	mov	r3, r2
 8016be8:	005b      	lsls	r3, r3, #1
 8016bea:	4413      	add	r3, r2
 8016bec:	00db      	lsls	r3, r3, #3
 8016bee:	3308      	adds	r3, #8
 8016bf0:	4a41      	ldr	r2, [pc, #260]	; (8016cf8 <etharp_query+0x268>)
 8016bf2:	4413      	add	r3, r2
 8016bf4:	3304      	adds	r3, #4
 8016bf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016bfa:	9200      	str	r2, [sp, #0]
 8016bfc:	697a      	ldr	r2, [r7, #20]
 8016bfe:	6879      	ldr	r1, [r7, #4]
 8016c00:	68f8      	ldr	r0, [r7, #12]
 8016c02:	f001 fc9b 	bl	801853c <ethernet_output>
 8016c06:	4603      	mov	r3, r0
 8016c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016c0c:	e067      	b.n	8016cde <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016c0e:	7c7a      	ldrb	r2, [r7, #17]
 8016c10:	4939      	ldr	r1, [pc, #228]	; (8016cf8 <etharp_query+0x268>)
 8016c12:	4613      	mov	r3, r2
 8016c14:	005b      	lsls	r3, r3, #1
 8016c16:	4413      	add	r3, r2
 8016c18:	00db      	lsls	r3, r3, #3
 8016c1a:	440b      	add	r3, r1
 8016c1c:	3314      	adds	r3, #20
 8016c1e:	781b      	ldrb	r3, [r3, #0]
 8016c20:	2b01      	cmp	r3, #1
 8016c22:	d15c      	bne.n	8016cde <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016c24:	2300      	movs	r3, #0
 8016c26:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016c2c:	e01c      	b.n	8016c68 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016c2e:	69fb      	ldr	r3, [r7, #28]
 8016c30:	895a      	ldrh	r2, [r3, #10]
 8016c32:	69fb      	ldr	r3, [r7, #28]
 8016c34:	891b      	ldrh	r3, [r3, #8]
 8016c36:	429a      	cmp	r2, r3
 8016c38:	d10a      	bne.n	8016c50 <etharp_query+0x1c0>
 8016c3a:	69fb      	ldr	r3, [r7, #28]
 8016c3c:	681b      	ldr	r3, [r3, #0]
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d006      	beq.n	8016c50 <etharp_query+0x1c0>
 8016c42:	4b2a      	ldr	r3, [pc, #168]	; (8016cec <etharp_query+0x25c>)
 8016c44:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016c48:	492f      	ldr	r1, [pc, #188]	; (8016d08 <etharp_query+0x278>)
 8016c4a:	482a      	ldr	r0, [pc, #168]	; (8016cf4 <etharp_query+0x264>)
 8016c4c:	f001 ff88 	bl	8018b60 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016c50:	69fb      	ldr	r3, [r7, #28]
 8016c52:	7b1b      	ldrb	r3, [r3, #12]
 8016c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d002      	beq.n	8016c62 <etharp_query+0x1d2>
        copy_needed = 1;
 8016c5c:	2301      	movs	r3, #1
 8016c5e:	61bb      	str	r3, [r7, #24]
        break;
 8016c60:	e005      	b.n	8016c6e <etharp_query+0x1de>
      }
      p = p->next;
 8016c62:	69fb      	ldr	r3, [r7, #28]
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016c68:	69fb      	ldr	r3, [r7, #28]
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d1df      	bne.n	8016c2e <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016c6e:	69bb      	ldr	r3, [r7, #24]
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d007      	beq.n	8016c84 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016c74:	687a      	ldr	r2, [r7, #4]
 8016c76:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016c7a:	200e      	movs	r0, #14
 8016c7c:	f7f8 faca 	bl	800f214 <pbuf_clone>
 8016c80:	61f8      	str	r0, [r7, #28]
 8016c82:	e004      	b.n	8016c8e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016c88:	69f8      	ldr	r0, [r7, #28]
 8016c8a:	f7f8 f8f1 	bl	800ee70 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016c8e:	69fb      	ldr	r3, [r7, #28]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d021      	beq.n	8016cd8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016c94:	7c7a      	ldrb	r2, [r7, #17]
 8016c96:	4918      	ldr	r1, [pc, #96]	; (8016cf8 <etharp_query+0x268>)
 8016c98:	4613      	mov	r3, r2
 8016c9a:	005b      	lsls	r3, r3, #1
 8016c9c:	4413      	add	r3, r2
 8016c9e:	00db      	lsls	r3, r3, #3
 8016ca0:	440b      	add	r3, r1
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d00a      	beq.n	8016cbe <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016ca8:	7c7a      	ldrb	r2, [r7, #17]
 8016caa:	4913      	ldr	r1, [pc, #76]	; (8016cf8 <etharp_query+0x268>)
 8016cac:	4613      	mov	r3, r2
 8016cae:	005b      	lsls	r3, r3, #1
 8016cb0:	4413      	add	r3, r2
 8016cb2:	00db      	lsls	r3, r3, #3
 8016cb4:	440b      	add	r3, r1
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	4618      	mov	r0, r3
 8016cba:	f7f8 f833 	bl	800ed24 <pbuf_free>
      }
      arp_table[i].q = p;
 8016cbe:	7c7a      	ldrb	r2, [r7, #17]
 8016cc0:	490d      	ldr	r1, [pc, #52]	; (8016cf8 <etharp_query+0x268>)
 8016cc2:	4613      	mov	r3, r2
 8016cc4:	005b      	lsls	r3, r3, #1
 8016cc6:	4413      	add	r3, r2
 8016cc8:	00db      	lsls	r3, r3, #3
 8016cca:	440b      	add	r3, r1
 8016ccc:	69fa      	ldr	r2, [r7, #28]
 8016cce:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016cd6:	e002      	b.n	8016cde <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016cd8:	23ff      	movs	r3, #255	; 0xff
 8016cda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016cde:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8016ce2:	4618      	mov	r0, r3
 8016ce4:	3728      	adds	r7, #40	; 0x28
 8016ce6:	46bd      	mov	sp, r7
 8016ce8:	bd80      	pop	{r7, pc}
 8016cea:	bf00      	nop
 8016cec:	0801c0f0 	.word	0x0801c0f0
 8016cf0:	0801c29c 	.word	0x0801c29c
 8016cf4:	0801c168 	.word	0x0801c168
 8016cf8:	24008ae0 	.word	0x24008ae0
 8016cfc:	0801c2ac 	.word	0x0801c2ac
 8016d00:	0801c290 	.word	0x0801c290
 8016d04:	24008bd0 	.word	0x24008bd0
 8016d08:	0801c2d4 	.word	0x0801c2d4

08016d0c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b08a      	sub	sp, #40	; 0x28
 8016d10:	af02      	add	r7, sp, #8
 8016d12:	60f8      	str	r0, [r7, #12]
 8016d14:	60b9      	str	r1, [r7, #8]
 8016d16:	607a      	str	r2, [r7, #4]
 8016d18:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016d1a:	2300      	movs	r3, #0
 8016d1c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d106      	bne.n	8016d32 <etharp_raw+0x26>
 8016d24:	4b3a      	ldr	r3, [pc, #232]	; (8016e10 <etharp_raw+0x104>)
 8016d26:	f240 4257 	movw	r2, #1111	; 0x457
 8016d2a:	493a      	ldr	r1, [pc, #232]	; (8016e14 <etharp_raw+0x108>)
 8016d2c:	483a      	ldr	r0, [pc, #232]	; (8016e18 <etharp_raw+0x10c>)
 8016d2e:	f001 ff17 	bl	8018b60 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016d32:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016d36:	211c      	movs	r1, #28
 8016d38:	200e      	movs	r0, #14
 8016d3a:	f7f7 fd0f 	bl	800e75c <pbuf_alloc>
 8016d3e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016d40:	69bb      	ldr	r3, [r7, #24]
 8016d42:	2b00      	cmp	r3, #0
 8016d44:	d102      	bne.n	8016d4c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016d46:	f04f 33ff 	mov.w	r3, #4294967295
 8016d4a:	e05d      	b.n	8016e08 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016d4c:	69bb      	ldr	r3, [r7, #24]
 8016d4e:	895b      	ldrh	r3, [r3, #10]
 8016d50:	2b1b      	cmp	r3, #27
 8016d52:	d806      	bhi.n	8016d62 <etharp_raw+0x56>
 8016d54:	4b2e      	ldr	r3, [pc, #184]	; (8016e10 <etharp_raw+0x104>)
 8016d56:	f240 4262 	movw	r2, #1122	; 0x462
 8016d5a:	4930      	ldr	r1, [pc, #192]	; (8016e1c <etharp_raw+0x110>)
 8016d5c:	482e      	ldr	r0, [pc, #184]	; (8016e18 <etharp_raw+0x10c>)
 8016d5e:	f001 feff 	bl	8018b60 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016d62:	69bb      	ldr	r3, [r7, #24]
 8016d64:	685b      	ldr	r3, [r3, #4]
 8016d66:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016d68:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016d6a:	4618      	mov	r0, r3
 8016d6c:	f7f6 fafa 	bl	800d364 <lwip_htons>
 8016d70:	4603      	mov	r3, r0
 8016d72:	461a      	mov	r2, r3
 8016d74:	697b      	ldr	r3, [r7, #20]
 8016d76:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016d78:	68fb      	ldr	r3, [r7, #12]
 8016d7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016d7e:	2b06      	cmp	r3, #6
 8016d80:	d006      	beq.n	8016d90 <etharp_raw+0x84>
 8016d82:	4b23      	ldr	r3, [pc, #140]	; (8016e10 <etharp_raw+0x104>)
 8016d84:	f240 4269 	movw	r2, #1129	; 0x469
 8016d88:	4925      	ldr	r1, [pc, #148]	; (8016e20 <etharp_raw+0x114>)
 8016d8a:	4823      	ldr	r0, [pc, #140]	; (8016e18 <etharp_raw+0x10c>)
 8016d8c:	f001 fee8 	bl	8018b60 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016d90:	697b      	ldr	r3, [r7, #20]
 8016d92:	3308      	adds	r3, #8
 8016d94:	2206      	movs	r2, #6
 8016d96:	6839      	ldr	r1, [r7, #0]
 8016d98:	4618      	mov	r0, r3
 8016d9a:	f001 fe36 	bl	8018a0a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016d9e:	697b      	ldr	r3, [r7, #20]
 8016da0:	3312      	adds	r3, #18
 8016da2:	2206      	movs	r2, #6
 8016da4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016da6:	4618      	mov	r0, r3
 8016da8:	f001 fe2f 	bl	8018a0a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016dac:	697b      	ldr	r3, [r7, #20]
 8016dae:	330e      	adds	r3, #14
 8016db0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016db2:	6812      	ldr	r2, [r2, #0]
 8016db4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016db6:	697b      	ldr	r3, [r7, #20]
 8016db8:	3318      	adds	r3, #24
 8016dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016dbc:	6812      	ldr	r2, [r2, #0]
 8016dbe:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016dc0:	697b      	ldr	r3, [r7, #20]
 8016dc2:	2200      	movs	r2, #0
 8016dc4:	701a      	strb	r2, [r3, #0]
 8016dc6:	2200      	movs	r2, #0
 8016dc8:	f042 0201 	orr.w	r2, r2, #1
 8016dcc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016dce:	697b      	ldr	r3, [r7, #20]
 8016dd0:	2200      	movs	r2, #0
 8016dd2:	f042 0208 	orr.w	r2, r2, #8
 8016dd6:	709a      	strb	r2, [r3, #2]
 8016dd8:	2200      	movs	r2, #0
 8016dda:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016ddc:	697b      	ldr	r3, [r7, #20]
 8016dde:	2206      	movs	r2, #6
 8016de0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016de2:	697b      	ldr	r3, [r7, #20]
 8016de4:	2204      	movs	r2, #4
 8016de6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016de8:	f640 0306 	movw	r3, #2054	; 0x806
 8016dec:	9300      	str	r3, [sp, #0]
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	68ba      	ldr	r2, [r7, #8]
 8016df2:	69b9      	ldr	r1, [r7, #24]
 8016df4:	68f8      	ldr	r0, [r7, #12]
 8016df6:	f001 fba1 	bl	801853c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016dfa:	69b8      	ldr	r0, [r7, #24]
 8016dfc:	f7f7 ff92 	bl	800ed24 <pbuf_free>
  p = NULL;
 8016e00:	2300      	movs	r3, #0
 8016e02:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016e04:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016e08:	4618      	mov	r0, r3
 8016e0a:	3720      	adds	r7, #32
 8016e0c:	46bd      	mov	sp, r7
 8016e0e:	bd80      	pop	{r7, pc}
 8016e10:	0801c0f0 	.word	0x0801c0f0
 8016e14:	0801c240 	.word	0x0801c240
 8016e18:	0801c168 	.word	0x0801c168
 8016e1c:	0801c2f0 	.word	0x0801c2f0
 8016e20:	0801c324 	.word	0x0801c324

08016e24 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016e24:	b580      	push	{r7, lr}
 8016e26:	b088      	sub	sp, #32
 8016e28:	af04      	add	r7, sp, #16
 8016e2a:	60f8      	str	r0, [r7, #12]
 8016e2c:	60b9      	str	r1, [r7, #8]
 8016e2e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016e40:	2201      	movs	r2, #1
 8016e42:	9203      	str	r2, [sp, #12]
 8016e44:	68ba      	ldr	r2, [r7, #8]
 8016e46:	9202      	str	r2, [sp, #8]
 8016e48:	4a06      	ldr	r2, [pc, #24]	; (8016e64 <etharp_request_dst+0x40>)
 8016e4a:	9201      	str	r2, [sp, #4]
 8016e4c:	9300      	str	r3, [sp, #0]
 8016e4e:	4603      	mov	r3, r0
 8016e50:	687a      	ldr	r2, [r7, #4]
 8016e52:	68f8      	ldr	r0, [r7, #12]
 8016e54:	f7ff ff5a 	bl	8016d0c <etharp_raw>
 8016e58:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	3710      	adds	r7, #16
 8016e5e:	46bd      	mov	sp, r7
 8016e60:	bd80      	pop	{r7, pc}
 8016e62:	bf00      	nop
 8016e64:	0801ebcc 	.word	0x0801ebcc

08016e68 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016e68:	b580      	push	{r7, lr}
 8016e6a:	b082      	sub	sp, #8
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	6078      	str	r0, [r7, #4]
 8016e70:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016e72:	4a05      	ldr	r2, [pc, #20]	; (8016e88 <etharp_request+0x20>)
 8016e74:	6839      	ldr	r1, [r7, #0]
 8016e76:	6878      	ldr	r0, [r7, #4]
 8016e78:	f7ff ffd4 	bl	8016e24 <etharp_request_dst>
 8016e7c:	4603      	mov	r3, r0
}
 8016e7e:	4618      	mov	r0, r3
 8016e80:	3708      	adds	r7, #8
 8016e82:	46bd      	mov	sp, r7
 8016e84:	bd80      	pop	{r7, pc}
 8016e86:	bf00      	nop
 8016e88:	0801ebc4 	.word	0x0801ebc4

08016e8c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b08e      	sub	sp, #56	; 0x38
 8016e90:	af04      	add	r7, sp, #16
 8016e92:	6078      	str	r0, [r7, #4]
 8016e94:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016e96:	4b87      	ldr	r3, [pc, #540]	; (80170b4 <icmp_input+0x228>)
 8016e98:	689b      	ldr	r3, [r3, #8]
 8016e9a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e9e:	781b      	ldrb	r3, [r3, #0]
 8016ea0:	f003 030f 	and.w	r3, r3, #15
 8016ea4:	b2db      	uxtb	r3, r3
 8016ea6:	009b      	lsls	r3, r3, #2
 8016ea8:	b2db      	uxtb	r3, r3
 8016eaa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016eac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016eae:	2b13      	cmp	r3, #19
 8016eb0:	f240 80e8 	bls.w	8017084 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	895b      	ldrh	r3, [r3, #10]
 8016eb8:	2b03      	cmp	r3, #3
 8016eba:	f240 80e5 	bls.w	8017088 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	685b      	ldr	r3, [r3, #4]
 8016ec2:	781b      	ldrb	r3, [r3, #0]
 8016ec4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016ec8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	f000 80d2 	beq.w	8017076 <icmp_input+0x1ea>
 8016ed2:	2b08      	cmp	r3, #8
 8016ed4:	f040 80d2 	bne.w	801707c <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016ed8:	4b77      	ldr	r3, [pc, #476]	; (80170b8 <icmp_input+0x22c>)
 8016eda:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016edc:	4b75      	ldr	r3, [pc, #468]	; (80170b4 <icmp_input+0x228>)
 8016ede:	695b      	ldr	r3, [r3, #20]
 8016ee0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016ee4:	2be0      	cmp	r3, #224	; 0xe0
 8016ee6:	f000 80d6 	beq.w	8017096 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016eea:	4b72      	ldr	r3, [pc, #456]	; (80170b4 <icmp_input+0x228>)
 8016eec:	695b      	ldr	r3, [r3, #20]
 8016eee:	4a71      	ldr	r2, [pc, #452]	; (80170b4 <icmp_input+0x228>)
 8016ef0:	6812      	ldr	r2, [r2, #0]
 8016ef2:	4611      	mov	r1, r2
 8016ef4:	4618      	mov	r0, r3
 8016ef6:	f000 fc13 	bl	8017720 <ip4_addr_isbroadcast_u32>
 8016efa:	4603      	mov	r3, r0
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	f040 80cc 	bne.w	801709a <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	891b      	ldrh	r3, [r3, #8]
 8016f06:	2b07      	cmp	r3, #7
 8016f08:	f240 80c0 	bls.w	801708c <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8016f0c:	6878      	ldr	r0, [r7, #4]
 8016f0e:	f7f6 fafc 	bl	800d50a <inet_chksum_pbuf>
 8016f12:	4603      	mov	r3, r0
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d003      	beq.n	8016f20 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8016f18:	6878      	ldr	r0, [r7, #4]
 8016f1a:	f7f7 ff03 	bl	800ed24 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8016f1e:	e0c5      	b.n	80170ac <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016f20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f22:	330e      	adds	r3, #14
 8016f24:	4619      	mov	r1, r3
 8016f26:	6878      	ldr	r0, [r7, #4]
 8016f28:	f7f7 fe66 	bl	800ebf8 <pbuf_add_header>
 8016f2c:	4603      	mov	r3, r0
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d04b      	beq.n	8016fca <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	891a      	ldrh	r2, [r3, #8]
 8016f36:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f38:	4413      	add	r3, r2
 8016f3a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	891b      	ldrh	r3, [r3, #8]
 8016f40:	8b7a      	ldrh	r2, [r7, #26]
 8016f42:	429a      	cmp	r2, r3
 8016f44:	f0c0 80ab 	bcc.w	801709e <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016f48:	8b7b      	ldrh	r3, [r7, #26]
 8016f4a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016f4e:	4619      	mov	r1, r3
 8016f50:	200e      	movs	r0, #14
 8016f52:	f7f7 fc03 	bl	800e75c <pbuf_alloc>
 8016f56:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016f58:	697b      	ldr	r3, [r7, #20]
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	f000 80a1 	beq.w	80170a2 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016f60:	697b      	ldr	r3, [r7, #20]
 8016f62:	895b      	ldrh	r3, [r3, #10]
 8016f64:	461a      	mov	r2, r3
 8016f66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f68:	3308      	adds	r3, #8
 8016f6a:	429a      	cmp	r2, r3
 8016f6c:	d203      	bcs.n	8016f76 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016f6e:	6978      	ldr	r0, [r7, #20]
 8016f70:	f7f7 fed8 	bl	800ed24 <pbuf_free>
          goto icmperr;
 8016f74:	e096      	b.n	80170a4 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8016f76:	697b      	ldr	r3, [r7, #20]
 8016f78:	685b      	ldr	r3, [r3, #4]
 8016f7a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016f7e:	4618      	mov	r0, r3
 8016f80:	f001 fd43 	bl	8018a0a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016f84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016f86:	4619      	mov	r1, r3
 8016f88:	6978      	ldr	r0, [r7, #20]
 8016f8a:	f7f7 fe45 	bl	800ec18 <pbuf_remove_header>
 8016f8e:	4603      	mov	r3, r0
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d009      	beq.n	8016fa8 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016f94:	4b49      	ldr	r3, [pc, #292]	; (80170bc <icmp_input+0x230>)
 8016f96:	22b6      	movs	r2, #182	; 0xb6
 8016f98:	4949      	ldr	r1, [pc, #292]	; (80170c0 <icmp_input+0x234>)
 8016f9a:	484a      	ldr	r0, [pc, #296]	; (80170c4 <icmp_input+0x238>)
 8016f9c:	f001 fde0 	bl	8018b60 <iprintf>
          pbuf_free(r);
 8016fa0:	6978      	ldr	r0, [r7, #20]
 8016fa2:	f7f7 febf 	bl	800ed24 <pbuf_free>
          goto icmperr;
 8016fa6:	e07d      	b.n	80170a4 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016fa8:	6879      	ldr	r1, [r7, #4]
 8016faa:	6978      	ldr	r0, [r7, #20]
 8016fac:	f7f7 ffee 	bl	800ef8c <pbuf_copy>
 8016fb0:	4603      	mov	r3, r0
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d003      	beq.n	8016fbe <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016fb6:	6978      	ldr	r0, [r7, #20]
 8016fb8:	f7f7 feb4 	bl	800ed24 <pbuf_free>
          goto icmperr;
 8016fbc:	e072      	b.n	80170a4 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8016fbe:	6878      	ldr	r0, [r7, #4]
 8016fc0:	f7f7 feb0 	bl	800ed24 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016fc4:	697b      	ldr	r3, [r7, #20]
 8016fc6:	607b      	str	r3, [r7, #4]
 8016fc8:	e00f      	b.n	8016fea <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016fca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016fcc:	330e      	adds	r3, #14
 8016fce:	4619      	mov	r1, r3
 8016fd0:	6878      	ldr	r0, [r7, #4]
 8016fd2:	f7f7 fe21 	bl	800ec18 <pbuf_remove_header>
 8016fd6:	4603      	mov	r3, r0
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d006      	beq.n	8016fea <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016fdc:	4b37      	ldr	r3, [pc, #220]	; (80170bc <icmp_input+0x230>)
 8016fde:	22c7      	movs	r2, #199	; 0xc7
 8016fe0:	4939      	ldr	r1, [pc, #228]	; (80170c8 <icmp_input+0x23c>)
 8016fe2:	4838      	ldr	r0, [pc, #224]	; (80170c4 <icmp_input+0x238>)
 8016fe4:	f001 fdbc 	bl	8018b60 <iprintf>
          goto icmperr;
 8016fe8:	e05c      	b.n	80170a4 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	685b      	ldr	r3, [r3, #4]
 8016fee:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016ff0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016ff2:	4619      	mov	r1, r3
 8016ff4:	6878      	ldr	r0, [r7, #4]
 8016ff6:	f7f7 fdff 	bl	800ebf8 <pbuf_add_header>
 8016ffa:	4603      	mov	r3, r0
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d13c      	bne.n	801707a <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	685b      	ldr	r3, [r3, #4]
 8017004:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017006:	69fb      	ldr	r3, [r7, #28]
 8017008:	681a      	ldr	r2, [r3, #0]
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801700e:	4b29      	ldr	r3, [pc, #164]	; (80170b4 <icmp_input+0x228>)
 8017010:	691a      	ldr	r2, [r3, #16]
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017016:	693b      	ldr	r3, [r7, #16]
 8017018:	2200      	movs	r2, #0
 801701a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801701c:	693b      	ldr	r3, [r7, #16]
 801701e:	885b      	ldrh	r3, [r3, #2]
 8017020:	b29b      	uxth	r3, r3
 8017022:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8017026:	4293      	cmp	r3, r2
 8017028:	d907      	bls.n	801703a <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801702a:	693b      	ldr	r3, [r7, #16]
 801702c:	885b      	ldrh	r3, [r3, #2]
 801702e:	b29b      	uxth	r3, r3
 8017030:	3309      	adds	r3, #9
 8017032:	b29a      	uxth	r2, r3
 8017034:	693b      	ldr	r3, [r7, #16]
 8017036:	805a      	strh	r2, [r3, #2]
 8017038:	e006      	b.n	8017048 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801703a:	693b      	ldr	r3, [r7, #16]
 801703c:	885b      	ldrh	r3, [r3, #2]
 801703e:	b29b      	uxth	r3, r3
 8017040:	3308      	adds	r3, #8
 8017042:	b29a      	uxth	r2, r3
 8017044:	693b      	ldr	r3, [r7, #16]
 8017046:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	22ff      	movs	r2, #255	; 0xff
 801704c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801704e:	68fb      	ldr	r3, [r7, #12]
 8017050:	2200      	movs	r2, #0
 8017052:	729a      	strb	r2, [r3, #10]
 8017054:	2200      	movs	r2, #0
 8017056:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017058:	683b      	ldr	r3, [r7, #0]
 801705a:	9302      	str	r3, [sp, #8]
 801705c:	2301      	movs	r3, #1
 801705e:	9301      	str	r3, [sp, #4]
 8017060:	2300      	movs	r3, #0
 8017062:	9300      	str	r3, [sp, #0]
 8017064:	23ff      	movs	r3, #255	; 0xff
 8017066:	2200      	movs	r2, #0
 8017068:	69f9      	ldr	r1, [r7, #28]
 801706a:	6878      	ldr	r0, [r7, #4]
 801706c:	f000 fa80 	bl	8017570 <ip4_output_if>
 8017070:	4603      	mov	r3, r0
 8017072:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017074:	e001      	b.n	801707a <icmp_input+0x1ee>
      break;
 8017076:	bf00      	nop
 8017078:	e000      	b.n	801707c <icmp_input+0x1f0>
      break;
 801707a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801707c:	6878      	ldr	r0, [r7, #4]
 801707e:	f7f7 fe51 	bl	800ed24 <pbuf_free>
  return;
 8017082:	e013      	b.n	80170ac <icmp_input+0x220>
    goto lenerr;
 8017084:	bf00      	nop
 8017086:	e002      	b.n	801708e <icmp_input+0x202>
    goto lenerr;
 8017088:	bf00      	nop
 801708a:	e000      	b.n	801708e <icmp_input+0x202>
        goto lenerr;
 801708c:	bf00      	nop
lenerr:
  pbuf_free(p);
 801708e:	6878      	ldr	r0, [r7, #4]
 8017090:	f7f7 fe48 	bl	800ed24 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017094:	e00a      	b.n	80170ac <icmp_input+0x220>
        goto icmperr;
 8017096:	bf00      	nop
 8017098:	e004      	b.n	80170a4 <icmp_input+0x218>
        goto icmperr;
 801709a:	bf00      	nop
 801709c:	e002      	b.n	80170a4 <icmp_input+0x218>
          goto icmperr;
 801709e:	bf00      	nop
 80170a0:	e000      	b.n	80170a4 <icmp_input+0x218>
          goto icmperr;
 80170a2:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80170a4:	6878      	ldr	r0, [r7, #4]
 80170a6:	f7f7 fe3d 	bl	800ed24 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80170aa:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80170ac:	3728      	adds	r7, #40	; 0x28
 80170ae:	46bd      	mov	sp, r7
 80170b0:	bd80      	pop	{r7, pc}
 80170b2:	bf00      	nop
 80170b4:	24005980 	.word	0x24005980
 80170b8:	24005994 	.word	0x24005994
 80170bc:	0801c368 	.word	0x0801c368
 80170c0:	0801c3a0 	.word	0x0801c3a0
 80170c4:	0801c3d8 	.word	0x0801c3d8
 80170c8:	0801c400 	.word	0x0801c400

080170cc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80170cc:	b580      	push	{r7, lr}
 80170ce:	b082      	sub	sp, #8
 80170d0:	af00      	add	r7, sp, #0
 80170d2:	6078      	str	r0, [r7, #4]
 80170d4:	460b      	mov	r3, r1
 80170d6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80170d8:	78fb      	ldrb	r3, [r7, #3]
 80170da:	461a      	mov	r2, r3
 80170dc:	2103      	movs	r1, #3
 80170de:	6878      	ldr	r0, [r7, #4]
 80170e0:	f000 f814 	bl	801710c <icmp_send_response>
}
 80170e4:	bf00      	nop
 80170e6:	3708      	adds	r7, #8
 80170e8:	46bd      	mov	sp, r7
 80170ea:	bd80      	pop	{r7, pc}

080170ec <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80170ec:	b580      	push	{r7, lr}
 80170ee:	b082      	sub	sp, #8
 80170f0:	af00      	add	r7, sp, #0
 80170f2:	6078      	str	r0, [r7, #4]
 80170f4:	460b      	mov	r3, r1
 80170f6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80170f8:	78fb      	ldrb	r3, [r7, #3]
 80170fa:	461a      	mov	r2, r3
 80170fc:	210b      	movs	r1, #11
 80170fe:	6878      	ldr	r0, [r7, #4]
 8017100:	f000 f804 	bl	801710c <icmp_send_response>
}
 8017104:	bf00      	nop
 8017106:	3708      	adds	r7, #8
 8017108:	46bd      	mov	sp, r7
 801710a:	bd80      	pop	{r7, pc}

0801710c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801710c:	b580      	push	{r7, lr}
 801710e:	b08c      	sub	sp, #48	; 0x30
 8017110:	af04      	add	r7, sp, #16
 8017112:	6078      	str	r0, [r7, #4]
 8017114:	460b      	mov	r3, r1
 8017116:	70fb      	strb	r3, [r7, #3]
 8017118:	4613      	mov	r3, r2
 801711a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801711c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017120:	2124      	movs	r1, #36	; 0x24
 8017122:	2022      	movs	r0, #34	; 0x22
 8017124:	f7f7 fb1a 	bl	800e75c <pbuf_alloc>
 8017128:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801712a:	69fb      	ldr	r3, [r7, #28]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d056      	beq.n	80171de <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017130:	69fb      	ldr	r3, [r7, #28]
 8017132:	895b      	ldrh	r3, [r3, #10]
 8017134:	2b23      	cmp	r3, #35	; 0x23
 8017136:	d806      	bhi.n	8017146 <icmp_send_response+0x3a>
 8017138:	4b2b      	ldr	r3, [pc, #172]	; (80171e8 <icmp_send_response+0xdc>)
 801713a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801713e:	492b      	ldr	r1, [pc, #172]	; (80171ec <icmp_send_response+0xe0>)
 8017140:	482b      	ldr	r0, [pc, #172]	; (80171f0 <icmp_send_response+0xe4>)
 8017142:	f001 fd0d 	bl	8018b60 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	685b      	ldr	r3, [r3, #4]
 801714a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801714c:	69fb      	ldr	r3, [r7, #28]
 801714e:	685b      	ldr	r3, [r3, #4]
 8017150:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017152:	697b      	ldr	r3, [r7, #20]
 8017154:	78fa      	ldrb	r2, [r7, #3]
 8017156:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017158:	697b      	ldr	r3, [r7, #20]
 801715a:	78ba      	ldrb	r2, [r7, #2]
 801715c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801715e:	697b      	ldr	r3, [r7, #20]
 8017160:	2200      	movs	r2, #0
 8017162:	711a      	strb	r2, [r3, #4]
 8017164:	2200      	movs	r2, #0
 8017166:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017168:	697b      	ldr	r3, [r7, #20]
 801716a:	2200      	movs	r2, #0
 801716c:	719a      	strb	r2, [r3, #6]
 801716e:	2200      	movs	r2, #0
 8017170:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017172:	69fb      	ldr	r3, [r7, #28]
 8017174:	685b      	ldr	r3, [r3, #4]
 8017176:	f103 0008 	add.w	r0, r3, #8
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	685b      	ldr	r3, [r3, #4]
 801717e:	221c      	movs	r2, #28
 8017180:	4619      	mov	r1, r3
 8017182:	f001 fc42 	bl	8018a0a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017186:	69bb      	ldr	r3, [r7, #24]
 8017188:	68db      	ldr	r3, [r3, #12]
 801718a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801718c:	f107 030c 	add.w	r3, r7, #12
 8017190:	4618      	mov	r0, r3
 8017192:	f000 f82f 	bl	80171f4 <ip4_route>
 8017196:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017198:	693b      	ldr	r3, [r7, #16]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d01b      	beq.n	80171d6 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801719e:	697b      	ldr	r3, [r7, #20]
 80171a0:	2200      	movs	r2, #0
 80171a2:	709a      	strb	r2, [r3, #2]
 80171a4:	2200      	movs	r2, #0
 80171a6:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80171a8:	69fb      	ldr	r3, [r7, #28]
 80171aa:	895b      	ldrh	r3, [r3, #10]
 80171ac:	4619      	mov	r1, r3
 80171ae:	6978      	ldr	r0, [r7, #20]
 80171b0:	f7f6 f999 	bl	800d4e6 <inet_chksum>
 80171b4:	4603      	mov	r3, r0
 80171b6:	461a      	mov	r2, r3
 80171b8:	697b      	ldr	r3, [r7, #20]
 80171ba:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80171bc:	f107 020c 	add.w	r2, r7, #12
 80171c0:	693b      	ldr	r3, [r7, #16]
 80171c2:	9302      	str	r3, [sp, #8]
 80171c4:	2301      	movs	r3, #1
 80171c6:	9301      	str	r3, [sp, #4]
 80171c8:	2300      	movs	r3, #0
 80171ca:	9300      	str	r3, [sp, #0]
 80171cc:	23ff      	movs	r3, #255	; 0xff
 80171ce:	2100      	movs	r1, #0
 80171d0:	69f8      	ldr	r0, [r7, #28]
 80171d2:	f000 f9cd 	bl	8017570 <ip4_output_if>
  }
  pbuf_free(q);
 80171d6:	69f8      	ldr	r0, [r7, #28]
 80171d8:	f7f7 fda4 	bl	800ed24 <pbuf_free>
 80171dc:	e000      	b.n	80171e0 <icmp_send_response+0xd4>
    return;
 80171de:	bf00      	nop
}
 80171e0:	3720      	adds	r7, #32
 80171e2:	46bd      	mov	sp, r7
 80171e4:	bd80      	pop	{r7, pc}
 80171e6:	bf00      	nop
 80171e8:	0801c368 	.word	0x0801c368
 80171ec:	0801c434 	.word	0x0801c434
 80171f0:	0801c3d8 	.word	0x0801c3d8

080171f4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80171f4:	b480      	push	{r7}
 80171f6:	b085      	sub	sp, #20
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80171fc:	4b33      	ldr	r3, [pc, #204]	; (80172cc <ip4_route+0xd8>)
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	60fb      	str	r3, [r7, #12]
 8017202:	e036      	b.n	8017272 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801720a:	f003 0301 	and.w	r3, r3, #1
 801720e:	b2db      	uxtb	r3, r3
 8017210:	2b00      	cmp	r3, #0
 8017212:	d02b      	beq.n	801726c <ip4_route+0x78>
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801721a:	089b      	lsrs	r3, r3, #2
 801721c:	f003 0301 	and.w	r3, r3, #1
 8017220:	b2db      	uxtb	r3, r3
 8017222:	2b00      	cmp	r3, #0
 8017224:	d022      	beq.n	801726c <ip4_route+0x78>
 8017226:	68fb      	ldr	r3, [r7, #12]
 8017228:	3304      	adds	r3, #4
 801722a:	681b      	ldr	r3, [r3, #0]
 801722c:	2b00      	cmp	r3, #0
 801722e:	d01d      	beq.n	801726c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	681a      	ldr	r2, [r3, #0]
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	3304      	adds	r3, #4
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	405a      	eors	r2, r3
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	3308      	adds	r3, #8
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	4013      	ands	r3, r2
 8017244:	2b00      	cmp	r3, #0
 8017246:	d101      	bne.n	801724c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	e038      	b.n	80172be <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017252:	f003 0302 	and.w	r3, r3, #2
 8017256:	2b00      	cmp	r3, #0
 8017258:	d108      	bne.n	801726c <ip4_route+0x78>
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	681a      	ldr	r2, [r3, #0]
 801725e:	68fb      	ldr	r3, [r7, #12]
 8017260:	330c      	adds	r3, #12
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	429a      	cmp	r2, r3
 8017266:	d101      	bne.n	801726c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017268:	68fb      	ldr	r3, [r7, #12]
 801726a:	e028      	b.n	80172be <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801726c:	68fb      	ldr	r3, [r7, #12]
 801726e:	681b      	ldr	r3, [r3, #0]
 8017270:	60fb      	str	r3, [r7, #12]
 8017272:	68fb      	ldr	r3, [r7, #12]
 8017274:	2b00      	cmp	r3, #0
 8017276:	d1c5      	bne.n	8017204 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017278:	4b15      	ldr	r3, [pc, #84]	; (80172d0 <ip4_route+0xdc>)
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	2b00      	cmp	r3, #0
 801727e:	d01a      	beq.n	80172b6 <ip4_route+0xc2>
 8017280:	4b13      	ldr	r3, [pc, #76]	; (80172d0 <ip4_route+0xdc>)
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017288:	f003 0301 	and.w	r3, r3, #1
 801728c:	2b00      	cmp	r3, #0
 801728e:	d012      	beq.n	80172b6 <ip4_route+0xc2>
 8017290:	4b0f      	ldr	r3, [pc, #60]	; (80172d0 <ip4_route+0xdc>)
 8017292:	681b      	ldr	r3, [r3, #0]
 8017294:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017298:	f003 0304 	and.w	r3, r3, #4
 801729c:	2b00      	cmp	r3, #0
 801729e:	d00a      	beq.n	80172b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80172a0:	4b0b      	ldr	r3, [pc, #44]	; (80172d0 <ip4_route+0xdc>)
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	3304      	adds	r3, #4
 80172a6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d004      	beq.n	80172b6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	b2db      	uxtb	r3, r3
 80172b2:	2b7f      	cmp	r3, #127	; 0x7f
 80172b4:	d101      	bne.n	80172ba <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80172b6:	2300      	movs	r3, #0
 80172b8:	e001      	b.n	80172be <ip4_route+0xca>
  }

  return netif_default;
 80172ba:	4b05      	ldr	r3, [pc, #20]	; (80172d0 <ip4_route+0xdc>)
 80172bc:	681b      	ldr	r3, [r3, #0]
}
 80172be:	4618      	mov	r0, r3
 80172c0:	3714      	adds	r7, #20
 80172c2:	46bd      	mov	sp, r7
 80172c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172c8:	4770      	bx	lr
 80172ca:	bf00      	nop
 80172cc:	24008a74 	.word	0x24008a74
 80172d0:	24008a78 	.word	0x24008a78

080172d4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80172d4:	b580      	push	{r7, lr}
 80172d6:	b082      	sub	sp, #8
 80172d8:	af00      	add	r7, sp, #0
 80172da:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80172e2:	f003 0301 	and.w	r3, r3, #1
 80172e6:	b2db      	uxtb	r3, r3
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d016      	beq.n	801731a <ip4_input_accept+0x46>
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	3304      	adds	r3, #4
 80172f0:	681b      	ldr	r3, [r3, #0]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d011      	beq.n	801731a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80172f6:	4b0b      	ldr	r3, [pc, #44]	; (8017324 <ip4_input_accept+0x50>)
 80172f8:	695a      	ldr	r2, [r3, #20]
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	3304      	adds	r3, #4
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	429a      	cmp	r2, r3
 8017302:	d008      	beq.n	8017316 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017304:	4b07      	ldr	r3, [pc, #28]	; (8017324 <ip4_input_accept+0x50>)
 8017306:	695b      	ldr	r3, [r3, #20]
 8017308:	6879      	ldr	r1, [r7, #4]
 801730a:	4618      	mov	r0, r3
 801730c:	f000 fa08 	bl	8017720 <ip4_addr_isbroadcast_u32>
 8017310:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017312:	2b00      	cmp	r3, #0
 8017314:	d001      	beq.n	801731a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017316:	2301      	movs	r3, #1
 8017318:	e000      	b.n	801731c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801731a:	2300      	movs	r3, #0
}
 801731c:	4618      	mov	r0, r3
 801731e:	3708      	adds	r7, #8
 8017320:	46bd      	mov	sp, r7
 8017322:	bd80      	pop	{r7, pc}
 8017324:	24005980 	.word	0x24005980

08017328 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017328:	b580      	push	{r7, lr}
 801732a:	b086      	sub	sp, #24
 801732c:	af00      	add	r7, sp, #0
 801732e:	6078      	str	r0, [r7, #4]
 8017330:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	685b      	ldr	r3, [r3, #4]
 8017336:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017338:	697b      	ldr	r3, [r7, #20]
 801733a:	781b      	ldrb	r3, [r3, #0]
 801733c:	091b      	lsrs	r3, r3, #4
 801733e:	b2db      	uxtb	r3, r3
 8017340:	2b04      	cmp	r3, #4
 8017342:	d004      	beq.n	801734e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017344:	6878      	ldr	r0, [r7, #4]
 8017346:	f7f7 fced 	bl	800ed24 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801734a:	2300      	movs	r3, #0
 801734c:	e107      	b.n	801755e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801734e:	697b      	ldr	r3, [r7, #20]
 8017350:	781b      	ldrb	r3, [r3, #0]
 8017352:	f003 030f 	and.w	r3, r3, #15
 8017356:	b2db      	uxtb	r3, r3
 8017358:	009b      	lsls	r3, r3, #2
 801735a:	b2db      	uxtb	r3, r3
 801735c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801735e:	697b      	ldr	r3, [r7, #20]
 8017360:	885b      	ldrh	r3, [r3, #2]
 8017362:	b29b      	uxth	r3, r3
 8017364:	4618      	mov	r0, r3
 8017366:	f7f5 fffd 	bl	800d364 <lwip_htons>
 801736a:	4603      	mov	r3, r0
 801736c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	891b      	ldrh	r3, [r3, #8]
 8017372:	89ba      	ldrh	r2, [r7, #12]
 8017374:	429a      	cmp	r2, r3
 8017376:	d204      	bcs.n	8017382 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8017378:	89bb      	ldrh	r3, [r7, #12]
 801737a:	4619      	mov	r1, r3
 801737c:	6878      	ldr	r0, [r7, #4]
 801737e:	f7f7 fb4b 	bl	800ea18 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	895b      	ldrh	r3, [r3, #10]
 8017386:	89fa      	ldrh	r2, [r7, #14]
 8017388:	429a      	cmp	r2, r3
 801738a:	d807      	bhi.n	801739c <ip4_input+0x74>
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	891b      	ldrh	r3, [r3, #8]
 8017390:	89ba      	ldrh	r2, [r7, #12]
 8017392:	429a      	cmp	r2, r3
 8017394:	d802      	bhi.n	801739c <ip4_input+0x74>
 8017396:	89fb      	ldrh	r3, [r7, #14]
 8017398:	2b13      	cmp	r3, #19
 801739a:	d804      	bhi.n	80173a6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801739c:	6878      	ldr	r0, [r7, #4]
 801739e:	f7f7 fcc1 	bl	800ed24 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80173a2:	2300      	movs	r3, #0
 80173a4:	e0db      	b.n	801755e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80173a6:	697b      	ldr	r3, [r7, #20]
 80173a8:	691b      	ldr	r3, [r3, #16]
 80173aa:	4a6f      	ldr	r2, [pc, #444]	; (8017568 <ip4_input+0x240>)
 80173ac:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80173ae:	697b      	ldr	r3, [r7, #20]
 80173b0:	68db      	ldr	r3, [r3, #12]
 80173b2:	4a6d      	ldr	r2, [pc, #436]	; (8017568 <ip4_input+0x240>)
 80173b4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80173b6:	4b6c      	ldr	r3, [pc, #432]	; (8017568 <ip4_input+0x240>)
 80173b8:	695b      	ldr	r3, [r3, #20]
 80173ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80173be:	2be0      	cmp	r3, #224	; 0xe0
 80173c0:	d112      	bne.n	80173e8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80173c2:	683b      	ldr	r3, [r7, #0]
 80173c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80173c8:	f003 0301 	and.w	r3, r3, #1
 80173cc:	b2db      	uxtb	r3, r3
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d007      	beq.n	80173e2 <ip4_input+0xba>
 80173d2:	683b      	ldr	r3, [r7, #0]
 80173d4:	3304      	adds	r3, #4
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d002      	beq.n	80173e2 <ip4_input+0xba>
      netif = inp;
 80173dc:	683b      	ldr	r3, [r7, #0]
 80173de:	613b      	str	r3, [r7, #16]
 80173e0:	e02a      	b.n	8017438 <ip4_input+0x110>
    } else {
      netif = NULL;
 80173e2:	2300      	movs	r3, #0
 80173e4:	613b      	str	r3, [r7, #16]
 80173e6:	e027      	b.n	8017438 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80173e8:	6838      	ldr	r0, [r7, #0]
 80173ea:	f7ff ff73 	bl	80172d4 <ip4_input_accept>
 80173ee:	4603      	mov	r3, r0
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d002      	beq.n	80173fa <ip4_input+0xd2>
      netif = inp;
 80173f4:	683b      	ldr	r3, [r7, #0]
 80173f6:	613b      	str	r3, [r7, #16]
 80173f8:	e01e      	b.n	8017438 <ip4_input+0x110>
    } else {
      netif = NULL;
 80173fa:	2300      	movs	r3, #0
 80173fc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80173fe:	4b5a      	ldr	r3, [pc, #360]	; (8017568 <ip4_input+0x240>)
 8017400:	695b      	ldr	r3, [r3, #20]
 8017402:	b2db      	uxtb	r3, r3
 8017404:	2b7f      	cmp	r3, #127	; 0x7f
 8017406:	d017      	beq.n	8017438 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017408:	4b58      	ldr	r3, [pc, #352]	; (801756c <ip4_input+0x244>)
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	613b      	str	r3, [r7, #16]
 801740e:	e00e      	b.n	801742e <ip4_input+0x106>
          if (netif == inp) {
 8017410:	693a      	ldr	r2, [r7, #16]
 8017412:	683b      	ldr	r3, [r7, #0]
 8017414:	429a      	cmp	r2, r3
 8017416:	d006      	beq.n	8017426 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017418:	6938      	ldr	r0, [r7, #16]
 801741a:	f7ff ff5b 	bl	80172d4 <ip4_input_accept>
 801741e:	4603      	mov	r3, r0
 8017420:	2b00      	cmp	r3, #0
 8017422:	d108      	bne.n	8017436 <ip4_input+0x10e>
 8017424:	e000      	b.n	8017428 <ip4_input+0x100>
            continue;
 8017426:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017428:	693b      	ldr	r3, [r7, #16]
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	613b      	str	r3, [r7, #16]
 801742e:	693b      	ldr	r3, [r7, #16]
 8017430:	2b00      	cmp	r3, #0
 8017432:	d1ed      	bne.n	8017410 <ip4_input+0xe8>
 8017434:	e000      	b.n	8017438 <ip4_input+0x110>
            break;
 8017436:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017438:	4b4b      	ldr	r3, [pc, #300]	; (8017568 <ip4_input+0x240>)
 801743a:	691b      	ldr	r3, [r3, #16]
 801743c:	6839      	ldr	r1, [r7, #0]
 801743e:	4618      	mov	r0, r3
 8017440:	f000 f96e 	bl	8017720 <ip4_addr_isbroadcast_u32>
 8017444:	4603      	mov	r3, r0
 8017446:	2b00      	cmp	r3, #0
 8017448:	d105      	bne.n	8017456 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801744a:	4b47      	ldr	r3, [pc, #284]	; (8017568 <ip4_input+0x240>)
 801744c:	691b      	ldr	r3, [r3, #16]
 801744e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017452:	2be0      	cmp	r3, #224	; 0xe0
 8017454:	d104      	bne.n	8017460 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017456:	6878      	ldr	r0, [r7, #4]
 8017458:	f7f7 fc64 	bl	800ed24 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801745c:	2300      	movs	r3, #0
 801745e:	e07e      	b.n	801755e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017460:	693b      	ldr	r3, [r7, #16]
 8017462:	2b00      	cmp	r3, #0
 8017464:	d104      	bne.n	8017470 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017466:	6878      	ldr	r0, [r7, #4]
 8017468:	f7f7 fc5c 	bl	800ed24 <pbuf_free>
    return ERR_OK;
 801746c:	2300      	movs	r3, #0
 801746e:	e076      	b.n	801755e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017470:	697b      	ldr	r3, [r7, #20]
 8017472:	88db      	ldrh	r3, [r3, #6]
 8017474:	b29b      	uxth	r3, r3
 8017476:	461a      	mov	r2, r3
 8017478:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801747c:	4013      	ands	r3, r2
 801747e:	2b00      	cmp	r3, #0
 8017480:	d00b      	beq.n	801749a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017482:	6878      	ldr	r0, [r7, #4]
 8017484:	f000 fc92 	bl	8017dac <ip4_reass>
 8017488:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	2b00      	cmp	r3, #0
 801748e:	d101      	bne.n	8017494 <ip4_input+0x16c>
      return ERR_OK;
 8017490:	2300      	movs	r3, #0
 8017492:	e064      	b.n	801755e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	685b      	ldr	r3, [r3, #4]
 8017498:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801749a:	4a33      	ldr	r2, [pc, #204]	; (8017568 <ip4_input+0x240>)
 801749c:	693b      	ldr	r3, [r7, #16]
 801749e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80174a0:	4a31      	ldr	r2, [pc, #196]	; (8017568 <ip4_input+0x240>)
 80174a2:	683b      	ldr	r3, [r7, #0]
 80174a4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80174a6:	4a30      	ldr	r2, [pc, #192]	; (8017568 <ip4_input+0x240>)
 80174a8:	697b      	ldr	r3, [r7, #20]
 80174aa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80174ac:	697b      	ldr	r3, [r7, #20]
 80174ae:	781b      	ldrb	r3, [r3, #0]
 80174b0:	f003 030f 	and.w	r3, r3, #15
 80174b4:	b2db      	uxtb	r3, r3
 80174b6:	009b      	lsls	r3, r3, #2
 80174b8:	b2db      	uxtb	r3, r3
 80174ba:	b29a      	uxth	r2, r3
 80174bc:	4b2a      	ldr	r3, [pc, #168]	; (8017568 <ip4_input+0x240>)
 80174be:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80174c0:	89fb      	ldrh	r3, [r7, #14]
 80174c2:	4619      	mov	r1, r3
 80174c4:	6878      	ldr	r0, [r7, #4]
 80174c6:	f7f7 fba7 	bl	800ec18 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80174ca:	697b      	ldr	r3, [r7, #20]
 80174cc:	7a5b      	ldrb	r3, [r3, #9]
 80174ce:	2b11      	cmp	r3, #17
 80174d0:	d006      	beq.n	80174e0 <ip4_input+0x1b8>
 80174d2:	2b11      	cmp	r3, #17
 80174d4:	dc13      	bgt.n	80174fe <ip4_input+0x1d6>
 80174d6:	2b01      	cmp	r3, #1
 80174d8:	d00c      	beq.n	80174f4 <ip4_input+0x1cc>
 80174da:	2b06      	cmp	r3, #6
 80174dc:	d005      	beq.n	80174ea <ip4_input+0x1c2>
 80174de:	e00e      	b.n	80174fe <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80174e0:	6839      	ldr	r1, [r7, #0]
 80174e2:	6878      	ldr	r0, [r7, #4]
 80174e4:	f7fe f94a 	bl	801577c <udp_input>
        break;
 80174e8:	e026      	b.n	8017538 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80174ea:	6839      	ldr	r1, [r7, #0]
 80174ec:	6878      	ldr	r0, [r7, #4]
 80174ee:	f7f9 fd03 	bl	8010ef8 <tcp_input>
        break;
 80174f2:	e021      	b.n	8017538 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80174f4:	6839      	ldr	r1, [r7, #0]
 80174f6:	6878      	ldr	r0, [r7, #4]
 80174f8:	f7ff fcc8 	bl	8016e8c <icmp_input>
        break;
 80174fc:	e01c      	b.n	8017538 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80174fe:	4b1a      	ldr	r3, [pc, #104]	; (8017568 <ip4_input+0x240>)
 8017500:	695b      	ldr	r3, [r3, #20]
 8017502:	6939      	ldr	r1, [r7, #16]
 8017504:	4618      	mov	r0, r3
 8017506:	f000 f90b 	bl	8017720 <ip4_addr_isbroadcast_u32>
 801750a:	4603      	mov	r3, r0
 801750c:	2b00      	cmp	r3, #0
 801750e:	d10f      	bne.n	8017530 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017510:	4b15      	ldr	r3, [pc, #84]	; (8017568 <ip4_input+0x240>)
 8017512:	695b      	ldr	r3, [r3, #20]
 8017514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017518:	2be0      	cmp	r3, #224	; 0xe0
 801751a:	d009      	beq.n	8017530 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801751c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8017520:	4619      	mov	r1, r3
 8017522:	6878      	ldr	r0, [r7, #4]
 8017524:	f7f7 fbeb 	bl	800ecfe <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017528:	2102      	movs	r1, #2
 801752a:	6878      	ldr	r0, [r7, #4]
 801752c:	f7ff fdce 	bl	80170cc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8017530:	6878      	ldr	r0, [r7, #4]
 8017532:	f7f7 fbf7 	bl	800ed24 <pbuf_free>
        break;
 8017536:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017538:	4b0b      	ldr	r3, [pc, #44]	; (8017568 <ip4_input+0x240>)
 801753a:	2200      	movs	r2, #0
 801753c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801753e:	4b0a      	ldr	r3, [pc, #40]	; (8017568 <ip4_input+0x240>)
 8017540:	2200      	movs	r2, #0
 8017542:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017544:	4b08      	ldr	r3, [pc, #32]	; (8017568 <ip4_input+0x240>)
 8017546:	2200      	movs	r2, #0
 8017548:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801754a:	4b07      	ldr	r3, [pc, #28]	; (8017568 <ip4_input+0x240>)
 801754c:	2200      	movs	r2, #0
 801754e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017550:	4b05      	ldr	r3, [pc, #20]	; (8017568 <ip4_input+0x240>)
 8017552:	2200      	movs	r2, #0
 8017554:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017556:	4b04      	ldr	r3, [pc, #16]	; (8017568 <ip4_input+0x240>)
 8017558:	2200      	movs	r2, #0
 801755a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801755c:	2300      	movs	r3, #0
}
 801755e:	4618      	mov	r0, r3
 8017560:	3718      	adds	r7, #24
 8017562:	46bd      	mov	sp, r7
 8017564:	bd80      	pop	{r7, pc}
 8017566:	bf00      	nop
 8017568:	24005980 	.word	0x24005980
 801756c:	24008a74 	.word	0x24008a74

08017570 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017570:	b580      	push	{r7, lr}
 8017572:	b08a      	sub	sp, #40	; 0x28
 8017574:	af04      	add	r7, sp, #16
 8017576:	60f8      	str	r0, [r7, #12]
 8017578:	60b9      	str	r1, [r7, #8]
 801757a:	607a      	str	r2, [r7, #4]
 801757c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801757e:	68bb      	ldr	r3, [r7, #8]
 8017580:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017582:	687b      	ldr	r3, [r7, #4]
 8017584:	2b00      	cmp	r3, #0
 8017586:	d009      	beq.n	801759c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017588:	68bb      	ldr	r3, [r7, #8]
 801758a:	2b00      	cmp	r3, #0
 801758c:	d003      	beq.n	8017596 <ip4_output_if+0x26>
 801758e:	68bb      	ldr	r3, [r7, #8]
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	2b00      	cmp	r3, #0
 8017594:	d102      	bne.n	801759c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017598:	3304      	adds	r3, #4
 801759a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801759c:	78fa      	ldrb	r2, [r7, #3]
 801759e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175a0:	9302      	str	r3, [sp, #8]
 80175a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80175a6:	9301      	str	r3, [sp, #4]
 80175a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80175ac:	9300      	str	r3, [sp, #0]
 80175ae:	4613      	mov	r3, r2
 80175b0:	687a      	ldr	r2, [r7, #4]
 80175b2:	6979      	ldr	r1, [r7, #20]
 80175b4:	68f8      	ldr	r0, [r7, #12]
 80175b6:	f000 f805 	bl	80175c4 <ip4_output_if_src>
 80175ba:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80175bc:	4618      	mov	r0, r3
 80175be:	3718      	adds	r7, #24
 80175c0:	46bd      	mov	sp, r7
 80175c2:	bd80      	pop	{r7, pc}

080175c4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80175c4:	b580      	push	{r7, lr}
 80175c6:	b088      	sub	sp, #32
 80175c8:	af00      	add	r7, sp, #0
 80175ca:	60f8      	str	r0, [r7, #12]
 80175cc:	60b9      	str	r1, [r7, #8]
 80175ce:	607a      	str	r2, [r7, #4]
 80175d0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80175d2:	68fb      	ldr	r3, [r7, #12]
 80175d4:	7b9b      	ldrb	r3, [r3, #14]
 80175d6:	2b01      	cmp	r3, #1
 80175d8:	d006      	beq.n	80175e8 <ip4_output_if_src+0x24>
 80175da:	4b4b      	ldr	r3, [pc, #300]	; (8017708 <ip4_output_if_src+0x144>)
 80175dc:	f44f 7255 	mov.w	r2, #852	; 0x354
 80175e0:	494a      	ldr	r1, [pc, #296]	; (801770c <ip4_output_if_src+0x148>)
 80175e2:	484b      	ldr	r0, [pc, #300]	; (8017710 <ip4_output_if_src+0x14c>)
 80175e4:	f001 fabc 	bl	8018b60 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d060      	beq.n	80176b0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80175ee:	2314      	movs	r3, #20
 80175f0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80175f2:	2114      	movs	r1, #20
 80175f4:	68f8      	ldr	r0, [r7, #12]
 80175f6:	f7f7 faff 	bl	800ebf8 <pbuf_add_header>
 80175fa:	4603      	mov	r3, r0
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d002      	beq.n	8017606 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017600:	f06f 0301 	mvn.w	r3, #1
 8017604:	e07c      	b.n	8017700 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	685b      	ldr	r3, [r3, #4]
 801760a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	895b      	ldrh	r3, [r3, #10]
 8017610:	2b13      	cmp	r3, #19
 8017612:	d806      	bhi.n	8017622 <ip4_output_if_src+0x5e>
 8017614:	4b3c      	ldr	r3, [pc, #240]	; (8017708 <ip4_output_if_src+0x144>)
 8017616:	f44f 7262 	mov.w	r2, #904	; 0x388
 801761a:	493e      	ldr	r1, [pc, #248]	; (8017714 <ip4_output_if_src+0x150>)
 801761c:	483c      	ldr	r0, [pc, #240]	; (8017710 <ip4_output_if_src+0x14c>)
 801761e:	f001 fa9f 	bl	8018b60 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017622:	69fb      	ldr	r3, [r7, #28]
 8017624:	78fa      	ldrb	r2, [r7, #3]
 8017626:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017628:	69fb      	ldr	r3, [r7, #28]
 801762a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801762e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	681a      	ldr	r2, [r3, #0]
 8017634:	69fb      	ldr	r3, [r7, #28]
 8017636:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017638:	8b7b      	ldrh	r3, [r7, #26]
 801763a:	089b      	lsrs	r3, r3, #2
 801763c:	b29b      	uxth	r3, r3
 801763e:	b2db      	uxtb	r3, r3
 8017640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017644:	b2da      	uxtb	r2, r3
 8017646:	69fb      	ldr	r3, [r7, #28]
 8017648:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801764a:	69fb      	ldr	r3, [r7, #28]
 801764c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017650:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017652:	68fb      	ldr	r3, [r7, #12]
 8017654:	891b      	ldrh	r3, [r3, #8]
 8017656:	4618      	mov	r0, r3
 8017658:	f7f5 fe84 	bl	800d364 <lwip_htons>
 801765c:	4603      	mov	r3, r0
 801765e:	461a      	mov	r2, r3
 8017660:	69fb      	ldr	r3, [r7, #28]
 8017662:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017664:	69fb      	ldr	r3, [r7, #28]
 8017666:	2200      	movs	r2, #0
 8017668:	719a      	strb	r2, [r3, #6]
 801766a:	2200      	movs	r2, #0
 801766c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801766e:	4b2a      	ldr	r3, [pc, #168]	; (8017718 <ip4_output_if_src+0x154>)
 8017670:	881b      	ldrh	r3, [r3, #0]
 8017672:	4618      	mov	r0, r3
 8017674:	f7f5 fe76 	bl	800d364 <lwip_htons>
 8017678:	4603      	mov	r3, r0
 801767a:	461a      	mov	r2, r3
 801767c:	69fb      	ldr	r3, [r7, #28]
 801767e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017680:	4b25      	ldr	r3, [pc, #148]	; (8017718 <ip4_output_if_src+0x154>)
 8017682:	881b      	ldrh	r3, [r3, #0]
 8017684:	3301      	adds	r3, #1
 8017686:	b29a      	uxth	r2, r3
 8017688:	4b23      	ldr	r3, [pc, #140]	; (8017718 <ip4_output_if_src+0x154>)
 801768a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801768c:	68bb      	ldr	r3, [r7, #8]
 801768e:	2b00      	cmp	r3, #0
 8017690:	d104      	bne.n	801769c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017692:	4b22      	ldr	r3, [pc, #136]	; (801771c <ip4_output_if_src+0x158>)
 8017694:	681a      	ldr	r2, [r3, #0]
 8017696:	69fb      	ldr	r3, [r7, #28]
 8017698:	60da      	str	r2, [r3, #12]
 801769a:	e003      	b.n	80176a4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801769c:	68bb      	ldr	r3, [r7, #8]
 801769e:	681a      	ldr	r2, [r3, #0]
 80176a0:	69fb      	ldr	r3, [r7, #28]
 80176a2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80176a4:	69fb      	ldr	r3, [r7, #28]
 80176a6:	2200      	movs	r2, #0
 80176a8:	729a      	strb	r2, [r3, #10]
 80176aa:	2200      	movs	r2, #0
 80176ac:	72da      	strb	r2, [r3, #11]
 80176ae:	e00f      	b.n	80176d0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	895b      	ldrh	r3, [r3, #10]
 80176b4:	2b13      	cmp	r3, #19
 80176b6:	d802      	bhi.n	80176be <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80176b8:	f06f 0301 	mvn.w	r3, #1
 80176bc:	e020      	b.n	8017700 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	685b      	ldr	r3, [r3, #4]
 80176c2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80176c4:	69fb      	ldr	r3, [r7, #28]
 80176c6:	691b      	ldr	r3, [r3, #16]
 80176c8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80176ca:	f107 0314 	add.w	r3, r7, #20
 80176ce:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80176d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80176d4:	2b00      	cmp	r3, #0
 80176d6:	d00c      	beq.n	80176f2 <ip4_output_if_src+0x12e>
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	891a      	ldrh	r2, [r3, #8]
 80176dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80176e0:	429a      	cmp	r2, r3
 80176e2:	d906      	bls.n	80176f2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80176e4:	687a      	ldr	r2, [r7, #4]
 80176e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80176e8:	68f8      	ldr	r0, [r7, #12]
 80176ea:	f000 fd53 	bl	8018194 <ip4_frag>
 80176ee:	4603      	mov	r3, r0
 80176f0:	e006      	b.n	8017700 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80176f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176f4:	695b      	ldr	r3, [r3, #20]
 80176f6:	687a      	ldr	r2, [r7, #4]
 80176f8:	68f9      	ldr	r1, [r7, #12]
 80176fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80176fc:	4798      	blx	r3
 80176fe:	4603      	mov	r3, r0
}
 8017700:	4618      	mov	r0, r3
 8017702:	3720      	adds	r7, #32
 8017704:	46bd      	mov	sp, r7
 8017706:	bd80      	pop	{r7, pc}
 8017708:	0801c460 	.word	0x0801c460
 801770c:	0801c494 	.word	0x0801c494
 8017710:	0801c4a0 	.word	0x0801c4a0
 8017714:	0801c4c8 	.word	0x0801c4c8
 8017718:	24008bd2 	.word	0x24008bd2
 801771c:	0801ebc0 	.word	0x0801ebc0

08017720 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017720:	b480      	push	{r7}
 8017722:	b085      	sub	sp, #20
 8017724:	af00      	add	r7, sp, #0
 8017726:	6078      	str	r0, [r7, #4]
 8017728:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017734:	d002      	beq.n	801773c <ip4_addr_isbroadcast_u32+0x1c>
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	2b00      	cmp	r3, #0
 801773a:	d101      	bne.n	8017740 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801773c:	2301      	movs	r3, #1
 801773e:	e02a      	b.n	8017796 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017740:	683b      	ldr	r3, [r7, #0]
 8017742:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017746:	f003 0302 	and.w	r3, r3, #2
 801774a:	2b00      	cmp	r3, #0
 801774c:	d101      	bne.n	8017752 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801774e:	2300      	movs	r3, #0
 8017750:	e021      	b.n	8017796 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017752:	683b      	ldr	r3, [r7, #0]
 8017754:	3304      	adds	r3, #4
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	687a      	ldr	r2, [r7, #4]
 801775a:	429a      	cmp	r2, r3
 801775c:	d101      	bne.n	8017762 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801775e:	2300      	movs	r3, #0
 8017760:	e019      	b.n	8017796 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017762:	68fa      	ldr	r2, [r7, #12]
 8017764:	683b      	ldr	r3, [r7, #0]
 8017766:	3304      	adds	r3, #4
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	405a      	eors	r2, r3
 801776c:	683b      	ldr	r3, [r7, #0]
 801776e:	3308      	adds	r3, #8
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	4013      	ands	r3, r2
 8017774:	2b00      	cmp	r3, #0
 8017776:	d10d      	bne.n	8017794 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017778:	683b      	ldr	r3, [r7, #0]
 801777a:	3308      	adds	r3, #8
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	43da      	mvns	r2, r3
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017784:	683b      	ldr	r3, [r7, #0]
 8017786:	3308      	adds	r3, #8
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801778c:	429a      	cmp	r2, r3
 801778e:	d101      	bne.n	8017794 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017790:	2301      	movs	r3, #1
 8017792:	e000      	b.n	8017796 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017794:	2300      	movs	r3, #0
  }
}
 8017796:	4618      	mov	r0, r3
 8017798:	3714      	adds	r7, #20
 801779a:	46bd      	mov	sp, r7
 801779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177a0:	4770      	bx	lr
	...

080177a4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80177a4:	b580      	push	{r7, lr}
 80177a6:	b084      	sub	sp, #16
 80177a8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80177aa:	2300      	movs	r3, #0
 80177ac:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80177ae:	4b12      	ldr	r3, [pc, #72]	; (80177f8 <ip_reass_tmr+0x54>)
 80177b0:	681b      	ldr	r3, [r3, #0]
 80177b2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80177b4:	e018      	b.n	80177e8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80177b6:	68fb      	ldr	r3, [r7, #12]
 80177b8:	7fdb      	ldrb	r3, [r3, #31]
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d00b      	beq.n	80177d6 <ip_reass_tmr+0x32>
      r->timer--;
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	7fdb      	ldrb	r3, [r3, #31]
 80177c2:	3b01      	subs	r3, #1
 80177c4:	b2da      	uxtb	r2, r3
 80177c6:	68fb      	ldr	r3, [r7, #12]
 80177c8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80177ce:	68fb      	ldr	r3, [r7, #12]
 80177d0:	681b      	ldr	r3, [r3, #0]
 80177d2:	60fb      	str	r3, [r7, #12]
 80177d4:	e008      	b.n	80177e8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80177da:	68fb      	ldr	r3, [r7, #12]
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80177e0:	68b9      	ldr	r1, [r7, #8]
 80177e2:	6878      	ldr	r0, [r7, #4]
 80177e4:	f000 f80a 	bl	80177fc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80177e8:	68fb      	ldr	r3, [r7, #12]
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d1e3      	bne.n	80177b6 <ip_reass_tmr+0x12>
    }
  }
}
 80177ee:	bf00      	nop
 80177f0:	bf00      	nop
 80177f2:	3710      	adds	r7, #16
 80177f4:	46bd      	mov	sp, r7
 80177f6:	bd80      	pop	{r7, pc}
 80177f8:	24008bd4 	.word	0x24008bd4

080177fc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80177fc:	b580      	push	{r7, lr}
 80177fe:	b088      	sub	sp, #32
 8017800:	af00      	add	r7, sp, #0
 8017802:	6078      	str	r0, [r7, #4]
 8017804:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017806:	2300      	movs	r3, #0
 8017808:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801780a:	683a      	ldr	r2, [r7, #0]
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	429a      	cmp	r2, r3
 8017810:	d105      	bne.n	801781e <ip_reass_free_complete_datagram+0x22>
 8017812:	4b45      	ldr	r3, [pc, #276]	; (8017928 <ip_reass_free_complete_datagram+0x12c>)
 8017814:	22ab      	movs	r2, #171	; 0xab
 8017816:	4945      	ldr	r1, [pc, #276]	; (801792c <ip_reass_free_complete_datagram+0x130>)
 8017818:	4845      	ldr	r0, [pc, #276]	; (8017930 <ip_reass_free_complete_datagram+0x134>)
 801781a:	f001 f9a1 	bl	8018b60 <iprintf>
  if (prev != NULL) {
 801781e:	683b      	ldr	r3, [r7, #0]
 8017820:	2b00      	cmp	r3, #0
 8017822:	d00a      	beq.n	801783a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017824:	683b      	ldr	r3, [r7, #0]
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	687a      	ldr	r2, [r7, #4]
 801782a:	429a      	cmp	r2, r3
 801782c:	d005      	beq.n	801783a <ip_reass_free_complete_datagram+0x3e>
 801782e:	4b3e      	ldr	r3, [pc, #248]	; (8017928 <ip_reass_free_complete_datagram+0x12c>)
 8017830:	22ad      	movs	r2, #173	; 0xad
 8017832:	4940      	ldr	r1, [pc, #256]	; (8017934 <ip_reass_free_complete_datagram+0x138>)
 8017834:	483e      	ldr	r0, [pc, #248]	; (8017930 <ip_reass_free_complete_datagram+0x134>)
 8017836:	f001 f993 	bl	8018b60 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	685b      	ldr	r3, [r3, #4]
 801783e:	685b      	ldr	r3, [r3, #4]
 8017840:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017842:	697b      	ldr	r3, [r7, #20]
 8017844:	889b      	ldrh	r3, [r3, #4]
 8017846:	b29b      	uxth	r3, r3
 8017848:	2b00      	cmp	r3, #0
 801784a:	d12a      	bne.n	80178a2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	685b      	ldr	r3, [r3, #4]
 8017850:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017852:	697b      	ldr	r3, [r7, #20]
 8017854:	681a      	ldr	r2, [r3, #0]
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801785a:	69bb      	ldr	r3, [r7, #24]
 801785c:	6858      	ldr	r0, [r3, #4]
 801785e:	687b      	ldr	r3, [r7, #4]
 8017860:	3308      	adds	r3, #8
 8017862:	2214      	movs	r2, #20
 8017864:	4619      	mov	r1, r3
 8017866:	f001 f8d0 	bl	8018a0a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801786a:	2101      	movs	r1, #1
 801786c:	69b8      	ldr	r0, [r7, #24]
 801786e:	f7ff fc3d 	bl	80170ec <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017872:	69b8      	ldr	r0, [r7, #24]
 8017874:	f7f7 fae4 	bl	800ee40 <pbuf_clen>
 8017878:	4603      	mov	r3, r0
 801787a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801787c:	8bfa      	ldrh	r2, [r7, #30]
 801787e:	8a7b      	ldrh	r3, [r7, #18]
 8017880:	4413      	add	r3, r2
 8017882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017886:	db05      	blt.n	8017894 <ip_reass_free_complete_datagram+0x98>
 8017888:	4b27      	ldr	r3, [pc, #156]	; (8017928 <ip_reass_free_complete_datagram+0x12c>)
 801788a:	22bc      	movs	r2, #188	; 0xbc
 801788c:	492a      	ldr	r1, [pc, #168]	; (8017938 <ip_reass_free_complete_datagram+0x13c>)
 801788e:	4828      	ldr	r0, [pc, #160]	; (8017930 <ip_reass_free_complete_datagram+0x134>)
 8017890:	f001 f966 	bl	8018b60 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017894:	8bfa      	ldrh	r2, [r7, #30]
 8017896:	8a7b      	ldrh	r3, [r7, #18]
 8017898:	4413      	add	r3, r2
 801789a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801789c:	69b8      	ldr	r0, [r7, #24]
 801789e:	f7f7 fa41 	bl	800ed24 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	685b      	ldr	r3, [r3, #4]
 80178a6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80178a8:	e01f      	b.n	80178ea <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80178aa:	69bb      	ldr	r3, [r7, #24]
 80178ac:	685b      	ldr	r3, [r3, #4]
 80178ae:	617b      	str	r3, [r7, #20]
    pcur = p;
 80178b0:	69bb      	ldr	r3, [r7, #24]
 80178b2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80178b4:	697b      	ldr	r3, [r7, #20]
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80178ba:	68f8      	ldr	r0, [r7, #12]
 80178bc:	f7f7 fac0 	bl	800ee40 <pbuf_clen>
 80178c0:	4603      	mov	r3, r0
 80178c2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80178c4:	8bfa      	ldrh	r2, [r7, #30]
 80178c6:	8a7b      	ldrh	r3, [r7, #18]
 80178c8:	4413      	add	r3, r2
 80178ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80178ce:	db05      	blt.n	80178dc <ip_reass_free_complete_datagram+0xe0>
 80178d0:	4b15      	ldr	r3, [pc, #84]	; (8017928 <ip_reass_free_complete_datagram+0x12c>)
 80178d2:	22cc      	movs	r2, #204	; 0xcc
 80178d4:	4918      	ldr	r1, [pc, #96]	; (8017938 <ip_reass_free_complete_datagram+0x13c>)
 80178d6:	4816      	ldr	r0, [pc, #88]	; (8017930 <ip_reass_free_complete_datagram+0x134>)
 80178d8:	f001 f942 	bl	8018b60 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80178dc:	8bfa      	ldrh	r2, [r7, #30]
 80178de:	8a7b      	ldrh	r3, [r7, #18]
 80178e0:	4413      	add	r3, r2
 80178e2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80178e4:	68f8      	ldr	r0, [r7, #12]
 80178e6:	f7f7 fa1d 	bl	800ed24 <pbuf_free>
  while (p != NULL) {
 80178ea:	69bb      	ldr	r3, [r7, #24]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d1dc      	bne.n	80178aa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80178f0:	6839      	ldr	r1, [r7, #0]
 80178f2:	6878      	ldr	r0, [r7, #4]
 80178f4:	f000 f8c2 	bl	8017a7c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80178f8:	4b10      	ldr	r3, [pc, #64]	; (801793c <ip_reass_free_complete_datagram+0x140>)
 80178fa:	881b      	ldrh	r3, [r3, #0]
 80178fc:	8bfa      	ldrh	r2, [r7, #30]
 80178fe:	429a      	cmp	r2, r3
 8017900:	d905      	bls.n	801790e <ip_reass_free_complete_datagram+0x112>
 8017902:	4b09      	ldr	r3, [pc, #36]	; (8017928 <ip_reass_free_complete_datagram+0x12c>)
 8017904:	22d2      	movs	r2, #210	; 0xd2
 8017906:	490e      	ldr	r1, [pc, #56]	; (8017940 <ip_reass_free_complete_datagram+0x144>)
 8017908:	4809      	ldr	r0, [pc, #36]	; (8017930 <ip_reass_free_complete_datagram+0x134>)
 801790a:	f001 f929 	bl	8018b60 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801790e:	4b0b      	ldr	r3, [pc, #44]	; (801793c <ip_reass_free_complete_datagram+0x140>)
 8017910:	881a      	ldrh	r2, [r3, #0]
 8017912:	8bfb      	ldrh	r3, [r7, #30]
 8017914:	1ad3      	subs	r3, r2, r3
 8017916:	b29a      	uxth	r2, r3
 8017918:	4b08      	ldr	r3, [pc, #32]	; (801793c <ip_reass_free_complete_datagram+0x140>)
 801791a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801791c:	8bfb      	ldrh	r3, [r7, #30]
}
 801791e:	4618      	mov	r0, r3
 8017920:	3720      	adds	r7, #32
 8017922:	46bd      	mov	sp, r7
 8017924:	bd80      	pop	{r7, pc}
 8017926:	bf00      	nop
 8017928:	0801c4f8 	.word	0x0801c4f8
 801792c:	0801c534 	.word	0x0801c534
 8017930:	0801c540 	.word	0x0801c540
 8017934:	0801c568 	.word	0x0801c568
 8017938:	0801c57c 	.word	0x0801c57c
 801793c:	24008bd8 	.word	0x24008bd8
 8017940:	0801c59c 	.word	0x0801c59c

08017944 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017944:	b580      	push	{r7, lr}
 8017946:	b08a      	sub	sp, #40	; 0x28
 8017948:	af00      	add	r7, sp, #0
 801794a:	6078      	str	r0, [r7, #4]
 801794c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801794e:	2300      	movs	r3, #0
 8017950:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017952:	2300      	movs	r3, #0
 8017954:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017956:	2300      	movs	r3, #0
 8017958:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801795a:	2300      	movs	r3, #0
 801795c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801795e:	2300      	movs	r3, #0
 8017960:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017962:	4b28      	ldr	r3, [pc, #160]	; (8017a04 <ip_reass_remove_oldest_datagram+0xc0>)
 8017964:	681b      	ldr	r3, [r3, #0]
 8017966:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017968:	e030      	b.n	80179cc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801796c:	695a      	ldr	r2, [r3, #20]
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	68db      	ldr	r3, [r3, #12]
 8017972:	429a      	cmp	r2, r3
 8017974:	d10c      	bne.n	8017990 <ip_reass_remove_oldest_datagram+0x4c>
 8017976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017978:	699a      	ldr	r2, [r3, #24]
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	691b      	ldr	r3, [r3, #16]
 801797e:	429a      	cmp	r2, r3
 8017980:	d106      	bne.n	8017990 <ip_reass_remove_oldest_datagram+0x4c>
 8017982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017984:	899a      	ldrh	r2, [r3, #12]
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	889b      	ldrh	r3, [r3, #4]
 801798a:	b29b      	uxth	r3, r3
 801798c:	429a      	cmp	r2, r3
 801798e:	d014      	beq.n	80179ba <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017990:	693b      	ldr	r3, [r7, #16]
 8017992:	3301      	adds	r3, #1
 8017994:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017996:	6a3b      	ldr	r3, [r7, #32]
 8017998:	2b00      	cmp	r3, #0
 801799a:	d104      	bne.n	80179a6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801799e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80179a0:	69fb      	ldr	r3, [r7, #28]
 80179a2:	61bb      	str	r3, [r7, #24]
 80179a4:	e009      	b.n	80179ba <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80179a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179a8:	7fda      	ldrb	r2, [r3, #31]
 80179aa:	6a3b      	ldr	r3, [r7, #32]
 80179ac:	7fdb      	ldrb	r3, [r3, #31]
 80179ae:	429a      	cmp	r2, r3
 80179b0:	d803      	bhi.n	80179ba <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80179b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179b4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80179b6:	69fb      	ldr	r3, [r7, #28]
 80179b8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80179ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d001      	beq.n	80179c6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80179c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179c4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80179c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80179cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d1cb      	bne.n	801796a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80179d2:	6a3b      	ldr	r3, [r7, #32]
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d008      	beq.n	80179ea <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80179d8:	69b9      	ldr	r1, [r7, #24]
 80179da:	6a38      	ldr	r0, [r7, #32]
 80179dc:	f7ff ff0e 	bl	80177fc <ip_reass_free_complete_datagram>
 80179e0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80179e2:	697a      	ldr	r2, [r7, #20]
 80179e4:	68fb      	ldr	r3, [r7, #12]
 80179e6:	4413      	add	r3, r2
 80179e8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80179ea:	697a      	ldr	r2, [r7, #20]
 80179ec:	683b      	ldr	r3, [r7, #0]
 80179ee:	429a      	cmp	r2, r3
 80179f0:	da02      	bge.n	80179f8 <ip_reass_remove_oldest_datagram+0xb4>
 80179f2:	693b      	ldr	r3, [r7, #16]
 80179f4:	2b01      	cmp	r3, #1
 80179f6:	dcac      	bgt.n	8017952 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80179f8:	697b      	ldr	r3, [r7, #20]
}
 80179fa:	4618      	mov	r0, r3
 80179fc:	3728      	adds	r7, #40	; 0x28
 80179fe:	46bd      	mov	sp, r7
 8017a00:	bd80      	pop	{r7, pc}
 8017a02:	bf00      	nop
 8017a04:	24008bd4 	.word	0x24008bd4

08017a08 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017a08:	b580      	push	{r7, lr}
 8017a0a:	b084      	sub	sp, #16
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	6078      	str	r0, [r7, #4]
 8017a10:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017a12:	2004      	movs	r0, #4
 8017a14:	f7f6 fa6c 	bl	800def0 <memp_malloc>
 8017a18:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d110      	bne.n	8017a42 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017a20:	6839      	ldr	r1, [r7, #0]
 8017a22:	6878      	ldr	r0, [r7, #4]
 8017a24:	f7ff ff8e 	bl	8017944 <ip_reass_remove_oldest_datagram>
 8017a28:	4602      	mov	r2, r0
 8017a2a:	683b      	ldr	r3, [r7, #0]
 8017a2c:	4293      	cmp	r3, r2
 8017a2e:	dc03      	bgt.n	8017a38 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017a30:	2004      	movs	r0, #4
 8017a32:	f7f6 fa5d 	bl	800def0 <memp_malloc>
 8017a36:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d101      	bne.n	8017a42 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017a3e:	2300      	movs	r3, #0
 8017a40:	e016      	b.n	8017a70 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017a42:	2220      	movs	r2, #32
 8017a44:	2100      	movs	r1, #0
 8017a46:	68f8      	ldr	r0, [r7, #12]
 8017a48:	f000 ffed 	bl	8018a26 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017a4c:	68fb      	ldr	r3, [r7, #12]
 8017a4e:	220f      	movs	r2, #15
 8017a50:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017a52:	4b09      	ldr	r3, [pc, #36]	; (8017a78 <ip_reass_enqueue_new_datagram+0x70>)
 8017a54:	681a      	ldr	r2, [r3, #0]
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017a5a:	4a07      	ldr	r2, [pc, #28]	; (8017a78 <ip_reass_enqueue_new_datagram+0x70>)
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	3308      	adds	r3, #8
 8017a64:	2214      	movs	r2, #20
 8017a66:	6879      	ldr	r1, [r7, #4]
 8017a68:	4618      	mov	r0, r3
 8017a6a:	f000 ffce 	bl	8018a0a <memcpy>
  return ipr;
 8017a6e:	68fb      	ldr	r3, [r7, #12]
}
 8017a70:	4618      	mov	r0, r3
 8017a72:	3710      	adds	r7, #16
 8017a74:	46bd      	mov	sp, r7
 8017a76:	bd80      	pop	{r7, pc}
 8017a78:	24008bd4 	.word	0x24008bd4

08017a7c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017a7c:	b580      	push	{r7, lr}
 8017a7e:	b082      	sub	sp, #8
 8017a80:	af00      	add	r7, sp, #0
 8017a82:	6078      	str	r0, [r7, #4]
 8017a84:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017a86:	4b10      	ldr	r3, [pc, #64]	; (8017ac8 <ip_reass_dequeue_datagram+0x4c>)
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	687a      	ldr	r2, [r7, #4]
 8017a8c:	429a      	cmp	r2, r3
 8017a8e:	d104      	bne.n	8017a9a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	4a0c      	ldr	r2, [pc, #48]	; (8017ac8 <ip_reass_dequeue_datagram+0x4c>)
 8017a96:	6013      	str	r3, [r2, #0]
 8017a98:	e00d      	b.n	8017ab6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017a9a:	683b      	ldr	r3, [r7, #0]
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d106      	bne.n	8017aae <ip_reass_dequeue_datagram+0x32>
 8017aa0:	4b0a      	ldr	r3, [pc, #40]	; (8017acc <ip_reass_dequeue_datagram+0x50>)
 8017aa2:	f240 1245 	movw	r2, #325	; 0x145
 8017aa6:	490a      	ldr	r1, [pc, #40]	; (8017ad0 <ip_reass_dequeue_datagram+0x54>)
 8017aa8:	480a      	ldr	r0, [pc, #40]	; (8017ad4 <ip_reass_dequeue_datagram+0x58>)
 8017aaa:	f001 f859 	bl	8018b60 <iprintf>
    prev->next = ipr->next;
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	681a      	ldr	r2, [r3, #0]
 8017ab2:	683b      	ldr	r3, [r7, #0]
 8017ab4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017ab6:	6879      	ldr	r1, [r7, #4]
 8017ab8:	2004      	movs	r0, #4
 8017aba:	f7f6 fa8f 	bl	800dfdc <memp_free>
}
 8017abe:	bf00      	nop
 8017ac0:	3708      	adds	r7, #8
 8017ac2:	46bd      	mov	sp, r7
 8017ac4:	bd80      	pop	{r7, pc}
 8017ac6:	bf00      	nop
 8017ac8:	24008bd4 	.word	0x24008bd4
 8017acc:	0801c4f8 	.word	0x0801c4f8
 8017ad0:	0801c5c0 	.word	0x0801c5c0
 8017ad4:	0801c540 	.word	0x0801c540

08017ad8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017ad8:	b580      	push	{r7, lr}
 8017ada:	b08c      	sub	sp, #48	; 0x30
 8017adc:	af00      	add	r7, sp, #0
 8017ade:	60f8      	str	r0, [r7, #12]
 8017ae0:	60b9      	str	r1, [r7, #8]
 8017ae2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017ae4:	2300      	movs	r3, #0
 8017ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017ae8:	2301      	movs	r3, #1
 8017aea:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017aec:	68bb      	ldr	r3, [r7, #8]
 8017aee:	685b      	ldr	r3, [r3, #4]
 8017af0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017af2:	69fb      	ldr	r3, [r7, #28]
 8017af4:	885b      	ldrh	r3, [r3, #2]
 8017af6:	b29b      	uxth	r3, r3
 8017af8:	4618      	mov	r0, r3
 8017afa:	f7f5 fc33 	bl	800d364 <lwip_htons>
 8017afe:	4603      	mov	r3, r0
 8017b00:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017b02:	69fb      	ldr	r3, [r7, #28]
 8017b04:	781b      	ldrb	r3, [r3, #0]
 8017b06:	f003 030f 	and.w	r3, r3, #15
 8017b0a:	b2db      	uxtb	r3, r3
 8017b0c:	009b      	lsls	r3, r3, #2
 8017b0e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017b10:	7e7b      	ldrb	r3, [r7, #25]
 8017b12:	b29b      	uxth	r3, r3
 8017b14:	8b7a      	ldrh	r2, [r7, #26]
 8017b16:	429a      	cmp	r2, r3
 8017b18:	d202      	bcs.n	8017b20 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8017b1e:	e135      	b.n	8017d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017b20:	7e7b      	ldrb	r3, [r7, #25]
 8017b22:	b29b      	uxth	r3, r3
 8017b24:	8b7a      	ldrh	r2, [r7, #26]
 8017b26:	1ad3      	subs	r3, r2, r3
 8017b28:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017b2a:	69fb      	ldr	r3, [r7, #28]
 8017b2c:	88db      	ldrh	r3, [r3, #6]
 8017b2e:	b29b      	uxth	r3, r3
 8017b30:	4618      	mov	r0, r3
 8017b32:	f7f5 fc17 	bl	800d364 <lwip_htons>
 8017b36:	4603      	mov	r3, r0
 8017b38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017b3c:	b29b      	uxth	r3, r3
 8017b3e:	00db      	lsls	r3, r3, #3
 8017b40:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017b42:	68bb      	ldr	r3, [r7, #8]
 8017b44:	685b      	ldr	r3, [r3, #4]
 8017b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b4a:	2200      	movs	r2, #0
 8017b4c:	701a      	strb	r2, [r3, #0]
 8017b4e:	2200      	movs	r2, #0
 8017b50:	705a      	strb	r2, [r3, #1]
 8017b52:	2200      	movs	r2, #0
 8017b54:	709a      	strb	r2, [r3, #2]
 8017b56:	2200      	movs	r2, #0
 8017b58:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b5c:	8afa      	ldrh	r2, [r7, #22]
 8017b5e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017b60:	8afa      	ldrh	r2, [r7, #22]
 8017b62:	8b7b      	ldrh	r3, [r7, #26]
 8017b64:	4413      	add	r3, r2
 8017b66:	b29a      	uxth	r2, r3
 8017b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b6a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b6e:	88db      	ldrh	r3, [r3, #6]
 8017b70:	b29b      	uxth	r3, r3
 8017b72:	8afa      	ldrh	r2, [r7, #22]
 8017b74:	429a      	cmp	r2, r3
 8017b76:	d902      	bls.n	8017b7e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017b78:	f04f 33ff 	mov.w	r3, #4294967295
 8017b7c:	e106      	b.n	8017d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	685b      	ldr	r3, [r3, #4]
 8017b82:	627b      	str	r3, [r7, #36]	; 0x24
 8017b84:	e068      	b.n	8017c58 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b88:	685b      	ldr	r3, [r3, #4]
 8017b8a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b8e:	889b      	ldrh	r3, [r3, #4]
 8017b90:	b29a      	uxth	r2, r3
 8017b92:	693b      	ldr	r3, [r7, #16]
 8017b94:	889b      	ldrh	r3, [r3, #4]
 8017b96:	b29b      	uxth	r3, r3
 8017b98:	429a      	cmp	r2, r3
 8017b9a:	d235      	bcs.n	8017c08 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ba0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d020      	beq.n	8017bea <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017baa:	889b      	ldrh	r3, [r3, #4]
 8017bac:	b29a      	uxth	r2, r3
 8017bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bb0:	88db      	ldrh	r3, [r3, #6]
 8017bb2:	b29b      	uxth	r3, r3
 8017bb4:	429a      	cmp	r2, r3
 8017bb6:	d307      	bcc.n	8017bc8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bba:	88db      	ldrh	r3, [r3, #6]
 8017bbc:	b29a      	uxth	r2, r3
 8017bbe:	693b      	ldr	r3, [r7, #16]
 8017bc0:	889b      	ldrh	r3, [r3, #4]
 8017bc2:	b29b      	uxth	r3, r3
 8017bc4:	429a      	cmp	r2, r3
 8017bc6:	d902      	bls.n	8017bce <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8017bcc:	e0de      	b.n	8017d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bd0:	68ba      	ldr	r2, [r7, #8]
 8017bd2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bd6:	88db      	ldrh	r3, [r3, #6]
 8017bd8:	b29a      	uxth	r2, r3
 8017bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bdc:	889b      	ldrh	r3, [r3, #4]
 8017bde:	b29b      	uxth	r3, r3
 8017be0:	429a      	cmp	r2, r3
 8017be2:	d03d      	beq.n	8017c60 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017be4:	2300      	movs	r3, #0
 8017be6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017be8:	e03a      	b.n	8017c60 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017bec:	88db      	ldrh	r3, [r3, #6]
 8017bee:	b29a      	uxth	r2, r3
 8017bf0:	693b      	ldr	r3, [r7, #16]
 8017bf2:	889b      	ldrh	r3, [r3, #4]
 8017bf4:	b29b      	uxth	r3, r3
 8017bf6:	429a      	cmp	r2, r3
 8017bf8:	d902      	bls.n	8017c00 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8017bfe:	e0c5      	b.n	8017d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	68ba      	ldr	r2, [r7, #8]
 8017c04:	605a      	str	r2, [r3, #4]
      break;
 8017c06:	e02b      	b.n	8017c60 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c0a:	889b      	ldrh	r3, [r3, #4]
 8017c0c:	b29a      	uxth	r2, r3
 8017c0e:	693b      	ldr	r3, [r7, #16]
 8017c10:	889b      	ldrh	r3, [r3, #4]
 8017c12:	b29b      	uxth	r3, r3
 8017c14:	429a      	cmp	r2, r3
 8017c16:	d102      	bne.n	8017c1e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017c18:	f04f 33ff 	mov.w	r3, #4294967295
 8017c1c:	e0b6      	b.n	8017d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c20:	889b      	ldrh	r3, [r3, #4]
 8017c22:	b29a      	uxth	r2, r3
 8017c24:	693b      	ldr	r3, [r7, #16]
 8017c26:	88db      	ldrh	r3, [r3, #6]
 8017c28:	b29b      	uxth	r3, r3
 8017c2a:	429a      	cmp	r2, r3
 8017c2c:	d202      	bcs.n	8017c34 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8017c32:	e0ab      	b.n	8017d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d009      	beq.n	8017c4e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c3c:	88db      	ldrh	r3, [r3, #6]
 8017c3e:	b29a      	uxth	r2, r3
 8017c40:	693b      	ldr	r3, [r7, #16]
 8017c42:	889b      	ldrh	r3, [r3, #4]
 8017c44:	b29b      	uxth	r3, r3
 8017c46:	429a      	cmp	r2, r3
 8017c48:	d001      	beq.n	8017c4e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017c4a:	2300      	movs	r3, #0
 8017c4c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017c4e:	693b      	ldr	r3, [r7, #16]
 8017c50:	681b      	ldr	r3, [r3, #0]
 8017c52:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017c54:	693b      	ldr	r3, [r7, #16]
 8017c56:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d193      	bne.n	8017b86 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017c5e:	e000      	b.n	8017c62 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017c60:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d12d      	bne.n	8017cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d01c      	beq.n	8017ca8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c70:	88db      	ldrh	r3, [r3, #6]
 8017c72:	b29a      	uxth	r2, r3
 8017c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c76:	889b      	ldrh	r3, [r3, #4]
 8017c78:	b29b      	uxth	r3, r3
 8017c7a:	429a      	cmp	r2, r3
 8017c7c:	d906      	bls.n	8017c8c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017c7e:	4b45      	ldr	r3, [pc, #276]	; (8017d94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017c80:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017c84:	4944      	ldr	r1, [pc, #272]	; (8017d98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017c86:	4845      	ldr	r0, [pc, #276]	; (8017d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017c88:	f000 ff6a 	bl	8018b60 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c8e:	68ba      	ldr	r2, [r7, #8]
 8017c90:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c94:	88db      	ldrh	r3, [r3, #6]
 8017c96:	b29a      	uxth	r2, r3
 8017c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c9a:	889b      	ldrh	r3, [r3, #4]
 8017c9c:	b29b      	uxth	r3, r3
 8017c9e:	429a      	cmp	r2, r3
 8017ca0:	d010      	beq.n	8017cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	623b      	str	r3, [r7, #32]
 8017ca6:	e00d      	b.n	8017cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	685b      	ldr	r3, [r3, #4]
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	d006      	beq.n	8017cbe <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017cb0:	4b38      	ldr	r3, [pc, #224]	; (8017d94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017cb2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017cb6:	493a      	ldr	r1, [pc, #232]	; (8017da0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017cb8:	4838      	ldr	r0, [pc, #224]	; (8017d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017cba:	f000 ff51 	bl	8018b60 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	68ba      	ldr	r2, [r7, #8]
 8017cc2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d105      	bne.n	8017cd6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	7f9b      	ldrb	r3, [r3, #30]
 8017cce:	f003 0301 	and.w	r3, r3, #1
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d059      	beq.n	8017d8a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017cd6:	6a3b      	ldr	r3, [r7, #32]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d04f      	beq.n	8017d7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017cdc:	68fb      	ldr	r3, [r7, #12]
 8017cde:	685b      	ldr	r3, [r3, #4]
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d006      	beq.n	8017cf2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017ce4:	68fb      	ldr	r3, [r7, #12]
 8017ce6:	685b      	ldr	r3, [r3, #4]
 8017ce8:	685b      	ldr	r3, [r3, #4]
 8017cea:	889b      	ldrh	r3, [r3, #4]
 8017cec:	b29b      	uxth	r3, r3
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d002      	beq.n	8017cf8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017cf2:	2300      	movs	r3, #0
 8017cf4:	623b      	str	r3, [r7, #32]
 8017cf6:	e041      	b.n	8017d7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cfa:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017d02:	e012      	b.n	8017d2a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d06:	685b      	ldr	r3, [r3, #4]
 8017d08:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d0c:	88db      	ldrh	r3, [r3, #6]
 8017d0e:	b29a      	uxth	r2, r3
 8017d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d12:	889b      	ldrh	r3, [r3, #4]
 8017d14:	b29b      	uxth	r3, r3
 8017d16:	429a      	cmp	r2, r3
 8017d18:	d002      	beq.n	8017d20 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017d1a:	2300      	movs	r3, #0
 8017d1c:	623b      	str	r3, [r7, #32]
            break;
 8017d1e:	e007      	b.n	8017d30 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d22:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d1e9      	bne.n	8017d04 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017d30:	6a3b      	ldr	r3, [r7, #32]
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d022      	beq.n	8017d7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	685b      	ldr	r3, [r3, #4]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d106      	bne.n	8017d4c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017d3e:	4b15      	ldr	r3, [pc, #84]	; (8017d94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d40:	f240 12df 	movw	r2, #479	; 0x1df
 8017d44:	4917      	ldr	r1, [pc, #92]	; (8017da4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017d46:	4815      	ldr	r0, [pc, #84]	; (8017d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d48:	f000 ff0a 	bl	8018b60 <iprintf>
          LWIP_ASSERT("sanity check",
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	685b      	ldr	r3, [r3, #4]
 8017d50:	685b      	ldr	r3, [r3, #4]
 8017d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d54:	429a      	cmp	r2, r3
 8017d56:	d106      	bne.n	8017d66 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017d58:	4b0e      	ldr	r3, [pc, #56]	; (8017d94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d5a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017d5e:	4911      	ldr	r1, [pc, #68]	; (8017da4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017d60:	480e      	ldr	r0, [pc, #56]	; (8017d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d62:	f000 fefd 	bl	8018b60 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d006      	beq.n	8017d7c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017d6e:	4b09      	ldr	r3, [pc, #36]	; (8017d94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d70:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8017d74:	490c      	ldr	r1, [pc, #48]	; (8017da8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017d76:	4809      	ldr	r0, [pc, #36]	; (8017d9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d78:	f000 fef2 	bl	8018b60 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017d7c:	6a3b      	ldr	r3, [r7, #32]
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	bf14      	ite	ne
 8017d82:	2301      	movne	r3, #1
 8017d84:	2300      	moveq	r3, #0
 8017d86:	b2db      	uxtb	r3, r3
 8017d88:	e000      	b.n	8017d8c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017d8a:	2300      	movs	r3, #0
}
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	3730      	adds	r7, #48	; 0x30
 8017d90:	46bd      	mov	sp, r7
 8017d92:	bd80      	pop	{r7, pc}
 8017d94:	0801c4f8 	.word	0x0801c4f8
 8017d98:	0801c5dc 	.word	0x0801c5dc
 8017d9c:	0801c540 	.word	0x0801c540
 8017da0:	0801c5fc 	.word	0x0801c5fc
 8017da4:	0801c634 	.word	0x0801c634
 8017da8:	0801c644 	.word	0x0801c644

08017dac <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017dac:	b580      	push	{r7, lr}
 8017dae:	b08e      	sub	sp, #56	; 0x38
 8017db0:	af00      	add	r7, sp, #0
 8017db2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	685b      	ldr	r3, [r3, #4]
 8017db8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dbc:	781b      	ldrb	r3, [r3, #0]
 8017dbe:	f003 030f 	and.w	r3, r3, #15
 8017dc2:	b2db      	uxtb	r3, r3
 8017dc4:	009b      	lsls	r3, r3, #2
 8017dc6:	b2db      	uxtb	r3, r3
 8017dc8:	2b14      	cmp	r3, #20
 8017dca:	f040 8171 	bne.w	80180b0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017dd0:	88db      	ldrh	r3, [r3, #6]
 8017dd2:	b29b      	uxth	r3, r3
 8017dd4:	4618      	mov	r0, r3
 8017dd6:	f7f5 fac5 	bl	800d364 <lwip_htons>
 8017dda:	4603      	mov	r3, r0
 8017ddc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017de0:	b29b      	uxth	r3, r3
 8017de2:	00db      	lsls	r3, r3, #3
 8017de4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017de8:	885b      	ldrh	r3, [r3, #2]
 8017dea:	b29b      	uxth	r3, r3
 8017dec:	4618      	mov	r0, r3
 8017dee:	f7f5 fab9 	bl	800d364 <lwip_htons>
 8017df2:	4603      	mov	r3, r0
 8017df4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017df8:	781b      	ldrb	r3, [r3, #0]
 8017dfa:	f003 030f 	and.w	r3, r3, #15
 8017dfe:	b2db      	uxtb	r3, r3
 8017e00:	009b      	lsls	r3, r3, #2
 8017e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017e06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017e0a:	b29b      	uxth	r3, r3
 8017e0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017e0e:	429a      	cmp	r2, r3
 8017e10:	f0c0 8150 	bcc.w	80180b4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017e14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017e18:	b29b      	uxth	r3, r3
 8017e1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017e1c:	1ad3      	subs	r3, r2, r3
 8017e1e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017e20:	6878      	ldr	r0, [r7, #4]
 8017e22:	f7f7 f80d 	bl	800ee40 <pbuf_clen>
 8017e26:	4603      	mov	r3, r0
 8017e28:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017e2a:	4b8c      	ldr	r3, [pc, #560]	; (801805c <ip4_reass+0x2b0>)
 8017e2c:	881b      	ldrh	r3, [r3, #0]
 8017e2e:	461a      	mov	r2, r3
 8017e30:	8c3b      	ldrh	r3, [r7, #32]
 8017e32:	4413      	add	r3, r2
 8017e34:	2b0a      	cmp	r3, #10
 8017e36:	dd10      	ble.n	8017e5a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017e38:	8c3b      	ldrh	r3, [r7, #32]
 8017e3a:	4619      	mov	r1, r3
 8017e3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017e3e:	f7ff fd81 	bl	8017944 <ip_reass_remove_oldest_datagram>
 8017e42:	4603      	mov	r3, r0
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	f000 8137 	beq.w	80180b8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017e4a:	4b84      	ldr	r3, [pc, #528]	; (801805c <ip4_reass+0x2b0>)
 8017e4c:	881b      	ldrh	r3, [r3, #0]
 8017e4e:	461a      	mov	r2, r3
 8017e50:	8c3b      	ldrh	r3, [r7, #32]
 8017e52:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017e54:	2b0a      	cmp	r3, #10
 8017e56:	f300 812f 	bgt.w	80180b8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017e5a:	4b81      	ldr	r3, [pc, #516]	; (8018060 <ip4_reass+0x2b4>)
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	633b      	str	r3, [r7, #48]	; 0x30
 8017e60:	e015      	b.n	8017e8e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e64:	695a      	ldr	r2, [r3, #20]
 8017e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e68:	68db      	ldr	r3, [r3, #12]
 8017e6a:	429a      	cmp	r2, r3
 8017e6c:	d10c      	bne.n	8017e88 <ip4_reass+0xdc>
 8017e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e70:	699a      	ldr	r2, [r3, #24]
 8017e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e74:	691b      	ldr	r3, [r3, #16]
 8017e76:	429a      	cmp	r2, r3
 8017e78:	d106      	bne.n	8017e88 <ip4_reass+0xdc>
 8017e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e7c:	899a      	ldrh	r2, [r3, #12]
 8017e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e80:	889b      	ldrh	r3, [r3, #4]
 8017e82:	b29b      	uxth	r3, r3
 8017e84:	429a      	cmp	r2, r3
 8017e86:	d006      	beq.n	8017e96 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e8a:	681b      	ldr	r3, [r3, #0]
 8017e8c:	633b      	str	r3, [r7, #48]	; 0x30
 8017e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d1e6      	bne.n	8017e62 <ip4_reass+0xb6>
 8017e94:	e000      	b.n	8017e98 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017e96:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d109      	bne.n	8017eb2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017e9e:	8c3b      	ldrh	r3, [r7, #32]
 8017ea0:	4619      	mov	r1, r3
 8017ea2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017ea4:	f7ff fdb0 	bl	8017a08 <ip_reass_enqueue_new_datagram>
 8017ea8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d11c      	bne.n	8017eea <ip4_reass+0x13e>
      goto nullreturn;
 8017eb0:	e105      	b.n	80180be <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eb4:	88db      	ldrh	r3, [r3, #6]
 8017eb6:	b29b      	uxth	r3, r3
 8017eb8:	4618      	mov	r0, r3
 8017eba:	f7f5 fa53 	bl	800d364 <lwip_htons>
 8017ebe:	4603      	mov	r3, r0
 8017ec0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d110      	bne.n	8017eea <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eca:	89db      	ldrh	r3, [r3, #14]
 8017ecc:	4618      	mov	r0, r3
 8017ece:	f7f5 fa49 	bl	800d364 <lwip_htons>
 8017ed2:	4603      	mov	r3, r0
 8017ed4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d006      	beq.n	8017eea <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ede:	3308      	adds	r3, #8
 8017ee0:	2214      	movs	r2, #20
 8017ee2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	f000 fd90 	bl	8018a0a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eec:	88db      	ldrh	r3, [r3, #6]
 8017eee:	b29b      	uxth	r3, r3
 8017ef0:	f003 0320 	and.w	r3, r3, #32
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	bf0c      	ite	eq
 8017ef8:	2301      	moveq	r3, #1
 8017efa:	2300      	movne	r3, #0
 8017efc:	b2db      	uxtb	r3, r3
 8017efe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017f00:	69fb      	ldr	r3, [r7, #28]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d00e      	beq.n	8017f24 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017f06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017f08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017f0a:	4413      	add	r3, r2
 8017f0c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017f0e:	8b7a      	ldrh	r2, [r7, #26]
 8017f10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017f12:	429a      	cmp	r2, r3
 8017f14:	f0c0 80a0 	bcc.w	8018058 <ip4_reass+0x2ac>
 8017f18:	8b7b      	ldrh	r3, [r7, #26]
 8017f1a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017f1e:	4293      	cmp	r3, r2
 8017f20:	f200 809a 	bhi.w	8018058 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017f24:	69fa      	ldr	r2, [r7, #28]
 8017f26:	6879      	ldr	r1, [r7, #4]
 8017f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f2a:	f7ff fdd5 	bl	8017ad8 <ip_reass_chain_frag_into_datagram_and_validate>
 8017f2e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017f30:	697b      	ldr	r3, [r7, #20]
 8017f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f36:	f000 809b 	beq.w	8018070 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017f3a:	4b48      	ldr	r3, [pc, #288]	; (801805c <ip4_reass+0x2b0>)
 8017f3c:	881a      	ldrh	r2, [r3, #0]
 8017f3e:	8c3b      	ldrh	r3, [r7, #32]
 8017f40:	4413      	add	r3, r2
 8017f42:	b29a      	uxth	r2, r3
 8017f44:	4b45      	ldr	r3, [pc, #276]	; (801805c <ip4_reass+0x2b0>)
 8017f46:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017f48:	69fb      	ldr	r3, [r7, #28]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d00d      	beq.n	8017f6a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017f4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017f50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017f52:	4413      	add	r3, r2
 8017f54:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f58:	8a7a      	ldrh	r2, [r7, #18]
 8017f5a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f5e:	7f9b      	ldrb	r3, [r3, #30]
 8017f60:	f043 0301 	orr.w	r3, r3, #1
 8017f64:	b2da      	uxtb	r2, r3
 8017f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f68:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017f6a:	697b      	ldr	r3, [r7, #20]
 8017f6c:	2b01      	cmp	r3, #1
 8017f6e:	d171      	bne.n	8018054 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f72:	8b9b      	ldrh	r3, [r3, #28]
 8017f74:	3314      	adds	r3, #20
 8017f76:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f7a:	685b      	ldr	r3, [r3, #4]
 8017f7c:	685b      	ldr	r3, [r3, #4]
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f84:	685b      	ldr	r3, [r3, #4]
 8017f86:	685b      	ldr	r3, [r3, #4]
 8017f88:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f8c:	3308      	adds	r3, #8
 8017f8e:	2214      	movs	r2, #20
 8017f90:	4619      	mov	r1, r3
 8017f92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017f94:	f000 fd39 	bl	8018a0a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017f98:	8a3b      	ldrh	r3, [r7, #16]
 8017f9a:	4618      	mov	r0, r3
 8017f9c:	f7f5 f9e2 	bl	800d364 <lwip_htons>
 8017fa0:	4603      	mov	r3, r0
 8017fa2:	461a      	mov	r2, r3
 8017fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fa6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017faa:	2200      	movs	r2, #0
 8017fac:	719a      	strb	r2, [r3, #6]
 8017fae:	2200      	movs	r2, #0
 8017fb0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fb4:	2200      	movs	r2, #0
 8017fb6:	729a      	strb	r2, [r3, #10]
 8017fb8:	2200      	movs	r2, #0
 8017fba:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017fbe:	685b      	ldr	r3, [r3, #4]
 8017fc0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017fc2:	e00d      	b.n	8017fe0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fc6:	685b      	ldr	r3, [r3, #4]
 8017fc8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017fca:	2114      	movs	r1, #20
 8017fcc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017fce:	f7f6 fe23 	bl	800ec18 <pbuf_remove_header>
      pbuf_cat(p, r);
 8017fd2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017fd4:	6878      	ldr	r0, [r7, #4]
 8017fd6:	f7f6 ff73 	bl	800eec0 <pbuf_cat>
      r = iprh->next_pbuf;
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	681b      	ldr	r3, [r3, #0]
 8017fde:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d1ee      	bne.n	8017fc4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017fe6:	4b1e      	ldr	r3, [pc, #120]	; (8018060 <ip4_reass+0x2b4>)
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017fec:	429a      	cmp	r2, r3
 8017fee:	d102      	bne.n	8017ff6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017ff0:	2300      	movs	r3, #0
 8017ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017ff4:	e010      	b.n	8018018 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017ff6:	4b1a      	ldr	r3, [pc, #104]	; (8018060 <ip4_reass+0x2b4>)
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017ffc:	e007      	b.n	801800e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018000:	681b      	ldr	r3, [r3, #0]
 8018002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018004:	429a      	cmp	r2, r3
 8018006:	d006      	beq.n	8018016 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801800e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018010:	2b00      	cmp	r3, #0
 8018012:	d1f4      	bne.n	8017ffe <ip4_reass+0x252>
 8018014:	e000      	b.n	8018018 <ip4_reass+0x26c>
          break;
 8018016:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018018:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801801a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801801c:	f7ff fd2e 	bl	8017a7c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018020:	6878      	ldr	r0, [r7, #4]
 8018022:	f7f6 ff0d 	bl	800ee40 <pbuf_clen>
 8018026:	4603      	mov	r3, r0
 8018028:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801802a:	4b0c      	ldr	r3, [pc, #48]	; (801805c <ip4_reass+0x2b0>)
 801802c:	881b      	ldrh	r3, [r3, #0]
 801802e:	8c3a      	ldrh	r2, [r7, #32]
 8018030:	429a      	cmp	r2, r3
 8018032:	d906      	bls.n	8018042 <ip4_reass+0x296>
 8018034:	4b0b      	ldr	r3, [pc, #44]	; (8018064 <ip4_reass+0x2b8>)
 8018036:	f240 229b 	movw	r2, #667	; 0x29b
 801803a:	490b      	ldr	r1, [pc, #44]	; (8018068 <ip4_reass+0x2bc>)
 801803c:	480b      	ldr	r0, [pc, #44]	; (801806c <ip4_reass+0x2c0>)
 801803e:	f000 fd8f 	bl	8018b60 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018042:	4b06      	ldr	r3, [pc, #24]	; (801805c <ip4_reass+0x2b0>)
 8018044:	881a      	ldrh	r2, [r3, #0]
 8018046:	8c3b      	ldrh	r3, [r7, #32]
 8018048:	1ad3      	subs	r3, r2, r3
 801804a:	b29a      	uxth	r2, r3
 801804c:	4b03      	ldr	r3, [pc, #12]	; (801805c <ip4_reass+0x2b0>)
 801804e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	e038      	b.n	80180c6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018054:	2300      	movs	r3, #0
 8018056:	e036      	b.n	80180c6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018058:	bf00      	nop
 801805a:	e00a      	b.n	8018072 <ip4_reass+0x2c6>
 801805c:	24008bd8 	.word	0x24008bd8
 8018060:	24008bd4 	.word	0x24008bd4
 8018064:	0801c4f8 	.word	0x0801c4f8
 8018068:	0801c668 	.word	0x0801c668
 801806c:	0801c540 	.word	0x0801c540
    goto nullreturn_ipr;
 8018070:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018074:	2b00      	cmp	r3, #0
 8018076:	d106      	bne.n	8018086 <ip4_reass+0x2da>
 8018078:	4b15      	ldr	r3, [pc, #84]	; (80180d0 <ip4_reass+0x324>)
 801807a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801807e:	4915      	ldr	r1, [pc, #84]	; (80180d4 <ip4_reass+0x328>)
 8018080:	4815      	ldr	r0, [pc, #84]	; (80180d8 <ip4_reass+0x32c>)
 8018082:	f000 fd6d 	bl	8018b60 <iprintf>
  if (ipr->p == NULL) {
 8018086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018088:	685b      	ldr	r3, [r3, #4]
 801808a:	2b00      	cmp	r3, #0
 801808c:	d116      	bne.n	80180bc <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801808e:	4b13      	ldr	r3, [pc, #76]	; (80180dc <ip4_reass+0x330>)
 8018090:	681b      	ldr	r3, [r3, #0]
 8018092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018094:	429a      	cmp	r2, r3
 8018096:	d006      	beq.n	80180a6 <ip4_reass+0x2fa>
 8018098:	4b0d      	ldr	r3, [pc, #52]	; (80180d0 <ip4_reass+0x324>)
 801809a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801809e:	4910      	ldr	r1, [pc, #64]	; (80180e0 <ip4_reass+0x334>)
 80180a0:	480d      	ldr	r0, [pc, #52]	; (80180d8 <ip4_reass+0x32c>)
 80180a2:	f000 fd5d 	bl	8018b60 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80180a6:	2100      	movs	r1, #0
 80180a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80180aa:	f7ff fce7 	bl	8017a7c <ip_reass_dequeue_datagram>
 80180ae:	e006      	b.n	80180be <ip4_reass+0x312>
    goto nullreturn;
 80180b0:	bf00      	nop
 80180b2:	e004      	b.n	80180be <ip4_reass+0x312>
    goto nullreturn;
 80180b4:	bf00      	nop
 80180b6:	e002      	b.n	80180be <ip4_reass+0x312>
      goto nullreturn;
 80180b8:	bf00      	nop
 80180ba:	e000      	b.n	80180be <ip4_reass+0x312>
  }

nullreturn:
 80180bc:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80180be:	6878      	ldr	r0, [r7, #4]
 80180c0:	f7f6 fe30 	bl	800ed24 <pbuf_free>
  return NULL;
 80180c4:	2300      	movs	r3, #0
}
 80180c6:	4618      	mov	r0, r3
 80180c8:	3738      	adds	r7, #56	; 0x38
 80180ca:	46bd      	mov	sp, r7
 80180cc:	bd80      	pop	{r7, pc}
 80180ce:	bf00      	nop
 80180d0:	0801c4f8 	.word	0x0801c4f8
 80180d4:	0801c684 	.word	0x0801c684
 80180d8:	0801c540 	.word	0x0801c540
 80180dc:	24008bd4 	.word	0x24008bd4
 80180e0:	0801c690 	.word	0x0801c690

080180e4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80180e4:	b580      	push	{r7, lr}
 80180e6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80180e8:	2005      	movs	r0, #5
 80180ea:	f7f5 ff01 	bl	800def0 <memp_malloc>
 80180ee:	4603      	mov	r3, r0
}
 80180f0:	4618      	mov	r0, r3
 80180f2:	bd80      	pop	{r7, pc}

080180f4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80180f4:	b580      	push	{r7, lr}
 80180f6:	b082      	sub	sp, #8
 80180f8:	af00      	add	r7, sp, #0
 80180fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d106      	bne.n	8018110 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018102:	4b07      	ldr	r3, [pc, #28]	; (8018120 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018104:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018108:	4906      	ldr	r1, [pc, #24]	; (8018124 <ip_frag_free_pbuf_custom_ref+0x30>)
 801810a:	4807      	ldr	r0, [pc, #28]	; (8018128 <ip_frag_free_pbuf_custom_ref+0x34>)
 801810c:	f000 fd28 	bl	8018b60 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018110:	6879      	ldr	r1, [r7, #4]
 8018112:	2005      	movs	r0, #5
 8018114:	f7f5 ff62 	bl	800dfdc <memp_free>
}
 8018118:	bf00      	nop
 801811a:	3708      	adds	r7, #8
 801811c:	46bd      	mov	sp, r7
 801811e:	bd80      	pop	{r7, pc}
 8018120:	0801c4f8 	.word	0x0801c4f8
 8018124:	0801c6b0 	.word	0x0801c6b0
 8018128:	0801c540 	.word	0x0801c540

0801812c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801812c:	b580      	push	{r7, lr}
 801812e:	b084      	sub	sp, #16
 8018130:	af00      	add	r7, sp, #0
 8018132:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	2b00      	cmp	r3, #0
 801813c:	d106      	bne.n	801814c <ipfrag_free_pbuf_custom+0x20>
 801813e:	4b11      	ldr	r3, [pc, #68]	; (8018184 <ipfrag_free_pbuf_custom+0x58>)
 8018140:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018144:	4910      	ldr	r1, [pc, #64]	; (8018188 <ipfrag_free_pbuf_custom+0x5c>)
 8018146:	4811      	ldr	r0, [pc, #68]	; (801818c <ipfrag_free_pbuf_custom+0x60>)
 8018148:	f000 fd0a 	bl	8018b60 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801814c:	68fa      	ldr	r2, [r7, #12]
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	429a      	cmp	r2, r3
 8018152:	d006      	beq.n	8018162 <ipfrag_free_pbuf_custom+0x36>
 8018154:	4b0b      	ldr	r3, [pc, #44]	; (8018184 <ipfrag_free_pbuf_custom+0x58>)
 8018156:	f240 22cf 	movw	r2, #719	; 0x2cf
 801815a:	490d      	ldr	r1, [pc, #52]	; (8018190 <ipfrag_free_pbuf_custom+0x64>)
 801815c:	480b      	ldr	r0, [pc, #44]	; (801818c <ipfrag_free_pbuf_custom+0x60>)
 801815e:	f000 fcff 	bl	8018b60 <iprintf>
  if (pcr->original != NULL) {
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	695b      	ldr	r3, [r3, #20]
 8018166:	2b00      	cmp	r3, #0
 8018168:	d004      	beq.n	8018174 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801816a:	68fb      	ldr	r3, [r7, #12]
 801816c:	695b      	ldr	r3, [r3, #20]
 801816e:	4618      	mov	r0, r3
 8018170:	f7f6 fdd8 	bl	800ed24 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018174:	68f8      	ldr	r0, [r7, #12]
 8018176:	f7ff ffbd 	bl	80180f4 <ip_frag_free_pbuf_custom_ref>
}
 801817a:	bf00      	nop
 801817c:	3710      	adds	r7, #16
 801817e:	46bd      	mov	sp, r7
 8018180:	bd80      	pop	{r7, pc}
 8018182:	bf00      	nop
 8018184:	0801c4f8 	.word	0x0801c4f8
 8018188:	0801c6bc 	.word	0x0801c6bc
 801818c:	0801c540 	.word	0x0801c540
 8018190:	0801c6c8 	.word	0x0801c6c8

08018194 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018194:	b580      	push	{r7, lr}
 8018196:	b094      	sub	sp, #80	; 0x50
 8018198:	af02      	add	r7, sp, #8
 801819a:	60f8      	str	r0, [r7, #12]
 801819c:	60b9      	str	r1, [r7, #8]
 801819e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80181a0:	2300      	movs	r3, #0
 80181a2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80181a6:	68bb      	ldr	r3, [r7, #8]
 80181a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80181aa:	3b14      	subs	r3, #20
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	da00      	bge.n	80181b2 <ip4_frag+0x1e>
 80181b0:	3307      	adds	r3, #7
 80181b2:	10db      	asrs	r3, r3, #3
 80181b4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80181b6:	2314      	movs	r3, #20
 80181b8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80181ba:	68fb      	ldr	r3, [r7, #12]
 80181bc:	685b      	ldr	r3, [r3, #4]
 80181be:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80181c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80181c2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80181c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181c6:	781b      	ldrb	r3, [r3, #0]
 80181c8:	f003 030f 	and.w	r3, r3, #15
 80181cc:	b2db      	uxtb	r3, r3
 80181ce:	009b      	lsls	r3, r3, #2
 80181d0:	b2db      	uxtb	r3, r3
 80181d2:	2b14      	cmp	r3, #20
 80181d4:	d002      	beq.n	80181dc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80181d6:	f06f 0305 	mvn.w	r3, #5
 80181da:	e110      	b.n	80183fe <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80181dc:	68fb      	ldr	r3, [r7, #12]
 80181de:	895b      	ldrh	r3, [r3, #10]
 80181e0:	2b13      	cmp	r3, #19
 80181e2:	d809      	bhi.n	80181f8 <ip4_frag+0x64>
 80181e4:	4b88      	ldr	r3, [pc, #544]	; (8018408 <ip4_frag+0x274>)
 80181e6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80181ea:	4988      	ldr	r1, [pc, #544]	; (801840c <ip4_frag+0x278>)
 80181ec:	4888      	ldr	r0, [pc, #544]	; (8018410 <ip4_frag+0x27c>)
 80181ee:	f000 fcb7 	bl	8018b60 <iprintf>
 80181f2:	f06f 0305 	mvn.w	r3, #5
 80181f6:	e102      	b.n	80183fe <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80181f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181fa:	88db      	ldrh	r3, [r3, #6]
 80181fc:	b29b      	uxth	r3, r3
 80181fe:	4618      	mov	r0, r3
 8018200:	f7f5 f8b0 	bl	800d364 <lwip_htons>
 8018204:	4603      	mov	r3, r0
 8018206:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018208:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801820a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801820e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018212:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018218:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	891b      	ldrh	r3, [r3, #8]
 801821e:	3b14      	subs	r3, #20
 8018220:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018224:	e0e1      	b.n	80183ea <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018226:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018228:	00db      	lsls	r3, r3, #3
 801822a:	b29b      	uxth	r3, r3
 801822c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018230:	4293      	cmp	r3, r2
 8018232:	bf28      	it	cs
 8018234:	4613      	movcs	r3, r2
 8018236:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018238:	f44f 7220 	mov.w	r2, #640	; 0x280
 801823c:	2114      	movs	r1, #20
 801823e:	200e      	movs	r0, #14
 8018240:	f7f6 fa8c 	bl	800e75c <pbuf_alloc>
 8018244:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018248:	2b00      	cmp	r3, #0
 801824a:	f000 80d5 	beq.w	80183f8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801824e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018250:	895b      	ldrh	r3, [r3, #10]
 8018252:	2b13      	cmp	r3, #19
 8018254:	d806      	bhi.n	8018264 <ip4_frag+0xd0>
 8018256:	4b6c      	ldr	r3, [pc, #432]	; (8018408 <ip4_frag+0x274>)
 8018258:	f44f 7249 	mov.w	r2, #804	; 0x324
 801825c:	496d      	ldr	r1, [pc, #436]	; (8018414 <ip4_frag+0x280>)
 801825e:	486c      	ldr	r0, [pc, #432]	; (8018410 <ip4_frag+0x27c>)
 8018260:	f000 fc7e 	bl	8018b60 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018266:	685b      	ldr	r3, [r3, #4]
 8018268:	2214      	movs	r2, #20
 801826a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801826c:	4618      	mov	r0, r3
 801826e:	f000 fbcc 	bl	8018a0a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018274:	685b      	ldr	r3, [r3, #4]
 8018276:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018278:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801827a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801827e:	e064      	b.n	801834a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018280:	68fb      	ldr	r3, [r7, #12]
 8018282:	895a      	ldrh	r2, [r3, #10]
 8018284:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018286:	1ad3      	subs	r3, r2, r3
 8018288:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	895b      	ldrh	r3, [r3, #10]
 801828e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018290:	429a      	cmp	r2, r3
 8018292:	d906      	bls.n	80182a2 <ip4_frag+0x10e>
 8018294:	4b5c      	ldr	r3, [pc, #368]	; (8018408 <ip4_frag+0x274>)
 8018296:	f240 322d 	movw	r2, #813	; 0x32d
 801829a:	495f      	ldr	r1, [pc, #380]	; (8018418 <ip4_frag+0x284>)
 801829c:	485c      	ldr	r0, [pc, #368]	; (8018410 <ip4_frag+0x27c>)
 801829e:	f000 fc5f 	bl	8018b60 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80182a2:	8bfa      	ldrh	r2, [r7, #30]
 80182a4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80182a8:	4293      	cmp	r3, r2
 80182aa:	bf28      	it	cs
 80182ac:	4613      	movcs	r3, r2
 80182ae:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80182b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d105      	bne.n	80182c6 <ip4_frag+0x132>
        poff = 0;
 80182ba:	2300      	movs	r3, #0
 80182bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80182be:	68fb      	ldr	r3, [r7, #12]
 80182c0:	681b      	ldr	r3, [r3, #0]
 80182c2:	60fb      	str	r3, [r7, #12]
        continue;
 80182c4:	e041      	b.n	801834a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80182c6:	f7ff ff0d 	bl	80180e4 <ip_frag_alloc_pbuf_custom_ref>
 80182ca:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80182cc:	69bb      	ldr	r3, [r7, #24]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d103      	bne.n	80182da <ip4_frag+0x146>
        pbuf_free(rambuf);
 80182d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80182d4:	f7f6 fd26 	bl	800ed24 <pbuf_free>
        goto memerr;
 80182d8:	e08f      	b.n	80183fa <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80182da:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80182dc:	68fb      	ldr	r3, [r7, #12]
 80182de:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80182e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80182e2:	4413      	add	r3, r2
 80182e4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80182e8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80182ec:	9201      	str	r2, [sp, #4]
 80182ee:	9300      	str	r3, [sp, #0]
 80182f0:	4603      	mov	r3, r0
 80182f2:	2241      	movs	r2, #65	; 0x41
 80182f4:	2000      	movs	r0, #0
 80182f6:	f7f6 fb5b 	bl	800e9b0 <pbuf_alloced_custom>
 80182fa:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80182fc:	697b      	ldr	r3, [r7, #20]
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d106      	bne.n	8018310 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018302:	69b8      	ldr	r0, [r7, #24]
 8018304:	f7ff fef6 	bl	80180f4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018308:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801830a:	f7f6 fd0b 	bl	800ed24 <pbuf_free>
        goto memerr;
 801830e:	e074      	b.n	80183fa <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018310:	68f8      	ldr	r0, [r7, #12]
 8018312:	f7f6 fdad 	bl	800ee70 <pbuf_ref>
      pcr->original = p;
 8018316:	69bb      	ldr	r3, [r7, #24]
 8018318:	68fa      	ldr	r2, [r7, #12]
 801831a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801831c:	69bb      	ldr	r3, [r7, #24]
 801831e:	4a3f      	ldr	r2, [pc, #252]	; (801841c <ip4_frag+0x288>)
 8018320:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018322:	6979      	ldr	r1, [r7, #20]
 8018324:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018326:	f7f6 fdcb 	bl	800eec0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801832a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801832e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018332:	1ad3      	subs	r3, r2, r3
 8018334:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018338:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801833c:	2b00      	cmp	r3, #0
 801833e:	d004      	beq.n	801834a <ip4_frag+0x1b6>
        poff = 0;
 8018340:	2300      	movs	r3, #0
 8018342:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018344:	68fb      	ldr	r3, [r7, #12]
 8018346:	681b      	ldr	r3, [r3, #0]
 8018348:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801834a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801834e:	2b00      	cmp	r3, #0
 8018350:	d196      	bne.n	8018280 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018352:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018354:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018358:	4413      	add	r3, r2
 801835a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801835c:	68bb      	ldr	r3, [r7, #8]
 801835e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018360:	f1a3 0213 	sub.w	r2, r3, #19
 8018364:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018368:	429a      	cmp	r2, r3
 801836a:	bfcc      	ite	gt
 801836c:	2301      	movgt	r3, #1
 801836e:	2300      	movle	r3, #0
 8018370:	b2db      	uxtb	r3, r3
 8018372:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018374:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018378:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801837c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801837e:	6a3b      	ldr	r3, [r7, #32]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d002      	beq.n	801838a <ip4_frag+0x1f6>
 8018384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018386:	2b00      	cmp	r3, #0
 8018388:	d003      	beq.n	8018392 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801838a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801838c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018390:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018392:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018394:	4618      	mov	r0, r3
 8018396:	f7f4 ffe5 	bl	800d364 <lwip_htons>
 801839a:	4603      	mov	r3, r0
 801839c:	461a      	mov	r2, r3
 801839e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183a0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80183a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80183a4:	3314      	adds	r3, #20
 80183a6:	b29b      	uxth	r3, r3
 80183a8:	4618      	mov	r0, r3
 80183aa:	f7f4 ffdb 	bl	800d364 <lwip_htons>
 80183ae:	4603      	mov	r3, r0
 80183b0:	461a      	mov	r2, r3
 80183b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183b4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80183b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183b8:	2200      	movs	r2, #0
 80183ba:	729a      	strb	r2, [r3, #10]
 80183bc:	2200      	movs	r2, #0
 80183be:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80183c0:	68bb      	ldr	r3, [r7, #8]
 80183c2:	695b      	ldr	r3, [r3, #20]
 80183c4:	687a      	ldr	r2, [r7, #4]
 80183c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80183c8:	68b8      	ldr	r0, [r7, #8]
 80183ca:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80183cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80183ce:	f7f6 fca9 	bl	800ed24 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80183d2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80183d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80183d8:	1ad3      	subs	r3, r2, r3
 80183da:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80183de:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80183e2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80183e4:	4413      	add	r3, r2
 80183e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80183ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	f47f af19 	bne.w	8018226 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80183f4:	2300      	movs	r3, #0
 80183f6:	e002      	b.n	80183fe <ip4_frag+0x26a>
      goto memerr;
 80183f8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80183fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80183fe:	4618      	mov	r0, r3
 8018400:	3748      	adds	r7, #72	; 0x48
 8018402:	46bd      	mov	sp, r7
 8018404:	bd80      	pop	{r7, pc}
 8018406:	bf00      	nop
 8018408:	0801c4f8 	.word	0x0801c4f8
 801840c:	0801c6d4 	.word	0x0801c6d4
 8018410:	0801c540 	.word	0x0801c540
 8018414:	0801c6f0 	.word	0x0801c6f0
 8018418:	0801c710 	.word	0x0801c710
 801841c:	0801812d 	.word	0x0801812d

08018420 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018420:	b580      	push	{r7, lr}
 8018422:	b086      	sub	sp, #24
 8018424:	af00      	add	r7, sp, #0
 8018426:	6078      	str	r0, [r7, #4]
 8018428:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801842a:	230e      	movs	r3, #14
 801842c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	895b      	ldrh	r3, [r3, #10]
 8018432:	2b0e      	cmp	r3, #14
 8018434:	d96e      	bls.n	8018514 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	7bdb      	ldrb	r3, [r3, #15]
 801843a:	2b00      	cmp	r3, #0
 801843c:	d106      	bne.n	801844c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801843e:	683b      	ldr	r3, [r7, #0]
 8018440:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018444:	3301      	adds	r3, #1
 8018446:	b2da      	uxtb	r2, r3
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	685b      	ldr	r3, [r3, #4]
 8018450:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018452:	693b      	ldr	r3, [r7, #16]
 8018454:	7b1a      	ldrb	r2, [r3, #12]
 8018456:	7b5b      	ldrb	r3, [r3, #13]
 8018458:	021b      	lsls	r3, r3, #8
 801845a:	4313      	orrs	r3, r2
 801845c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801845e:	693b      	ldr	r3, [r7, #16]
 8018460:	781b      	ldrb	r3, [r3, #0]
 8018462:	f003 0301 	and.w	r3, r3, #1
 8018466:	2b00      	cmp	r3, #0
 8018468:	d023      	beq.n	80184b2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801846a:	693b      	ldr	r3, [r7, #16]
 801846c:	781b      	ldrb	r3, [r3, #0]
 801846e:	2b01      	cmp	r3, #1
 8018470:	d10f      	bne.n	8018492 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018472:	693b      	ldr	r3, [r7, #16]
 8018474:	785b      	ldrb	r3, [r3, #1]
 8018476:	2b00      	cmp	r3, #0
 8018478:	d11b      	bne.n	80184b2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801847a:	693b      	ldr	r3, [r7, #16]
 801847c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801847e:	2b5e      	cmp	r3, #94	; 0x5e
 8018480:	d117      	bne.n	80184b2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	7b5b      	ldrb	r3, [r3, #13]
 8018486:	f043 0310 	orr.w	r3, r3, #16
 801848a:	b2da      	uxtb	r2, r3
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	735a      	strb	r2, [r3, #13]
 8018490:	e00f      	b.n	80184b2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018492:	693b      	ldr	r3, [r7, #16]
 8018494:	2206      	movs	r2, #6
 8018496:	4928      	ldr	r1, [pc, #160]	; (8018538 <ethernet_input+0x118>)
 8018498:	4618      	mov	r0, r3
 801849a:	f000 faa6 	bl	80189ea <memcmp>
 801849e:	4603      	mov	r3, r0
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d106      	bne.n	80184b2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	7b5b      	ldrb	r3, [r3, #13]
 80184a8:	f043 0308 	orr.w	r3, r3, #8
 80184ac:	b2da      	uxtb	r2, r3
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80184b2:	89fb      	ldrh	r3, [r7, #14]
 80184b4:	2b08      	cmp	r3, #8
 80184b6:	d003      	beq.n	80184c0 <ethernet_input+0xa0>
 80184b8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80184bc:	d014      	beq.n	80184e8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80184be:	e032      	b.n	8018526 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80184c0:	683b      	ldr	r3, [r7, #0]
 80184c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80184c6:	f003 0308 	and.w	r3, r3, #8
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d024      	beq.n	8018518 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80184ce:	8afb      	ldrh	r3, [r7, #22]
 80184d0:	4619      	mov	r1, r3
 80184d2:	6878      	ldr	r0, [r7, #4]
 80184d4:	f7f6 fba0 	bl	800ec18 <pbuf_remove_header>
 80184d8:	4603      	mov	r3, r0
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d11e      	bne.n	801851c <ethernet_input+0xfc>
        ip4_input(p, netif);
 80184de:	6839      	ldr	r1, [r7, #0]
 80184e0:	6878      	ldr	r0, [r7, #4]
 80184e2:	f7fe ff21 	bl	8017328 <ip4_input>
      break;
 80184e6:	e013      	b.n	8018510 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80184e8:	683b      	ldr	r3, [r7, #0]
 80184ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80184ee:	f003 0308 	and.w	r3, r3, #8
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d014      	beq.n	8018520 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80184f6:	8afb      	ldrh	r3, [r7, #22]
 80184f8:	4619      	mov	r1, r3
 80184fa:	6878      	ldr	r0, [r7, #4]
 80184fc:	f7f6 fb8c 	bl	800ec18 <pbuf_remove_header>
 8018500:	4603      	mov	r3, r0
 8018502:	2b00      	cmp	r3, #0
 8018504:	d10e      	bne.n	8018524 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018506:	6839      	ldr	r1, [r7, #0]
 8018508:	6878      	ldr	r0, [r7, #4]
 801850a:	f7fe f89b 	bl	8016644 <etharp_input>
      break;
 801850e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018510:	2300      	movs	r3, #0
 8018512:	e00c      	b.n	801852e <ethernet_input+0x10e>
    goto free_and_return;
 8018514:	bf00      	nop
 8018516:	e006      	b.n	8018526 <ethernet_input+0x106>
        goto free_and_return;
 8018518:	bf00      	nop
 801851a:	e004      	b.n	8018526 <ethernet_input+0x106>
        goto free_and_return;
 801851c:	bf00      	nop
 801851e:	e002      	b.n	8018526 <ethernet_input+0x106>
        goto free_and_return;
 8018520:	bf00      	nop
 8018522:	e000      	b.n	8018526 <ethernet_input+0x106>
        goto free_and_return;
 8018524:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018526:	6878      	ldr	r0, [r7, #4]
 8018528:	f7f6 fbfc 	bl	800ed24 <pbuf_free>
  return ERR_OK;
 801852c:	2300      	movs	r3, #0
}
 801852e:	4618      	mov	r0, r3
 8018530:	3718      	adds	r7, #24
 8018532:	46bd      	mov	sp, r7
 8018534:	bd80      	pop	{r7, pc}
 8018536:	bf00      	nop
 8018538:	0801ebc4 	.word	0x0801ebc4

0801853c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801853c:	b580      	push	{r7, lr}
 801853e:	b086      	sub	sp, #24
 8018540:	af00      	add	r7, sp, #0
 8018542:	60f8      	str	r0, [r7, #12]
 8018544:	60b9      	str	r1, [r7, #8]
 8018546:	607a      	str	r2, [r7, #4]
 8018548:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801854a:	8c3b      	ldrh	r3, [r7, #32]
 801854c:	4618      	mov	r0, r3
 801854e:	f7f4 ff09 	bl	800d364 <lwip_htons>
 8018552:	4603      	mov	r3, r0
 8018554:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018556:	210e      	movs	r1, #14
 8018558:	68b8      	ldr	r0, [r7, #8]
 801855a:	f7f6 fb4d 	bl	800ebf8 <pbuf_add_header>
 801855e:	4603      	mov	r3, r0
 8018560:	2b00      	cmp	r3, #0
 8018562:	d125      	bne.n	80185b0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018564:	68bb      	ldr	r3, [r7, #8]
 8018566:	685b      	ldr	r3, [r3, #4]
 8018568:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801856a:	693b      	ldr	r3, [r7, #16]
 801856c:	8afa      	ldrh	r2, [r7, #22]
 801856e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018570:	693b      	ldr	r3, [r7, #16]
 8018572:	2206      	movs	r2, #6
 8018574:	6839      	ldr	r1, [r7, #0]
 8018576:	4618      	mov	r0, r3
 8018578:	f000 fa47 	bl	8018a0a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801857c:	693b      	ldr	r3, [r7, #16]
 801857e:	3306      	adds	r3, #6
 8018580:	2206      	movs	r2, #6
 8018582:	6879      	ldr	r1, [r7, #4]
 8018584:	4618      	mov	r0, r3
 8018586:	f000 fa40 	bl	8018a0a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801858a:	68fb      	ldr	r3, [r7, #12]
 801858c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018590:	2b06      	cmp	r3, #6
 8018592:	d006      	beq.n	80185a2 <ethernet_output+0x66>
 8018594:	4b0a      	ldr	r3, [pc, #40]	; (80185c0 <ethernet_output+0x84>)
 8018596:	f44f 7299 	mov.w	r2, #306	; 0x132
 801859a:	490a      	ldr	r1, [pc, #40]	; (80185c4 <ethernet_output+0x88>)
 801859c:	480a      	ldr	r0, [pc, #40]	; (80185c8 <ethernet_output+0x8c>)
 801859e:	f000 fadf 	bl	8018b60 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80185a2:	68fb      	ldr	r3, [r7, #12]
 80185a4:	699b      	ldr	r3, [r3, #24]
 80185a6:	68b9      	ldr	r1, [r7, #8]
 80185a8:	68f8      	ldr	r0, [r7, #12]
 80185aa:	4798      	blx	r3
 80185ac:	4603      	mov	r3, r0
 80185ae:	e002      	b.n	80185b6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80185b0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80185b2:	f06f 0301 	mvn.w	r3, #1
}
 80185b6:	4618      	mov	r0, r3
 80185b8:	3718      	adds	r7, #24
 80185ba:	46bd      	mov	sp, r7
 80185bc:	bd80      	pop	{r7, pc}
 80185be:	bf00      	nop
 80185c0:	0801c720 	.word	0x0801c720
 80185c4:	0801c758 	.word	0x0801c758
 80185c8:	0801c78c 	.word	0x0801c78c

080185cc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80185cc:	b580      	push	{r7, lr}
 80185ce:	b082      	sub	sp, #8
 80185d0:	af00      	add	r7, sp, #0
 80185d2:	6078      	str	r0, [r7, #4]
 80185d4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80185d6:	683b      	ldr	r3, [r7, #0]
 80185d8:	2200      	movs	r2, #0
 80185da:	2104      	movs	r1, #4
 80185dc:	4618      	mov	r0, r3
 80185de:	f7f0 fc5b 	bl	8008e98 <osMessageQueueNew>
 80185e2:	4602      	mov	r2, r0
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d102      	bne.n	80185f6 <sys_mbox_new+0x2a>
    return ERR_MEM;
 80185f0:	f04f 33ff 	mov.w	r3, #4294967295
 80185f4:	e000      	b.n	80185f8 <sys_mbox_new+0x2c>

  return ERR_OK;
 80185f6:	2300      	movs	r3, #0
}
 80185f8:	4618      	mov	r0, r3
 80185fa:	3708      	adds	r7, #8
 80185fc:	46bd      	mov	sp, r7
 80185fe:	bd80      	pop	{r7, pc}

08018600 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018600:	b580      	push	{r7, lr}
 8018602:	b084      	sub	sp, #16
 8018604:	af00      	add	r7, sp, #0
 8018606:	6078      	str	r0, [r7, #4]
 8018608:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	6818      	ldr	r0, [r3, #0]
 801860e:	4639      	mov	r1, r7
 8018610:	2300      	movs	r3, #0
 8018612:	2200      	movs	r2, #0
 8018614:	f7f0 fcb4 	bl	8008f80 <osMessageQueuePut>
 8018618:	4603      	mov	r3, r0
 801861a:	2b00      	cmp	r3, #0
 801861c:	d102      	bne.n	8018624 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801861e:	2300      	movs	r3, #0
 8018620:	73fb      	strb	r3, [r7, #15]
 8018622:	e001      	b.n	8018628 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018624:	23ff      	movs	r3, #255	; 0xff
 8018626:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018628:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801862c:	4618      	mov	r0, r3
 801862e:	3710      	adds	r7, #16
 8018630:	46bd      	mov	sp, r7
 8018632:	bd80      	pop	{r7, pc}

08018634 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018634:	b580      	push	{r7, lr}
 8018636:	b086      	sub	sp, #24
 8018638:	af00      	add	r7, sp, #0
 801863a:	60f8      	str	r0, [r7, #12]
 801863c:	60b9      	str	r1, [r7, #8]
 801863e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8018640:	f7f0 f93a 	bl	80088b8 <osKernelGetTickCount>
 8018644:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	2b00      	cmp	r3, #0
 801864a:	d013      	beq.n	8018674 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801864c:	68fb      	ldr	r3, [r7, #12]
 801864e:	6818      	ldr	r0, [r3, #0]
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	2200      	movs	r2, #0
 8018654:	68b9      	ldr	r1, [r7, #8]
 8018656:	f7f0 fcf3 	bl	8009040 <osMessageQueueGet>
 801865a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801865c:	693b      	ldr	r3, [r7, #16]
 801865e:	2b00      	cmp	r3, #0
 8018660:	d105      	bne.n	801866e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8018662:	f7f0 f929 	bl	80088b8 <osKernelGetTickCount>
 8018666:	4602      	mov	r2, r0
 8018668:	697b      	ldr	r3, [r7, #20]
 801866a:	1ad3      	subs	r3, r2, r3
 801866c:	e00f      	b.n	801868e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801866e:	f04f 33ff 	mov.w	r3, #4294967295
 8018672:	e00c      	b.n	801868e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8018674:	68fb      	ldr	r3, [r7, #12]
 8018676:	6818      	ldr	r0, [r3, #0]
 8018678:	f04f 33ff 	mov.w	r3, #4294967295
 801867c:	2200      	movs	r2, #0
 801867e:	68b9      	ldr	r1, [r7, #8]
 8018680:	f7f0 fcde 	bl	8009040 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8018684:	f7f0 f918 	bl	80088b8 <osKernelGetTickCount>
 8018688:	4602      	mov	r2, r0
 801868a:	697b      	ldr	r3, [r7, #20]
 801868c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801868e:	4618      	mov	r0, r3
 8018690:	3718      	adds	r7, #24
 8018692:	46bd      	mov	sp, r7
 8018694:	bd80      	pop	{r7, pc}

08018696 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018696:	b480      	push	{r7}
 8018698:	b083      	sub	sp, #12
 801869a:	af00      	add	r7, sp, #0
 801869c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d101      	bne.n	80186aa <sys_mbox_valid+0x14>
    return 0;
 80186a6:	2300      	movs	r3, #0
 80186a8:	e000      	b.n	80186ac <sys_mbox_valid+0x16>
  else
    return 1;
 80186aa:	2301      	movs	r3, #1
}
 80186ac:	4618      	mov	r0, r3
 80186ae:	370c      	adds	r7, #12
 80186b0:	46bd      	mov	sp, r7
 80186b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186b6:	4770      	bx	lr

080186b8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80186b8:	b580      	push	{r7, lr}
 80186ba:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80186bc:	2000      	movs	r0, #0
 80186be:	f7f0 f9be 	bl	8008a3e <osMutexNew>
 80186c2:	4603      	mov	r3, r0
 80186c4:	4a01      	ldr	r2, [pc, #4]	; (80186cc <sys_init+0x14>)
 80186c6:	6013      	str	r3, [r2, #0]
#endif
}
 80186c8:	bf00      	nop
 80186ca:	bd80      	pop	{r7, pc}
 80186cc:	24008bdc 	.word	0x24008bdc

080186d0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80186d0:	b580      	push	{r7, lr}
 80186d2:	b082      	sub	sp, #8
 80186d4:	af00      	add	r7, sp, #0
 80186d6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80186d8:	2000      	movs	r0, #0
 80186da:	f7f0 f9b0 	bl	8008a3e <osMutexNew>
 80186de:	4602      	mov	r2, r0
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80186e4:	687b      	ldr	r3, [r7, #4]
 80186e6:	681b      	ldr	r3, [r3, #0]
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d102      	bne.n	80186f2 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80186ec:	f04f 33ff 	mov.w	r3, #4294967295
 80186f0:	e000      	b.n	80186f4 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80186f2:	2300      	movs	r3, #0
}
 80186f4:	4618      	mov	r0, r3
 80186f6:	3708      	adds	r7, #8
 80186f8:	46bd      	mov	sp, r7
 80186fa:	bd80      	pop	{r7, pc}

080186fc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80186fc:	b580      	push	{r7, lr}
 80186fe:	b082      	sub	sp, #8
 8018700:	af00      	add	r7, sp, #0
 8018702:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	f04f 31ff 	mov.w	r1, #4294967295
 801870c:	4618      	mov	r0, r3
 801870e:	f7f0 fa1c 	bl	8008b4a <osMutexAcquire>
#endif
}
 8018712:	bf00      	nop
 8018714:	3708      	adds	r7, #8
 8018716:	46bd      	mov	sp, r7
 8018718:	bd80      	pop	{r7, pc}

0801871a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801871a:	b580      	push	{r7, lr}
 801871c:	b082      	sub	sp, #8
 801871e:	af00      	add	r7, sp, #0
 8018720:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	681b      	ldr	r3, [r3, #0]
 8018726:	4618      	mov	r0, r3
 8018728:	f7f0 fa5a 	bl	8008be0 <osMutexRelease>
}
 801872c:	bf00      	nop
 801872e:	3708      	adds	r7, #8
 8018730:	46bd      	mov	sp, r7
 8018732:	bd80      	pop	{r7, pc}

08018734 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018734:	b580      	push	{r7, lr}
 8018736:	b08e      	sub	sp, #56	; 0x38
 8018738:	af00      	add	r7, sp, #0
 801873a:	60f8      	str	r0, [r7, #12]
 801873c:	60b9      	str	r1, [r7, #8]
 801873e:	607a      	str	r2, [r7, #4]
 8018740:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8018742:	f107 0314 	add.w	r3, r7, #20
 8018746:	2224      	movs	r2, #36	; 0x24
 8018748:	2100      	movs	r1, #0
 801874a:	4618      	mov	r0, r3
 801874c:	f000 f96b 	bl	8018a26 <memset>
 8018750:	68fb      	ldr	r3, [r7, #12]
 8018752:	617b      	str	r3, [r7, #20]
 8018754:	683b      	ldr	r3, [r7, #0]
 8018756:	62bb      	str	r3, [r7, #40]	; 0x28
 8018758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801875a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801875c:	f107 0314 	add.w	r3, r7, #20
 8018760:	461a      	mov	r2, r3
 8018762:	6879      	ldr	r1, [r7, #4]
 8018764:	68b8      	ldr	r0, [r7, #8]
 8018766:	f7f0 f8bc 	bl	80088e2 <osThreadNew>
 801876a:	4603      	mov	r3, r0
#endif
}
 801876c:	4618      	mov	r0, r3
 801876e:	3738      	adds	r7, #56	; 0x38
 8018770:	46bd      	mov	sp, r7
 8018772:	bd80      	pop	{r7, pc}

08018774 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018774:	b580      	push	{r7, lr}
 8018776:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8018778:	4b04      	ldr	r3, [pc, #16]	; (801878c <sys_arch_protect+0x18>)
 801877a:	681b      	ldr	r3, [r3, #0]
 801877c:	f04f 31ff 	mov.w	r1, #4294967295
 8018780:	4618      	mov	r0, r3
 8018782:	f7f0 f9e2 	bl	8008b4a <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8018786:	2301      	movs	r3, #1
}
 8018788:	4618      	mov	r0, r3
 801878a:	bd80      	pop	{r7, pc}
 801878c:	24008bdc 	.word	0x24008bdc

08018790 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018790:	b580      	push	{r7, lr}
 8018792:	b082      	sub	sp, #8
 8018794:	af00      	add	r7, sp, #0
 8018796:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018798:	4b04      	ldr	r3, [pc, #16]	; (80187ac <sys_arch_unprotect+0x1c>)
 801879a:	681b      	ldr	r3, [r3, #0]
 801879c:	4618      	mov	r0, r3
 801879e:	f7f0 fa1f 	bl	8008be0 <osMutexRelease>
}
 80187a2:	bf00      	nop
 80187a4:	3708      	adds	r7, #8
 80187a6:	46bd      	mov	sp, r7
 80187a8:	bd80      	pop	{r7, pc}
 80187aa:	bf00      	nop
 80187ac:	24008bdc 	.word	0x24008bdc

080187b0 <std>:
 80187b0:	2300      	movs	r3, #0
 80187b2:	b510      	push	{r4, lr}
 80187b4:	4604      	mov	r4, r0
 80187b6:	e9c0 3300 	strd	r3, r3, [r0]
 80187ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80187be:	6083      	str	r3, [r0, #8]
 80187c0:	8181      	strh	r1, [r0, #12]
 80187c2:	6643      	str	r3, [r0, #100]	; 0x64
 80187c4:	81c2      	strh	r2, [r0, #14]
 80187c6:	6183      	str	r3, [r0, #24]
 80187c8:	4619      	mov	r1, r3
 80187ca:	2208      	movs	r2, #8
 80187cc:	305c      	adds	r0, #92	; 0x5c
 80187ce:	f000 f92a 	bl	8018a26 <memset>
 80187d2:	4b05      	ldr	r3, [pc, #20]	; (80187e8 <std+0x38>)
 80187d4:	6263      	str	r3, [r4, #36]	; 0x24
 80187d6:	4b05      	ldr	r3, [pc, #20]	; (80187ec <std+0x3c>)
 80187d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80187da:	4b05      	ldr	r3, [pc, #20]	; (80187f0 <std+0x40>)
 80187dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80187de:	4b05      	ldr	r3, [pc, #20]	; (80187f4 <std+0x44>)
 80187e0:	6224      	str	r4, [r4, #32]
 80187e2:	6323      	str	r3, [r4, #48]	; 0x30
 80187e4:	bd10      	pop	{r4, pc}
 80187e6:	bf00      	nop
 80187e8:	08018d01 	.word	0x08018d01
 80187ec:	08018d23 	.word	0x08018d23
 80187f0:	08018d5b 	.word	0x08018d5b
 80187f4:	08018d7f 	.word	0x08018d7f

080187f8 <_cleanup_r>:
 80187f8:	4901      	ldr	r1, [pc, #4]	; (8018800 <_cleanup_r+0x8>)
 80187fa:	f000 b8af 	b.w	801895c <_fwalk_reent>
 80187fe:	bf00      	nop
 8018800:	08018f55 	.word	0x08018f55

08018804 <__sfmoreglue>:
 8018804:	b570      	push	{r4, r5, r6, lr}
 8018806:	2268      	movs	r2, #104	; 0x68
 8018808:	1e4d      	subs	r5, r1, #1
 801880a:	4355      	muls	r5, r2
 801880c:	460e      	mov	r6, r1
 801880e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018812:	f000 f931 	bl	8018a78 <_malloc_r>
 8018816:	4604      	mov	r4, r0
 8018818:	b140      	cbz	r0, 801882c <__sfmoreglue+0x28>
 801881a:	2100      	movs	r1, #0
 801881c:	e9c0 1600 	strd	r1, r6, [r0]
 8018820:	300c      	adds	r0, #12
 8018822:	60a0      	str	r0, [r4, #8]
 8018824:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018828:	f000 f8fd 	bl	8018a26 <memset>
 801882c:	4620      	mov	r0, r4
 801882e:	bd70      	pop	{r4, r5, r6, pc}

08018830 <__sfp_lock_acquire>:
 8018830:	4801      	ldr	r0, [pc, #4]	; (8018838 <__sfp_lock_acquire+0x8>)
 8018832:	f000 b8d8 	b.w	80189e6 <__retarget_lock_acquire_recursive>
 8018836:	bf00      	nop
 8018838:	24008be1 	.word	0x24008be1

0801883c <__sfp_lock_release>:
 801883c:	4801      	ldr	r0, [pc, #4]	; (8018844 <__sfp_lock_release+0x8>)
 801883e:	f000 b8d3 	b.w	80189e8 <__retarget_lock_release_recursive>
 8018842:	bf00      	nop
 8018844:	24008be1 	.word	0x24008be1

08018848 <__sinit_lock_acquire>:
 8018848:	4801      	ldr	r0, [pc, #4]	; (8018850 <__sinit_lock_acquire+0x8>)
 801884a:	f000 b8cc 	b.w	80189e6 <__retarget_lock_acquire_recursive>
 801884e:	bf00      	nop
 8018850:	24008be2 	.word	0x24008be2

08018854 <__sinit_lock_release>:
 8018854:	4801      	ldr	r0, [pc, #4]	; (801885c <__sinit_lock_release+0x8>)
 8018856:	f000 b8c7 	b.w	80189e8 <__retarget_lock_release_recursive>
 801885a:	bf00      	nop
 801885c:	24008be2 	.word	0x24008be2

08018860 <__sinit>:
 8018860:	b510      	push	{r4, lr}
 8018862:	4604      	mov	r4, r0
 8018864:	f7ff fff0 	bl	8018848 <__sinit_lock_acquire>
 8018868:	69a3      	ldr	r3, [r4, #24]
 801886a:	b11b      	cbz	r3, 8018874 <__sinit+0x14>
 801886c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018870:	f7ff bff0 	b.w	8018854 <__sinit_lock_release>
 8018874:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018878:	6523      	str	r3, [r4, #80]	; 0x50
 801887a:	4b13      	ldr	r3, [pc, #76]	; (80188c8 <__sinit+0x68>)
 801887c:	4a13      	ldr	r2, [pc, #76]	; (80188cc <__sinit+0x6c>)
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	62a2      	str	r2, [r4, #40]	; 0x28
 8018882:	42a3      	cmp	r3, r4
 8018884:	bf04      	itt	eq
 8018886:	2301      	moveq	r3, #1
 8018888:	61a3      	streq	r3, [r4, #24]
 801888a:	4620      	mov	r0, r4
 801888c:	f000 f820 	bl	80188d0 <__sfp>
 8018890:	6060      	str	r0, [r4, #4]
 8018892:	4620      	mov	r0, r4
 8018894:	f000 f81c 	bl	80188d0 <__sfp>
 8018898:	60a0      	str	r0, [r4, #8]
 801889a:	4620      	mov	r0, r4
 801889c:	f000 f818 	bl	80188d0 <__sfp>
 80188a0:	2200      	movs	r2, #0
 80188a2:	60e0      	str	r0, [r4, #12]
 80188a4:	2104      	movs	r1, #4
 80188a6:	6860      	ldr	r0, [r4, #4]
 80188a8:	f7ff ff82 	bl	80187b0 <std>
 80188ac:	68a0      	ldr	r0, [r4, #8]
 80188ae:	2201      	movs	r2, #1
 80188b0:	2109      	movs	r1, #9
 80188b2:	f7ff ff7d 	bl	80187b0 <std>
 80188b6:	68e0      	ldr	r0, [r4, #12]
 80188b8:	2202      	movs	r2, #2
 80188ba:	2112      	movs	r1, #18
 80188bc:	f7ff ff78 	bl	80187b0 <std>
 80188c0:	2301      	movs	r3, #1
 80188c2:	61a3      	str	r3, [r4, #24]
 80188c4:	e7d2      	b.n	801886c <__sinit+0xc>
 80188c6:	bf00      	nop
 80188c8:	0801ec34 	.word	0x0801ec34
 80188cc:	080187f9 	.word	0x080187f9

080188d0 <__sfp>:
 80188d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188d2:	4607      	mov	r7, r0
 80188d4:	f7ff ffac 	bl	8018830 <__sfp_lock_acquire>
 80188d8:	4b1e      	ldr	r3, [pc, #120]	; (8018954 <__sfp+0x84>)
 80188da:	681e      	ldr	r6, [r3, #0]
 80188dc:	69b3      	ldr	r3, [r6, #24]
 80188de:	b913      	cbnz	r3, 80188e6 <__sfp+0x16>
 80188e0:	4630      	mov	r0, r6
 80188e2:	f7ff ffbd 	bl	8018860 <__sinit>
 80188e6:	3648      	adds	r6, #72	; 0x48
 80188e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80188ec:	3b01      	subs	r3, #1
 80188ee:	d503      	bpl.n	80188f8 <__sfp+0x28>
 80188f0:	6833      	ldr	r3, [r6, #0]
 80188f2:	b30b      	cbz	r3, 8018938 <__sfp+0x68>
 80188f4:	6836      	ldr	r6, [r6, #0]
 80188f6:	e7f7      	b.n	80188e8 <__sfp+0x18>
 80188f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80188fc:	b9d5      	cbnz	r5, 8018934 <__sfp+0x64>
 80188fe:	4b16      	ldr	r3, [pc, #88]	; (8018958 <__sfp+0x88>)
 8018900:	60e3      	str	r3, [r4, #12]
 8018902:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018906:	6665      	str	r5, [r4, #100]	; 0x64
 8018908:	f000 f86c 	bl	80189e4 <__retarget_lock_init_recursive>
 801890c:	f7ff ff96 	bl	801883c <__sfp_lock_release>
 8018910:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018914:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018918:	6025      	str	r5, [r4, #0]
 801891a:	61a5      	str	r5, [r4, #24]
 801891c:	2208      	movs	r2, #8
 801891e:	4629      	mov	r1, r5
 8018920:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018924:	f000 f87f 	bl	8018a26 <memset>
 8018928:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801892c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018930:	4620      	mov	r0, r4
 8018932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018934:	3468      	adds	r4, #104	; 0x68
 8018936:	e7d9      	b.n	80188ec <__sfp+0x1c>
 8018938:	2104      	movs	r1, #4
 801893a:	4638      	mov	r0, r7
 801893c:	f7ff ff62 	bl	8018804 <__sfmoreglue>
 8018940:	4604      	mov	r4, r0
 8018942:	6030      	str	r0, [r6, #0]
 8018944:	2800      	cmp	r0, #0
 8018946:	d1d5      	bne.n	80188f4 <__sfp+0x24>
 8018948:	f7ff ff78 	bl	801883c <__sfp_lock_release>
 801894c:	230c      	movs	r3, #12
 801894e:	603b      	str	r3, [r7, #0]
 8018950:	e7ee      	b.n	8018930 <__sfp+0x60>
 8018952:	bf00      	nop
 8018954:	0801ec34 	.word	0x0801ec34
 8018958:	ffff0001 	.word	0xffff0001

0801895c <_fwalk_reent>:
 801895c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018960:	4606      	mov	r6, r0
 8018962:	4688      	mov	r8, r1
 8018964:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018968:	2700      	movs	r7, #0
 801896a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801896e:	f1b9 0901 	subs.w	r9, r9, #1
 8018972:	d505      	bpl.n	8018980 <_fwalk_reent+0x24>
 8018974:	6824      	ldr	r4, [r4, #0]
 8018976:	2c00      	cmp	r4, #0
 8018978:	d1f7      	bne.n	801896a <_fwalk_reent+0xe>
 801897a:	4638      	mov	r0, r7
 801897c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018980:	89ab      	ldrh	r3, [r5, #12]
 8018982:	2b01      	cmp	r3, #1
 8018984:	d907      	bls.n	8018996 <_fwalk_reent+0x3a>
 8018986:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801898a:	3301      	adds	r3, #1
 801898c:	d003      	beq.n	8018996 <_fwalk_reent+0x3a>
 801898e:	4629      	mov	r1, r5
 8018990:	4630      	mov	r0, r6
 8018992:	47c0      	blx	r8
 8018994:	4307      	orrs	r7, r0
 8018996:	3568      	adds	r5, #104	; 0x68
 8018998:	e7e9      	b.n	801896e <_fwalk_reent+0x12>
	...

0801899c <__libc_init_array>:
 801899c:	b570      	push	{r4, r5, r6, lr}
 801899e:	4d0d      	ldr	r5, [pc, #52]	; (80189d4 <__libc_init_array+0x38>)
 80189a0:	4c0d      	ldr	r4, [pc, #52]	; (80189d8 <__libc_init_array+0x3c>)
 80189a2:	1b64      	subs	r4, r4, r5
 80189a4:	10a4      	asrs	r4, r4, #2
 80189a6:	2600      	movs	r6, #0
 80189a8:	42a6      	cmp	r6, r4
 80189aa:	d109      	bne.n	80189c0 <__libc_init_array+0x24>
 80189ac:	4d0b      	ldr	r5, [pc, #44]	; (80189dc <__libc_init_array+0x40>)
 80189ae:	4c0c      	ldr	r4, [pc, #48]	; (80189e0 <__libc_init_array+0x44>)
 80189b0:	f001 f822 	bl	80199f8 <_init>
 80189b4:	1b64      	subs	r4, r4, r5
 80189b6:	10a4      	asrs	r4, r4, #2
 80189b8:	2600      	movs	r6, #0
 80189ba:	42a6      	cmp	r6, r4
 80189bc:	d105      	bne.n	80189ca <__libc_init_array+0x2e>
 80189be:	bd70      	pop	{r4, r5, r6, pc}
 80189c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80189c4:	4798      	blx	r3
 80189c6:	3601      	adds	r6, #1
 80189c8:	e7ee      	b.n	80189a8 <__libc_init_array+0xc>
 80189ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80189ce:	4798      	blx	r3
 80189d0:	3601      	adds	r6, #1
 80189d2:	e7f2      	b.n	80189ba <__libc_init_array+0x1e>
 80189d4:	0801ed1c 	.word	0x0801ed1c
 80189d8:	0801ed1c 	.word	0x0801ed1c
 80189dc:	0801ed1c 	.word	0x0801ed1c
 80189e0:	0801ed20 	.word	0x0801ed20

080189e4 <__retarget_lock_init_recursive>:
 80189e4:	4770      	bx	lr

080189e6 <__retarget_lock_acquire_recursive>:
 80189e6:	4770      	bx	lr

080189e8 <__retarget_lock_release_recursive>:
 80189e8:	4770      	bx	lr

080189ea <memcmp>:
 80189ea:	b510      	push	{r4, lr}
 80189ec:	3901      	subs	r1, #1
 80189ee:	4402      	add	r2, r0
 80189f0:	4290      	cmp	r0, r2
 80189f2:	d101      	bne.n	80189f8 <memcmp+0xe>
 80189f4:	2000      	movs	r0, #0
 80189f6:	e005      	b.n	8018a04 <memcmp+0x1a>
 80189f8:	7803      	ldrb	r3, [r0, #0]
 80189fa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80189fe:	42a3      	cmp	r3, r4
 8018a00:	d001      	beq.n	8018a06 <memcmp+0x1c>
 8018a02:	1b18      	subs	r0, r3, r4
 8018a04:	bd10      	pop	{r4, pc}
 8018a06:	3001      	adds	r0, #1
 8018a08:	e7f2      	b.n	80189f0 <memcmp+0x6>

08018a0a <memcpy>:
 8018a0a:	440a      	add	r2, r1
 8018a0c:	4291      	cmp	r1, r2
 8018a0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8018a12:	d100      	bne.n	8018a16 <memcpy+0xc>
 8018a14:	4770      	bx	lr
 8018a16:	b510      	push	{r4, lr}
 8018a18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018a1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018a20:	4291      	cmp	r1, r2
 8018a22:	d1f9      	bne.n	8018a18 <memcpy+0xe>
 8018a24:	bd10      	pop	{r4, pc}

08018a26 <memset>:
 8018a26:	4402      	add	r2, r0
 8018a28:	4603      	mov	r3, r0
 8018a2a:	4293      	cmp	r3, r2
 8018a2c:	d100      	bne.n	8018a30 <memset+0xa>
 8018a2e:	4770      	bx	lr
 8018a30:	f803 1b01 	strb.w	r1, [r3], #1
 8018a34:	e7f9      	b.n	8018a2a <memset+0x4>
	...

08018a38 <sbrk_aligned>:
 8018a38:	b570      	push	{r4, r5, r6, lr}
 8018a3a:	4e0e      	ldr	r6, [pc, #56]	; (8018a74 <sbrk_aligned+0x3c>)
 8018a3c:	460c      	mov	r4, r1
 8018a3e:	6831      	ldr	r1, [r6, #0]
 8018a40:	4605      	mov	r5, r0
 8018a42:	b911      	cbnz	r1, 8018a4a <sbrk_aligned+0x12>
 8018a44:	f000 f94c 	bl	8018ce0 <_sbrk_r>
 8018a48:	6030      	str	r0, [r6, #0]
 8018a4a:	4621      	mov	r1, r4
 8018a4c:	4628      	mov	r0, r5
 8018a4e:	f000 f947 	bl	8018ce0 <_sbrk_r>
 8018a52:	1c43      	adds	r3, r0, #1
 8018a54:	d00a      	beq.n	8018a6c <sbrk_aligned+0x34>
 8018a56:	1cc4      	adds	r4, r0, #3
 8018a58:	f024 0403 	bic.w	r4, r4, #3
 8018a5c:	42a0      	cmp	r0, r4
 8018a5e:	d007      	beq.n	8018a70 <sbrk_aligned+0x38>
 8018a60:	1a21      	subs	r1, r4, r0
 8018a62:	4628      	mov	r0, r5
 8018a64:	f000 f93c 	bl	8018ce0 <_sbrk_r>
 8018a68:	3001      	adds	r0, #1
 8018a6a:	d101      	bne.n	8018a70 <sbrk_aligned+0x38>
 8018a6c:	f04f 34ff 	mov.w	r4, #4294967295
 8018a70:	4620      	mov	r0, r4
 8018a72:	bd70      	pop	{r4, r5, r6, pc}
 8018a74:	24008be8 	.word	0x24008be8

08018a78 <_malloc_r>:
 8018a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a7c:	1ccd      	adds	r5, r1, #3
 8018a7e:	f025 0503 	bic.w	r5, r5, #3
 8018a82:	3508      	adds	r5, #8
 8018a84:	2d0c      	cmp	r5, #12
 8018a86:	bf38      	it	cc
 8018a88:	250c      	movcc	r5, #12
 8018a8a:	2d00      	cmp	r5, #0
 8018a8c:	4607      	mov	r7, r0
 8018a8e:	db01      	blt.n	8018a94 <_malloc_r+0x1c>
 8018a90:	42a9      	cmp	r1, r5
 8018a92:	d905      	bls.n	8018aa0 <_malloc_r+0x28>
 8018a94:	230c      	movs	r3, #12
 8018a96:	603b      	str	r3, [r7, #0]
 8018a98:	2600      	movs	r6, #0
 8018a9a:	4630      	mov	r0, r6
 8018a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018aa0:	4e2e      	ldr	r6, [pc, #184]	; (8018b5c <_malloc_r+0xe4>)
 8018aa2:	f000 fabf 	bl	8019024 <__malloc_lock>
 8018aa6:	6833      	ldr	r3, [r6, #0]
 8018aa8:	461c      	mov	r4, r3
 8018aaa:	bb34      	cbnz	r4, 8018afa <_malloc_r+0x82>
 8018aac:	4629      	mov	r1, r5
 8018aae:	4638      	mov	r0, r7
 8018ab0:	f7ff ffc2 	bl	8018a38 <sbrk_aligned>
 8018ab4:	1c43      	adds	r3, r0, #1
 8018ab6:	4604      	mov	r4, r0
 8018ab8:	d14d      	bne.n	8018b56 <_malloc_r+0xde>
 8018aba:	6834      	ldr	r4, [r6, #0]
 8018abc:	4626      	mov	r6, r4
 8018abe:	2e00      	cmp	r6, #0
 8018ac0:	d140      	bne.n	8018b44 <_malloc_r+0xcc>
 8018ac2:	6823      	ldr	r3, [r4, #0]
 8018ac4:	4631      	mov	r1, r6
 8018ac6:	4638      	mov	r0, r7
 8018ac8:	eb04 0803 	add.w	r8, r4, r3
 8018acc:	f000 f908 	bl	8018ce0 <_sbrk_r>
 8018ad0:	4580      	cmp	r8, r0
 8018ad2:	d13a      	bne.n	8018b4a <_malloc_r+0xd2>
 8018ad4:	6821      	ldr	r1, [r4, #0]
 8018ad6:	3503      	adds	r5, #3
 8018ad8:	1a6d      	subs	r5, r5, r1
 8018ada:	f025 0503 	bic.w	r5, r5, #3
 8018ade:	3508      	adds	r5, #8
 8018ae0:	2d0c      	cmp	r5, #12
 8018ae2:	bf38      	it	cc
 8018ae4:	250c      	movcc	r5, #12
 8018ae6:	4629      	mov	r1, r5
 8018ae8:	4638      	mov	r0, r7
 8018aea:	f7ff ffa5 	bl	8018a38 <sbrk_aligned>
 8018aee:	3001      	adds	r0, #1
 8018af0:	d02b      	beq.n	8018b4a <_malloc_r+0xd2>
 8018af2:	6823      	ldr	r3, [r4, #0]
 8018af4:	442b      	add	r3, r5
 8018af6:	6023      	str	r3, [r4, #0]
 8018af8:	e00e      	b.n	8018b18 <_malloc_r+0xa0>
 8018afa:	6822      	ldr	r2, [r4, #0]
 8018afc:	1b52      	subs	r2, r2, r5
 8018afe:	d41e      	bmi.n	8018b3e <_malloc_r+0xc6>
 8018b00:	2a0b      	cmp	r2, #11
 8018b02:	d916      	bls.n	8018b32 <_malloc_r+0xba>
 8018b04:	1961      	adds	r1, r4, r5
 8018b06:	42a3      	cmp	r3, r4
 8018b08:	6025      	str	r5, [r4, #0]
 8018b0a:	bf18      	it	ne
 8018b0c:	6059      	strne	r1, [r3, #4]
 8018b0e:	6863      	ldr	r3, [r4, #4]
 8018b10:	bf08      	it	eq
 8018b12:	6031      	streq	r1, [r6, #0]
 8018b14:	5162      	str	r2, [r4, r5]
 8018b16:	604b      	str	r3, [r1, #4]
 8018b18:	4638      	mov	r0, r7
 8018b1a:	f104 060b 	add.w	r6, r4, #11
 8018b1e:	f000 fa87 	bl	8019030 <__malloc_unlock>
 8018b22:	f026 0607 	bic.w	r6, r6, #7
 8018b26:	1d23      	adds	r3, r4, #4
 8018b28:	1af2      	subs	r2, r6, r3
 8018b2a:	d0b6      	beq.n	8018a9a <_malloc_r+0x22>
 8018b2c:	1b9b      	subs	r3, r3, r6
 8018b2e:	50a3      	str	r3, [r4, r2]
 8018b30:	e7b3      	b.n	8018a9a <_malloc_r+0x22>
 8018b32:	6862      	ldr	r2, [r4, #4]
 8018b34:	42a3      	cmp	r3, r4
 8018b36:	bf0c      	ite	eq
 8018b38:	6032      	streq	r2, [r6, #0]
 8018b3a:	605a      	strne	r2, [r3, #4]
 8018b3c:	e7ec      	b.n	8018b18 <_malloc_r+0xa0>
 8018b3e:	4623      	mov	r3, r4
 8018b40:	6864      	ldr	r4, [r4, #4]
 8018b42:	e7b2      	b.n	8018aaa <_malloc_r+0x32>
 8018b44:	4634      	mov	r4, r6
 8018b46:	6876      	ldr	r6, [r6, #4]
 8018b48:	e7b9      	b.n	8018abe <_malloc_r+0x46>
 8018b4a:	230c      	movs	r3, #12
 8018b4c:	603b      	str	r3, [r7, #0]
 8018b4e:	4638      	mov	r0, r7
 8018b50:	f000 fa6e 	bl	8019030 <__malloc_unlock>
 8018b54:	e7a1      	b.n	8018a9a <_malloc_r+0x22>
 8018b56:	6025      	str	r5, [r4, #0]
 8018b58:	e7de      	b.n	8018b18 <_malloc_r+0xa0>
 8018b5a:	bf00      	nop
 8018b5c:	24008be4 	.word	0x24008be4

08018b60 <iprintf>:
 8018b60:	b40f      	push	{r0, r1, r2, r3}
 8018b62:	4b0a      	ldr	r3, [pc, #40]	; (8018b8c <iprintf+0x2c>)
 8018b64:	b513      	push	{r0, r1, r4, lr}
 8018b66:	681c      	ldr	r4, [r3, #0]
 8018b68:	b124      	cbz	r4, 8018b74 <iprintf+0x14>
 8018b6a:	69a3      	ldr	r3, [r4, #24]
 8018b6c:	b913      	cbnz	r3, 8018b74 <iprintf+0x14>
 8018b6e:	4620      	mov	r0, r4
 8018b70:	f7ff fe76 	bl	8018860 <__sinit>
 8018b74:	ab05      	add	r3, sp, #20
 8018b76:	9a04      	ldr	r2, [sp, #16]
 8018b78:	68a1      	ldr	r1, [r4, #8]
 8018b7a:	9301      	str	r3, [sp, #4]
 8018b7c:	4620      	mov	r0, r4
 8018b7e:	f000 fad3 	bl	8019128 <_vfiprintf_r>
 8018b82:	b002      	add	sp, #8
 8018b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018b88:	b004      	add	sp, #16
 8018b8a:	4770      	bx	lr
 8018b8c:	24000038 	.word	0x24000038

08018b90 <rand>:
 8018b90:	4b16      	ldr	r3, [pc, #88]	; (8018bec <rand+0x5c>)
 8018b92:	b510      	push	{r4, lr}
 8018b94:	681c      	ldr	r4, [r3, #0]
 8018b96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018b98:	b9b3      	cbnz	r3, 8018bc8 <rand+0x38>
 8018b9a:	2018      	movs	r0, #24
 8018b9c:	f000 fa3a 	bl	8019014 <malloc>
 8018ba0:	63a0      	str	r0, [r4, #56]	; 0x38
 8018ba2:	b928      	cbnz	r0, 8018bb0 <rand+0x20>
 8018ba4:	4602      	mov	r2, r0
 8018ba6:	4b12      	ldr	r3, [pc, #72]	; (8018bf0 <rand+0x60>)
 8018ba8:	4812      	ldr	r0, [pc, #72]	; (8018bf4 <rand+0x64>)
 8018baa:	214e      	movs	r1, #78	; 0x4e
 8018bac:	f000 f91e 	bl	8018dec <__assert_func>
 8018bb0:	4a11      	ldr	r2, [pc, #68]	; (8018bf8 <rand+0x68>)
 8018bb2:	4b12      	ldr	r3, [pc, #72]	; (8018bfc <rand+0x6c>)
 8018bb4:	e9c0 2300 	strd	r2, r3, [r0]
 8018bb8:	4b11      	ldr	r3, [pc, #68]	; (8018c00 <rand+0x70>)
 8018bba:	6083      	str	r3, [r0, #8]
 8018bbc:	230b      	movs	r3, #11
 8018bbe:	8183      	strh	r3, [r0, #12]
 8018bc0:	2201      	movs	r2, #1
 8018bc2:	2300      	movs	r3, #0
 8018bc4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018bc8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8018bca:	4a0e      	ldr	r2, [pc, #56]	; (8018c04 <rand+0x74>)
 8018bcc:	6920      	ldr	r0, [r4, #16]
 8018bce:	6963      	ldr	r3, [r4, #20]
 8018bd0:	490d      	ldr	r1, [pc, #52]	; (8018c08 <rand+0x78>)
 8018bd2:	4342      	muls	r2, r0
 8018bd4:	fb01 2203 	mla	r2, r1, r3, r2
 8018bd8:	fba0 0101 	umull	r0, r1, r0, r1
 8018bdc:	1c43      	adds	r3, r0, #1
 8018bde:	eb42 0001 	adc.w	r0, r2, r1
 8018be2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8018be6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018bea:	bd10      	pop	{r4, pc}
 8018bec:	24000038 	.word	0x24000038
 8018bf0:	0801ec38 	.word	0x0801ec38
 8018bf4:	0801ec4f 	.word	0x0801ec4f
 8018bf8:	abcd330e 	.word	0xabcd330e
 8018bfc:	e66d1234 	.word	0xe66d1234
 8018c00:	0005deec 	.word	0x0005deec
 8018c04:	5851f42d 	.word	0x5851f42d
 8018c08:	4c957f2d 	.word	0x4c957f2d

08018c0c <cleanup_glue>:
 8018c0c:	b538      	push	{r3, r4, r5, lr}
 8018c0e:	460c      	mov	r4, r1
 8018c10:	6809      	ldr	r1, [r1, #0]
 8018c12:	4605      	mov	r5, r0
 8018c14:	b109      	cbz	r1, 8018c1a <cleanup_glue+0xe>
 8018c16:	f7ff fff9 	bl	8018c0c <cleanup_glue>
 8018c1a:	4621      	mov	r1, r4
 8018c1c:	4628      	mov	r0, r5
 8018c1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018c22:	f000 ba0b 	b.w	801903c <_free_r>
	...

08018c28 <_reclaim_reent>:
 8018c28:	4b2c      	ldr	r3, [pc, #176]	; (8018cdc <_reclaim_reent+0xb4>)
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	4283      	cmp	r3, r0
 8018c2e:	b570      	push	{r4, r5, r6, lr}
 8018c30:	4604      	mov	r4, r0
 8018c32:	d051      	beq.n	8018cd8 <_reclaim_reent+0xb0>
 8018c34:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8018c36:	b143      	cbz	r3, 8018c4a <_reclaim_reent+0x22>
 8018c38:	68db      	ldr	r3, [r3, #12]
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d14a      	bne.n	8018cd4 <_reclaim_reent+0xac>
 8018c3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018c40:	6819      	ldr	r1, [r3, #0]
 8018c42:	b111      	cbz	r1, 8018c4a <_reclaim_reent+0x22>
 8018c44:	4620      	mov	r0, r4
 8018c46:	f000 f9f9 	bl	801903c <_free_r>
 8018c4a:	6961      	ldr	r1, [r4, #20]
 8018c4c:	b111      	cbz	r1, 8018c54 <_reclaim_reent+0x2c>
 8018c4e:	4620      	mov	r0, r4
 8018c50:	f000 f9f4 	bl	801903c <_free_r>
 8018c54:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8018c56:	b111      	cbz	r1, 8018c5e <_reclaim_reent+0x36>
 8018c58:	4620      	mov	r0, r4
 8018c5a:	f000 f9ef 	bl	801903c <_free_r>
 8018c5e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018c60:	b111      	cbz	r1, 8018c68 <_reclaim_reent+0x40>
 8018c62:	4620      	mov	r0, r4
 8018c64:	f000 f9ea 	bl	801903c <_free_r>
 8018c68:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8018c6a:	b111      	cbz	r1, 8018c72 <_reclaim_reent+0x4a>
 8018c6c:	4620      	mov	r0, r4
 8018c6e:	f000 f9e5 	bl	801903c <_free_r>
 8018c72:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8018c74:	b111      	cbz	r1, 8018c7c <_reclaim_reent+0x54>
 8018c76:	4620      	mov	r0, r4
 8018c78:	f000 f9e0 	bl	801903c <_free_r>
 8018c7c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8018c7e:	b111      	cbz	r1, 8018c86 <_reclaim_reent+0x5e>
 8018c80:	4620      	mov	r0, r4
 8018c82:	f000 f9db 	bl	801903c <_free_r>
 8018c86:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8018c88:	b111      	cbz	r1, 8018c90 <_reclaim_reent+0x68>
 8018c8a:	4620      	mov	r0, r4
 8018c8c:	f000 f9d6 	bl	801903c <_free_r>
 8018c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018c92:	b111      	cbz	r1, 8018c9a <_reclaim_reent+0x72>
 8018c94:	4620      	mov	r0, r4
 8018c96:	f000 f9d1 	bl	801903c <_free_r>
 8018c9a:	69a3      	ldr	r3, [r4, #24]
 8018c9c:	b1e3      	cbz	r3, 8018cd8 <_reclaim_reent+0xb0>
 8018c9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018ca0:	4620      	mov	r0, r4
 8018ca2:	4798      	blx	r3
 8018ca4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8018ca6:	b1b9      	cbz	r1, 8018cd8 <_reclaim_reent+0xb0>
 8018ca8:	4620      	mov	r0, r4
 8018caa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018cae:	f7ff bfad 	b.w	8018c0c <cleanup_glue>
 8018cb2:	5949      	ldr	r1, [r1, r5]
 8018cb4:	b941      	cbnz	r1, 8018cc8 <_reclaim_reent+0xa0>
 8018cb6:	3504      	adds	r5, #4
 8018cb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018cba:	2d80      	cmp	r5, #128	; 0x80
 8018cbc:	68d9      	ldr	r1, [r3, #12]
 8018cbe:	d1f8      	bne.n	8018cb2 <_reclaim_reent+0x8a>
 8018cc0:	4620      	mov	r0, r4
 8018cc2:	f000 f9bb 	bl	801903c <_free_r>
 8018cc6:	e7ba      	b.n	8018c3e <_reclaim_reent+0x16>
 8018cc8:	680e      	ldr	r6, [r1, #0]
 8018cca:	4620      	mov	r0, r4
 8018ccc:	f000 f9b6 	bl	801903c <_free_r>
 8018cd0:	4631      	mov	r1, r6
 8018cd2:	e7ef      	b.n	8018cb4 <_reclaim_reent+0x8c>
 8018cd4:	2500      	movs	r5, #0
 8018cd6:	e7ef      	b.n	8018cb8 <_reclaim_reent+0x90>
 8018cd8:	bd70      	pop	{r4, r5, r6, pc}
 8018cda:	bf00      	nop
 8018cdc:	24000038 	.word	0x24000038

08018ce0 <_sbrk_r>:
 8018ce0:	b538      	push	{r3, r4, r5, lr}
 8018ce2:	4d06      	ldr	r5, [pc, #24]	; (8018cfc <_sbrk_r+0x1c>)
 8018ce4:	2300      	movs	r3, #0
 8018ce6:	4604      	mov	r4, r0
 8018ce8:	4608      	mov	r0, r1
 8018cea:	602b      	str	r3, [r5, #0]
 8018cec:	f7e8 fb6a 	bl	80013c4 <_sbrk>
 8018cf0:	1c43      	adds	r3, r0, #1
 8018cf2:	d102      	bne.n	8018cfa <_sbrk_r+0x1a>
 8018cf4:	682b      	ldr	r3, [r5, #0]
 8018cf6:	b103      	cbz	r3, 8018cfa <_sbrk_r+0x1a>
 8018cf8:	6023      	str	r3, [r4, #0]
 8018cfa:	bd38      	pop	{r3, r4, r5, pc}
 8018cfc:	24008bec 	.word	0x24008bec

08018d00 <__sread>:
 8018d00:	b510      	push	{r4, lr}
 8018d02:	460c      	mov	r4, r1
 8018d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d08:	f000 fcd2 	bl	80196b0 <_read_r>
 8018d0c:	2800      	cmp	r0, #0
 8018d0e:	bfab      	itete	ge
 8018d10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018d12:	89a3      	ldrhlt	r3, [r4, #12]
 8018d14:	181b      	addge	r3, r3, r0
 8018d16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018d1a:	bfac      	ite	ge
 8018d1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8018d1e:	81a3      	strhlt	r3, [r4, #12]
 8018d20:	bd10      	pop	{r4, pc}

08018d22 <__swrite>:
 8018d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d26:	461f      	mov	r7, r3
 8018d28:	898b      	ldrh	r3, [r1, #12]
 8018d2a:	05db      	lsls	r3, r3, #23
 8018d2c:	4605      	mov	r5, r0
 8018d2e:	460c      	mov	r4, r1
 8018d30:	4616      	mov	r6, r2
 8018d32:	d505      	bpl.n	8018d40 <__swrite+0x1e>
 8018d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d38:	2302      	movs	r3, #2
 8018d3a:	2200      	movs	r2, #0
 8018d3c:	f000 f958 	bl	8018ff0 <_lseek_r>
 8018d40:	89a3      	ldrh	r3, [r4, #12]
 8018d42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018d46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018d4a:	81a3      	strh	r3, [r4, #12]
 8018d4c:	4632      	mov	r2, r6
 8018d4e:	463b      	mov	r3, r7
 8018d50:	4628      	mov	r0, r5
 8018d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018d56:	f000 b837 	b.w	8018dc8 <_write_r>

08018d5a <__sseek>:
 8018d5a:	b510      	push	{r4, lr}
 8018d5c:	460c      	mov	r4, r1
 8018d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d62:	f000 f945 	bl	8018ff0 <_lseek_r>
 8018d66:	1c43      	adds	r3, r0, #1
 8018d68:	89a3      	ldrh	r3, [r4, #12]
 8018d6a:	bf15      	itete	ne
 8018d6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8018d6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018d72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018d76:	81a3      	strheq	r3, [r4, #12]
 8018d78:	bf18      	it	ne
 8018d7a:	81a3      	strhne	r3, [r4, #12]
 8018d7c:	bd10      	pop	{r4, pc}

08018d7e <__sclose>:
 8018d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d82:	f000 b851 	b.w	8018e28 <_close_r>

08018d86 <strchr>:
 8018d86:	b2c9      	uxtb	r1, r1
 8018d88:	4603      	mov	r3, r0
 8018d8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018d8e:	b11a      	cbz	r2, 8018d98 <strchr+0x12>
 8018d90:	428a      	cmp	r2, r1
 8018d92:	d1f9      	bne.n	8018d88 <strchr+0x2>
 8018d94:	4618      	mov	r0, r3
 8018d96:	4770      	bx	lr
 8018d98:	2900      	cmp	r1, #0
 8018d9a:	bf18      	it	ne
 8018d9c:	2300      	movne	r3, #0
 8018d9e:	e7f9      	b.n	8018d94 <strchr+0xe>

08018da0 <strncmp>:
 8018da0:	b510      	push	{r4, lr}
 8018da2:	b17a      	cbz	r2, 8018dc4 <strncmp+0x24>
 8018da4:	4603      	mov	r3, r0
 8018da6:	3901      	subs	r1, #1
 8018da8:	1884      	adds	r4, r0, r2
 8018daa:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018dae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018db2:	4290      	cmp	r0, r2
 8018db4:	d101      	bne.n	8018dba <strncmp+0x1a>
 8018db6:	42a3      	cmp	r3, r4
 8018db8:	d101      	bne.n	8018dbe <strncmp+0x1e>
 8018dba:	1a80      	subs	r0, r0, r2
 8018dbc:	bd10      	pop	{r4, pc}
 8018dbe:	2800      	cmp	r0, #0
 8018dc0:	d1f3      	bne.n	8018daa <strncmp+0xa>
 8018dc2:	e7fa      	b.n	8018dba <strncmp+0x1a>
 8018dc4:	4610      	mov	r0, r2
 8018dc6:	e7f9      	b.n	8018dbc <strncmp+0x1c>

08018dc8 <_write_r>:
 8018dc8:	b538      	push	{r3, r4, r5, lr}
 8018dca:	4d07      	ldr	r5, [pc, #28]	; (8018de8 <_write_r+0x20>)
 8018dcc:	4604      	mov	r4, r0
 8018dce:	4608      	mov	r0, r1
 8018dd0:	4611      	mov	r1, r2
 8018dd2:	2200      	movs	r2, #0
 8018dd4:	602a      	str	r2, [r5, #0]
 8018dd6:	461a      	mov	r2, r3
 8018dd8:	f7e8 faa3 	bl	8001322 <_write>
 8018ddc:	1c43      	adds	r3, r0, #1
 8018dde:	d102      	bne.n	8018de6 <_write_r+0x1e>
 8018de0:	682b      	ldr	r3, [r5, #0]
 8018de2:	b103      	cbz	r3, 8018de6 <_write_r+0x1e>
 8018de4:	6023      	str	r3, [r4, #0]
 8018de6:	bd38      	pop	{r3, r4, r5, pc}
 8018de8:	24008bec 	.word	0x24008bec

08018dec <__assert_func>:
 8018dec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018dee:	4614      	mov	r4, r2
 8018df0:	461a      	mov	r2, r3
 8018df2:	4b09      	ldr	r3, [pc, #36]	; (8018e18 <__assert_func+0x2c>)
 8018df4:	681b      	ldr	r3, [r3, #0]
 8018df6:	4605      	mov	r5, r0
 8018df8:	68d8      	ldr	r0, [r3, #12]
 8018dfa:	b14c      	cbz	r4, 8018e10 <__assert_func+0x24>
 8018dfc:	4b07      	ldr	r3, [pc, #28]	; (8018e1c <__assert_func+0x30>)
 8018dfe:	9100      	str	r1, [sp, #0]
 8018e00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018e04:	4906      	ldr	r1, [pc, #24]	; (8018e20 <__assert_func+0x34>)
 8018e06:	462b      	mov	r3, r5
 8018e08:	f000 f8e0 	bl	8018fcc <fiprintf>
 8018e0c:	f000 fd22 	bl	8019854 <abort>
 8018e10:	4b04      	ldr	r3, [pc, #16]	; (8018e24 <__assert_func+0x38>)
 8018e12:	461c      	mov	r4, r3
 8018e14:	e7f3      	b.n	8018dfe <__assert_func+0x12>
 8018e16:	bf00      	nop
 8018e18:	24000038 	.word	0x24000038
 8018e1c:	0801ecaa 	.word	0x0801ecaa
 8018e20:	0801ecb7 	.word	0x0801ecb7
 8018e24:	0801ece5 	.word	0x0801ece5

08018e28 <_close_r>:
 8018e28:	b538      	push	{r3, r4, r5, lr}
 8018e2a:	4d06      	ldr	r5, [pc, #24]	; (8018e44 <_close_r+0x1c>)
 8018e2c:	2300      	movs	r3, #0
 8018e2e:	4604      	mov	r4, r0
 8018e30:	4608      	mov	r0, r1
 8018e32:	602b      	str	r3, [r5, #0]
 8018e34:	f7e8 fa91 	bl	800135a <_close>
 8018e38:	1c43      	adds	r3, r0, #1
 8018e3a:	d102      	bne.n	8018e42 <_close_r+0x1a>
 8018e3c:	682b      	ldr	r3, [r5, #0]
 8018e3e:	b103      	cbz	r3, 8018e42 <_close_r+0x1a>
 8018e40:	6023      	str	r3, [r4, #0]
 8018e42:	bd38      	pop	{r3, r4, r5, pc}
 8018e44:	24008bec 	.word	0x24008bec

08018e48 <__sflush_r>:
 8018e48:	898a      	ldrh	r2, [r1, #12]
 8018e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e4e:	4605      	mov	r5, r0
 8018e50:	0710      	lsls	r0, r2, #28
 8018e52:	460c      	mov	r4, r1
 8018e54:	d458      	bmi.n	8018f08 <__sflush_r+0xc0>
 8018e56:	684b      	ldr	r3, [r1, #4]
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	dc05      	bgt.n	8018e68 <__sflush_r+0x20>
 8018e5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	dc02      	bgt.n	8018e68 <__sflush_r+0x20>
 8018e62:	2000      	movs	r0, #0
 8018e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018e6a:	2e00      	cmp	r6, #0
 8018e6c:	d0f9      	beq.n	8018e62 <__sflush_r+0x1a>
 8018e6e:	2300      	movs	r3, #0
 8018e70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018e74:	682f      	ldr	r7, [r5, #0]
 8018e76:	602b      	str	r3, [r5, #0]
 8018e78:	d032      	beq.n	8018ee0 <__sflush_r+0x98>
 8018e7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018e7c:	89a3      	ldrh	r3, [r4, #12]
 8018e7e:	075a      	lsls	r2, r3, #29
 8018e80:	d505      	bpl.n	8018e8e <__sflush_r+0x46>
 8018e82:	6863      	ldr	r3, [r4, #4]
 8018e84:	1ac0      	subs	r0, r0, r3
 8018e86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018e88:	b10b      	cbz	r3, 8018e8e <__sflush_r+0x46>
 8018e8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018e8c:	1ac0      	subs	r0, r0, r3
 8018e8e:	2300      	movs	r3, #0
 8018e90:	4602      	mov	r2, r0
 8018e92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018e94:	6a21      	ldr	r1, [r4, #32]
 8018e96:	4628      	mov	r0, r5
 8018e98:	47b0      	blx	r6
 8018e9a:	1c43      	adds	r3, r0, #1
 8018e9c:	89a3      	ldrh	r3, [r4, #12]
 8018e9e:	d106      	bne.n	8018eae <__sflush_r+0x66>
 8018ea0:	6829      	ldr	r1, [r5, #0]
 8018ea2:	291d      	cmp	r1, #29
 8018ea4:	d82c      	bhi.n	8018f00 <__sflush_r+0xb8>
 8018ea6:	4a2a      	ldr	r2, [pc, #168]	; (8018f50 <__sflush_r+0x108>)
 8018ea8:	40ca      	lsrs	r2, r1
 8018eaa:	07d6      	lsls	r6, r2, #31
 8018eac:	d528      	bpl.n	8018f00 <__sflush_r+0xb8>
 8018eae:	2200      	movs	r2, #0
 8018eb0:	6062      	str	r2, [r4, #4]
 8018eb2:	04d9      	lsls	r1, r3, #19
 8018eb4:	6922      	ldr	r2, [r4, #16]
 8018eb6:	6022      	str	r2, [r4, #0]
 8018eb8:	d504      	bpl.n	8018ec4 <__sflush_r+0x7c>
 8018eba:	1c42      	adds	r2, r0, #1
 8018ebc:	d101      	bne.n	8018ec2 <__sflush_r+0x7a>
 8018ebe:	682b      	ldr	r3, [r5, #0]
 8018ec0:	b903      	cbnz	r3, 8018ec4 <__sflush_r+0x7c>
 8018ec2:	6560      	str	r0, [r4, #84]	; 0x54
 8018ec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018ec6:	602f      	str	r7, [r5, #0]
 8018ec8:	2900      	cmp	r1, #0
 8018eca:	d0ca      	beq.n	8018e62 <__sflush_r+0x1a>
 8018ecc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018ed0:	4299      	cmp	r1, r3
 8018ed2:	d002      	beq.n	8018eda <__sflush_r+0x92>
 8018ed4:	4628      	mov	r0, r5
 8018ed6:	f000 f8b1 	bl	801903c <_free_r>
 8018eda:	2000      	movs	r0, #0
 8018edc:	6360      	str	r0, [r4, #52]	; 0x34
 8018ede:	e7c1      	b.n	8018e64 <__sflush_r+0x1c>
 8018ee0:	6a21      	ldr	r1, [r4, #32]
 8018ee2:	2301      	movs	r3, #1
 8018ee4:	4628      	mov	r0, r5
 8018ee6:	47b0      	blx	r6
 8018ee8:	1c41      	adds	r1, r0, #1
 8018eea:	d1c7      	bne.n	8018e7c <__sflush_r+0x34>
 8018eec:	682b      	ldr	r3, [r5, #0]
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d0c4      	beq.n	8018e7c <__sflush_r+0x34>
 8018ef2:	2b1d      	cmp	r3, #29
 8018ef4:	d001      	beq.n	8018efa <__sflush_r+0xb2>
 8018ef6:	2b16      	cmp	r3, #22
 8018ef8:	d101      	bne.n	8018efe <__sflush_r+0xb6>
 8018efa:	602f      	str	r7, [r5, #0]
 8018efc:	e7b1      	b.n	8018e62 <__sflush_r+0x1a>
 8018efe:	89a3      	ldrh	r3, [r4, #12]
 8018f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018f04:	81a3      	strh	r3, [r4, #12]
 8018f06:	e7ad      	b.n	8018e64 <__sflush_r+0x1c>
 8018f08:	690f      	ldr	r7, [r1, #16]
 8018f0a:	2f00      	cmp	r7, #0
 8018f0c:	d0a9      	beq.n	8018e62 <__sflush_r+0x1a>
 8018f0e:	0793      	lsls	r3, r2, #30
 8018f10:	680e      	ldr	r6, [r1, #0]
 8018f12:	bf08      	it	eq
 8018f14:	694b      	ldreq	r3, [r1, #20]
 8018f16:	600f      	str	r7, [r1, #0]
 8018f18:	bf18      	it	ne
 8018f1a:	2300      	movne	r3, #0
 8018f1c:	eba6 0807 	sub.w	r8, r6, r7
 8018f20:	608b      	str	r3, [r1, #8]
 8018f22:	f1b8 0f00 	cmp.w	r8, #0
 8018f26:	dd9c      	ble.n	8018e62 <__sflush_r+0x1a>
 8018f28:	6a21      	ldr	r1, [r4, #32]
 8018f2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018f2c:	4643      	mov	r3, r8
 8018f2e:	463a      	mov	r2, r7
 8018f30:	4628      	mov	r0, r5
 8018f32:	47b0      	blx	r6
 8018f34:	2800      	cmp	r0, #0
 8018f36:	dc06      	bgt.n	8018f46 <__sflush_r+0xfe>
 8018f38:	89a3      	ldrh	r3, [r4, #12]
 8018f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018f3e:	81a3      	strh	r3, [r4, #12]
 8018f40:	f04f 30ff 	mov.w	r0, #4294967295
 8018f44:	e78e      	b.n	8018e64 <__sflush_r+0x1c>
 8018f46:	4407      	add	r7, r0
 8018f48:	eba8 0800 	sub.w	r8, r8, r0
 8018f4c:	e7e9      	b.n	8018f22 <__sflush_r+0xda>
 8018f4e:	bf00      	nop
 8018f50:	20400001 	.word	0x20400001

08018f54 <_fflush_r>:
 8018f54:	b538      	push	{r3, r4, r5, lr}
 8018f56:	690b      	ldr	r3, [r1, #16]
 8018f58:	4605      	mov	r5, r0
 8018f5a:	460c      	mov	r4, r1
 8018f5c:	b913      	cbnz	r3, 8018f64 <_fflush_r+0x10>
 8018f5e:	2500      	movs	r5, #0
 8018f60:	4628      	mov	r0, r5
 8018f62:	bd38      	pop	{r3, r4, r5, pc}
 8018f64:	b118      	cbz	r0, 8018f6e <_fflush_r+0x1a>
 8018f66:	6983      	ldr	r3, [r0, #24]
 8018f68:	b90b      	cbnz	r3, 8018f6e <_fflush_r+0x1a>
 8018f6a:	f7ff fc79 	bl	8018860 <__sinit>
 8018f6e:	4b14      	ldr	r3, [pc, #80]	; (8018fc0 <_fflush_r+0x6c>)
 8018f70:	429c      	cmp	r4, r3
 8018f72:	d11b      	bne.n	8018fac <_fflush_r+0x58>
 8018f74:	686c      	ldr	r4, [r5, #4]
 8018f76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d0ef      	beq.n	8018f5e <_fflush_r+0xa>
 8018f7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018f80:	07d0      	lsls	r0, r2, #31
 8018f82:	d404      	bmi.n	8018f8e <_fflush_r+0x3a>
 8018f84:	0599      	lsls	r1, r3, #22
 8018f86:	d402      	bmi.n	8018f8e <_fflush_r+0x3a>
 8018f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018f8a:	f7ff fd2c 	bl	80189e6 <__retarget_lock_acquire_recursive>
 8018f8e:	4628      	mov	r0, r5
 8018f90:	4621      	mov	r1, r4
 8018f92:	f7ff ff59 	bl	8018e48 <__sflush_r>
 8018f96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018f98:	07da      	lsls	r2, r3, #31
 8018f9a:	4605      	mov	r5, r0
 8018f9c:	d4e0      	bmi.n	8018f60 <_fflush_r+0xc>
 8018f9e:	89a3      	ldrh	r3, [r4, #12]
 8018fa0:	059b      	lsls	r3, r3, #22
 8018fa2:	d4dd      	bmi.n	8018f60 <_fflush_r+0xc>
 8018fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018fa6:	f7ff fd1f 	bl	80189e8 <__retarget_lock_release_recursive>
 8018faa:	e7d9      	b.n	8018f60 <_fflush_r+0xc>
 8018fac:	4b05      	ldr	r3, [pc, #20]	; (8018fc4 <_fflush_r+0x70>)
 8018fae:	429c      	cmp	r4, r3
 8018fb0:	d101      	bne.n	8018fb6 <_fflush_r+0x62>
 8018fb2:	68ac      	ldr	r4, [r5, #8]
 8018fb4:	e7df      	b.n	8018f76 <_fflush_r+0x22>
 8018fb6:	4b04      	ldr	r3, [pc, #16]	; (8018fc8 <_fflush_r+0x74>)
 8018fb8:	429c      	cmp	r4, r3
 8018fba:	bf08      	it	eq
 8018fbc:	68ec      	ldreq	r4, [r5, #12]
 8018fbe:	e7da      	b.n	8018f76 <_fflush_r+0x22>
 8018fc0:	0801ebf4 	.word	0x0801ebf4
 8018fc4:	0801ec14 	.word	0x0801ec14
 8018fc8:	0801ebd4 	.word	0x0801ebd4

08018fcc <fiprintf>:
 8018fcc:	b40e      	push	{r1, r2, r3}
 8018fce:	b503      	push	{r0, r1, lr}
 8018fd0:	4601      	mov	r1, r0
 8018fd2:	ab03      	add	r3, sp, #12
 8018fd4:	4805      	ldr	r0, [pc, #20]	; (8018fec <fiprintf+0x20>)
 8018fd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8018fda:	6800      	ldr	r0, [r0, #0]
 8018fdc:	9301      	str	r3, [sp, #4]
 8018fde:	f000 f8a3 	bl	8019128 <_vfiprintf_r>
 8018fe2:	b002      	add	sp, #8
 8018fe4:	f85d eb04 	ldr.w	lr, [sp], #4
 8018fe8:	b003      	add	sp, #12
 8018fea:	4770      	bx	lr
 8018fec:	24000038 	.word	0x24000038

08018ff0 <_lseek_r>:
 8018ff0:	b538      	push	{r3, r4, r5, lr}
 8018ff2:	4d07      	ldr	r5, [pc, #28]	; (8019010 <_lseek_r+0x20>)
 8018ff4:	4604      	mov	r4, r0
 8018ff6:	4608      	mov	r0, r1
 8018ff8:	4611      	mov	r1, r2
 8018ffa:	2200      	movs	r2, #0
 8018ffc:	602a      	str	r2, [r5, #0]
 8018ffe:	461a      	mov	r2, r3
 8019000:	f7e8 f9d2 	bl	80013a8 <_lseek>
 8019004:	1c43      	adds	r3, r0, #1
 8019006:	d102      	bne.n	801900e <_lseek_r+0x1e>
 8019008:	682b      	ldr	r3, [r5, #0]
 801900a:	b103      	cbz	r3, 801900e <_lseek_r+0x1e>
 801900c:	6023      	str	r3, [r4, #0]
 801900e:	bd38      	pop	{r3, r4, r5, pc}
 8019010:	24008bec 	.word	0x24008bec

08019014 <malloc>:
 8019014:	4b02      	ldr	r3, [pc, #8]	; (8019020 <malloc+0xc>)
 8019016:	4601      	mov	r1, r0
 8019018:	6818      	ldr	r0, [r3, #0]
 801901a:	f7ff bd2d 	b.w	8018a78 <_malloc_r>
 801901e:	bf00      	nop
 8019020:	24000038 	.word	0x24000038

08019024 <__malloc_lock>:
 8019024:	4801      	ldr	r0, [pc, #4]	; (801902c <__malloc_lock+0x8>)
 8019026:	f7ff bcde 	b.w	80189e6 <__retarget_lock_acquire_recursive>
 801902a:	bf00      	nop
 801902c:	24008be0 	.word	0x24008be0

08019030 <__malloc_unlock>:
 8019030:	4801      	ldr	r0, [pc, #4]	; (8019038 <__malloc_unlock+0x8>)
 8019032:	f7ff bcd9 	b.w	80189e8 <__retarget_lock_release_recursive>
 8019036:	bf00      	nop
 8019038:	24008be0 	.word	0x24008be0

0801903c <_free_r>:
 801903c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801903e:	2900      	cmp	r1, #0
 8019040:	d044      	beq.n	80190cc <_free_r+0x90>
 8019042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019046:	9001      	str	r0, [sp, #4]
 8019048:	2b00      	cmp	r3, #0
 801904a:	f1a1 0404 	sub.w	r4, r1, #4
 801904e:	bfb8      	it	lt
 8019050:	18e4      	addlt	r4, r4, r3
 8019052:	f7ff ffe7 	bl	8019024 <__malloc_lock>
 8019056:	4a1e      	ldr	r2, [pc, #120]	; (80190d0 <_free_r+0x94>)
 8019058:	9801      	ldr	r0, [sp, #4]
 801905a:	6813      	ldr	r3, [r2, #0]
 801905c:	b933      	cbnz	r3, 801906c <_free_r+0x30>
 801905e:	6063      	str	r3, [r4, #4]
 8019060:	6014      	str	r4, [r2, #0]
 8019062:	b003      	add	sp, #12
 8019064:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019068:	f7ff bfe2 	b.w	8019030 <__malloc_unlock>
 801906c:	42a3      	cmp	r3, r4
 801906e:	d908      	bls.n	8019082 <_free_r+0x46>
 8019070:	6825      	ldr	r5, [r4, #0]
 8019072:	1961      	adds	r1, r4, r5
 8019074:	428b      	cmp	r3, r1
 8019076:	bf01      	itttt	eq
 8019078:	6819      	ldreq	r1, [r3, #0]
 801907a:	685b      	ldreq	r3, [r3, #4]
 801907c:	1949      	addeq	r1, r1, r5
 801907e:	6021      	streq	r1, [r4, #0]
 8019080:	e7ed      	b.n	801905e <_free_r+0x22>
 8019082:	461a      	mov	r2, r3
 8019084:	685b      	ldr	r3, [r3, #4]
 8019086:	b10b      	cbz	r3, 801908c <_free_r+0x50>
 8019088:	42a3      	cmp	r3, r4
 801908a:	d9fa      	bls.n	8019082 <_free_r+0x46>
 801908c:	6811      	ldr	r1, [r2, #0]
 801908e:	1855      	adds	r5, r2, r1
 8019090:	42a5      	cmp	r5, r4
 8019092:	d10b      	bne.n	80190ac <_free_r+0x70>
 8019094:	6824      	ldr	r4, [r4, #0]
 8019096:	4421      	add	r1, r4
 8019098:	1854      	adds	r4, r2, r1
 801909a:	42a3      	cmp	r3, r4
 801909c:	6011      	str	r1, [r2, #0]
 801909e:	d1e0      	bne.n	8019062 <_free_r+0x26>
 80190a0:	681c      	ldr	r4, [r3, #0]
 80190a2:	685b      	ldr	r3, [r3, #4]
 80190a4:	6053      	str	r3, [r2, #4]
 80190a6:	4421      	add	r1, r4
 80190a8:	6011      	str	r1, [r2, #0]
 80190aa:	e7da      	b.n	8019062 <_free_r+0x26>
 80190ac:	d902      	bls.n	80190b4 <_free_r+0x78>
 80190ae:	230c      	movs	r3, #12
 80190b0:	6003      	str	r3, [r0, #0]
 80190b2:	e7d6      	b.n	8019062 <_free_r+0x26>
 80190b4:	6825      	ldr	r5, [r4, #0]
 80190b6:	1961      	adds	r1, r4, r5
 80190b8:	428b      	cmp	r3, r1
 80190ba:	bf04      	itt	eq
 80190bc:	6819      	ldreq	r1, [r3, #0]
 80190be:	685b      	ldreq	r3, [r3, #4]
 80190c0:	6063      	str	r3, [r4, #4]
 80190c2:	bf04      	itt	eq
 80190c4:	1949      	addeq	r1, r1, r5
 80190c6:	6021      	streq	r1, [r4, #0]
 80190c8:	6054      	str	r4, [r2, #4]
 80190ca:	e7ca      	b.n	8019062 <_free_r+0x26>
 80190cc:	b003      	add	sp, #12
 80190ce:	bd30      	pop	{r4, r5, pc}
 80190d0:	24008be4 	.word	0x24008be4

080190d4 <__sfputc_r>:
 80190d4:	6893      	ldr	r3, [r2, #8]
 80190d6:	3b01      	subs	r3, #1
 80190d8:	2b00      	cmp	r3, #0
 80190da:	b410      	push	{r4}
 80190dc:	6093      	str	r3, [r2, #8]
 80190de:	da08      	bge.n	80190f2 <__sfputc_r+0x1e>
 80190e0:	6994      	ldr	r4, [r2, #24]
 80190e2:	42a3      	cmp	r3, r4
 80190e4:	db01      	blt.n	80190ea <__sfputc_r+0x16>
 80190e6:	290a      	cmp	r1, #10
 80190e8:	d103      	bne.n	80190f2 <__sfputc_r+0x1e>
 80190ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80190ee:	f000 baf1 	b.w	80196d4 <__swbuf_r>
 80190f2:	6813      	ldr	r3, [r2, #0]
 80190f4:	1c58      	adds	r0, r3, #1
 80190f6:	6010      	str	r0, [r2, #0]
 80190f8:	7019      	strb	r1, [r3, #0]
 80190fa:	4608      	mov	r0, r1
 80190fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019100:	4770      	bx	lr

08019102 <__sfputs_r>:
 8019102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019104:	4606      	mov	r6, r0
 8019106:	460f      	mov	r7, r1
 8019108:	4614      	mov	r4, r2
 801910a:	18d5      	adds	r5, r2, r3
 801910c:	42ac      	cmp	r4, r5
 801910e:	d101      	bne.n	8019114 <__sfputs_r+0x12>
 8019110:	2000      	movs	r0, #0
 8019112:	e007      	b.n	8019124 <__sfputs_r+0x22>
 8019114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019118:	463a      	mov	r2, r7
 801911a:	4630      	mov	r0, r6
 801911c:	f7ff ffda 	bl	80190d4 <__sfputc_r>
 8019120:	1c43      	adds	r3, r0, #1
 8019122:	d1f3      	bne.n	801910c <__sfputs_r+0xa>
 8019124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019128 <_vfiprintf_r>:
 8019128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801912c:	460d      	mov	r5, r1
 801912e:	b09d      	sub	sp, #116	; 0x74
 8019130:	4614      	mov	r4, r2
 8019132:	4698      	mov	r8, r3
 8019134:	4606      	mov	r6, r0
 8019136:	b118      	cbz	r0, 8019140 <_vfiprintf_r+0x18>
 8019138:	6983      	ldr	r3, [r0, #24]
 801913a:	b90b      	cbnz	r3, 8019140 <_vfiprintf_r+0x18>
 801913c:	f7ff fb90 	bl	8018860 <__sinit>
 8019140:	4b89      	ldr	r3, [pc, #548]	; (8019368 <_vfiprintf_r+0x240>)
 8019142:	429d      	cmp	r5, r3
 8019144:	d11b      	bne.n	801917e <_vfiprintf_r+0x56>
 8019146:	6875      	ldr	r5, [r6, #4]
 8019148:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801914a:	07d9      	lsls	r1, r3, #31
 801914c:	d405      	bmi.n	801915a <_vfiprintf_r+0x32>
 801914e:	89ab      	ldrh	r3, [r5, #12]
 8019150:	059a      	lsls	r2, r3, #22
 8019152:	d402      	bmi.n	801915a <_vfiprintf_r+0x32>
 8019154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019156:	f7ff fc46 	bl	80189e6 <__retarget_lock_acquire_recursive>
 801915a:	89ab      	ldrh	r3, [r5, #12]
 801915c:	071b      	lsls	r3, r3, #28
 801915e:	d501      	bpl.n	8019164 <_vfiprintf_r+0x3c>
 8019160:	692b      	ldr	r3, [r5, #16]
 8019162:	b9eb      	cbnz	r3, 80191a0 <_vfiprintf_r+0x78>
 8019164:	4629      	mov	r1, r5
 8019166:	4630      	mov	r0, r6
 8019168:	f000 fb06 	bl	8019778 <__swsetup_r>
 801916c:	b1c0      	cbz	r0, 80191a0 <_vfiprintf_r+0x78>
 801916e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019170:	07dc      	lsls	r4, r3, #31
 8019172:	d50e      	bpl.n	8019192 <_vfiprintf_r+0x6a>
 8019174:	f04f 30ff 	mov.w	r0, #4294967295
 8019178:	b01d      	add	sp, #116	; 0x74
 801917a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801917e:	4b7b      	ldr	r3, [pc, #492]	; (801936c <_vfiprintf_r+0x244>)
 8019180:	429d      	cmp	r5, r3
 8019182:	d101      	bne.n	8019188 <_vfiprintf_r+0x60>
 8019184:	68b5      	ldr	r5, [r6, #8]
 8019186:	e7df      	b.n	8019148 <_vfiprintf_r+0x20>
 8019188:	4b79      	ldr	r3, [pc, #484]	; (8019370 <_vfiprintf_r+0x248>)
 801918a:	429d      	cmp	r5, r3
 801918c:	bf08      	it	eq
 801918e:	68f5      	ldreq	r5, [r6, #12]
 8019190:	e7da      	b.n	8019148 <_vfiprintf_r+0x20>
 8019192:	89ab      	ldrh	r3, [r5, #12]
 8019194:	0598      	lsls	r0, r3, #22
 8019196:	d4ed      	bmi.n	8019174 <_vfiprintf_r+0x4c>
 8019198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801919a:	f7ff fc25 	bl	80189e8 <__retarget_lock_release_recursive>
 801919e:	e7e9      	b.n	8019174 <_vfiprintf_r+0x4c>
 80191a0:	2300      	movs	r3, #0
 80191a2:	9309      	str	r3, [sp, #36]	; 0x24
 80191a4:	2320      	movs	r3, #32
 80191a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80191aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80191ae:	2330      	movs	r3, #48	; 0x30
 80191b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019374 <_vfiprintf_r+0x24c>
 80191b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80191b8:	f04f 0901 	mov.w	r9, #1
 80191bc:	4623      	mov	r3, r4
 80191be:	469a      	mov	sl, r3
 80191c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80191c4:	b10a      	cbz	r2, 80191ca <_vfiprintf_r+0xa2>
 80191c6:	2a25      	cmp	r2, #37	; 0x25
 80191c8:	d1f9      	bne.n	80191be <_vfiprintf_r+0x96>
 80191ca:	ebba 0b04 	subs.w	fp, sl, r4
 80191ce:	d00b      	beq.n	80191e8 <_vfiprintf_r+0xc0>
 80191d0:	465b      	mov	r3, fp
 80191d2:	4622      	mov	r2, r4
 80191d4:	4629      	mov	r1, r5
 80191d6:	4630      	mov	r0, r6
 80191d8:	f7ff ff93 	bl	8019102 <__sfputs_r>
 80191dc:	3001      	adds	r0, #1
 80191de:	f000 80aa 	beq.w	8019336 <_vfiprintf_r+0x20e>
 80191e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80191e4:	445a      	add	r2, fp
 80191e6:	9209      	str	r2, [sp, #36]	; 0x24
 80191e8:	f89a 3000 	ldrb.w	r3, [sl]
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	f000 80a2 	beq.w	8019336 <_vfiprintf_r+0x20e>
 80191f2:	2300      	movs	r3, #0
 80191f4:	f04f 32ff 	mov.w	r2, #4294967295
 80191f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80191fc:	f10a 0a01 	add.w	sl, sl, #1
 8019200:	9304      	str	r3, [sp, #16]
 8019202:	9307      	str	r3, [sp, #28]
 8019204:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019208:	931a      	str	r3, [sp, #104]	; 0x68
 801920a:	4654      	mov	r4, sl
 801920c:	2205      	movs	r2, #5
 801920e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019212:	4858      	ldr	r0, [pc, #352]	; (8019374 <_vfiprintf_r+0x24c>)
 8019214:	f7e7 f87c 	bl	8000310 <memchr>
 8019218:	9a04      	ldr	r2, [sp, #16]
 801921a:	b9d8      	cbnz	r0, 8019254 <_vfiprintf_r+0x12c>
 801921c:	06d1      	lsls	r1, r2, #27
 801921e:	bf44      	itt	mi
 8019220:	2320      	movmi	r3, #32
 8019222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019226:	0713      	lsls	r3, r2, #28
 8019228:	bf44      	itt	mi
 801922a:	232b      	movmi	r3, #43	; 0x2b
 801922c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019230:	f89a 3000 	ldrb.w	r3, [sl]
 8019234:	2b2a      	cmp	r3, #42	; 0x2a
 8019236:	d015      	beq.n	8019264 <_vfiprintf_r+0x13c>
 8019238:	9a07      	ldr	r2, [sp, #28]
 801923a:	4654      	mov	r4, sl
 801923c:	2000      	movs	r0, #0
 801923e:	f04f 0c0a 	mov.w	ip, #10
 8019242:	4621      	mov	r1, r4
 8019244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019248:	3b30      	subs	r3, #48	; 0x30
 801924a:	2b09      	cmp	r3, #9
 801924c:	d94e      	bls.n	80192ec <_vfiprintf_r+0x1c4>
 801924e:	b1b0      	cbz	r0, 801927e <_vfiprintf_r+0x156>
 8019250:	9207      	str	r2, [sp, #28]
 8019252:	e014      	b.n	801927e <_vfiprintf_r+0x156>
 8019254:	eba0 0308 	sub.w	r3, r0, r8
 8019258:	fa09 f303 	lsl.w	r3, r9, r3
 801925c:	4313      	orrs	r3, r2
 801925e:	9304      	str	r3, [sp, #16]
 8019260:	46a2      	mov	sl, r4
 8019262:	e7d2      	b.n	801920a <_vfiprintf_r+0xe2>
 8019264:	9b03      	ldr	r3, [sp, #12]
 8019266:	1d19      	adds	r1, r3, #4
 8019268:	681b      	ldr	r3, [r3, #0]
 801926a:	9103      	str	r1, [sp, #12]
 801926c:	2b00      	cmp	r3, #0
 801926e:	bfbb      	ittet	lt
 8019270:	425b      	neglt	r3, r3
 8019272:	f042 0202 	orrlt.w	r2, r2, #2
 8019276:	9307      	strge	r3, [sp, #28]
 8019278:	9307      	strlt	r3, [sp, #28]
 801927a:	bfb8      	it	lt
 801927c:	9204      	strlt	r2, [sp, #16]
 801927e:	7823      	ldrb	r3, [r4, #0]
 8019280:	2b2e      	cmp	r3, #46	; 0x2e
 8019282:	d10c      	bne.n	801929e <_vfiprintf_r+0x176>
 8019284:	7863      	ldrb	r3, [r4, #1]
 8019286:	2b2a      	cmp	r3, #42	; 0x2a
 8019288:	d135      	bne.n	80192f6 <_vfiprintf_r+0x1ce>
 801928a:	9b03      	ldr	r3, [sp, #12]
 801928c:	1d1a      	adds	r2, r3, #4
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	9203      	str	r2, [sp, #12]
 8019292:	2b00      	cmp	r3, #0
 8019294:	bfb8      	it	lt
 8019296:	f04f 33ff 	movlt.w	r3, #4294967295
 801929a:	3402      	adds	r4, #2
 801929c:	9305      	str	r3, [sp, #20]
 801929e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019384 <_vfiprintf_r+0x25c>
 80192a2:	7821      	ldrb	r1, [r4, #0]
 80192a4:	2203      	movs	r2, #3
 80192a6:	4650      	mov	r0, sl
 80192a8:	f7e7 f832 	bl	8000310 <memchr>
 80192ac:	b140      	cbz	r0, 80192c0 <_vfiprintf_r+0x198>
 80192ae:	2340      	movs	r3, #64	; 0x40
 80192b0:	eba0 000a 	sub.w	r0, r0, sl
 80192b4:	fa03 f000 	lsl.w	r0, r3, r0
 80192b8:	9b04      	ldr	r3, [sp, #16]
 80192ba:	4303      	orrs	r3, r0
 80192bc:	3401      	adds	r4, #1
 80192be:	9304      	str	r3, [sp, #16]
 80192c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80192c4:	482c      	ldr	r0, [pc, #176]	; (8019378 <_vfiprintf_r+0x250>)
 80192c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80192ca:	2206      	movs	r2, #6
 80192cc:	f7e7 f820 	bl	8000310 <memchr>
 80192d0:	2800      	cmp	r0, #0
 80192d2:	d03f      	beq.n	8019354 <_vfiprintf_r+0x22c>
 80192d4:	4b29      	ldr	r3, [pc, #164]	; (801937c <_vfiprintf_r+0x254>)
 80192d6:	bb1b      	cbnz	r3, 8019320 <_vfiprintf_r+0x1f8>
 80192d8:	9b03      	ldr	r3, [sp, #12]
 80192da:	3307      	adds	r3, #7
 80192dc:	f023 0307 	bic.w	r3, r3, #7
 80192e0:	3308      	adds	r3, #8
 80192e2:	9303      	str	r3, [sp, #12]
 80192e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80192e6:	443b      	add	r3, r7
 80192e8:	9309      	str	r3, [sp, #36]	; 0x24
 80192ea:	e767      	b.n	80191bc <_vfiprintf_r+0x94>
 80192ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80192f0:	460c      	mov	r4, r1
 80192f2:	2001      	movs	r0, #1
 80192f4:	e7a5      	b.n	8019242 <_vfiprintf_r+0x11a>
 80192f6:	2300      	movs	r3, #0
 80192f8:	3401      	adds	r4, #1
 80192fa:	9305      	str	r3, [sp, #20]
 80192fc:	4619      	mov	r1, r3
 80192fe:	f04f 0c0a 	mov.w	ip, #10
 8019302:	4620      	mov	r0, r4
 8019304:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019308:	3a30      	subs	r2, #48	; 0x30
 801930a:	2a09      	cmp	r2, #9
 801930c:	d903      	bls.n	8019316 <_vfiprintf_r+0x1ee>
 801930e:	2b00      	cmp	r3, #0
 8019310:	d0c5      	beq.n	801929e <_vfiprintf_r+0x176>
 8019312:	9105      	str	r1, [sp, #20]
 8019314:	e7c3      	b.n	801929e <_vfiprintf_r+0x176>
 8019316:	fb0c 2101 	mla	r1, ip, r1, r2
 801931a:	4604      	mov	r4, r0
 801931c:	2301      	movs	r3, #1
 801931e:	e7f0      	b.n	8019302 <_vfiprintf_r+0x1da>
 8019320:	ab03      	add	r3, sp, #12
 8019322:	9300      	str	r3, [sp, #0]
 8019324:	462a      	mov	r2, r5
 8019326:	4b16      	ldr	r3, [pc, #88]	; (8019380 <_vfiprintf_r+0x258>)
 8019328:	a904      	add	r1, sp, #16
 801932a:	4630      	mov	r0, r6
 801932c:	f3af 8000 	nop.w
 8019330:	4607      	mov	r7, r0
 8019332:	1c78      	adds	r0, r7, #1
 8019334:	d1d6      	bne.n	80192e4 <_vfiprintf_r+0x1bc>
 8019336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019338:	07d9      	lsls	r1, r3, #31
 801933a:	d405      	bmi.n	8019348 <_vfiprintf_r+0x220>
 801933c:	89ab      	ldrh	r3, [r5, #12]
 801933e:	059a      	lsls	r2, r3, #22
 8019340:	d402      	bmi.n	8019348 <_vfiprintf_r+0x220>
 8019342:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019344:	f7ff fb50 	bl	80189e8 <__retarget_lock_release_recursive>
 8019348:	89ab      	ldrh	r3, [r5, #12]
 801934a:	065b      	lsls	r3, r3, #25
 801934c:	f53f af12 	bmi.w	8019174 <_vfiprintf_r+0x4c>
 8019350:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019352:	e711      	b.n	8019178 <_vfiprintf_r+0x50>
 8019354:	ab03      	add	r3, sp, #12
 8019356:	9300      	str	r3, [sp, #0]
 8019358:	462a      	mov	r2, r5
 801935a:	4b09      	ldr	r3, [pc, #36]	; (8019380 <_vfiprintf_r+0x258>)
 801935c:	a904      	add	r1, sp, #16
 801935e:	4630      	mov	r0, r6
 8019360:	f000 f880 	bl	8019464 <_printf_i>
 8019364:	e7e4      	b.n	8019330 <_vfiprintf_r+0x208>
 8019366:	bf00      	nop
 8019368:	0801ebf4 	.word	0x0801ebf4
 801936c:	0801ec14 	.word	0x0801ec14
 8019370:	0801ebd4 	.word	0x0801ebd4
 8019374:	0801ece6 	.word	0x0801ece6
 8019378:	0801ecf0 	.word	0x0801ecf0
 801937c:	00000000 	.word	0x00000000
 8019380:	08019103 	.word	0x08019103
 8019384:	0801ecec 	.word	0x0801ecec

08019388 <_printf_common>:
 8019388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801938c:	4616      	mov	r6, r2
 801938e:	4699      	mov	r9, r3
 8019390:	688a      	ldr	r2, [r1, #8]
 8019392:	690b      	ldr	r3, [r1, #16]
 8019394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019398:	4293      	cmp	r3, r2
 801939a:	bfb8      	it	lt
 801939c:	4613      	movlt	r3, r2
 801939e:	6033      	str	r3, [r6, #0]
 80193a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80193a4:	4607      	mov	r7, r0
 80193a6:	460c      	mov	r4, r1
 80193a8:	b10a      	cbz	r2, 80193ae <_printf_common+0x26>
 80193aa:	3301      	adds	r3, #1
 80193ac:	6033      	str	r3, [r6, #0]
 80193ae:	6823      	ldr	r3, [r4, #0]
 80193b0:	0699      	lsls	r1, r3, #26
 80193b2:	bf42      	ittt	mi
 80193b4:	6833      	ldrmi	r3, [r6, #0]
 80193b6:	3302      	addmi	r3, #2
 80193b8:	6033      	strmi	r3, [r6, #0]
 80193ba:	6825      	ldr	r5, [r4, #0]
 80193bc:	f015 0506 	ands.w	r5, r5, #6
 80193c0:	d106      	bne.n	80193d0 <_printf_common+0x48>
 80193c2:	f104 0a19 	add.w	sl, r4, #25
 80193c6:	68e3      	ldr	r3, [r4, #12]
 80193c8:	6832      	ldr	r2, [r6, #0]
 80193ca:	1a9b      	subs	r3, r3, r2
 80193cc:	42ab      	cmp	r3, r5
 80193ce:	dc26      	bgt.n	801941e <_printf_common+0x96>
 80193d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80193d4:	1e13      	subs	r3, r2, #0
 80193d6:	6822      	ldr	r2, [r4, #0]
 80193d8:	bf18      	it	ne
 80193da:	2301      	movne	r3, #1
 80193dc:	0692      	lsls	r2, r2, #26
 80193de:	d42b      	bmi.n	8019438 <_printf_common+0xb0>
 80193e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80193e4:	4649      	mov	r1, r9
 80193e6:	4638      	mov	r0, r7
 80193e8:	47c0      	blx	r8
 80193ea:	3001      	adds	r0, #1
 80193ec:	d01e      	beq.n	801942c <_printf_common+0xa4>
 80193ee:	6823      	ldr	r3, [r4, #0]
 80193f0:	68e5      	ldr	r5, [r4, #12]
 80193f2:	6832      	ldr	r2, [r6, #0]
 80193f4:	f003 0306 	and.w	r3, r3, #6
 80193f8:	2b04      	cmp	r3, #4
 80193fa:	bf08      	it	eq
 80193fc:	1aad      	subeq	r5, r5, r2
 80193fe:	68a3      	ldr	r3, [r4, #8]
 8019400:	6922      	ldr	r2, [r4, #16]
 8019402:	bf0c      	ite	eq
 8019404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019408:	2500      	movne	r5, #0
 801940a:	4293      	cmp	r3, r2
 801940c:	bfc4      	itt	gt
 801940e:	1a9b      	subgt	r3, r3, r2
 8019410:	18ed      	addgt	r5, r5, r3
 8019412:	2600      	movs	r6, #0
 8019414:	341a      	adds	r4, #26
 8019416:	42b5      	cmp	r5, r6
 8019418:	d11a      	bne.n	8019450 <_printf_common+0xc8>
 801941a:	2000      	movs	r0, #0
 801941c:	e008      	b.n	8019430 <_printf_common+0xa8>
 801941e:	2301      	movs	r3, #1
 8019420:	4652      	mov	r2, sl
 8019422:	4649      	mov	r1, r9
 8019424:	4638      	mov	r0, r7
 8019426:	47c0      	blx	r8
 8019428:	3001      	adds	r0, #1
 801942a:	d103      	bne.n	8019434 <_printf_common+0xac>
 801942c:	f04f 30ff 	mov.w	r0, #4294967295
 8019430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019434:	3501      	adds	r5, #1
 8019436:	e7c6      	b.n	80193c6 <_printf_common+0x3e>
 8019438:	18e1      	adds	r1, r4, r3
 801943a:	1c5a      	adds	r2, r3, #1
 801943c:	2030      	movs	r0, #48	; 0x30
 801943e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019442:	4422      	add	r2, r4
 8019444:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801944c:	3302      	adds	r3, #2
 801944e:	e7c7      	b.n	80193e0 <_printf_common+0x58>
 8019450:	2301      	movs	r3, #1
 8019452:	4622      	mov	r2, r4
 8019454:	4649      	mov	r1, r9
 8019456:	4638      	mov	r0, r7
 8019458:	47c0      	blx	r8
 801945a:	3001      	adds	r0, #1
 801945c:	d0e6      	beq.n	801942c <_printf_common+0xa4>
 801945e:	3601      	adds	r6, #1
 8019460:	e7d9      	b.n	8019416 <_printf_common+0x8e>
	...

08019464 <_printf_i>:
 8019464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019468:	7e0f      	ldrb	r7, [r1, #24]
 801946a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801946c:	2f78      	cmp	r7, #120	; 0x78
 801946e:	4691      	mov	r9, r2
 8019470:	4680      	mov	r8, r0
 8019472:	460c      	mov	r4, r1
 8019474:	469a      	mov	sl, r3
 8019476:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801947a:	d807      	bhi.n	801948c <_printf_i+0x28>
 801947c:	2f62      	cmp	r7, #98	; 0x62
 801947e:	d80a      	bhi.n	8019496 <_printf_i+0x32>
 8019480:	2f00      	cmp	r7, #0
 8019482:	f000 80d8 	beq.w	8019636 <_printf_i+0x1d2>
 8019486:	2f58      	cmp	r7, #88	; 0x58
 8019488:	f000 80a3 	beq.w	80195d2 <_printf_i+0x16e>
 801948c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019490:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019494:	e03a      	b.n	801950c <_printf_i+0xa8>
 8019496:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801949a:	2b15      	cmp	r3, #21
 801949c:	d8f6      	bhi.n	801948c <_printf_i+0x28>
 801949e:	a101      	add	r1, pc, #4	; (adr r1, 80194a4 <_printf_i+0x40>)
 80194a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80194a4:	080194fd 	.word	0x080194fd
 80194a8:	08019511 	.word	0x08019511
 80194ac:	0801948d 	.word	0x0801948d
 80194b0:	0801948d 	.word	0x0801948d
 80194b4:	0801948d 	.word	0x0801948d
 80194b8:	0801948d 	.word	0x0801948d
 80194bc:	08019511 	.word	0x08019511
 80194c0:	0801948d 	.word	0x0801948d
 80194c4:	0801948d 	.word	0x0801948d
 80194c8:	0801948d 	.word	0x0801948d
 80194cc:	0801948d 	.word	0x0801948d
 80194d0:	0801961d 	.word	0x0801961d
 80194d4:	08019541 	.word	0x08019541
 80194d8:	080195ff 	.word	0x080195ff
 80194dc:	0801948d 	.word	0x0801948d
 80194e0:	0801948d 	.word	0x0801948d
 80194e4:	0801963f 	.word	0x0801963f
 80194e8:	0801948d 	.word	0x0801948d
 80194ec:	08019541 	.word	0x08019541
 80194f0:	0801948d 	.word	0x0801948d
 80194f4:	0801948d 	.word	0x0801948d
 80194f8:	08019607 	.word	0x08019607
 80194fc:	682b      	ldr	r3, [r5, #0]
 80194fe:	1d1a      	adds	r2, r3, #4
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	602a      	str	r2, [r5, #0]
 8019504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801950c:	2301      	movs	r3, #1
 801950e:	e0a3      	b.n	8019658 <_printf_i+0x1f4>
 8019510:	6820      	ldr	r0, [r4, #0]
 8019512:	6829      	ldr	r1, [r5, #0]
 8019514:	0606      	lsls	r6, r0, #24
 8019516:	f101 0304 	add.w	r3, r1, #4
 801951a:	d50a      	bpl.n	8019532 <_printf_i+0xce>
 801951c:	680e      	ldr	r6, [r1, #0]
 801951e:	602b      	str	r3, [r5, #0]
 8019520:	2e00      	cmp	r6, #0
 8019522:	da03      	bge.n	801952c <_printf_i+0xc8>
 8019524:	232d      	movs	r3, #45	; 0x2d
 8019526:	4276      	negs	r6, r6
 8019528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801952c:	485e      	ldr	r0, [pc, #376]	; (80196a8 <_printf_i+0x244>)
 801952e:	230a      	movs	r3, #10
 8019530:	e019      	b.n	8019566 <_printf_i+0x102>
 8019532:	680e      	ldr	r6, [r1, #0]
 8019534:	602b      	str	r3, [r5, #0]
 8019536:	f010 0f40 	tst.w	r0, #64	; 0x40
 801953a:	bf18      	it	ne
 801953c:	b236      	sxthne	r6, r6
 801953e:	e7ef      	b.n	8019520 <_printf_i+0xbc>
 8019540:	682b      	ldr	r3, [r5, #0]
 8019542:	6820      	ldr	r0, [r4, #0]
 8019544:	1d19      	adds	r1, r3, #4
 8019546:	6029      	str	r1, [r5, #0]
 8019548:	0601      	lsls	r1, r0, #24
 801954a:	d501      	bpl.n	8019550 <_printf_i+0xec>
 801954c:	681e      	ldr	r6, [r3, #0]
 801954e:	e002      	b.n	8019556 <_printf_i+0xf2>
 8019550:	0646      	lsls	r6, r0, #25
 8019552:	d5fb      	bpl.n	801954c <_printf_i+0xe8>
 8019554:	881e      	ldrh	r6, [r3, #0]
 8019556:	4854      	ldr	r0, [pc, #336]	; (80196a8 <_printf_i+0x244>)
 8019558:	2f6f      	cmp	r7, #111	; 0x6f
 801955a:	bf0c      	ite	eq
 801955c:	2308      	moveq	r3, #8
 801955e:	230a      	movne	r3, #10
 8019560:	2100      	movs	r1, #0
 8019562:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019566:	6865      	ldr	r5, [r4, #4]
 8019568:	60a5      	str	r5, [r4, #8]
 801956a:	2d00      	cmp	r5, #0
 801956c:	bfa2      	ittt	ge
 801956e:	6821      	ldrge	r1, [r4, #0]
 8019570:	f021 0104 	bicge.w	r1, r1, #4
 8019574:	6021      	strge	r1, [r4, #0]
 8019576:	b90e      	cbnz	r6, 801957c <_printf_i+0x118>
 8019578:	2d00      	cmp	r5, #0
 801957a:	d04d      	beq.n	8019618 <_printf_i+0x1b4>
 801957c:	4615      	mov	r5, r2
 801957e:	fbb6 f1f3 	udiv	r1, r6, r3
 8019582:	fb03 6711 	mls	r7, r3, r1, r6
 8019586:	5dc7      	ldrb	r7, [r0, r7]
 8019588:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801958c:	4637      	mov	r7, r6
 801958e:	42bb      	cmp	r3, r7
 8019590:	460e      	mov	r6, r1
 8019592:	d9f4      	bls.n	801957e <_printf_i+0x11a>
 8019594:	2b08      	cmp	r3, #8
 8019596:	d10b      	bne.n	80195b0 <_printf_i+0x14c>
 8019598:	6823      	ldr	r3, [r4, #0]
 801959a:	07de      	lsls	r6, r3, #31
 801959c:	d508      	bpl.n	80195b0 <_printf_i+0x14c>
 801959e:	6923      	ldr	r3, [r4, #16]
 80195a0:	6861      	ldr	r1, [r4, #4]
 80195a2:	4299      	cmp	r1, r3
 80195a4:	bfde      	ittt	le
 80195a6:	2330      	movle	r3, #48	; 0x30
 80195a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80195ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80195b0:	1b52      	subs	r2, r2, r5
 80195b2:	6122      	str	r2, [r4, #16]
 80195b4:	f8cd a000 	str.w	sl, [sp]
 80195b8:	464b      	mov	r3, r9
 80195ba:	aa03      	add	r2, sp, #12
 80195bc:	4621      	mov	r1, r4
 80195be:	4640      	mov	r0, r8
 80195c0:	f7ff fee2 	bl	8019388 <_printf_common>
 80195c4:	3001      	adds	r0, #1
 80195c6:	d14c      	bne.n	8019662 <_printf_i+0x1fe>
 80195c8:	f04f 30ff 	mov.w	r0, #4294967295
 80195cc:	b004      	add	sp, #16
 80195ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195d2:	4835      	ldr	r0, [pc, #212]	; (80196a8 <_printf_i+0x244>)
 80195d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80195d8:	6829      	ldr	r1, [r5, #0]
 80195da:	6823      	ldr	r3, [r4, #0]
 80195dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80195e0:	6029      	str	r1, [r5, #0]
 80195e2:	061d      	lsls	r5, r3, #24
 80195e4:	d514      	bpl.n	8019610 <_printf_i+0x1ac>
 80195e6:	07df      	lsls	r7, r3, #31
 80195e8:	bf44      	itt	mi
 80195ea:	f043 0320 	orrmi.w	r3, r3, #32
 80195ee:	6023      	strmi	r3, [r4, #0]
 80195f0:	b91e      	cbnz	r6, 80195fa <_printf_i+0x196>
 80195f2:	6823      	ldr	r3, [r4, #0]
 80195f4:	f023 0320 	bic.w	r3, r3, #32
 80195f8:	6023      	str	r3, [r4, #0]
 80195fa:	2310      	movs	r3, #16
 80195fc:	e7b0      	b.n	8019560 <_printf_i+0xfc>
 80195fe:	6823      	ldr	r3, [r4, #0]
 8019600:	f043 0320 	orr.w	r3, r3, #32
 8019604:	6023      	str	r3, [r4, #0]
 8019606:	2378      	movs	r3, #120	; 0x78
 8019608:	4828      	ldr	r0, [pc, #160]	; (80196ac <_printf_i+0x248>)
 801960a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801960e:	e7e3      	b.n	80195d8 <_printf_i+0x174>
 8019610:	0659      	lsls	r1, r3, #25
 8019612:	bf48      	it	mi
 8019614:	b2b6      	uxthmi	r6, r6
 8019616:	e7e6      	b.n	80195e6 <_printf_i+0x182>
 8019618:	4615      	mov	r5, r2
 801961a:	e7bb      	b.n	8019594 <_printf_i+0x130>
 801961c:	682b      	ldr	r3, [r5, #0]
 801961e:	6826      	ldr	r6, [r4, #0]
 8019620:	6961      	ldr	r1, [r4, #20]
 8019622:	1d18      	adds	r0, r3, #4
 8019624:	6028      	str	r0, [r5, #0]
 8019626:	0635      	lsls	r5, r6, #24
 8019628:	681b      	ldr	r3, [r3, #0]
 801962a:	d501      	bpl.n	8019630 <_printf_i+0x1cc>
 801962c:	6019      	str	r1, [r3, #0]
 801962e:	e002      	b.n	8019636 <_printf_i+0x1d2>
 8019630:	0670      	lsls	r0, r6, #25
 8019632:	d5fb      	bpl.n	801962c <_printf_i+0x1c8>
 8019634:	8019      	strh	r1, [r3, #0]
 8019636:	2300      	movs	r3, #0
 8019638:	6123      	str	r3, [r4, #16]
 801963a:	4615      	mov	r5, r2
 801963c:	e7ba      	b.n	80195b4 <_printf_i+0x150>
 801963e:	682b      	ldr	r3, [r5, #0]
 8019640:	1d1a      	adds	r2, r3, #4
 8019642:	602a      	str	r2, [r5, #0]
 8019644:	681d      	ldr	r5, [r3, #0]
 8019646:	6862      	ldr	r2, [r4, #4]
 8019648:	2100      	movs	r1, #0
 801964a:	4628      	mov	r0, r5
 801964c:	f7e6 fe60 	bl	8000310 <memchr>
 8019650:	b108      	cbz	r0, 8019656 <_printf_i+0x1f2>
 8019652:	1b40      	subs	r0, r0, r5
 8019654:	6060      	str	r0, [r4, #4]
 8019656:	6863      	ldr	r3, [r4, #4]
 8019658:	6123      	str	r3, [r4, #16]
 801965a:	2300      	movs	r3, #0
 801965c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019660:	e7a8      	b.n	80195b4 <_printf_i+0x150>
 8019662:	6923      	ldr	r3, [r4, #16]
 8019664:	462a      	mov	r2, r5
 8019666:	4649      	mov	r1, r9
 8019668:	4640      	mov	r0, r8
 801966a:	47d0      	blx	sl
 801966c:	3001      	adds	r0, #1
 801966e:	d0ab      	beq.n	80195c8 <_printf_i+0x164>
 8019670:	6823      	ldr	r3, [r4, #0]
 8019672:	079b      	lsls	r3, r3, #30
 8019674:	d413      	bmi.n	801969e <_printf_i+0x23a>
 8019676:	68e0      	ldr	r0, [r4, #12]
 8019678:	9b03      	ldr	r3, [sp, #12]
 801967a:	4298      	cmp	r0, r3
 801967c:	bfb8      	it	lt
 801967e:	4618      	movlt	r0, r3
 8019680:	e7a4      	b.n	80195cc <_printf_i+0x168>
 8019682:	2301      	movs	r3, #1
 8019684:	4632      	mov	r2, r6
 8019686:	4649      	mov	r1, r9
 8019688:	4640      	mov	r0, r8
 801968a:	47d0      	blx	sl
 801968c:	3001      	adds	r0, #1
 801968e:	d09b      	beq.n	80195c8 <_printf_i+0x164>
 8019690:	3501      	adds	r5, #1
 8019692:	68e3      	ldr	r3, [r4, #12]
 8019694:	9903      	ldr	r1, [sp, #12]
 8019696:	1a5b      	subs	r3, r3, r1
 8019698:	42ab      	cmp	r3, r5
 801969a:	dcf2      	bgt.n	8019682 <_printf_i+0x21e>
 801969c:	e7eb      	b.n	8019676 <_printf_i+0x212>
 801969e:	2500      	movs	r5, #0
 80196a0:	f104 0619 	add.w	r6, r4, #25
 80196a4:	e7f5      	b.n	8019692 <_printf_i+0x22e>
 80196a6:	bf00      	nop
 80196a8:	0801ecf7 	.word	0x0801ecf7
 80196ac:	0801ed08 	.word	0x0801ed08

080196b0 <_read_r>:
 80196b0:	b538      	push	{r3, r4, r5, lr}
 80196b2:	4d07      	ldr	r5, [pc, #28]	; (80196d0 <_read_r+0x20>)
 80196b4:	4604      	mov	r4, r0
 80196b6:	4608      	mov	r0, r1
 80196b8:	4611      	mov	r1, r2
 80196ba:	2200      	movs	r2, #0
 80196bc:	602a      	str	r2, [r5, #0]
 80196be:	461a      	mov	r2, r3
 80196c0:	f7e7 fe12 	bl	80012e8 <_read>
 80196c4:	1c43      	adds	r3, r0, #1
 80196c6:	d102      	bne.n	80196ce <_read_r+0x1e>
 80196c8:	682b      	ldr	r3, [r5, #0]
 80196ca:	b103      	cbz	r3, 80196ce <_read_r+0x1e>
 80196cc:	6023      	str	r3, [r4, #0]
 80196ce:	bd38      	pop	{r3, r4, r5, pc}
 80196d0:	24008bec 	.word	0x24008bec

080196d4 <__swbuf_r>:
 80196d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80196d6:	460e      	mov	r6, r1
 80196d8:	4614      	mov	r4, r2
 80196da:	4605      	mov	r5, r0
 80196dc:	b118      	cbz	r0, 80196e6 <__swbuf_r+0x12>
 80196de:	6983      	ldr	r3, [r0, #24]
 80196e0:	b90b      	cbnz	r3, 80196e6 <__swbuf_r+0x12>
 80196e2:	f7ff f8bd 	bl	8018860 <__sinit>
 80196e6:	4b21      	ldr	r3, [pc, #132]	; (801976c <__swbuf_r+0x98>)
 80196e8:	429c      	cmp	r4, r3
 80196ea:	d12b      	bne.n	8019744 <__swbuf_r+0x70>
 80196ec:	686c      	ldr	r4, [r5, #4]
 80196ee:	69a3      	ldr	r3, [r4, #24]
 80196f0:	60a3      	str	r3, [r4, #8]
 80196f2:	89a3      	ldrh	r3, [r4, #12]
 80196f4:	071a      	lsls	r2, r3, #28
 80196f6:	d52f      	bpl.n	8019758 <__swbuf_r+0x84>
 80196f8:	6923      	ldr	r3, [r4, #16]
 80196fa:	b36b      	cbz	r3, 8019758 <__swbuf_r+0x84>
 80196fc:	6923      	ldr	r3, [r4, #16]
 80196fe:	6820      	ldr	r0, [r4, #0]
 8019700:	1ac0      	subs	r0, r0, r3
 8019702:	6963      	ldr	r3, [r4, #20]
 8019704:	b2f6      	uxtb	r6, r6
 8019706:	4283      	cmp	r3, r0
 8019708:	4637      	mov	r7, r6
 801970a:	dc04      	bgt.n	8019716 <__swbuf_r+0x42>
 801970c:	4621      	mov	r1, r4
 801970e:	4628      	mov	r0, r5
 8019710:	f7ff fc20 	bl	8018f54 <_fflush_r>
 8019714:	bb30      	cbnz	r0, 8019764 <__swbuf_r+0x90>
 8019716:	68a3      	ldr	r3, [r4, #8]
 8019718:	3b01      	subs	r3, #1
 801971a:	60a3      	str	r3, [r4, #8]
 801971c:	6823      	ldr	r3, [r4, #0]
 801971e:	1c5a      	adds	r2, r3, #1
 8019720:	6022      	str	r2, [r4, #0]
 8019722:	701e      	strb	r6, [r3, #0]
 8019724:	6963      	ldr	r3, [r4, #20]
 8019726:	3001      	adds	r0, #1
 8019728:	4283      	cmp	r3, r0
 801972a:	d004      	beq.n	8019736 <__swbuf_r+0x62>
 801972c:	89a3      	ldrh	r3, [r4, #12]
 801972e:	07db      	lsls	r3, r3, #31
 8019730:	d506      	bpl.n	8019740 <__swbuf_r+0x6c>
 8019732:	2e0a      	cmp	r6, #10
 8019734:	d104      	bne.n	8019740 <__swbuf_r+0x6c>
 8019736:	4621      	mov	r1, r4
 8019738:	4628      	mov	r0, r5
 801973a:	f7ff fc0b 	bl	8018f54 <_fflush_r>
 801973e:	b988      	cbnz	r0, 8019764 <__swbuf_r+0x90>
 8019740:	4638      	mov	r0, r7
 8019742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019744:	4b0a      	ldr	r3, [pc, #40]	; (8019770 <__swbuf_r+0x9c>)
 8019746:	429c      	cmp	r4, r3
 8019748:	d101      	bne.n	801974e <__swbuf_r+0x7a>
 801974a:	68ac      	ldr	r4, [r5, #8]
 801974c:	e7cf      	b.n	80196ee <__swbuf_r+0x1a>
 801974e:	4b09      	ldr	r3, [pc, #36]	; (8019774 <__swbuf_r+0xa0>)
 8019750:	429c      	cmp	r4, r3
 8019752:	bf08      	it	eq
 8019754:	68ec      	ldreq	r4, [r5, #12]
 8019756:	e7ca      	b.n	80196ee <__swbuf_r+0x1a>
 8019758:	4621      	mov	r1, r4
 801975a:	4628      	mov	r0, r5
 801975c:	f000 f80c 	bl	8019778 <__swsetup_r>
 8019760:	2800      	cmp	r0, #0
 8019762:	d0cb      	beq.n	80196fc <__swbuf_r+0x28>
 8019764:	f04f 37ff 	mov.w	r7, #4294967295
 8019768:	e7ea      	b.n	8019740 <__swbuf_r+0x6c>
 801976a:	bf00      	nop
 801976c:	0801ebf4 	.word	0x0801ebf4
 8019770:	0801ec14 	.word	0x0801ec14
 8019774:	0801ebd4 	.word	0x0801ebd4

08019778 <__swsetup_r>:
 8019778:	4b32      	ldr	r3, [pc, #200]	; (8019844 <__swsetup_r+0xcc>)
 801977a:	b570      	push	{r4, r5, r6, lr}
 801977c:	681d      	ldr	r5, [r3, #0]
 801977e:	4606      	mov	r6, r0
 8019780:	460c      	mov	r4, r1
 8019782:	b125      	cbz	r5, 801978e <__swsetup_r+0x16>
 8019784:	69ab      	ldr	r3, [r5, #24]
 8019786:	b913      	cbnz	r3, 801978e <__swsetup_r+0x16>
 8019788:	4628      	mov	r0, r5
 801978a:	f7ff f869 	bl	8018860 <__sinit>
 801978e:	4b2e      	ldr	r3, [pc, #184]	; (8019848 <__swsetup_r+0xd0>)
 8019790:	429c      	cmp	r4, r3
 8019792:	d10f      	bne.n	80197b4 <__swsetup_r+0x3c>
 8019794:	686c      	ldr	r4, [r5, #4]
 8019796:	89a3      	ldrh	r3, [r4, #12]
 8019798:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801979c:	0719      	lsls	r1, r3, #28
 801979e:	d42c      	bmi.n	80197fa <__swsetup_r+0x82>
 80197a0:	06dd      	lsls	r5, r3, #27
 80197a2:	d411      	bmi.n	80197c8 <__swsetup_r+0x50>
 80197a4:	2309      	movs	r3, #9
 80197a6:	6033      	str	r3, [r6, #0]
 80197a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80197ac:	81a3      	strh	r3, [r4, #12]
 80197ae:	f04f 30ff 	mov.w	r0, #4294967295
 80197b2:	e03e      	b.n	8019832 <__swsetup_r+0xba>
 80197b4:	4b25      	ldr	r3, [pc, #148]	; (801984c <__swsetup_r+0xd4>)
 80197b6:	429c      	cmp	r4, r3
 80197b8:	d101      	bne.n	80197be <__swsetup_r+0x46>
 80197ba:	68ac      	ldr	r4, [r5, #8]
 80197bc:	e7eb      	b.n	8019796 <__swsetup_r+0x1e>
 80197be:	4b24      	ldr	r3, [pc, #144]	; (8019850 <__swsetup_r+0xd8>)
 80197c0:	429c      	cmp	r4, r3
 80197c2:	bf08      	it	eq
 80197c4:	68ec      	ldreq	r4, [r5, #12]
 80197c6:	e7e6      	b.n	8019796 <__swsetup_r+0x1e>
 80197c8:	0758      	lsls	r0, r3, #29
 80197ca:	d512      	bpl.n	80197f2 <__swsetup_r+0x7a>
 80197cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80197ce:	b141      	cbz	r1, 80197e2 <__swsetup_r+0x6a>
 80197d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80197d4:	4299      	cmp	r1, r3
 80197d6:	d002      	beq.n	80197de <__swsetup_r+0x66>
 80197d8:	4630      	mov	r0, r6
 80197da:	f7ff fc2f 	bl	801903c <_free_r>
 80197de:	2300      	movs	r3, #0
 80197e0:	6363      	str	r3, [r4, #52]	; 0x34
 80197e2:	89a3      	ldrh	r3, [r4, #12]
 80197e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80197e8:	81a3      	strh	r3, [r4, #12]
 80197ea:	2300      	movs	r3, #0
 80197ec:	6063      	str	r3, [r4, #4]
 80197ee:	6923      	ldr	r3, [r4, #16]
 80197f0:	6023      	str	r3, [r4, #0]
 80197f2:	89a3      	ldrh	r3, [r4, #12]
 80197f4:	f043 0308 	orr.w	r3, r3, #8
 80197f8:	81a3      	strh	r3, [r4, #12]
 80197fa:	6923      	ldr	r3, [r4, #16]
 80197fc:	b94b      	cbnz	r3, 8019812 <__swsetup_r+0x9a>
 80197fe:	89a3      	ldrh	r3, [r4, #12]
 8019800:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019808:	d003      	beq.n	8019812 <__swsetup_r+0x9a>
 801980a:	4621      	mov	r1, r4
 801980c:	4630      	mov	r0, r6
 801980e:	f000 f84d 	bl	80198ac <__smakebuf_r>
 8019812:	89a0      	ldrh	r0, [r4, #12]
 8019814:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019818:	f010 0301 	ands.w	r3, r0, #1
 801981c:	d00a      	beq.n	8019834 <__swsetup_r+0xbc>
 801981e:	2300      	movs	r3, #0
 8019820:	60a3      	str	r3, [r4, #8]
 8019822:	6963      	ldr	r3, [r4, #20]
 8019824:	425b      	negs	r3, r3
 8019826:	61a3      	str	r3, [r4, #24]
 8019828:	6923      	ldr	r3, [r4, #16]
 801982a:	b943      	cbnz	r3, 801983e <__swsetup_r+0xc6>
 801982c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019830:	d1ba      	bne.n	80197a8 <__swsetup_r+0x30>
 8019832:	bd70      	pop	{r4, r5, r6, pc}
 8019834:	0781      	lsls	r1, r0, #30
 8019836:	bf58      	it	pl
 8019838:	6963      	ldrpl	r3, [r4, #20]
 801983a:	60a3      	str	r3, [r4, #8]
 801983c:	e7f4      	b.n	8019828 <__swsetup_r+0xb0>
 801983e:	2000      	movs	r0, #0
 8019840:	e7f7      	b.n	8019832 <__swsetup_r+0xba>
 8019842:	bf00      	nop
 8019844:	24000038 	.word	0x24000038
 8019848:	0801ebf4 	.word	0x0801ebf4
 801984c:	0801ec14 	.word	0x0801ec14
 8019850:	0801ebd4 	.word	0x0801ebd4

08019854 <abort>:
 8019854:	b508      	push	{r3, lr}
 8019856:	2006      	movs	r0, #6
 8019858:	f000 f890 	bl	801997c <raise>
 801985c:	2001      	movs	r0, #1
 801985e:	f7e7 fd39 	bl	80012d4 <_exit>

08019862 <__swhatbuf_r>:
 8019862:	b570      	push	{r4, r5, r6, lr}
 8019864:	460e      	mov	r6, r1
 8019866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801986a:	2900      	cmp	r1, #0
 801986c:	b096      	sub	sp, #88	; 0x58
 801986e:	4614      	mov	r4, r2
 8019870:	461d      	mov	r5, r3
 8019872:	da08      	bge.n	8019886 <__swhatbuf_r+0x24>
 8019874:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8019878:	2200      	movs	r2, #0
 801987a:	602a      	str	r2, [r5, #0]
 801987c:	061a      	lsls	r2, r3, #24
 801987e:	d410      	bmi.n	80198a2 <__swhatbuf_r+0x40>
 8019880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019884:	e00e      	b.n	80198a4 <__swhatbuf_r+0x42>
 8019886:	466a      	mov	r2, sp
 8019888:	f000 f894 	bl	80199b4 <_fstat_r>
 801988c:	2800      	cmp	r0, #0
 801988e:	dbf1      	blt.n	8019874 <__swhatbuf_r+0x12>
 8019890:	9a01      	ldr	r2, [sp, #4]
 8019892:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019896:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801989a:	425a      	negs	r2, r3
 801989c:	415a      	adcs	r2, r3
 801989e:	602a      	str	r2, [r5, #0]
 80198a0:	e7ee      	b.n	8019880 <__swhatbuf_r+0x1e>
 80198a2:	2340      	movs	r3, #64	; 0x40
 80198a4:	2000      	movs	r0, #0
 80198a6:	6023      	str	r3, [r4, #0]
 80198a8:	b016      	add	sp, #88	; 0x58
 80198aa:	bd70      	pop	{r4, r5, r6, pc}

080198ac <__smakebuf_r>:
 80198ac:	898b      	ldrh	r3, [r1, #12]
 80198ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80198b0:	079d      	lsls	r5, r3, #30
 80198b2:	4606      	mov	r6, r0
 80198b4:	460c      	mov	r4, r1
 80198b6:	d507      	bpl.n	80198c8 <__smakebuf_r+0x1c>
 80198b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80198bc:	6023      	str	r3, [r4, #0]
 80198be:	6123      	str	r3, [r4, #16]
 80198c0:	2301      	movs	r3, #1
 80198c2:	6163      	str	r3, [r4, #20]
 80198c4:	b002      	add	sp, #8
 80198c6:	bd70      	pop	{r4, r5, r6, pc}
 80198c8:	ab01      	add	r3, sp, #4
 80198ca:	466a      	mov	r2, sp
 80198cc:	f7ff ffc9 	bl	8019862 <__swhatbuf_r>
 80198d0:	9900      	ldr	r1, [sp, #0]
 80198d2:	4605      	mov	r5, r0
 80198d4:	4630      	mov	r0, r6
 80198d6:	f7ff f8cf 	bl	8018a78 <_malloc_r>
 80198da:	b948      	cbnz	r0, 80198f0 <__smakebuf_r+0x44>
 80198dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80198e0:	059a      	lsls	r2, r3, #22
 80198e2:	d4ef      	bmi.n	80198c4 <__smakebuf_r+0x18>
 80198e4:	f023 0303 	bic.w	r3, r3, #3
 80198e8:	f043 0302 	orr.w	r3, r3, #2
 80198ec:	81a3      	strh	r3, [r4, #12]
 80198ee:	e7e3      	b.n	80198b8 <__smakebuf_r+0xc>
 80198f0:	4b0d      	ldr	r3, [pc, #52]	; (8019928 <__smakebuf_r+0x7c>)
 80198f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80198f4:	89a3      	ldrh	r3, [r4, #12]
 80198f6:	6020      	str	r0, [r4, #0]
 80198f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80198fc:	81a3      	strh	r3, [r4, #12]
 80198fe:	9b00      	ldr	r3, [sp, #0]
 8019900:	6163      	str	r3, [r4, #20]
 8019902:	9b01      	ldr	r3, [sp, #4]
 8019904:	6120      	str	r0, [r4, #16]
 8019906:	b15b      	cbz	r3, 8019920 <__smakebuf_r+0x74>
 8019908:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801990c:	4630      	mov	r0, r6
 801990e:	f000 f863 	bl	80199d8 <_isatty_r>
 8019912:	b128      	cbz	r0, 8019920 <__smakebuf_r+0x74>
 8019914:	89a3      	ldrh	r3, [r4, #12]
 8019916:	f023 0303 	bic.w	r3, r3, #3
 801991a:	f043 0301 	orr.w	r3, r3, #1
 801991e:	81a3      	strh	r3, [r4, #12]
 8019920:	89a0      	ldrh	r0, [r4, #12]
 8019922:	4305      	orrs	r5, r0
 8019924:	81a5      	strh	r5, [r4, #12]
 8019926:	e7cd      	b.n	80198c4 <__smakebuf_r+0x18>
 8019928:	080187f9 	.word	0x080187f9

0801992c <_raise_r>:
 801992c:	291f      	cmp	r1, #31
 801992e:	b538      	push	{r3, r4, r5, lr}
 8019930:	4604      	mov	r4, r0
 8019932:	460d      	mov	r5, r1
 8019934:	d904      	bls.n	8019940 <_raise_r+0x14>
 8019936:	2316      	movs	r3, #22
 8019938:	6003      	str	r3, [r0, #0]
 801993a:	f04f 30ff 	mov.w	r0, #4294967295
 801993e:	bd38      	pop	{r3, r4, r5, pc}
 8019940:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019942:	b112      	cbz	r2, 801994a <_raise_r+0x1e>
 8019944:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019948:	b94b      	cbnz	r3, 801995e <_raise_r+0x32>
 801994a:	4620      	mov	r0, r4
 801994c:	f000 f830 	bl	80199b0 <_getpid_r>
 8019950:	462a      	mov	r2, r5
 8019952:	4601      	mov	r1, r0
 8019954:	4620      	mov	r0, r4
 8019956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801995a:	f000 b817 	b.w	801998c <_kill_r>
 801995e:	2b01      	cmp	r3, #1
 8019960:	d00a      	beq.n	8019978 <_raise_r+0x4c>
 8019962:	1c59      	adds	r1, r3, #1
 8019964:	d103      	bne.n	801996e <_raise_r+0x42>
 8019966:	2316      	movs	r3, #22
 8019968:	6003      	str	r3, [r0, #0]
 801996a:	2001      	movs	r0, #1
 801996c:	e7e7      	b.n	801993e <_raise_r+0x12>
 801996e:	2400      	movs	r4, #0
 8019970:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019974:	4628      	mov	r0, r5
 8019976:	4798      	blx	r3
 8019978:	2000      	movs	r0, #0
 801997a:	e7e0      	b.n	801993e <_raise_r+0x12>

0801997c <raise>:
 801997c:	4b02      	ldr	r3, [pc, #8]	; (8019988 <raise+0xc>)
 801997e:	4601      	mov	r1, r0
 8019980:	6818      	ldr	r0, [r3, #0]
 8019982:	f7ff bfd3 	b.w	801992c <_raise_r>
 8019986:	bf00      	nop
 8019988:	24000038 	.word	0x24000038

0801998c <_kill_r>:
 801998c:	b538      	push	{r3, r4, r5, lr}
 801998e:	4d07      	ldr	r5, [pc, #28]	; (80199ac <_kill_r+0x20>)
 8019990:	2300      	movs	r3, #0
 8019992:	4604      	mov	r4, r0
 8019994:	4608      	mov	r0, r1
 8019996:	4611      	mov	r1, r2
 8019998:	602b      	str	r3, [r5, #0]
 801999a:	f7e7 fc89 	bl	80012b0 <_kill>
 801999e:	1c43      	adds	r3, r0, #1
 80199a0:	d102      	bne.n	80199a8 <_kill_r+0x1c>
 80199a2:	682b      	ldr	r3, [r5, #0]
 80199a4:	b103      	cbz	r3, 80199a8 <_kill_r+0x1c>
 80199a6:	6023      	str	r3, [r4, #0]
 80199a8:	bd38      	pop	{r3, r4, r5, pc}
 80199aa:	bf00      	nop
 80199ac:	24008bec 	.word	0x24008bec

080199b0 <_getpid_r>:
 80199b0:	f7e7 bc76 	b.w	80012a0 <_getpid>

080199b4 <_fstat_r>:
 80199b4:	b538      	push	{r3, r4, r5, lr}
 80199b6:	4d07      	ldr	r5, [pc, #28]	; (80199d4 <_fstat_r+0x20>)
 80199b8:	2300      	movs	r3, #0
 80199ba:	4604      	mov	r4, r0
 80199bc:	4608      	mov	r0, r1
 80199be:	4611      	mov	r1, r2
 80199c0:	602b      	str	r3, [r5, #0]
 80199c2:	f7e7 fcd6 	bl	8001372 <_fstat>
 80199c6:	1c43      	adds	r3, r0, #1
 80199c8:	d102      	bne.n	80199d0 <_fstat_r+0x1c>
 80199ca:	682b      	ldr	r3, [r5, #0]
 80199cc:	b103      	cbz	r3, 80199d0 <_fstat_r+0x1c>
 80199ce:	6023      	str	r3, [r4, #0]
 80199d0:	bd38      	pop	{r3, r4, r5, pc}
 80199d2:	bf00      	nop
 80199d4:	24008bec 	.word	0x24008bec

080199d8 <_isatty_r>:
 80199d8:	b538      	push	{r3, r4, r5, lr}
 80199da:	4d06      	ldr	r5, [pc, #24]	; (80199f4 <_isatty_r+0x1c>)
 80199dc:	2300      	movs	r3, #0
 80199de:	4604      	mov	r4, r0
 80199e0:	4608      	mov	r0, r1
 80199e2:	602b      	str	r3, [r5, #0]
 80199e4:	f7e7 fcd5 	bl	8001392 <_isatty>
 80199e8:	1c43      	adds	r3, r0, #1
 80199ea:	d102      	bne.n	80199f2 <_isatty_r+0x1a>
 80199ec:	682b      	ldr	r3, [r5, #0]
 80199ee:	b103      	cbz	r3, 80199f2 <_isatty_r+0x1a>
 80199f0:	6023      	str	r3, [r4, #0]
 80199f2:	bd38      	pop	{r3, r4, r5, pc}
 80199f4:	24008bec 	.word	0x24008bec

080199f8 <_init>:
 80199f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199fa:	bf00      	nop
 80199fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80199fe:	bc08      	pop	{r3}
 8019a00:	469e      	mov	lr, r3
 8019a02:	4770      	bx	lr

08019a04 <_fini>:
 8019a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a06:	bf00      	nop
 8019a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019a0a:	bc08      	pop	{r3}
 8019a0c:	469e      	mov	lr, r3
 8019a0e:	4770      	bx	lr
